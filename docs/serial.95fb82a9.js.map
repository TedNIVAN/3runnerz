{"version":3,"sources":["js/serial.js"],"names":["serial","serialComponent","getPorts","navigator","usb","getDevices","then","devices","map","device","Port","requestPort","requestDevice","filters","device_","interfaceNumber_","endpointIn_","endpointOut_","prototype","connect","readLoop","transferIn","result","onReceive","data","error","onReceiveError","open","configuration","selectConfiguration","interfaces","forEach","element","alternates","elementalt","interfaceClass","interfaceNumber","endpoints","elementendpoint","direction","endpointNumber","claimInterface","selectAlternateInterface","controlTransferOut","disconnect","close","send","transferOut"],"mappings":";AAuGe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAvGR,IAAIA,EAAS,GAEpB,SAASC,IAGPD,EAAOE,SAAW,WACPC,OAAAA,UAAUC,IAAIC,aAAaC,KAAKC,GAC5BA,EAAQC,IAAIC,GAAU,IAAIT,EAAOU,KAAKD,MAIrDT,EAAOW,YAAc,WAgBVR,OAAAA,UAAUC,IAAIQ,cAAc,CAAaC,QAfhC,CACZ,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,KAAqB,UAAA,OACnC,CAAc,SAAA,SAEyCP,KACvDG,GAAU,IAAIT,EAAOU,KAAKD,KAIlCT,EAAOU,KAAO,SAAUD,GACfK,KAAAA,QAAUL,EACVM,KAAAA,iBAAmB,EACnBC,KAAAA,YAAc,EACdC,KAAAA,aAAe,GAGxBjB,EAAOU,KAAKQ,UAAUC,QAAU,WACxBC,IAAAA,EAAW,KACNN,KAAAA,QAAQO,WAAW,KAAKL,YAAa,IAAIV,KAAKgB,IAC1CC,KAAAA,UAAUD,EAAOE,MACtBJ,KACDK,IACMC,KAAAA,eAAeD,MAIrB,OAAA,KAAKX,QAAQa,OACfrB,KAAK,KACE,GAA+B,OAA/B,KAAKQ,QAAQc,cACN,OAAA,KAAKd,QAAQe,oBAAoB,KAG/CvB,KAAK,KAC4B,KAAKQ,QAAQc,cAAcE,WACjCC,QAAQC,IAC5BA,EAAQC,WAAWF,QAAQG,IACU,KAA7BA,EAAWC,iBACNpB,KAAAA,iBAAmBiB,EAAQI,gBAChCF,EAAWG,UAAUN,QAAQO,IACQ,OAA7BA,EAAgBC,YACXtB,KAAAA,aAAeqB,EAAgBE,gBAEP,MAA7BF,EAAgBC,YACXvB,KAAAA,YAAcsB,EAAgBE,yBAO1DlC,KAAK,IAAM,KAAKQ,QAAQ2B,eAAe,KAAK1B,mBAC5CT,KAAK,IAAM,KAAKQ,QAAQ4B,yBAAyB,KAAK3B,iBAAkB,IACxET,KAAK,IAAM,KAAKQ,QAAQ6B,mBAAmB,CACzB,YAAA,QACF,UAAA,YACF,QAAA,GACF,MAAA,EACA,MAAA,KAAK5B,oBAEjBT,KAAK,KACFc,OAIZpB,EAAOU,KAAKQ,UAAU0B,WAAa,WACxB,OAAA,KAAK9B,QAAQ6B,mBAAmB,CACpB,YAAA,QACF,UAAA,YACF,QAAA,GACF,MAAA,EACA,MAAA,KAAK5B,mBAEbT,KAAK,IAAM,KAAKQ,QAAQ+B,UAGjC7C,EAAOU,KAAKQ,UAAU4B,KAAO,SAAUtB,GAC5B,OAAA,KAAKV,QAAQiC,YAAY,KAAK9B,aAAcO,IAI1C,QAAA,OAAA,EAAfvB","file":"serial.95fb82a9.js","sourceRoot":"../src","sourcesContent":["export var serial = {};\n\nfunction serialComponent() {\n  'use strict';\n\n  serial.getPorts = function () {\n      return navigator.usb.getDevices().then(devices => {\n          return devices.map(device => new serial.Port(device));\n      });\n  };\n\n  serial.requestPort = function () {\n      const filters = [\n          { 'vendorId': 0x2341, 'productId': 0x8036 }, // Arduino Leonardo\n          { 'vendorId': 0x2341, 'productId': 0x8037 }, // Arduino Micro\n          { 'vendorId': 0x2341, 'productId': 0x804d }, // Arduino/Genuino Zero\n          { 'vendorId': 0x2341, 'productId': 0x804e }, // Arduino/Genuino MKR1000\n          { 'vendorId': 0x2341, 'productId': 0x804f }, // Arduino MKRZERO\n          { 'vendorId': 0x2341, 'productId': 0x8050 }, // Arduino MKR FOX 1200\n          { 'vendorId': 0x2341, 'productId': 0x8052 }, // Arduino MKR GSM 1400\n          { 'vendorId': 0x2341, 'productId': 0x8053 }, // Arduino MKR WAN 1300\n          { 'vendorId': 0x2341, 'productId': 0x8054 }, // Arduino MKR WiFi 1010\n          { 'vendorId': 0x2341, 'productId': 0x8055 }, // Arduino MKR NB 1500\n          { 'vendorId': 0x2341, 'productId': 0x8056 }, // Arduino MKR Vidor 4000\n          { 'vendorId': 0x2341, 'productId': 0x8057 }, // Arduino NANO 33 IoT\n          { 'vendorId': 0x239A }, // Adafruit Boards!\n      ];\n      return navigator.usb.requestDevice({ 'filters': filters }).then(\n          device => new serial.Port(device)\n      );\n  }\n\n  serial.Port = function (device) {\n      this.device_ = device;\n      this.interfaceNumber_ = 2;  // original interface number of WebUSB Arduino demo\n      this.endpointIn_ = 5;       // original in endpoint ID of WebUSB Arduino demo\n      this.endpointOut_ = 4;      // original out endpoint ID of WebUSB Arduino demo\n  };\n\n  serial.Port.prototype.connect = function () {\n      let readLoop = () => {\n          this.device_.transferIn(this.endpointIn_, 64).then(result => {\n              this.onReceive(result.data);\n              readLoop();\n          }, error => {\n              this.onReceiveError(error);\n          });\n      };\n\n      return this.device_.open()\n          .then(() => {\n              if (this.device_.configuration === null) {\n                  return this.device_.selectConfiguration(1);\n              }\n          })\n          .then(() => {\n              var configurationInterfaces = this.device_.configuration.interfaces;\n              configurationInterfaces.forEach(element => {\n                  element.alternates.forEach(elementalt => {\n                      if (elementalt.interfaceClass == 0xff) {\n                          this.interfaceNumber_ = element.interfaceNumber;\n                          elementalt.endpoints.forEach(elementendpoint => {\n                              if (elementendpoint.direction == \"out\") {\n                                  this.endpointOut_ = elementendpoint.endpointNumber;\n                              }\n                              if (elementendpoint.direction == \"in\") {\n                                  this.endpointIn_ = elementendpoint.endpointNumber;\n                              }\n                          })\n                      }\n                  })\n              })\n          })\n          .then(() => this.device_.claimInterface(this.interfaceNumber_))\n          .then(() => this.device_.selectAlternateInterface(this.interfaceNumber_, 0))\n          .then(() => this.device_.controlTransferOut({\n              'requestType': 'class',\n              'recipient': 'interface',\n              'request': 0x22,\n              'value': 0x01,\n              'index': this.interfaceNumber_\n          }))\n          .then(() => {\n              readLoop();\n          });\n  };\n\n  serial.Port.prototype.disconnect = function () {\n      return this.device_.controlTransferOut({\n          'requestType': 'class',\n          'recipient': 'interface',\n          'request': 0x22,\n          'value': 0x00,\n          'index': this.interfaceNumber_\n      })\n          .then(() => this.device_.close());\n  };\n\n  serial.Port.prototype.send = function (data) {\n      return this.device_.transferOut(this.endpointOut_, data);\n  };\n}\n\nserialComponent();"]}