{"version":3,"sources":["js/serial.js","../node_modules/@hashgraph/cryptography/src/Key.js","../node_modules/@hashgraph/cryptography/src/KeyList.js","../node_modules/@hashgraph/cryptography/node_modules/tweetnacl/nacl-fast.js","../node_modules/@hashgraph/cryptography/src/util/array.js","../node_modules/@hashgraph/cryptography/src/BadKeyError.js","../node_modules/@hashgraph/cryptography/src/encoding/hex.browser.js","../node_modules/@hashgraph/cryptography/src/PublicKey.js","../node_modules/@hashgraph/cryptography/src/BadMnemonicReason.js","../node_modules/@hashgraph/cryptography/src/BadMnemonicError.js","../node_modules/@hashgraph/cryptography/src/words/legacy.js","../node_modules/@hashgraph/cryptography/src/words/bip39.js","../node_modules/bignumber.js/bignumber.js","../node_modules/@hashgraph/cryptography/src/primitive/sha256.browser.js","../node_modules/@hashgraph/cryptography/src/encoding/utf8.browser.js","../node_modules/@hashgraph/cryptography/src/primitive/pbkdf2.browser.js","../node_modules/@hashgraph/cryptography/src/primitive/hmac.browser.js","../node_modules/@hashgraph/cryptography/src/primitive/slip10.js","../node_modules/@hashgraph/cryptography/src/Mnemonic.js","../node_modules/@hashgraph/cryptography/src/primitive/aes.browser.js","../node_modules/@hashgraph/cryptography/src/primitive/keystore.js","../node_modules/@hashgraph/cryptography/src/encoding/der.js","../node_modules/@hashgraph/cryptography/src/primitive/pkcs.js","../node_modules/@hashgraph/cryptography/src/encoding/base64.browser.js","../node_modules/@hashgraph/cryptography/src/encoding/pem.js","../node_modules/@hashgraph/cryptography/src/PrivateKey.js","../node_modules/@hashgraph/cryptography/src/index.js","../node_modules/@hashgraph/sdk/src/Status.js","../node_modules/long/src/long.js","../node_modules/@hashgraph/sdk/src/encoding/hex.browser.js","../node_modules/@hashgraph/sdk/src/EntityIdHelper.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@hashgraph/protobufjs/src/util/longbits.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/base64-js/index.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/ieee754/index.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/isarray/index.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/buffer/index.js","../node_modules/@hashgraph/protobufjs/src/util/minimal.js","../node_modules/@hashgraph/protobufjs/src/writer.js","../node_modules/@hashgraph/protobufjs/src/writer_buffer.js","../node_modules/@hashgraph/protobufjs/src/reader.js","../node_modules/@hashgraph/protobufjs/src/reader_buffer.js","../node_modules/@hashgraph/protobufjs/src/rpc/service.js","../node_modules/@hashgraph/protobufjs/src/rpc.js","../node_modules/@hashgraph/protobufjs/src/roots.js","../node_modules/@hashgraph/protobufjs/src/index-minimal.js","../node_modules/@hashgraph/protobufjs/minimal.js","../node_modules/@hashgraph/proto/src/proto.js","../node_modules/@hashgraph/proto/src/index.js","../node_modules/@hashgraph/sdk/src/account/AccountId.js","../node_modules/@hashgraph/sdk/src/long.js","../node_modules/@hashgraph/sdk/src/HbarUnit.js","../node_modules/@hashgraph/sdk/src/Hbar.js","../node_modules/@hashgraph/sdk/src/StatusError.js","../node_modules/@hashgraph/sdk/src/PrecheckStatusError.js","../node_modules/@hashgraph/sdk/src/grpc/GrpcServiceError.js","../node_modules/@hashgraph/sdk/src/grpc/GrpcStatus.js","../node_modules/@hashgraph/sdk/src/Executable.js","../node_modules/@hashgraph/sdk/src/Timestamp.js","../node_modules/@hashgraph/sdk/src/transaction/TransactionId.js","../node_modules/@hashgraph/sdk/src/MaxQueryPaymentExceeded.js","../node_modules/@hashgraph/sdk/src/query/Query.js","../node_modules/@hashgraph/sdk/src/contract/ContractId.js","../node_modules/@hashgraph/sdk/src/token/TokenId.js","../node_modules/@hashgraph/sdk/src/ObjectMap.js","../node_modules/@hashgraph/sdk/src/account/TokenBalanceMap.js","../node_modules/@hashgraph/sdk/src/account/AccountBalance.js","../node_modules/@hashgraph/sdk/src/account/AccountBalanceQuery.js","../node_modules/@hashgraph/sdk/src/ReceiptStatusError.js","../node_modules/@hashgraph/sdk/src/file/FileId.js","../node_modules/@hashgraph/sdk/src/topic/TopicId.js","../node_modules/@hashgraph/sdk/src/ExchangeRate.js","../node_modules/@hashgraph/sdk/src/transaction/TransactionReceipt.js","../node_modules/@hashgraph/sdk/src/transaction/TransactionReceiptQuery.js","../node_modules/@hashgraph/sdk/src/Transfer.js","../node_modules/@hashgraph/sdk/src/contract/ContractLogInfo.js","../node_modules/@hashgraph/sdk/src/encoding/utf8.browser.js","../node_modules/@hashgraph/sdk/src/contract/ContractFunctionResult.js","../node_modules/@hashgraph/sdk/src/account/TokenTransferAccountMap.js","../node_modules/@hashgraph/sdk/src/account/TokenTransferMap.js","../node_modules/@hashgraph/sdk/src/transaction/TransactionRecord.js","../node_modules/@hashgraph/sdk/src/transaction/TransactionRecordQuery.js","../node_modules/@hashgraph/sdk/src/transaction/TransactionResponse.js","../node_modules/@hashgraph/sdk/src/cryptography/sha384.browser.js","../node_modules/@hashgraph/sdk/src/transaction/TransactionHashMap.js","../node_modules/@hashgraph/sdk/src/transaction/NodeAccountIdSignatureMap.js","../node_modules/@hashgraph/sdk/src/transaction/SignatureMap.js","../node_modules/@hashgraph/sdk/src/transaction/Transaction.js","../node_modules/@hashgraph/sdk/src/cryptography/protobuf.js","../node_modules/@hashgraph/sdk/src/Duration.js","../node_modules/@hashgraph/sdk/src/account/AccountCreateTransaction.js","../node_modules/@hashgraph/sdk/src/account/AccountDeleteTransaction.js","../node_modules/@hashgraph/sdk/src/account/LiveHash.js","../node_modules/@hashgraph/sdk/src/account/TokenRelationship.js","../node_modules/@hashgraph/sdk/src/account/TokenRelationshipMap.js","../node_modules/@hashgraph/sdk/src/account/AccountInfo.js","../node_modules/@hashgraph/sdk/src/account/AccountInfoQuery.js","../node_modules/@hashgraph/sdk/src/account/AccountRecordsQuery.js","../node_modules/@hashgraph/sdk/src/account/ProxyStaker.js","../node_modules/@hashgraph/sdk/src/account/AccountStakersQuery.js","../node_modules/@hashgraph/sdk/src/account/AccountUpdateTransaction.js","../node_modules/@hashgraph/sdk/src/contract/ContractByteCodeQuery.js","../node_modules/@hashgraph/sdk/src/cryptography/keccak.js","../node_modules/@hashgraph/sdk/src/contract/ContractFunctionSelector.js","../node_modules/@hashgraph/sdk/src/contract/ContractFunctionParameters.js","../node_modules/@hashgraph/sdk/src/contract/ContractCallQuery.js","../node_modules/@hashgraph/sdk/src/contract/ContractCreateTransaction.js","../node_modules/@hashgraph/sdk/src/contract/ContractDeleteTransaction.js","../node_modules/@hashgraph/sdk/src/contract/ContractExecuteTransaction.js","../node_modules/@hashgraph/sdk/src/contract/ContractInfo.js","../node_modules/@hashgraph/sdk/src/contract/ContractInfoQuery.js","../node_modules/@hashgraph/sdk/src/contract/ContractUpdateTranscation.js","../node_modules/@hashgraph/sdk/src/file/FileAppendTransaction.js","../node_modules/@hashgraph/sdk/src/file/FileContentsQuery.js","../node_modules/@hashgraph/sdk/src/file/FileCreateTransaction.js","../node_modules/@hashgraph/sdk/src/file/FileDeleteTransaction.js","../node_modules/@hashgraph/sdk/src/file/FileInfo.js","../node_modules/@hashgraph/sdk/src/file/FileInfoQuery.js","../node_modules/@hashgraph/sdk/src/file/FileUpdateTransaction.js","../node_modules/@hashgraph/sdk/src/system/FreezeTransaction.js","../node_modules/@hashgraph/sdk/src/account/LiveHashAddTransaction.js","../node_modules/@hashgraph/sdk/src/account/LiveHashDeleteTransaction.js","../node_modules/@hashgraph/sdk/src/account/LiveHashQuery.js","../node_modules/@hashgraph/sdk/src/network/SemanticVersion.js","../node_modules/@hashgraph/sdk/src/network/NetworkVersionInfo.js","../node_modules/@hashgraph/sdk/src/network/NetworkVersionInfoQuery.js","../node_modules/@hashgraph/sdk/src/system/SystemDeleteTransaction.js","../node_modules/@hashgraph/sdk/src/system/SystemUndeleteTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenAssociateTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenBurnTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenCreateTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenDeleteTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenDissociateTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenFreezeTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenGrantKycTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenInfo.js","../node_modules/@hashgraph/sdk/src/token/TokenInfoQuery.js","../node_modules/@hashgraph/sdk/src/token/TokenMintTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenRevokeKycTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenUnfreezeTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenUpdateTransaction.js","../node_modules/@hashgraph/sdk/src/token/TokenWipeTransaction.js","../node_modules/@hashgraph/sdk/src/topic/TopicCreateTransaction.js","../node_modules/@hashgraph/sdk/src/topic/TopicDeleteTransaction.js","../node_modules/@hashgraph/sdk/src/topic/TopicInfo.js","../node_modules/@hashgraph/sdk/src/topic/TopicInfoQuery.js","../node_modules/@hashgraph/sdk/src/topic/TopicMessageSubmitTransaction.js","../node_modules/@hashgraph/sdk/src/topic/TopicMessageChunk.js","../node_modules/@hashgraph/sdk/src/topic/TopicMessage.js","../node_modules/@hashgraph/sdk/src/topic/SubscriptionHandle.js","../node_modules/@hashgraph/sdk/src/topic/TopicMessageQuery.js","../node_modules/@hashgraph/sdk/src/topic/TopicUpdateTransaction.js","../node_modules/@hashgraph/sdk/src/account/HbarTransferMap.js","../node_modules/@hashgraph/sdk/src/account/TransferTransaction.js","../node_modules/@hashgraph/sdk/src/query/CostQuery.js","../node_modules/@hashgraph/sdk/src/exports.js","../node_modules/@hashgraph/sdk/src/ManagedNode.js","../node_modules/@hashgraph/sdk/src/Node.js","../node_modules/@hashgraph/sdk/src/client/Network.js","../node_modules/@hashgraph/sdk/src/MirrorNode.js","../node_modules/@hashgraph/sdk/src/client/MirrorNetwork.js","../node_modules/@hashgraph/sdk/src/client/Client.js","../node_modules/@hashgraph/sdk/src/channel/Channel.js","../node_modules/@hashgraph/sdk/src/channel/WebChannel.js","../node_modules/@hashgraph/sdk/src/client/WebClient.js","../node_modules/@hashgraph/sdk/src/browser.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/process/browser.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/path-browserify/index.js","../node_modules/dotenv/lib/main.js","js/register.js","../node_modules/jsen/lib/func.js","../node_modules/jsen/lib/equal.js","../node_modules/jsen/lib/unique.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/node-libs-browser/node_modules/punycode/punycode.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/url/util.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/querystring-es3/decode.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/querystring-es3/encode.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/querystring-es3/index.js","../../../../../../usr/local/lib/node_modules/parcel-bundler/node_modules/url/url.js","../node_modules/jsen/lib/metaschema.json","../node_modules/jsen/lib/resolver.js","../node_modules/jsen/lib/formats.js","../node_modules/jsen/lib/ucs2length.js","../node_modules/jsen/lib/jsen.js","../node_modules/jsen/index.js","js/leaderboard.js"],"names":["serial","serialComponent","getPorts","navigator","usb","getDevices","then","devices","map","device","Port","requestPort","requestDevice","filters","device_","interfaceNumber_","endpointIn_","endpointOut_","prototype","connect","readLoop","transferIn","result","onReceive","data","error","onReceiveError","open","configuration","selectConfiguration","interfaces","forEach","element","alternates","elementalt","interfaceClass","interfaceNumber","endpoints","elementendpoint","direction","endpointNumber","claimInterface","selectAlternateInterface","controlTransferOut","disconnect","close","send","transferOut","Key","KeyList","constructor","keys","threshold","_keys","_threshold","of","from","arrayLike","mapFn","thisArg","Array","setThreshold","push","splice","start","deleteCount","items","slice","end","Symbol","iterator","toArray","arrayEqual","array1","array2","byteLength","view1","DataView","buffer","view2","i","getUint8","arrayStartsWith","array","arrayPrefix","BadKeyError","Error","messageOrCause","message","name","cause","stack","byteToHex","n","toString","padStart","encode","string","byte","decode","text","str","startsWith","substring","match","Uint8Array","parseInt","derPrefix","derPrefixBytes","hex","PublicKey","keyData","_keyData","fromBytes","length","subarray","fromString","verify","signature","nacl","sign","detached","verifyTransaction","transaction","_requireFrozen","_isFrozen","freeze","signedTransaction","_signedTransactions","sigMap","sigPair","found","pubKeyPrefix","bodyBytes","ed25519","toBytes","equals","other","BadMnemonicReason","Object","BadLength","UnknownWords","ChecksumMismatch","BadMnemonicError","mnemonic","reason","unknownWordIndices","reasonMessage","captureStackTrace","digest","crypto","subtle","TextDecoder","TextEncoder","deriveKey","algorithm","password","salt","iterations","pass","utf8","key","window","importKey","hash","deriveBits","HashAlgorithm","Sha256","Sha384","Sha512","secretKey","value","key_","derive","parentKey","chainCode","index","input","set","setUint32","hmac","Mnemonic","words","legacy","_isLegacy","generate","_generate","generate12","neededEntropy","entropy","randomBytes","chunks","bytesToBinary","deriveChecksumBits","binary","bip39Words","binaryToByte","fromWords","_validate","toPrivateKey","passphrase","_toLegacyPrivateKey","_toPrivateKey","split","reduce","unknowns","word","legacyWords","includes","toLowerCase","checksum","_toLegacyEntropy","_crc8","bits","indexOf","join","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","newChecksum","seed","pbkdf2","slip10","keyPair","fromSeed","PrivateKey","view","byteOffset","setInt32","indicies","_convertRadix","crc","j","nums","fromRadix","toRadix","toLength","num","BigNumber","times","plus","tem","dividedToIntegerBy","rem","modulo","toNumber","bin","bytes","x","entropyBuffer","ENT","CS","sha256","CipherAlgorithm","Aes128Ctr","Aes128Cbc","createCipheriv","iv","algorithm_","counter","encrypt","createDecipheriv","decrypt","HMAC_SHA256","createKeystore","privateKey","dkLen","c","cipherText","mac","keystore","version","ciphertext","cipherparams","cipher","kdf","kdfparams","prf","JSON","stringify","loadKeystore","keystoreBytes","parse","saltBytes","ivBytes","cipherBytes","macHex","verifyHmac","every","b","decodeIncremental","len","decodeLength","tail","int","decodeInt","ident","decodeObjectIdent","seq","decodeSeq","seqBytes","decoded","remaining","idBytes","id","val","lenBytes","numBytes","intBytes","getUint16","getUint32","AlgorithmIdentifier","asn","algIdent","parameters","PBES2Params","encScheme","PBKDF2Params","iterCount","keyLength","PrivateKeyInfo","algId","encoded","der","EncryptedPrivateKeyInfo","pbes2Params","pbkdf2Params","keyLen","decrypted","atob","charCodeAt","btoa","String","fromCharCode","apply","BEGIN_PRIVATEKEY","END_PRIVATEKEY","BEGIN_ENCRYPTED_PRIVATEKEY","END_ENCRYPTED_PRIVATEKEY","read","pem","beginTag","endTag","beginIndex","endIndex","keyEncoded","base64","encrypted","_keyPair","_chainCode","fromSecretKey","fromMnemonic","fromKeystore","fromPem","publicKey","signTransaction","tx","publicKeyHex","siganture","_signerPublicKeys","add","isDerivable","toKeystore","Status","code","_code","Ok","InvalidTransaction","PayerAccountNotFound","InvalidNodeAccount","TransactionExpired","InvalidTransactionStart","InvalidTransactionDuration","InvalidSignature","MemoTooLong","InsufficientTxFee","InsufficientPayerBalance","DuplicateTransaction","Busy","NotSupported","InvalidFileId","InvalidAccountId","InvalidContractId","InvalidTransactionId","ReceiptNotFound","RecordNotFound","InvalidSolidityId","Unknown","Success","FailInvalid","FailFee","FailBalance","KeyRequired","BadEncoding","InsufficientAccountBalance","InvalidSolidityAddress","InsufficientGas","ContractSizeLimitExceeded","LocalCallModificationException","ContractRevertExecuted","ContractExecutionException","InvalidReceivingNodeAccount","MissingQueryHeader","AccountUpdateFailed","InvalidKeyEncoding","NullSolidityAddress","ContractUpdateFailed","InvalidQueryHeader","InvalidFeeSubmitted","InvalidPayerSignature","KeyNotProvided","InvalidExpirationTime","NoWaclKey","FileContentEmpty","InvalidAccountAmounts","EmptyTransactionBody","InvalidTransactionBody","InvalidSignatureTypeMismatchingKey","InvalidSignatureCountMismatchingKey","EmptyLiveHashBody","EmptyLiveHash","EmptyLiveHashKeys","InvalidLiveHashSize","EmptyQueryBody","EmptyLiveHashQuery","LiveHashNotFound","AccountIdDoesNotExist","LiveHashAlreadyExists","InvalidFileWacl","SerializationFailed","TransactionOversize","TransactionTooManyLayers","ContractDeleted","PlatformNotActive","KeyPrefixMismatch","PlatformTransactionNotCreated","InvalidRenewalPeriod","InvalidPayerAccountId","AccountDeleted","FileDeleted","AccountRepeatedInAccountAmounts","SettingNegativeAccountBalance","ObtainerRequired","ObtainerSameContractId","ObtainerDoesNotExist","ModifyingImmutableContract","FileSystemException","AutorenewDurationNotInRange","ErrorDecodingBytestring","ContractFileEmpty","ContractBytecodeEmpty","InvalidInitialBalance","InvalidReceiveRecordThreshold","InvalidSendRecordThreshold","AccountIsNotGenesisAccount","PayerAccountUnauthorized","InvalidFreezeTransactionBody","FreezeTransactionBodyNotFound","TransferListSizeLimitExceeded","ResultSizeLimitExceeded","NotSpecialAccount","ContractNegativeGas","ContractNegativeValue","InvalidFeeFile","InvalidExchangeRateFile","InsufficientLocalCallGas","EntityNotAllowedToDelete","AuthorizationFailed","FileUploadedProtoInvalid","FileUploadedProtoNotSavedToDisk","FeeScheduleFilePartUploaded","ExchangeRateChangeLimitExceeded","MaxContractStorageExceeded","TransferAccountSameAsDeleteAccount","TotalLedgerBalanceInvalid","ExpirationReductionNotAllowed","MaxGasLimitExceeded","MaxFileSizeExceeded","InvalidTopicId","InvalidAdminKey","InvalidSubmitKey","Unauthorized","InvalidTopicMessage","InvalidAutorenewAccount","AutoRenewAccountNotAllowed","TopicExpired","InvalidChunkNumber","InvalidChunkTransactionId","AccountFrozenForToken","TokensPerAccountLimitExceeded","InvalidTokenId","InvalidTokenDecimals","InvalidTokenInitialSupply","InvalidTreasuryAccountForToken","InvalidTokenSymbol","TokenHasNoFreezeKey","TransfersNotZeroSumForToken","MissingTokenSymbol","TokenSymbolTooLong","AccountKycNotGrantedForToken","TokenHasNoKycKey","InsufficientTokenBalance","TokenWasDeleted","TokenHasNoSupplyKey","TokenHasNoWipeKey","InvalidTokenMintAmount","InvalidTokenBurnAmount","TokenNotAssociatedToAccount","CannotWipeTokenTreasuryAccount","InvalidKycKey","InvalidWipeKey","InvalidFreezeKey","InvalidSupplyKey","MissingTokenName","TokenNameTooLong","InvalidWipingAmount","TokenIsImmutable","TokenAlreadyAssociatedToAccount","TransactionRequiresZeroTokenBalances","AccountIsTreasury","TokenIdRepeatedInTokenList","TokenTransferListSizeLimitExceeded","EmptyTokenTransferBody","EmptyTokenTransferAccountAmounts","_fromCode","valueOf","EmptyClaimBody","EmptyClaimHash","EmptyClaimKeys","InvalidClaimHashSize","EmptyClaimQuery","ClaimNotFound","ClaimAlreadyExists","InvalidTopicExpirationTime","AutoRenewAccountSignatureMissing","props","realm","shard_","Long","ZERO","realm_","num_","fromValue","shard","isNegative","strings","components","Number","component","isNaN","fromNumber","fromSolidityAddress","address","addr","fromBytesBE","$Reader","$protobuf","Reader","$Writer","Writer","$util","util","$root","roots","proto","ShardID","p","ks","shardNum","fromBits","create","properties","m","w","hasOwnProperty","call","uint32","int64","r","l","undefined","pos","t","skipType","RealmID","realmNum","AccountID","accountNum","FileID","fileNum","ContractID","contractNum","TransactionID","transactionValidStart","accountID","Timestamp","fork","ldelim","AccountAmount","amount","sint64","TransferList","accountAmounts","emptyArray","TokenTransferList","transfers","token","TokenID","TopicID","topicNum","tokenNum","TokenFreezeStatus","valuesById","values","TokenKycStatus","$oneOfFields","contractID","newBuffer","RSA_3072","ECDSA_384","thresholdKey","keyList","defineProperty","get","oneOfGetter","oneOfSetter","ThresholdKey","Signature","contract","thresholdSignature","signatureList","ThresholdSignature","SignatureList","sigs","SignaturePair","SignatureMap","HederaFunctionality","FeeComponents","min","max","constant","bpt","vpt","rbh","sbh","gas","tv","bpr","sbpr","TransactionFeeSchedule","hederaFunctionality","feeData","int32","FeeData","nodedata","networkdata","servicedata","FeeSchedule","transactionFeeSchedule","expiryTime","TimestampSeconds","CurrentAndNextFeeSchedule","currentFeeSchedule","nextFeeSchedule","NodeAddress","ipAddress","portno","memo","RSA_PubKey","nodeId","nodeAccountId","nodeCertHash","NodeAddressBook","nodeAddress","SemanticVersion","major","minor","patch","Setting","ServicesConfigurationList","nameValue","TokenRelationship","tokenId","symbol","balance","kycStatus","freezeStatus","uint64","seconds","nanos","ConsensusCreateTopicTransactionBody","adminKey","submitKey","autoRenewPeriod","autoRenewAccount","Duration","ConsensusDeleteTopicTransactionBody","topicID","ConsensusGetTopicInfoQuery","header","QueryHeader","ConsensusGetTopicInfoResponse","topicInfo","ResponseHeader","ConsensusTopicInfo","ResponseType","payment","responseType","Transaction","signedTransactionBytes","TransactionBody","transactionID","nodeAccountID","transactionFee","transactionValidDuration","generateRecord","contractCall","contractCreateInstance","contractUpdateInstance","contractDeleteInstance","cryptoAddLiveHash","cryptoCreateAccount","cryptoDelete","cryptoDeleteLiveHash","cryptoTransfer","cryptoUpdateAccount","fileAppend","fileCreate","fileDelete","fileUpdate","systemDelete","systemUndelete","consensusCreateTopic","consensusUpdateTopic","consensusDeleteTopic","consensusSubmitMessage","uncheckedSubmit","tokenCreation","tokenFreeze","tokenUnfreeze","tokenGrantKyc","tokenRevokeKyc","tokenDeletion","tokenUpdate","tokenMint","tokenBurn","tokenWipe","tokenAssociate","tokenDissociate","bool","ContractCallTransactionBody","ContractCreateTransactionBody","ContractUpdateTransactionBody","CryptoAddLiveHashTransactionBody","CryptoCreateTransactionBody","CryptoDeleteTransactionBody","CryptoDeleteLiveHashTransactionBody","CryptoTransferTransactionBody","CryptoUpdateTransactionBody","FileAppendTransactionBody","FileCreateTransactionBody","FileDeleteTransactionBody","FileUpdateTransactionBody","SystemDeleteTransactionBody","SystemUndeleteTransactionBody","ContractDeleteTransactionBody","FreezeTransactionBody","ConsensusUpdateTopicTransactionBody","ConsensusSubmitMessageTransactionBody","UncheckedSubmitBody","TokenCreateTransactionBody","TokenFreezeAccountTransactionBody","TokenUnfreezeAccountTransactionBody","TokenGrantKycTransactionBody","TokenRevokeKycTransactionBody","TokenDeleteTransactionBody","TokenUpdateTransactionBody","TokenMintTransactionBody","TokenBurnTransactionBody","TokenWipeAccountTransactionBody","TokenAssociateTransactionBody","TokenDissociateTransactionBody","fileID","expirationTime","startHour","startMin","endHour","endMin","updateFile","fileHash","functionParameters","initialBalance","proxyAccountID","constructorParameters","shardID","realmID","newRealmAdminKey","LiveHash","accountId","duration","liveHash","sendRecordThreshold","receiveRecordThreshold","receiverSigRequired","transferAccountID","deleteAccountID","accountOfLiveHash","liveHashToDelete","tokenTransfers","accountIDToUpdate","proxyFraction","sendRecordThresholdWrapper","receiveRecordThresholdWrapper","receiverSigRequiredWrapper","google","protobuf","UInt64Value","BoolValue","contents","transferContractID","StringValue","ConsensusMessageChunkInfo","initialTransactionID","total","number","chunkInfo","transactionBytes","decimals","initialSupply","treasury","kycKey","freezeKey","wipeKey","supplyKey","freezeDefault","expiry","account","tokens","nodeTransactionPrecheckCode","cost","stateProof","TransactionResponse","ResponseCodeEnum","runningHash","sequenceNumber","ConsensusService","rpcImpl","requestDelimited","responseDelimited","rpc","Service","createTopic","request","callback","rpcCall","updateTopic","deleteTopic","getTopicInfo","Query","Response","submitMessage","getByKey","getBySolidityID","contractCallLocal","contractGetInfo","contractGetBytecode","ContractGetRecords","cryptogetAccountBalance","cryptoGetAccountRecords","cryptoGetInfo","cryptoGetLiveHash","cryptoGetProxyStakers","fileGetContents","fileGetInfo","transactionGetReceipt","transactionGetRecord","transactionGetFastRecord","consensusGetTopicInfo","networkGetVersionInfo","tokenGetInfo","GetByKeyQuery","GetBySolidityIDQuery","ContractCallLocalQuery","ContractGetInfoQuery","ContractGetBytecodeQuery","ContractGetRecordsQuery","CryptoGetAccountBalanceQuery","CryptoGetAccountRecordsQuery","CryptoGetInfoQuery","CryptoGetLiveHashQuery","CryptoGetStakersQuery","FileGetContentsQuery","FileGetInfoQuery","TransactionGetReceiptQuery","TransactionGetRecordQuery","TransactionGetFastRecordQuery","NetworkGetVersionInfoQuery","TokenGetInfoQuery","EntityID","GetByKeyResponse","entities","solidityID","GetBySolidityIDResponse","ContractLoginfo","topic","bloom","ContractFunctionResult","logInfo","createdContractIDs","contractCallResult","errorMessage","gasUsed","maxResultSize","ContractCallLocalResponse","functionResult","ContractGetInfoResponse","contractInfo","ContractInfo","tokenRelationships","contractAccountID","storage","deleted","ContractGetBytecodeResponse","bytecode","ContractGetRecordsResponse","records","TransactionRecord","tokenTransferLists","receipt","transactionHash","consensusTimestamp","contractCreateResult","transferList","TransactionReceipt","status","exchangeRate","topicSequenceNumber","topicRunningHash","topicRunningHashVersion","tokenID","newTotalSupply","ExchangeRateSet","ExchangeRate","hbarEquiv","centEquiv","currentRate","nextRate","TokenBalance","TokenBalances","tokenBalances","CryptoGetAccountBalanceResponse","CryptoGetAccountRecordsResponse","CryptoGetInfoResponse","accountInfo","AccountInfo","liveHashes","proxyReceived","generateSendRecordThreshold","generateReceiveRecordThreshold","CryptoGetLiveHashResponse","ProxyStaker","AllProxyStakers","proxyStaker","CryptoGetStakersResponse","stakers","FileGetContentsResponse","fileContents","FileContents","FileGetInfoResponse","fileInfo","FileInfo","size","includeDuplicates","TransactionGetReceiptResponse","duplicateTransactionReceipts","TransactionGetRecordResponse","duplicateTransactionRecords","transactionRecord","TransactionGetFastRecordResponse","NetworkGetVersionInfoResponse","hapiProtoVersion","hederaServicesVersion","TokenInfo","totalSupply","defaultFreezeStatus","defaultKycStatus","TokenGetInfoResponse","tokenInfo","contractGetBytecodeResponse","contractGetRecordsResponse","Claim","claimDuration","CryptoAddClaimTransactionBody","claim","CryptoDeleteClaimTransactionBody","accountIDToDeleteFrom","hashToDelete","CryptoGetClaimQuery","CryptoGetClaimResponse","CryptoService","createAccount","updateAccount","addLiveHash","deleteLiveHash","getLiveHash","getAccountRecords","cryptoGetBalance","getAccountInfo","getTransactionReceipts","getFastTransactionRecord","getTxRecordByTxID","getStakersByAccountID","FileService","createFile","deleteFile","appendContent","getFileContent","getFileInfo","FreezeService","ConsensusTopicQuery","consensusStartTime","consensusEndTime","limit","ConsensusTopicResponse","runningHashVersion","MirrorConsensusService","subscribeTopic","NetworkService","getVersionInfo","SmartContractService","createContract","updateContract","contractCallMethod","getContractInfo","contractCallLocalMethod","getTxRecordByContractID","deleteContract","TokenService","createToken","updateToken","mintToken","burnToken","deleteToken","wipeTokenAccount","freezeTokenAccount","unfreezeTokenAccount","grantKycToTokenAccount","revokeKycFromTokenAccount","associateTokens","dissociateTokens","getTokenInfo","TokenTransfersTransactionBody","SignedTransaction","TransactionList","transactionList","DoubleValue","double","FloatValue","float","Int64Value","Int32Value","UInt32Value","BytesValue","AccountId","shard_num","realm_num","account_num","entity_id","_fromProtobuf","_toProtobuf","finish","eq","valueToLong","isBigNumber","HbarUnit","tinybar","_name","_symbol","_tinybar","Tinybar","Microbar","Millibar","Hbar","Kilobar","multipliedBy","Megabar","Gigabar","unit","_valueInTinybar","bigAmount","isLong","toFixed","fromTinybars","to","dividedBy","toTinybars","negated","negate","lessThan","greaterThan","StatusError","PrecheckStatusError","transactionId","GrpcServiceError","GrpcStatus","_fromValue","Cancelled","InvalidArgument","DeadlineExceeded","NotFound","AlreadyExists","PermissionDenied","Unauthenticated","ResourceExhausted","FailedPrecondition","Aborted","OutOfRange","Unimplemented","Internal","Unavailable","DataLoss","Executable","_maxRetries","_nextNodeIndex","_nodeIds","nodeAccountIds","setNodeAccountIds","nodeIds","maxRetries","setMaxRetries","_beforeExecute","client","_makeRequest","_mapResponseStatus","response","_mapResponse","_execute","channel","_getNodeAccountId","_getTransactionId","_advanceRequest","_shouldRetry","responseStatus","_shouldRetryExceptionally","execute","attempt","node","_network","networkNodes","inUse","isHealthy","wait","err","increaseDelay","decreaseDelay","delayForAttempt","ms","pow","Promise","resolve","setTimeout","jitter","random","now","Date","fromDate","date","TypeError","getTime","toDate","toInt","timestamp","TransactionId","validStart","time","MaxQueryPaymentExceeded","queryCost","maxQueryPayment","QUERY_REGISTRY","Map","_paymentTransactionId","_paymentTransactions","_queryPayment","_maxQueryPayment","query","ProtoQuery","fromProtobuf","setQueryPayment","queryPayment","setMaxQueryPayment","getCost","COST_QUERY","setPaymentTransactionId","paymentTransactionId","_isPaymentRequired","getNodeAccountIdsForExecute","operator","_operator","actualCost","_makePaymentTransaction","_mapResponseHeader","_makeRequestHeader","ProtoResponseType","ANSWER_ONLY","_onMakeRequest","OK","paymentAmount","body","ProtoTransactionBody","transactionSigner","ProtoSignedTransaction","ContractId","contract_num","TokenId","token_num","ObjectMap","_map","__map","_fromString","k","_set","TokenBalanceMap","s","balances","AccountBalance","hbars","list","AccountBalanceQuery","_accountId","_contractId","setAccountId","contractId","setContractId","ReceiptStatusError","transactionReceipt","FileId","file_num","TopicId","topic_num","ProtoTopicID","cents","rate","getSeconds","fileId","topicId","exchangeRateSet","TransactionReceiptQuery","_transactionId","setTransactionId","receiptStatusCode","receiptStatus","Transfer","transfer","ContractLogInfo","topics","info","logs","asBytes","getString","getBytes","offset","getInt32","getBytes32","getBool","getInt8","getInt64","_getBytes32","getInt256","getUint64","getUint256","getAddress","TokenTransferAccountMap","TokenTransferMap","__set","tokenTransfersMap","aa","tokenTransferList","consensusTimestampstamp","transactionMemo","contractFunctionResult","record","TransactionRecordQuery","getReceipt","getRecord","TransactionHashMap","_fromTransaction","hashes","_transactions","sha384","NodeAccountIdSignatureMap","_fromTransactionSigMap","signatures","sigPairs","DEFAULT_AUTO_RENEW_PERIOD","DEFAULT_RECORD_THRESHOLD","DEFAULT_TRANSACTION_VALID_DURATION","CHUNK_SIZE","TRANSACTION_REGISTRY","Set","_nextTransactionIndex","_transactionValidDuration","_maxTransactionFee","_transactionMemo","_transactionIds","signedTransactions","transactionIds","transactionIdStrings","nodeIdStrings","bodies","ProtoTransactionList","_fromProtobufTransactions","transactions","_requireNotFrozen","setTransactionValidDuration","validDuration","maxTransactionFee","setMaxTransactionFee","setTransactionMemo","signWith","publicKeyData","has","signWithOperator","freezeWith","addSignature","getSignatures","_makeSignedTransaction","_buildTransactions","getTransactionHash","getTransactionHashPerNode","operatorAccountId","untilIndex","_makeTransactionBody","_getTransactionDataCase","_makeTransactionData","keyToProtobuf","keyListToProtobuf","keyFromProtobuf","kl","keyListFromProtobuf","AccountCreateTransaction","_key","_initialBalance","_sendRecordThreshold","_receiveRecordThreshold","_receiverSignatureRequired","_proxyAccountId","_autoRenewPeriod","setKey","receiverSignatureRequired","setReceiverSignatureRequired","setInitialBalance","proxyAccountId","setProxyAccountId","setAutoRenewPeriod","AccountDeleteTransaction","_transferAccountId","transferAccountId","setTransferAccountId","accountDelete","liveHash_","isKycGranted","isFrozen","relationship","TokenRelationshipMap","relationships","_","contractAccountId","isDeleted","isReceiverSignatureRequired","AccountInfoQuery","AccountRecordsQuery","AccountStakersQuery","staker","AccountUpdateTransaction","_expirationTime","setExpirationTime","update","ContractByteCodeQuery","smartContract","KECCAK_PADDING","SHIFT","RC","createKeccakState","blocks","reset","block","lastByteIndex","blockCount","outputBlocks","zeroFill","arr","state","byteCount","f","ArrayBuffer","h","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49","createKeccak","keccak256","ArgumentType","uint8","int8","uint16","int16","uint256","int256","bytes32","func","ContractFunctionSelector","_params","_paramTypes","addString","_addParam","ty","addStringArray","addBytes","addBytes32","addBytesArray","addBytes32Array","addInt8","addInt32","addInt64","addInt256","addInt8Array","addInt32Array","addInt64Array","addInt256Array","addUint8","addUint32","addUint64","addUint256","addUint8Array","addUint32Array","addUint64Array","addUint256Array","addBool","addAddress","addAddressArray","addFunction","solidityTypeToString","_build","ContractFunctionParameters","_selector","_arguments","entry","entries","par","buf","selector","addressParam","functionSelector","param","dynamic","argumentToBytes","includeId","nameOffset","arg","sum","valueView","isArray","totalLengthOfValues","a","current","e","numberToBytes","setUint8","bind","setInt8","setUint16","setInt16","isInteger","byteoffset","ContractCallQuery","_gas","setGas","_functionParameters","setFunctionParameters","setFunction","_maxResultSize","setMaxResultSize","params","ContractCreateTransaction","_bytecodeFileId","_adminKey","_constructorParameters","_contractMemo","bytecodeFileId","setBytecodeFileId","setAdminKey","setConstructorParameters","contractMemo","setContractMemo","ContractDeleteTransaction","_transferContractId","transferContractId","setTransferContractId","contractDelete","ContractExecuteTransaction","_amount","setPayableAmount","function","payableAmount","ContractInfoQuery","ContractUpdateTransaction","FileAppendTransaction","_fileId","_contents","_maxChunks","setFileId","setContents","maxChunks","setMaxChunks","_startIndex","append","concat","nextTransactionId","chunk","executeAll","responses","file","FileContentsQuery","fileContentsResponse","FileCreateTransaction","setKeys","FileDeleteTransaction","FileInfoQuery","FileUpdateTransaction","FreezeTransaction","_startTime","_endTime","startTime","setStartTime","hour","minute","endTime","setEndTime","startHourOrString","startMinute","endHourOrString","endMinute","_getMethod","LiveHashAddTransaction","_hash","_duration","setHash","setDuration","LiveHashDeleteTransaction","LiveHashQuery","NetworkVersionInfo","protobufVersion","servicesVesion","NetworkVersionInfoQuery","network","SystemDeleteTransaction","SystemUndeleteTransaction","TokenAssociateTransaction","_tokenIds","tokenIds","setTokenIds","associateToken","TokenBurnTransaction","_tokenId","setTokenId","setAmount","TokenCreateTransaction","_tokenName","_tokenSymbol","_decimals","_initialSupply","_treasuryAccountId","_kycKey","_freezeKey","_wipeKey","_supplyKey","_freezeDefault","_autoRenewAccountId","tokenName","setTokenName","tokenSymbol","setTokenSymbol","setDecimals","setInitialSupply","treasuryAccountId","setTreasuryAccountId","setKycKey","setFreezeKey","setWipeKey","setSupplyKey","setFreezeDefault","autoRenewAccountId","setAutoRenewAccountId","TokenDeleteTransaction","TokenDissociateTransaction","dissociateToken","TokenFreezeTransaction","freezeToken","TokenGrantKycTransaction","grantKycToken","TokenInfoQuery","TokenMintTransaction","TokenRevokeKycTransaction","revokeKycToken","TokenUnfreezeTransaction","unfreezeToken","TokenUpdateTransaction","setsupplyKey","TokenWipeTransaction","wipeToken","TopicCreateTransaction","_topicMemo","_submitKey","topicMemo","setTopicMemo","setSubmitKey","consensus","TopicDeleteTransaction","_topicId","setTopicId","topicDelete","TopicInfo","infoResponse","TopicInfoQuery","TopicMessageSubmitTransaction","_message","setMessage","_chunkInfo","initialTransactionId","startIndex","TopicMessageChunk","TopicMessage","_ofSingle","_ofMany","last","sort","SubscriptionHandle","_call","_setCall","unsubscribe","TopicMessageQuery","_limit","setLimit","setErrorHandler","errorHandler","_errorHandler","subscribe","listener","handle","_makeServerStreamRequest","cancel","_mirrorNetwork","getNextMirrorNode","makeServerStreamRequest","topicMessage","temp","delete","TopicUpdateTransaction","clearTopicId","clearTopicMemo","clearAdminKey","clearSubmitKey","clearAutoRenewAccountId","HbarTransferMap","accountTransfers","TransferTransaction","_tokenTransfers","_hbarTransfers","addTokenTransfer","hbarTransfers","addHbarTransfer","hbarTranfers","CostQuery","_query","_header","COST_ANSWER","ManagedNode","channelInitFunction","_channel","_channelInitFunction","Node","delay","lastUsed","delayUntil","useCount","compare","Network","createNetworkChannel","nodes","setNetwork","network_","thisNetwork_","url","findIndex","url_","nodesIndex","shuffle","getNumberOfNodesForTransaction","clear","currentIndex","temporaryValue","randomIndex","MirrorNode","MirrorNetwork","setMirrorNetwork","Client","_createMirrorNetworkChannel","_createNetworkChannel","setOperator","mirrorNetwork","setOperatorWith","operatorPublicKey","ping","Channel","_crypto","_smartContract","_file","_consensus","_freeze","_token","_createUnaryClient","serviceName","WebChannel","_address","method","requestData","fetch","headers","encodeRequest","decodeUnaryResponse","arrayBuffer","frame","dataOffset","unaryResponse","dataView","frameType","frameByteLength","frameData","trailer","trailerName","trailerValue","fromName","MAINNET","TESTNET","PREVIEWNET","WebClient","fromConfig","forNetwork","forName","forMainnet","forTestnet","forPreviewnet","cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","defaultClearTimeout","runTimeout","fun","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","Item","noop","nextTick","args","arguments","title","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","fs","require","path","log","console","NEWLINE","RE_INI_KEY_VAL","RE_NEWLINES","NEWLINES_MATCH","src","options","debug","Boolean","obj","line","idx","keyValueArr","isDoubleQuoted","replace","trim","config","dotenvPath","encoding","parsed","readFileSync","port","registerDevice","document","addEventListener","event","runners","accountmdl","count","lastnameOkay","firstnameOkay","BulmaModal","elem","querySelector","close_data","show","classList","toggle","on_show","on_close","modalClose","querySelectorAll","that","Event","dispatchEvent","registerComponent","getElementById","mod","style","visibility","innerText","remove","disabled","checked","lastname","firstname","country","memoObj","avatar","mdl","myAccountId","myPrivateKey","newAccountMnemonic","newAccountPrivateKey","newAccountPublicKey","innerHTML","footerMenu","newAccountTransactionResponse","newAccountId","accountBalance","productName","textEncoder","accId","catch","textDecoder","location","selectedPort","ports","prop","qs","sep","regexp","maxKeys","kstr","vstr","v","substr","decodeURIComponent","xs","stringifyPrimitive","isFinite","objectKeys","encodeURIComponent","res","runnerz","jsen","validate","type","minProperties","maxProperties","required","fullname","additionalProperties","leaderboardComponent","xhr","XMLHttpRequest","readyState","responseText","table","row","insertRow","cell1","insertCell","cell2","cell3","cell4","cell5","cell6","cell7","cell8","cell9","setRequestHeader"],"mappings":"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A,EAAA,KAAA,GACA,EAAA,IAAA,EAAA,IAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,MAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,IAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,GACA,EAAA,IAAA,EAAA,IAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,GACA,EAAA,IAAA,EAAA,IAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,GACA,EAAA,IAAA,EAAA,IAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,MAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,IAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,MAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,MAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,MAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,MAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GACA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,MAAA,GAAA,IAAA,EAAA,MAAA,IAAA,IAAA,EAAA,MAAA,GAEA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAEA,EAAA,EAAA,EAAA,GAAA,GAAA,EAQA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GAEA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAEA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,GAAA,IACA,EAAA,GAAA,IAAA,GAAA,IAEA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,GAAA,IACA,EAAA,GAAA,IAAA,GAAA,IAEA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,GAAA,IACA,EAAA,IAAA,IAAA,GAAA,IAEA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,GAAA,IACA,EAAA,IAAA,IAAA,GAAA,IAEA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,GAAA,IACA,EAAA,IAAA,IAAA,GAAA,IAEA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,GAAA,IACA,EAAA,IAAA,IAAA,GAAA,IAEA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,GAAA,IACA,EAAA,IAAA,IAAA,GAAA,IAEA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,GAAA,IACA,EAAA,IAAA,IAAA,GAAA,IAEA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,GAAA,IAC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,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GASA,IADA,GADA,IADA,GADA,IADA,GADA,IADA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,EAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,IACA,EAAA,IACA,GAAA,IAAA,GAGA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,GAAA,IACA,EAAA,GAAA,IAAA,GAAA,IAEA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,GAAA,IACA,EAAA,GAAA,IAAA,GAAA,IAEA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,IACA,EAAA,IAAA,IAAA,GAAA,IACA,EAAA,IAAA,IAAA,GAAA,IAEA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A,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,IAGA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,IACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,KACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,KACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,KACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,IADA,EAAA,EAAA,KACA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAA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ACA,UACA,OACA,WACA,UACA,SACA,MACA,SACA,QACA,UACA,SACA,QACA,MACA,SACA,UACA,SACA,QACA,QACA,UACA,SACA,UACA,SACA,SACA,SACA,QACA,MACA,QACA,QACA,QACA,MACA,MACA,UACA,QACA,QACA,QACA,UACA,QACA,QACA,MACA,QACA,QACA,SACA,QACA,QACA,UACA,OACA,QACA,SACA,UACA,UACA,QACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,QACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,UACA,MACA,QACA,UACA,SACA,QACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,MACA,QACA,QACA,OACA,SACA,UACA,SACA,SACA,QACA,MACA,WACA,SACA,UACA,MACA,SACA,UACA,QACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,WACA,UACA,UACA,QACA,SACA,OACA,SACA,OACA,SACA,UACA,UACA,QACA,QACA,QACA,OACA,UACA,QACA,UACA,OACA,OACA,WACA,QACA,QACA,MACA,UACA,UACA,OACA,SACA,SACA,SACA,MACA,SACA,UACA,SACA,OACA,QACA,SACA,SACA,QACA,OACA,SACA,UACA,SACA,OACA,SACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,OACA,SACA,SACA,UACA,SACA,UACA,MACA,OACA,OACA,UACA,OACA,QACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,SACA,SACA,SACA,OACA,SACA,SACA,MACA,MACA,UACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,WACA,SACA,SACA,QACA,UACA,QACA,QACA,SACA,QACA,SACA,UACA,QACA,OACA,OACA,SACA,SACA,SACA,SACA,SACA,QACA,MACA,WACA,OACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,OACA,OACA,OACA,SACA,OACA,MACA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,UACA,UACA,UACA,MACA,SACA,OACA,QACA,SACA,QACA,OACA,OACA,OACA,SACA,SACA,SACA,MACA,UACA,QACA,WACA,SACA,SACA,QACA,UACA,OACA,UACA,SACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,WACA,SACA,QACA,UACA,SACA,QACA,OACA,QACA,QACA,SACA,OACA,SACA,QACA,UACA,QACA,QACA,UACA,SACA,SACA,UACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,OACA,QACA,QACA,OACA,UACA,OACA,OACA,QACA,QACA,SACA,QACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,UACA,OACA,SACA,OACA,OACA,UACA,QACA,SACA,UACA,OACA,UACA,QACA,SACA,UACA,UACA,UACA,UACA,WACA,UACA,WACA,UACA,WACA,OACA,OACA,SACA,OACA,QACA,OACA,OACA,UACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,OACA,QACA,QACA,SACA,QACA,QACA,QACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,SACA,QACA,MACA,UACA,OACA,UACA,MACA,WACA,UACA,UACA,UACA,QACA,UACA,SACA,OACA,QACA,MACA,SACA,OACA,QACA,SACA,SACA,OACA,WACA,OACA,MACA,OACA,SACA,SACA,SACA,WACA,SACA,UACA,WACA,WACA,OACA,UACA,SACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,UACA,QACA,SACA,SACA,WACA,SACA,SACA,OACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,OACA,UACA,QACA,OACA,SACA,OACA,SACA,UACA,UACA,UACA,SACA,WACA,SACA,OACA,WACA,WACA,UACA,OACA,UACA,WACA,UACA,WACA,SACA,SACA,UACA,QACA,SACA,WACA,MACA,OACA,UACA,SACA,SACA,SACA,QACA,OACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,OACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,OACA,OACA,MACA,OACA,OACA,OACA,SACA,OACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,QACA,SACA,OACA,OACA,OACA,UACA,UACA,OACA,OACA,UACA,SACA,MACA,QACA,SACA,QACA,QACA,WACA,UACA,UACA,WACA,WACA,QACA,OACA,SACA,SACA,UACA,SACA,UACA,SACA,UACA,QACA,SACA,QACA,MACA,UACA,UACA,QACA,SACA,UACA,SACA,SACA,UACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,WACA,UACA,QACA,QACA,MACA,QACA,QACA,UACA,QACA,QACA,SACA,QACA,UACA,SACA,UACA,SACA,WACA,OACA,QACA,SACA,QACA,UACA,SACA,WACA,SACA,UACA,SACA,UACA,WACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,QACA,MACA,UACA,SACA,OACA,UACA,OACA,QACA,QACA,OACA,QACA,OACA,SACA,SACA,MACA,QACA,UACA,OACA,UACA,MACA,QACA,SACA,UACA,QACA,WACA,UACA,WACA,UACA,MACA,OACA,OACA,SACA,QACA,WACA,QACA,QACA,MACA,QACA,UACA,QACA,SACA,OACA,OACA,SACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,QACA,SACA,OACA,MACA,UACA,MACA,OACA,QACA,QACA,OACA,SACA,OACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,QACA,MACA,OACA,QACA,MACA,OACA,OACA,SACA,OACA,OACA,QACA,SACA,SACA,OACA,UACA,QACA,UACA,SACA,SACA,QACA,MACA,UACA,QACA,WACA,QACA,SACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,OACA,MACA,QACA,UACA,OACA,SACA,SACA,OACA,SACA,UACA,OACA,MACA,SACA,UACA,SACA,SACA,UACA,MACA,OACA,OACA,SACA,QACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,UACA,OACA,OACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,OACA,OACA,OACA,UACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,OACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,MACA,MACA,QACA,OACA,OACA,SACA,UACA,OACA,QACA,SACA,OACA,QACA,UACA,MACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,WACA,SACA,QACA,SACA,OACA,MACA,OACA,SACA,OACA,OACA,OACA,MACA,OACA,UACA,QACA,SACA,OACA,OACA,UACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,QACA,WACA,OACA,QACA,OACA,QACA,MACA,OACA,QACA,SACA,QACA,UACA,SACA,OACA,SACA,QACA,OACA,UACA,SACA,MACA,OACA,OACA,WACA,OACA,SACA,MACA,UACA,UACA,QACA,UACA,UACA,SACA,SACA,SACA,UACA,UACA,OACA,UACA,SACA,WACA,QACA,WACA,SACA,WACA,SACA,UACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,QACA,WACA,QACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,UACA,QACA,OACA,QACA,SACA,SACA,MACA,OACA,UACA,QACA,QACA,QACA,MACA,OACA,OACA,UACA,MACA,QACA,QACA,OACA,SACA,SACA,OACA,OACA,WACA,OACA,OACA,UACA,MACA,OACA,MACA,SACA,OACA,UACA,OACA,MACA,UACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,MACA,QACA,QACA,SACA,OACA,OACA,OACA,WACA,SACA,QACA,QACA,QACA,QACA,UACA,OACA,MACA,OACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,UACA,QACA,OACA,SACA,OACA,UACA,SACA,SACA,QACA,OACA,UACA,UACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,OACA,SACA,OACA,SACA,OACA,SACA,OACA,OACA,UACA,QACA,OACA,QACA,SACA,OACA,OACA,UACA,OACA,SACA,OACA,QACA,QACA,UACA,SACA,QACA,QACA,SACA,SACA,UACA,MACA,QACA,SACA,OACA,OACA,OACA,QACA,OACA,SACA,MACA,SACA,UACA,QACA,UACA,SACA,QACA,SACA,QACA,SACA,SACA,SACA,WACA,OACA,OACA,SACA,QACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,OACA,UACA,OACA,WACA,QACA,QACA,SACA,OACA,SACA,SACA,UACA,OACA,QACA,QACA,QACA,QACA,OACA,UACA,QACA,SACA,SACA,WACA,OACA,UACA,QACA,OACA,UACA,QACA,SACA,UACA,SACA,SACA,OACA,UACA,MACA,QACA,UACA,SACA,QACA,SACA,MACA,SACA,UACA,SACA,UACA,QACA,OACA,QACA,OACA,UACA,WACA,SACA,SACA,QACA,WACA,QACA,OACA,QACA,OACA,SACA,OACA,WACA,SACA,SACA,WACA,QACA,OACA,SACA,SACA,UACA,OACA,QACA,OACA,SACA,SACA,QACA,SACA,SACA,OACA,OACA,OACA,WACA,UACA,UACA,SACA,QACA,OACA,MACA,UACA,UACA,QACA,OACA,OACA,OACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,OACA,UACA,OACA,UACA,SACA,QACA,MACA,UACA,SACA,QACA,MACA,MACA,OACA,SACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,QACA,MACA,OACA,MACA,QACA,UACA,OACA,OACA,MACA,QACA,SACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,QACA,UACA,QACA,WACA,QACA,SACA,WACA,SACA,UACA,QACA,UACA,QACA,SACA,UACA,OACA,OACA,OACA,MACA,QACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,SACA,OACA,QACA,QACA,QACA,UACA,QACA,SACA,SACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,SACA,UACA,QACA,OACA,UACA,QACA,SACA,OACA,UACA,UACA,MACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,MACA,QACA,QACA,SACA,WACA,QACA,SACA,UACA,QACA,MACA,SACA,OACA,QACA,OACA,UACA,OACA,SACA,QACA,QACA,QACA,SACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,OACA,OACA,UACA,UACA,WACA,WACA,OACA,SACA,UACA,UACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,QACA,WACA,SACA,UACA,QACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,QACA,WACA,UACA,UACA,QACA,UACA,SACA,UACA,OACA,OACA,QACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,QACA,OACA,MACA,SACA,UACA,UACA,UACA,UACA,WACA,QACA,OACA,OACA,QACA,SACA,UACA,OACA,OACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,QACA,SACA,QACA,QACA,OACA,OACA,SACA,QACA,MACA,QACA,QACA,OACA,SACA,QACA,UACA,SACA,UACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,OACA,SACA,WACA,SACA,SACA,SACA,QACA,OACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,WACA,SACA,WACA,WACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,MACA,SACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,OACA,QACA,QACA,SACA,SACA,UACA,OACA,SACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,MACA,SACA,UACA,OACA,OACA,QACA,SACA,QACA,OACA,SACA,OACA,SACA,OACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,UACA,QACA,SACA,SACA,UACA,WACA,WACA,QACA,QACA,SACA,SACA,QACA,MACA,SACA,SACA,OACA,SACA,SACA,UACA,WACA,OACA,OACA,UACA,SACA,OACA,UACA,SACA,QACA,WACA,SACA,UACA,UACA,SACA,QACA,QACA,SACA,QACA,UACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,WACA,QACA,SACA,QACA,UACA,MACA,UACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,QACA,SACA,UACA,SACA,QACA,OACA,QACA,SACA,UACA,MACA,OACA,QACA,SACA,MACA,QACA,OACA,QACA,QACA,OACA,OACA,QACA,UACA,QACA,QACA,SACA,OACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,OACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,QACA,UACA,QACA,WACA,QACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,UACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,OACA,SACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,SACA,SACA,MACA,SACA,UACA,WACA,SACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,WACA,SACA,SACA,SACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,SACA,UACA,OACA,SACA,SACA,QACA,UACA,OACA,SACA,MACA,QACA,SACA,QACA,SACA,UACA,OACA,UACA,QACA,WACA,WACA,SACA,UACA,UACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,SACA,QACA,SACA,UACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,OACA,OACA,OACA,SACA,OACA,QACA,SACA,OACA,QACA,OACA,OACA,MACA,SACA,SACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,QACA,SACA,QACA,QACA,UACA,SACA,OACA,QACA,OACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,QACA,UACA,QACA,UACA,MACA,WACA,SACA,QACA,SACA,WACA,OACA,SACA,UACA,OACA,QACA,MACA,QACA,SACA,QACA,UACA,WACA,OACA,QACA,UACA,SACA,QACA,OACA,MACA,QACA,QACA,UACA,SACA,QACA,WACA,OACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,UACA,OACA,OACA,SACA,UACA,QACA,OACA,QACA,UACA,QACA,QACA,MACA,OACA,UACA,SACA,OACA,SACA,SACA,OACA,SACA,SACA,SACA,QACA,OACA,QACA,MACA,OACA,UACA,OACA,WACA,SACA,UACA,QACA,UACA,QACA,OACA,SACA,SACA,UACA,UACA,SACA,OACA,WACA,UACA,SACA,QACA,UACA,SACA,SACA,UACA,SACA,OACA,QACA,QACA,QACA,OACA,QACA,MACA,OACA,SACA,UACA,QACA,UACA,SACA,SACA,QACA,QACA,SACA,QACA,MACA,SACA,QACA,UACA,OACA,QACA,UACA,SACA,SACA,UACA,QACA,OACA,SACA,UACA,OACA,SACA,UACA,SACA,UACA,UACA,UACA,QACA,OACA,UACA,UACA,SACA,UACA,QACA,OACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,UACA,SACA,OACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,OACA,UACA,OACA,UACA,OACA,OACA,QACA,QACA,OACA,MACA,SACA,SACA,OACA,SACA,UACA,MACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,QACA,OACA,QACA,OACA,UACA,OACA,QACA,OACA,OACA,OACA,MACA,SACA,OACA,OACA,OACA,SACA,SACA,OACA,SACA,OACA,OACA,UACA,OACA,QACA,SACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,OACA,SACA,MACA,QACA,QACA,QACA,OACA,OACA,OAhgEW,QAAA,QAAA;;;ACs1Ff,IAAA,GAt1FA,SAAA,GACA,aAkDA,IAAA,EACA,EAAA,6CACA,EAAA,KAAA,KACA,EAAA,KAAA,MAEA,EAAA,qBACA,EAAA,EAAA,yDAEA,EAAA,KACA,EAAA,GACA,EAAA,iBAEA,EAAA,CAAA,EAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,MACA,EAAA,IAKA,EAAA,IAioFA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,EACA,OAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAKA,SAAA,EAAA,GAMA,IALA,IAAA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,OACA,EAAA,EAAA,GAAA,GAEA,EAAA,GAAA,CAGA,IAFA,EAAA,EAAA,KAAA,GACA,EAAA,EAAA,EAAA,OACA,IAAA,EAAA,IAAA,GACA,GAAA,EAIA,IAAA,EAAA,EAAA,OAAA,KAAA,EAAA,aAAA,KAEA,OAAA,EAAA,MAAA,EAAA,EAAA,GAAA,GAKA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,EAAA,E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AA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,IAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,GAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,IAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,GAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,IAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,GAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,IAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,IAAA,IAAA,IAAA,GAAA,EAAA,GAAA,GAAA,IA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","file":"leaderboard.d8b4ac6f.js","sourceRoot":"../src","sourcesContent":["export var serial = {};\n\nfunction serialComponent() {\n  'use strict';\n\n  serial.getPorts = function () {\n      return navigator.usb.getDevices().then(devices => {\n          return devices.map(device => new serial.Port(device));\n      });\n  };\n\n  serial.requestPort = function () {\n      const filters = [\n          { 'vendorId': 0x2341, 'productId': 0x8036 }, // Arduino Leonardo\n          { 'vendorId': 0x2341, 'productId': 0x8037 }, // Arduino Micro\n          { 'vendorId': 0x2341, 'productId': 0x804d }, // Arduino/Genuino Zero\n          { 'vendorId': 0x2341, 'productId': 0x804e }, // Arduino/Genuino MKR1000\n          { 'vendorId': 0x2341, 'productId': 0x804f }, // Arduino MKRZERO\n          { 'vendorId': 0x2341, 'productId': 0x8050 }, // Arduino MKR FOX 1200\n          { 'vendorId': 0x2341, 'productId': 0x8052 }, // Arduino MKR GSM 1400\n          { 'vendorId': 0x2341, 'productId': 0x8053 }, // Arduino MKR WAN 1300\n          { 'vendorId': 0x2341, 'productId': 0x8054 }, // Arduino MKR WiFi 1010\n          { 'vendorId': 0x2341, 'productId': 0x8055 }, // Arduino MKR NB 1500\n          { 'vendorId': 0x2341, 'productId': 0x8056 }, // Arduino MKR Vidor 4000\n          { 'vendorId': 0x2341, 'productId': 0x8057 }, // Arduino NANO 33 IoT\n          { 'vendorId': 0x239A }, // Adafruit Boards!\n      ];\n      return navigator.usb.requestDevice({ 'filters': filters }).then(\n          device => new serial.Port(device)\n      );\n  }\n\n  serial.Port = function (device) {\n      this.device_ = device;\n      this.interfaceNumber_ = 2;  // original interface number of WebUSB Arduino demo\n      this.endpointIn_ = 5;       // original in endpoint ID of WebUSB Arduino demo\n      this.endpointOut_ = 4;      // original out endpoint ID of WebUSB Arduino demo\n  };\n\n  serial.Port.prototype.connect = function () {\n      let readLoop = () => {\n          this.device_.transferIn(this.endpointIn_, 64).then(result => {\n              this.onReceive(result.data);\n              readLoop();\n          }, error => {\n              this.onReceiveError(error);\n          });\n      };\n\n      return this.device_.open()\n          .then(() => {\n              if (this.device_.configuration === null) {\n                  return this.device_.selectConfiguration(1);\n              }\n          })\n          .then(() => {\n              var configurationInterfaces = this.device_.configuration.interfaces;\n              configurationInterfaces.forEach(element => {\n                  element.alternates.forEach(elementalt => {\n                      if (elementalt.interfaceClass == 0xff) {\n                          this.interfaceNumber_ = element.interfaceNumber;\n                          elementalt.endpoints.forEach(elementendpoint => {\n                              if (elementendpoint.direction == \"out\") {\n                                  this.endpointOut_ = elementendpoint.endpointNumber;\n                              }\n                              if (elementendpoint.direction == \"in\") {\n                                  this.endpointIn_ = elementendpoint.endpointNumber;\n                              }\n                          })\n                      }\n                  })\n              })\n          })\n          .then(() => this.device_.claimInterface(this.interfaceNumber_))\n          .then(() => this.device_.selectAlternateInterface(this.interfaceNumber_, 0))\n          .then(() => this.device_.controlTransferOut({\n              'requestType': 'class',\n              'recipient': 'interface',\n              'request': 0x22,\n              'value': 0x01,\n              'index': this.interfaceNumber_\n          }))\n          .then(() => {\n              readLoop();\n          });\n  };\n\n  serial.Port.prototype.disconnect = function () {\n      return this.device_.controlTransferOut({\n          'requestType': 'class',\n          'recipient': 'interface',\n          'request': 0x22,\n          'value': 0x00,\n          'index': this.interfaceNumber_\n      })\n          .then(() => this.device_.close());\n  };\n\n  serial.Port.prototype.send = function (data) {\n      return this.device_.transferOut(this.endpointOut_, data);\n  };\n}\n\nserialComponent();","export default class Key {}\n","import Key from \"./Key.js\";\n\n/**\n * A list of Keys (`Key`) with an optional threshold.\n */\nexport default class KeyList extends Key {\n    /**\n     * @param {?Key[]} [keys]\n     * @param {?number} [threshold]\n     */\n    constructor(keys, threshold) {\n        super();\n\n        /**\n         * @private\n         * @type {Key[]}\n         */\n        this._keys = keys == null ? [] : keys;\n\n        /**\n         * @type {?number}\n         */\n        this._threshold = threshold == null ? null : threshold;\n    }\n\n    /**\n     * @param {Key[]} keys\n     * @returns {KeyList}\n     */\n    static of(...keys) {\n        return new KeyList(keys, null);\n    }\n\n    /**\n     * @template T\n     * @param {ArrayLike<Key>} arrayLike\n     * @param {((key: Key) => Key)} [mapFn]\n     * @param {T} [thisArg]\n     * @returns {KeyList}\n     */\n    static from(arrayLike, mapFn, thisArg) {\n        if (mapFn == null) {\n            return new KeyList(Array.from(arrayLike));\n        }\n\n        return new KeyList(Array.from(arrayLike, mapFn, thisArg));\n    }\n\n    /**\n     * @returns {?number}\n     */\n    get threshold() {\n        return this._threshold;\n    }\n\n    /**\n     * @param {number} threshold\n     * @returns {this}\n     */\n    setThreshold(threshold) {\n        this._threshold = threshold;\n        return this;\n    }\n\n    /**\n     * @param {Key[]} keys\n     * @returns {number}\n     */\n    push(...keys) {\n        return this._keys.push(...keys);\n    }\n\n    /**\n     * @param {number} start\n     * @param {number} deleteCount\n     * @param {Key[]} items\n     * @returns {KeyList}\n     */\n    splice(start, deleteCount, ...items) {\n        return new KeyList(\n            this._keys.splice(start, deleteCount, ...items),\n            this.threshold\n        );\n    }\n\n    /**\n     * @param {number=} start\n     * @param {number=} end\n     * @returns {KeyList}\n     */\n    slice(start, end) {\n        return new KeyList(this._keys.slice(start, end), this.threshold);\n    }\n\n    /**\n     * @returns {Iterator<Key>}\n     */\n    [Symbol.iterator]() {\n        return this._keys[Symbol.iterator]();\n    }\n\n    /**\n     * @returns {Key[]}\n     */\n    toArray() {\n        return this._keys.slice();\n    }\n}\n","(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = Math.floor((x[j] + 128) / 256);\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  return n;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES,\n\n  gf: gf,\n  D: D,\n  L: L,\n  pack25519: pack25519,\n  unpack25519: unpack25519,\n  M: M,\n  A: A,\n  S: S,\n  Z: Z,\n  pow2523: pow2523,\n  add: add,\n  set25519: set25519,\n  modL: modL,\n  scalarmult: scalarmult,\n  scalarbase: scalarbase,\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return null;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (typeof require !== 'undefined') {\n    // Node.js.\n    crypto = require('crypto');\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n","/**\n * @param {Uint8Array} array1\n * @param {Uint8Array} array2\n * @returns {boolean}\n */\nexport function arrayEqual(array1, array2) {\n    if (array1 === array2) {\n        return true;\n    }\n\n    if (array1.byteLength !== array2.byteLength) {\n        return false;\n    }\n\n    const view1 = new DataView(array1.buffer);\n    const view2 = new DataView(array2.buffer);\n\n    let i = array1.byteLength;\n\n    while (i--) {\n        if (view1.getUint8(i) !== view2.getUint8(i)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * @param {Uint8Array} array\n * @param {Uint8Array} arrayPrefix\n * @returns {boolean}\n */\nexport function arrayStartsWith(array, arrayPrefix) {\n    if (array.byteLength < arrayPrefix.byteLength) {\n        return false;\n    }\n\n    let i = arrayPrefix.byteLength;\n\n    while (i--) {\n        if (array[i] !== arrayPrefix[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","/**\n * Signals that a key could not be realized from the input.\n */\nexport default class BadKeyError extends Error {\n    /**\n     * @param {Error | string} messageOrCause\n     */\n    constructor(messageOrCause) {\n        super(\n            messageOrCause instanceof Error\n                ? messageOrCause.message\n                : messageOrCause\n        );\n\n        this.name = \"BadKeyError\";\n\n        if (messageOrCause instanceof Error) {\n            /** @type {?Error} */\n            this.cause = messageOrCause;\n            this.stack = messageOrCause.stack;\n        }\n    }\n}\n","/**\n * @type {string[]}\n */\nconst byteToHex = [];\n\nfor (let n = 0; n <= 0xff; n += 1) {\n    byteToHex.push(n.toString(16).padStart(2, \"0\"));\n}\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nexport function encode(data) {\n    let string = \"\";\n\n    for (const byte of data) {\n        string += byteToHex[byte];\n    }\n\n    return string;\n}\n\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nexport function decode(text) {\n    const str = text.startsWith(\"0x\") ? text.substring(2) : text;\n    const result = str.match(/.{1,2}/gu);\n\n    return new Uint8Array(\n        (result == null ? [] : result).map((byte) => parseInt(byte, 16))\n    );\n}\n","import nacl from \"tweetnacl\";\nimport Key from \"./Key.js\";\nimport { arrayEqual, arrayStartsWith } from \"./util/array.js\";\nimport BadKeyError from \"./BadKeyError.js\";\nimport * as hex from \"./encoding/hex.js\";\n\n/**\n * @typedef {import(\"./PrivateKey.js\").Transaction} Transaction\n */\n\nconst derPrefix = \"302a300506032b6570032100\";\nconst derPrefixBytes = hex.decode(derPrefix);\n\n/**\n * An public key on the Hedera™ network.\n */\nexport default class PublicKey extends Key {\n    /**\n     * @internal\n     * @hideconstructor\n     * @param {Uint8Array} keyData\n     */\n    constructor(keyData) {\n        super();\n\n        /**\n         * @type {Uint8Array}\n         * @private\n         * @readonly\n         */\n        this._keyData = keyData;\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @returns {PublicKey}\n     */\n    static fromBytes(data) {\n        switch (data.length) {\n            case 32:\n                return new PublicKey(data);\n\n            case 44:\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                if (arrayStartsWith(data, derPrefixBytes)) {\n                    return new PublicKey(data.subarray(12));\n                }\n\n                break;\n\n            default:\n        }\n\n        throw new BadKeyError(\n            `invalid public key length: ${data.length} bytes`\n        );\n    }\n\n    /**\n     * Parse a public key from a string of hexadecimal digits.\n     *\n     * The public key may optionally be prefixed with\n     * the DER header.\n     *\n     * @param {string} text\n     * @returns {PublicKey}\n     */\n    static fromString(text) {\n        return PublicKey.fromBytes(hex.decode(text));\n    }\n\n    /**\n     * Verify a signature on a message with this public key.\n     *\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    verify(message, signature) {\n        return nacl.sign.detached.verify(message, signature, this._keyData);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    verifyTransaction(transaction) {\n        transaction._requireFrozen();\n\n        if (!transaction._isFrozen()) {\n            transaction.freeze();\n        }\n\n        for (const signedTransaction of transaction._signedTransactions) {\n            if (\n                signedTransaction.sigMap != null &&\n                signedTransaction.sigMap.sigPair != null\n            ) {\n                let found = false;\n                for (const sigPair of signedTransaction.sigMap.sigPair) {\n                    const pubKeyPrefix = /** @type {Uint8Array} */ (sigPair.pubKeyPrefix);\n                    if (arrayEqual(pubKeyPrefix, this._keyData)) {\n                        found = true;\n                        const bodyBytes = /** @type {Uint8Array} */ (signedTransaction.bodyBytes);\n                        const signature = /** @type {Uint8Array} */ (sigPair.ed25519);\n                        if (\n                            !nacl.sign.detached.verify(\n                                bodyBytes,\n                                signature,\n                                this._keyData\n                            )\n                        ) {\n                            return false;\n                        }\n                    }\n                }\n\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return this._keyData.slice();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return derPrefix + hex.encode(this._keyData);\n    }\n\n    /**\n     * @param {PublicKey} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        return arrayEqual(this._keyData, other._keyData);\n    }\n}\n","/**\n * Possible statuses for {@link Mnemonic#validate()}.\n *\n * @readonly\n * @enum {string}\n */\nconst BadMnemonicReason = Object.freeze({\n    /**\n     * The mnemonic did not have a supported number of words (12 or 24 for regular and 22 for legacy).\n     */\n    BadLength: \"BadLength\",\n\n    /**\n     * The mnemonic contained words which were not found in the word list.\n     */\n    UnknownWords: \"UnknownWords\",\n\n    /**\n     * The checksum encoded in the mnemonic did not match the checksum we just calculated for\n     * that mnemonic.\n     *\n     * 24-word mnemonics have an 8-bit checksum that is appended to the 32 bytes of source entropy\n     * after being calculated from it, before being encoded into words.\n     *\n     * This could happen if two or more of the words were entered out of the original order or\n     * replaced with another from the standard word list (as this is only returned if all the words\n     * exist in the word list).\n     */\n    ChecksumMismatch: \"ChecksumMismatch\",\n});\n\nexport default BadMnemonicReason;\n","/** @typedef {import(\"./Mnemonic.js\").default} Mnemonic */\nimport BadMnemonicReason from \"./BadMnemonicReason.js\";\n\nexport default class BadMnemonicError extends Error {\n    /**\n     * @param {Mnemonic} mnemonic\n     * @param {string} reason\n     * @param {number[]} unknownWordIndices\n     * @hideconstructor\n     */\n    constructor(mnemonic, reason, unknownWordIndices) {\n        let reasonMessage;\n\n        switch (reason) {\n            case BadMnemonicReason.BadLength:\n                reasonMessage = \"mnemonic is of an unexpected number of words\";\n                break;\n\n            case BadMnemonicReason.ChecksumMismatch:\n                reasonMessage =\n                    \"checksum byte in mnemonic did not match the rest of the mnemonic\";\n                break;\n\n            case BadMnemonicReason.UnknownWords:\n                reasonMessage =\n                    \"mnemonic contained words that are not in the standard word list\";\n                break;\n\n            default:\n                throw new Error(\n                    `unexpected value ${reason.toString()} for 'reason'`\n                );\n        }\n\n        super(`invalid mnemonic: ${reasonMessage}`);\n\n        if (typeof Error.captureStackTrace !== \"undefined\") {\n            Error.captureStackTrace(this, BadMnemonicError);\n        }\n\n        this.name = \"BadMnemonicError\";\n\n        /** The reason for which the mnemonic failed validation. */\n        this.reason = reason;\n\n        /** The mnemonic that failed validation. */\n        this.mnemonic = mnemonic;\n\n        /**\n         * The indices in the mnemonic that were not found in the BIP-39\n         * standard English word list.\n         */\n        this.unknownWordIndices = unknownWordIndices;\n    }\n}\n","export default [\n    \"aback\",\n    \"abbey\",\n    \"abbot\",\n    \"abide\",\n    \"ablaze\",\n    \"able\",\n    \"aboard\",\n    \"abode\",\n    \"abort\",\n    \"abound\",\n    \"about\",\n    \"above\",\n    \"abroad\",\n    \"abrupt\",\n    \"absent\",\n    \"absorb\",\n    \"absurd\",\n    \"abuse\",\n    \"accent\",\n    \"accept\",\n    \"access\",\n    \"accord\",\n    \"accuse\",\n    \"ace\",\n    \"ache\",\n    \"aching\",\n    \"acid\",\n    \"acidic\",\n    \"acorn\",\n    \"acre\",\n    \"across\",\n    \"act\",\n    \"action\",\n    \"active\",\n    \"actor\",\n    \"actual\",\n    \"acute\",\n    \"adam\",\n    \"adapt\",\n    \"add\",\n    \"added\",\n    \"addict\",\n    \"adept\",\n    \"adhere\",\n    \"adjust\",\n    \"admire\",\n    \"admit\",\n    \"adobe\",\n    \"adopt\",\n    \"adrift\",\n    \"adult\",\n    \"adverb\",\n    \"advice\",\n    \"aerial\",\n    \"afar\",\n    \"affair\",\n    \"affect\",\n    \"afford\",\n    \"afghan\",\n    \"afield\",\n    \"afloat\",\n    \"afraid\",\n    \"afresh\",\n    \"after\",\n    \"again\",\n    \"age\",\n    \"agency\",\n    \"agenda\",\n    \"agent\",\n    \"aghast\",\n    \"agile\",\n    \"ago\",\n    \"agony\",\n    \"agree\",\n    \"agreed\",\n    \"ahead\",\n    \"aid\",\n    \"aide\",\n    \"aim\",\n    \"air\",\n    \"airman\",\n    \"airy\",\n    \"akin\",\n    \"alarm\",\n    \"alaska\",\n    \"albeit\",\n    \"album\",\n    \"ale\",\n    \"alert\",\n    \"alibi\",\n    \"alice\",\n    \"alien\",\n    \"alight\",\n    \"align\",\n    \"alike\",\n    \"alive\",\n    \"alkali\",\n    \"all\",\n    \"alley\",\n    \"allied\",\n    \"allow\",\n    \"alloy\",\n    \"ally\",\n    \"almond\",\n    \"almost\",\n    \"aloft\",\n    \"alone\",\n    \"along\",\n    \"aloof\",\n    \"aloud\",\n    \"alpha\",\n    \"alpine\",\n    \"also\",\n    \"altar\",\n    \"alter\",\n    \"always\",\n    \"amaze\",\n    \"amazon\",\n    \"amber\",\n    \"ambush\",\n    \"amen\",\n    \"amend\",\n    \"amid\",\n    \"amidst\",\n    \"amiss\",\n    \"among\",\n    \"amount\",\n    \"ample\",\n    \"amuse\",\n    \"anchor\",\n    \"and\",\n    \"andrew\",\n    \"anew\",\n    \"angel\",\n    \"anger\",\n    \"angle\",\n    \"angry\",\n    \"animal\",\n    \"ankle\",\n    \"annoy\",\n    \"annual\",\n    \"answer\",\n    \"anthem\",\n    \"any\",\n    \"anyhow\",\n    \"anyway\",\n    \"apart\",\n    \"apathy\",\n    \"apex\",\n    \"apiece\",\n    \"appeal\",\n    \"appear\",\n    \"apple\",\n    \"apply\",\n    \"april\",\n    \"apron\",\n    \"arab\",\n    \"arcade\",\n    \"arcane\",\n    \"arch\",\n    \"arctic\",\n    \"ardent\",\n    \"are\",\n    \"area\",\n    \"argue\",\n    \"arid\",\n    \"arise\",\n    \"ark\",\n    \"arm\",\n    \"armful\",\n    \"army\",\n    \"aroma\",\n    \"around\",\n    \"arouse\",\n    \"array\",\n    \"arrest\",\n    \"arrive\",\n    \"arrow\",\n    \"arson\",\n    \"art\",\n    \"artery\",\n    \"artful\",\n    \"artist\",\n    \"ascent\",\n    \"ash\",\n    \"ashen\",\n    \"ashore\",\n    \"aside\",\n    \"ask\",\n    \"asleep\",\n    \"aspect\",\n    \"assay\",\n    \"assent\",\n    \"assert\",\n    \"assess\",\n    \"asset\",\n    \"assign\",\n    \"assist\",\n    \"assume\",\n    \"assure\",\n    \"asthma\",\n    \"astute\",\n    \"asylum\",\n    \"ate\",\n    \"athens\",\n    \"atlas\",\n    \"atom\",\n    \"atomic\",\n    \"attach\",\n    \"attack\",\n    \"attain\",\n    \"attend\",\n    \"attic\",\n    \"auburn\",\n    \"audio\",\n    \"audit\",\n    \"august\",\n    \"aunt\",\n    \"auntie\",\n    \"aura\",\n    \"austin\",\n    \"author\",\n    \"auto\",\n    \"autumn\",\n    \"avail\",\n    \"avenge\",\n    \"avenue\",\n    \"avert\",\n    \"avid\",\n    \"avoid\",\n    \"await\",\n    \"awake\",\n    \"awaken\",\n    \"award\",\n    \"aware\",\n    \"awash\",\n    \"away\",\n    \"awful\",\n    \"awhile\",\n    \"axe\",\n    \"axes\",\n    \"axiom\",\n    \"axis\",\n    \"axle\",\n    \"aye\",\n    \"babe\",\n    \"baby\",\n    \"bach\",\n    \"back\",\n    \"backup\",\n    \"bacon\",\n    \"bad\",\n    \"badge\",\n    \"badly\",\n    \"bag\",\n    \"baggy\",\n    \"bail\",\n    \"bait\",\n    \"bake\",\n    \"baker\",\n    \"bakery\",\n    \"bald\",\n    \"ball\",\n    \"ballad\",\n    \"ballet\",\n    \"ballot\",\n    \"baltic\",\n    \"bamboo\",\n    \"ban\",\n    \"banal\",\n    \"banana\",\n    \"band\",\n    \"bang\",\n    \"bank\",\n    \"bar\",\n    \"barber\",\n    \"bare\",\n    \"barely\",\n    \"barge\",\n    \"bark\",\n    \"barley\",\n    \"barn\",\n    \"baron\",\n    \"barrel\",\n    \"barren\",\n    \"basalt\",\n    \"base\",\n    \"basic\",\n    \"basil\",\n    \"basin\",\n    \"basis\",\n    \"basket\",\n    \"bass\",\n    \"bat\",\n    \"batch\",\n    \"bath\",\n    \"baton\",\n    \"battle\",\n    \"bay\",\n    \"beach\",\n    \"beacon\",\n    \"beak\",\n    \"beam\",\n    \"bean\",\n    \"bear\",\n    \"beard\",\n    \"beast\",\n    \"beat\",\n    \"beauty\",\n    \"become\",\n    \"bed\",\n    \"beech\",\n    \"beef\",\n    \"beefy\",\n    \"beep\",\n    \"beer\",\n    \"beet\",\n    \"beetle\",\n    \"before\",\n    \"beg\",\n    \"beggar\",\n    \"begin\",\n    \"behalf\",\n    \"behave\",\n    \"behind\",\n    \"beige\",\n    \"being\",\n    \"belief\",\n    \"bell\",\n    \"belly\",\n    \"belong\",\n    \"below\",\n    \"belt\",\n    \"bench\",\n    \"bend\",\n    \"benign\",\n    \"bent\",\n    \"berlin\",\n    \"berry\",\n    \"berth\",\n    \"beset\",\n    \"beside\",\n    \"best\",\n    \"bestow\",\n    \"bet\",\n    \"beta\",\n    \"betray\",\n    \"better\",\n    \"beware\",\n    \"beyond\",\n    \"bias\",\n    \"biceps\",\n    \"bicker\",\n    \"bid\",\n    \"big\",\n    \"bigger\",\n    \"bike\",\n    \"bile\",\n    \"bill\",\n    \"bin\",\n    \"binary\",\n    \"bind\",\n    \"biopsy\",\n    \"birch\",\n    \"bird\",\n    \"birdie\",\n    \"birth\",\n    \"bishop\",\n    \"bit\",\n    \"bitch\",\n    \"bite\",\n    \"bitter\",\n    \"black\",\n    \"blade\",\n    \"blame\",\n    \"bland\",\n    \"blast\",\n    \"blaze\",\n    \"bleak\",\n    \"blend\",\n    \"bless\",\n    \"blew\",\n    \"blind\",\n    \"blink\",\n    \"blip\",\n    \"bliss\",\n    \"blitz\",\n    \"block\",\n    \"blond\",\n    \"blood\",\n    \"bloody\",\n    \"bloom\",\n    \"blot\",\n    \"blouse\",\n    \"blow\",\n    \"blue\",\n    \"bluff\",\n    \"blunt\",\n    \"blur\",\n    \"blush\",\n    \"boar\",\n    \"board\",\n    \"boast\",\n    \"boat\",\n    \"bob\",\n    \"bodily\",\n    \"body\",\n    \"bogus\",\n    \"boil\",\n    \"bold\",\n    \"bolt\",\n    \"bomb\",\n    \"bombay\",\n    \"bond\",\n    \"bone\",\n    \"bonn\",\n    \"bonnet\",\n    \"bonus\",\n    \"bony\",\n    \"book\",\n    \"boom\",\n    \"boost\",\n    \"boot\",\n    \"booth\",\n    \"booze\",\n    \"border\",\n    \"bore\",\n    \"borrow\",\n    \"bosom\",\n    \"boss\",\n    \"boston\",\n    \"both\",\n    \"bother\",\n    \"bottle\",\n    \"bottom\",\n    \"bought\",\n    \"bounce\",\n    \"bound\",\n    \"bounty\",\n    \"bout\",\n    \"bovine\",\n    \"bow\",\n    \"bowel\",\n    \"bowl\",\n    \"box\",\n    \"boy\",\n    \"boyish\",\n    \"brace\",\n    \"brain\",\n    \"brainy\",\n    \"brake\",\n    \"bran\",\n    \"branch\",\n    \"brand\",\n    \"brandy\",\n    \"brass\",\n    \"brave\",\n    \"bravo\",\n    \"brazil\",\n    \"breach\",\n    \"bread\",\n    \"break\",\n    \"breast\",\n    \"breath\",\n    \"bred\",\n    \"breed\",\n    \"breeze\",\n    \"brew\",\n    \"bribe\",\n    \"brick\",\n    \"bride\",\n    \"bridge\",\n    \"brief\",\n    \"bright\",\n    \"brim\",\n    \"brine\",\n    \"bring\",\n    \"brink\",\n    \"brisk\",\n    \"broad\",\n    \"broke\",\n    \"broken\",\n    \"bronze\",\n    \"brook\",\n    \"broom\",\n    \"brown\",\n    \"bruise\",\n    \"brush\",\n    \"brutal\",\n    \"brute\",\n    \"bubble\",\n    \"buck\",\n    \"bucket\",\n    \"buckle\",\n    \"budget\",\n    \"buffet\",\n    \"buggy\",\n    \"build\",\n    \"bulb\",\n    \"bulge\",\n    \"bulk\",\n    \"bulky\",\n    \"bull\",\n    \"bullet\",\n    \"bully\",\n    \"bump\",\n    \"bumpy\",\n    \"bunch\",\n    \"bundle\",\n    \"bunk\",\n    \"bunny\",\n    \"burden\",\n    \"bureau\",\n    \"burial\",\n    \"buried\",\n    \"burly\",\n    \"burn\",\n    \"burnt\",\n    \"burrow\",\n    \"burst\",\n    \"bury\",\n    \"bus\",\n    \"bush\",\n    \"bust\",\n    \"bustle\",\n    \"busy\",\n    \"but\",\n    \"butler\",\n    \"butt\",\n    \"butter\",\n    \"button\",\n    \"buy\",\n    \"buyer\",\n    \"buzz\",\n    \"bye\",\n    \"byte\",\n    \"cab\",\n    \"cabin\",\n    \"cable\",\n    \"cache\",\n    \"cactus\",\n    \"caesar\",\n    \"cage\",\n    \"cairo\",\n    \"cajun\",\n    \"cajole\",\n    \"cake\",\n    \"calf\",\n    \"call\",\n    \"caller\",\n    \"calm\",\n    \"calmly\",\n    \"came\",\n    \"camel\",\n    \"camera\",\n    \"camp\",\n    \"campus\",\n    \"can\",\n    \"canada\",\n    \"canal\",\n    \"canary\",\n    \"cancel\",\n    \"cancer\",\n    \"candid\",\n    \"candle\",\n    \"candy\",\n    \"cane\",\n    \"canine\",\n    \"canoe\",\n    \"canopy\",\n    \"canvas\",\n    \"canyon\",\n    \"cap\",\n    \"cape\",\n    \"car\",\n    \"carbon\",\n    \"card\",\n    \"care\",\n    \"career\",\n    \"caress\",\n    \"cargo\",\n    \"carl\",\n    \"carnal\",\n    \"carol\",\n    \"carp\",\n    \"carpet\",\n    \"carrot\",\n    \"carry\",\n    \"cart\",\n    \"cartel\",\n    \"case\",\n    \"cash\",\n    \"cask\",\n    \"cast\",\n    \"castle\",\n    \"casual\",\n    \"cat\",\n    \"catch\",\n    \"cater\",\n    \"cattle\",\n    \"caught\",\n    \"causal\",\n    \"cause\",\n    \"cave\",\n    \"cease\",\n    \"celery\",\n    \"cell\",\n    \"cellar\",\n    \"celtic\",\n    \"cement\",\n    \"censor\",\n    \"census\",\n    \"cent\",\n    \"cereal\",\n    \"chain\",\n    \"chair\",\n    \"chalk\",\n    \"chalky\",\n    \"champ\",\n    \"chance\",\n    \"change\",\n    \"chant\",\n    \"chaos\",\n    \"chap\",\n    \"chapel\",\n    \"charge\",\n    \"charm\",\n    \"chart\",\n    \"chase\",\n    \"chat\",\n    \"cheap\",\n    \"cheat\",\n    \"check\",\n    \"cheek\",\n    \"cheeky\",\n    \"cheer\",\n    \"cheery\",\n    \"cheese\",\n    \"chef\",\n    \"cheque\",\n    \"cherry\",\n    \"chess\",\n    \"chest\",\n    \"chew\",\n    \"chic\",\n    \"chick\",\n    \"chief\",\n    \"child\",\n    \"chile\",\n    \"chill\",\n    \"chilly\",\n    \"chin\",\n    \"china\",\n    \"chip\",\n    \"choice\",\n    \"choir\",\n    \"choose\",\n    \"chop\",\n    \"choppy\",\n    \"chord\",\n    \"chorus\",\n    \"chose\",\n    \"chosen\",\n    \"chris\",\n    \"chrome\",\n    \"chunk\",\n    \"chunky\",\n    \"church\",\n    \"cider\",\n    \"cigar\",\n    \"cinema\",\n    \"circa\",\n    \"circle\",\n    \"circus\",\n    \"cite\",\n    \"city\",\n    \"civic\",\n    \"civil\",\n    \"clad\",\n    \"claim\",\n    \"clammy\",\n    \"clan\",\n    \"clap\",\n    \"clash\",\n    \"clasp\",\n    \"class\",\n    \"clause\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"clear\",\n    \"clergy\",\n    \"clerk\",\n    \"clever\",\n    \"click\",\n    \"client\",\n    \"cliff\",\n    \"climax\",\n    \"climb\",\n    \"clinch\",\n    \"cling\",\n    \"clinic\",\n    \"clip\",\n    \"cloak\",\n    \"clock\",\n    \"clone\",\n    \"close\",\n    \"closer\",\n    \"closet\",\n    \"cloth\",\n    \"cloud\",\n    \"cloudy\",\n    \"clout\",\n    \"clown\",\n    \"club\",\n    \"clue\",\n    \"clumsy\",\n    \"clung\",\n    \"clutch\",\n    \"coach\",\n    \"coal\",\n    \"coarse\",\n    \"coast\",\n    \"coat\",\n    \"coax\",\n    \"cobalt\",\n    \"cobra\",\n    \"coca\",\n    \"cock\",\n    \"cocoa\",\n    \"code\",\n    \"coffee\",\n    \"coffin\",\n    \"cohort\",\n    \"coil\",\n    \"coin\",\n    \"coke\",\n    \"cold\",\n    \"collar\",\n    \"colon\",\n    \"colony\",\n    \"colt\",\n    \"column\",\n    \"comb\",\n    \"combat\",\n    \"come\",\n    \"comedy\",\n    \"comic\",\n    \"commit\",\n    \"common\",\n    \"compel\",\n    \"comply\",\n    \"concur\",\n    \"cone\",\n    \"confer\",\n    \"congo\",\n    \"consul\",\n    \"convex\",\n    \"convey\",\n    \"convoy\",\n    \"cook\",\n    \"cool\",\n    \"cope\",\n    \"copper\",\n    \"copy\",\n    \"coral\",\n    \"cord\",\n    \"core\",\n    \"cork\",\n    \"corn\",\n    \"corner\",\n    \"corps\",\n    \"corpse\",\n    \"corpus\",\n    \"cortex\",\n    \"cosmic\",\n    \"cosmos\",\n    \"cost\",\n    \"costly\",\n    \"cotton\",\n    \"couch\",\n    \"cough\",\n    \"could\",\n    \"count\",\n    \"county\",\n    \"coup\",\n    \"couple\",\n    \"coupon\",\n    \"course\",\n    \"court\",\n    \"cousin\",\n    \"cove\",\n    \"cover\",\n    \"covert\",\n    \"cow\",\n    \"coward\",\n    \"cowboy\",\n    \"cozy\",\n    \"crab\",\n    \"crack\",\n    \"cradle\",\n    \"craft\",\n    \"crafty\",\n    \"crag\",\n    \"crane\",\n    \"crash\",\n    \"crate\",\n    \"crater\",\n    \"crawl\",\n    \"crazy\",\n    \"creak\",\n    \"cream\",\n    \"creamy\",\n    \"create\",\n    \"credit\",\n    \"creed\",\n    \"creek\",\n    \"creep\",\n    \"creepy\",\n    \"crept\",\n    \"crest\",\n    \"crew\",\n    \"cried\",\n    \"crime\",\n    \"crisis\",\n    \"crisp\",\n    \"critic\",\n    \"crook\",\n    \"crop\",\n    \"cross\",\n    \"crow\",\n    \"crowd\",\n    \"crown\",\n    \"crude\",\n    \"cruel\",\n    \"cruise\",\n    \"crunch\",\n    \"crush\",\n    \"crust\",\n    \"crux\",\n    \"cry\",\n    \"crypt\",\n    \"cuba\",\n    \"cube\",\n    \"cubic\",\n    \"cuckoo\",\n    \"cuff\",\n    \"cult\",\n    \"cup\",\n    \"curb\",\n    \"cure\",\n    \"curfew\",\n    \"curl\",\n    \"curry\",\n    \"curse\",\n    \"cursor\",\n    \"curve\",\n    \"cuss\",\n    \"custom\",\n    \"cut\",\n    \"cute\",\n    \"cycle\",\n    \"cyclic\",\n    \"cynic\",\n    \"czech\",\n    \"dad\",\n    \"daddy\",\n    \"dagger\",\n    \"daily\",\n    \"dairy\",\n    \"daisy\",\n    \"dale\",\n    \"dam\",\n    \"damage\",\n    \"damp\",\n    \"dampen\",\n    \"dance\",\n    \"danger\",\n    \"danish\",\n    \"dare\",\n    \"dark\",\n    \"darken\",\n    \"darn\",\n    \"dart\",\n    \"dash\",\n    \"data\",\n    \"date\",\n    \"david\",\n    \"dawn\",\n    \"day\",\n    \"dead\",\n    \"deadly\",\n    \"deaf\",\n    \"deal\",\n    \"dealer\",\n    \"dean\",\n    \"dear\",\n    \"death\",\n    \"debate\",\n    \"debit\",\n    \"debris\",\n    \"debt\",\n    \"debtor\",\n    \"decade\",\n    \"decay\",\n    \"decent\",\n    \"decide\",\n    \"deck\",\n    \"decor\",\n    \"decree\",\n    \"deduce\",\n    \"deed\",\n    \"deep\",\n    \"deeply\",\n    \"deer\",\n    \"defeat\",\n    \"defect\",\n    \"defend\",\n    \"defer\",\n    \"define\",\n    \"defy\",\n    \"degree\",\n    \"deity\",\n    \"delay\",\n    \"delete\",\n    \"delhi\",\n    \"delta\",\n    \"demand\",\n    \"demise\",\n    \"demo\",\n    \"demure\",\n    \"denial\",\n    \"denote\",\n    \"dense\",\n    \"dental\",\n    \"deny\",\n    \"depart\",\n    \"depend\",\n    \"depict\",\n    \"deploy\",\n    \"depot\",\n    \"depth\",\n    \"deputy\",\n    \"derive\",\n    \"desert\",\n    \"design\",\n    \"desire\",\n    \"desist\",\n    \"desk\",\n    \"detail\",\n    \"detect\",\n    \"deter\",\n    \"detest\",\n    \"detour\",\n    \"device\",\n    \"devise\",\n    \"devoid\",\n    \"devote\",\n    \"devour\",\n    \"dial\",\n    \"diana\",\n    \"diary\",\n    \"dice\",\n    \"dictum\",\n    \"did\",\n    \"die\",\n    \"diesel\",\n    \"diet\",\n    \"differ\",\n    \"dig\",\n    \"digest\",\n    \"digit\",\n    \"dine\",\n    \"dinghy\",\n    \"dinner\",\n    \"diode\",\n    \"dip\",\n    \"dire\",\n    \"direct\",\n    \"dirt\",\n    \"dirty\",\n    \"disc\",\n    \"disco\",\n    \"dish\",\n    \"disk\",\n    \"dismal\",\n    \"dispel\",\n    \"ditch\",\n    \"dive\",\n    \"divert\",\n    \"divide\",\n    \"divine\",\n    \"dizzy\",\n    \"docile\",\n    \"dock\",\n    \"doctor\",\n    \"dog\",\n    \"dogma\",\n    \"dole\",\n    \"doll\",\n    \"dollar\",\n    \"dolly\",\n    \"domain\",\n    \"dome\",\n    \"domino\",\n    \"donate\",\n    \"done\",\n    \"donkey\",\n    \"donor\",\n    \"doom\",\n    \"door\",\n    \"dorsal\",\n    \"dose\",\n    \"dot\",\n    \"double\",\n    \"doubt\",\n    \"dough\",\n    \"dour\",\n    \"dove\",\n    \"down\",\n    \"dozen\",\n    \"draft\",\n    \"drag\",\n    \"dragon\",\n    \"drain\",\n    \"drama\",\n    \"drank\",\n    \"draw\",\n    \"drawer\",\n    \"dread\",\n    \"dream\",\n    \"dreary\",\n    \"dress\",\n    \"drew\",\n    \"dried\",\n    \"drift\",\n    \"drill\",\n    \"drink\",\n    \"drip\",\n    \"drive\",\n    \"driver\",\n    \"drop\",\n    \"drove\",\n    \"drown\",\n    \"drug\",\n    \"drum\",\n    \"drunk\",\n    \"dry\",\n    \"dual\",\n    \"duck\",\n    \"duct\",\n    \"due\",\n    \"duel\",\n    \"duet\",\n    \"duke\",\n    \"dull\",\n    \"duly\",\n    \"dumb\",\n    \"dummy\",\n    \"dump\",\n    \"dune\",\n    \"dung\",\n    \"duress\",\n    \"during\",\n    \"dusk\",\n    \"dust\",\n    \"dusty\",\n    \"dutch\",\n    \"duty\",\n    \"dwarf\",\n    \"dwell\",\n    \"dyer\",\n    \"dying\",\n    \"dynamo\",\n    \"each\",\n    \"eager\",\n    \"eagle\",\n    \"ear\",\n    \"earl\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"ease\",\n    \"easel\",\n    \"easily\",\n    \"east\",\n    \"easter\",\n    \"easy\",\n    \"eat\",\n    \"eaten\",\n    \"eater\",\n    \"echo\",\n    \"eddy\",\n    \"eden\",\n    \"edge\",\n    \"edible\",\n    \"edict\",\n    \"edit\",\n    \"editor\",\n    \"eel\",\n    \"eerie\",\n    \"eerily\",\n    \"effect\",\n    \"effort\",\n    \"egg\",\n    \"ego\",\n    \"eight\",\n    \"eighth\",\n    \"eighty\",\n    \"either\",\n    \"elbow\",\n    \"elder\",\n    \"eldest\",\n    \"elect\",\n    \"eleven\",\n    \"elicit\",\n    \"elite\",\n    \"else\",\n    \"elude\",\n    \"elves\",\n    \"embark\",\n    \"emblem\",\n    \"embryo\",\n    \"emerge\",\n    \"emit\",\n    \"empire\",\n    \"employ\",\n    \"empty\",\n    \"enable\",\n    \"enamel\",\n    \"end\",\n    \"endure\",\n    \"enemy\",\n    \"energy\",\n    \"engage\",\n    \"engine\",\n    \"enjoy\",\n    \"enlist\",\n    \"enough\",\n    \"ensure\",\n    \"entail\",\n    \"enter\",\n    \"entire\",\n    \"entry\",\n    \"envoy\",\n    \"envy\",\n    \"enzyme\",\n    \"epic\",\n    \"epoch\",\n    \"equal\",\n    \"equate\",\n    \"equip\",\n    \"equity\",\n    \"era\",\n    \"erect\",\n    \"eric\",\n    \"erode\",\n    \"erotic\",\n    \"errant\",\n    \"error\",\n    \"escape\",\n    \"escort\",\n    \"essay\",\n    \"essex\",\n    \"estate\",\n    \"esteem\",\n    \"ethic\",\n    \"ethnic\",\n    \"europe\",\n    \"evade\",\n    \"eve\",\n    \"even\",\n    \"event\",\n    \"ever\",\n    \"every\",\n    \"evict\",\n    \"evil\",\n    \"evoke\",\n    \"evolve\",\n    \"exact\",\n    \"exam\",\n    \"exceed\",\n    \"excel\",\n    \"except\",\n    \"excess\",\n    \"excise\",\n    \"excite\",\n    \"excuse\",\n    \"exempt\",\n    \"exert\",\n    \"exile\",\n    \"exist\",\n    \"exit\",\n    \"exodus\",\n    \"exotic\",\n    \"expand\",\n    \"expect\",\n    \"expert\",\n    \"expire\",\n    \"export\",\n    \"expose\",\n    \"extend\",\n    \"extra\",\n    \"eye\",\n    \"eyed\",\n    \"fabric\",\n    \"face\",\n    \"facial\",\n    \"fact\",\n    \"factor\",\n    \"fade\",\n    \"fail\",\n    \"faint\",\n    \"fair\",\n    \"fairly\",\n    \"fairy\",\n    \"faith\",\n    \"fake\",\n    \"falcon\",\n    \"fall\",\n    \"false\",\n    \"falter\",\n    \"fame\",\n    \"family\",\n    \"famine\",\n    \"famous\",\n    \"fan\",\n    \"fancy\",\n    \"far\",\n    \"farce\",\n    \"fare\",\n    \"farm\",\n    \"farmer\",\n    \"fast\",\n    \"fasten\",\n    \"faster\",\n    \"fat\",\n    \"fatal\",\n    \"fate\",\n    \"father\",\n    \"fatty\",\n    \"fault\",\n    \"faulty\",\n    \"fauna\",\n    \"fear\",\n    \"feast\",\n    \"feat\",\n    \"fed\",\n    \"fee\",\n    \"feeble\",\n    \"feed\",\n    \"feel\",\n    \"feet\",\n    \"fell\",\n    \"fellow\",\n    \"felt\",\n    \"female\",\n    \"fence\",\n    \"fend\",\n    \"ferry\",\n    \"fetal\",\n    \"fetch\",\n    \"feudal\",\n    \"fever\",\n    \"few\",\n    \"fewer\",\n    \"fiasco\",\n    \"fiddle\",\n    \"field\",\n    \"fiend\",\n    \"fierce\",\n    \"fiery\",\n    \"fifth\",\n    \"fifty\",\n    \"fig\",\n    \"fight\",\n    \"figure\",\n    \"file\",\n    \"fill\",\n    \"filled\",\n    \"filler\",\n    \"film\",\n    \"filter\",\n    \"filth\",\n    \"filthy\",\n    \"final\",\n    \"finale\",\n    \"find\",\n    \"fine\",\n    \"finery\",\n    \"finger\",\n    \"finish\",\n    \"finite\",\n    \"fire\",\n    \"firm\",\n    \"firmly\",\n    \"first\",\n    \"fiscal\",\n    \"fish\",\n    \"fisher\",\n    \"fist\",\n    \"fit\",\n    \"fitful\",\n    \"five\",\n    \"fix\",\n    \"flag\",\n    \"flair\",\n    \"flak\",\n    \"flame\",\n    \"flank\",\n    \"flap\",\n    \"flare\",\n    \"flash\",\n    \"flask\",\n    \"flat\",\n    \"flavor\",\n    \"flaw\",\n    \"fled\",\n    \"flee\",\n    \"fleece\",\n    \"fleet\",\n    \"flesh\",\n    \"fleshy\",\n    \"flew\",\n    \"flick\",\n    \"flight\",\n    \"flimsy\",\n    \"flint\",\n    \"flirt\",\n    \"float\",\n    \"flock\",\n    \"flood\",\n    \"floor\",\n    \"floppy\",\n    \"flora\",\n    \"floral\",\n    \"flour\",\n    \"flow\",\n    \"flower\",\n    \"fluent\",\n    \"fluffy\",\n    \"fluid\",\n    \"flung\",\n    \"flurry\",\n    \"flush\",\n    \"flute\",\n    \"flux\",\n    \"fly\",\n    \"flyer\",\n    \"foal\",\n    \"foam\",\n    \"focal\",\n    \"focus\",\n    \"fog\",\n    \"foil\",\n    \"fold\",\n    \"folk\",\n    \"follow\",\n    \"folly\",\n    \"fond\",\n    \"fondly\",\n    \"font\",\n    \"food\",\n    \"fool\",\n    \"foot\",\n    \"for\",\n    \"forbid\",\n    \"force\",\n    \"ford\",\n    \"forest\",\n    \"forge\",\n    \"forget\",\n    \"fork\",\n    \"form\",\n    \"formal\",\n    \"format\",\n    \"former\",\n    \"fort\",\n    \"forth\",\n    \"forty\",\n    \"forum\",\n    \"fossil\",\n    \"foster\",\n    \"foul\",\n    \"found\",\n    \"four\",\n    \"fourth\",\n    \"fox\",\n    \"foyer\",\n    \"frail\",\n    \"frame\",\n    \"franc\",\n    \"france\",\n    \"frank\",\n    \"fraud\",\n    \"fred\",\n    \"free\",\n    \"freed\",\n    \"freely\",\n    \"freeze\",\n    \"french\",\n    \"frenzy\",\n    \"fresh\",\n    \"friar\",\n    \"friday\",\n    \"fridge\",\n    \"fried\",\n    \"friend\",\n    \"fright\",\n    \"fringe\",\n    \"frock\",\n    \"frog\",\n    \"from\",\n    \"front\",\n    \"frost\",\n    \"frosty\",\n    \"frown\",\n    \"frozen\",\n    \"frugal\",\n    \"fruit\",\n    \"fry\",\n    \"fudge\",\n    \"fuel\",\n    \"full\",\n    \"fully\",\n    \"fumes\",\n    \"fun\",\n    \"fund\",\n    \"funny\",\n    \"fur\",\n    \"furry\",\n    \"fury\",\n    \"fuse\",\n    \"fusion\",\n    \"fuss\",\n    \"fussy\",\n    \"futile\",\n    \"future\",\n    \"fuzzy\",\n    \"gadget\",\n    \"gain\",\n    \"gala\",\n    \"galaxy\",\n    \"gale\",\n    \"gall\",\n    \"galley\",\n    \"gallon\",\n    \"gallop\",\n    \"gamble\",\n    \"game\",\n    \"gamma\",\n    \"gandhi\",\n    \"gang\",\n    \"gap\",\n    \"garage\",\n    \"garden\",\n    \"garlic\",\n    \"gas\",\n    \"gasp\",\n    \"gate\",\n    \"gather\",\n    \"gauge\",\n    \"gaunt\",\n    \"gave\",\n    \"gaze\",\n    \"gear\",\n    \"geese\",\n    \"gem\",\n    \"gemini\",\n    \"gender\",\n    \"gene\",\n    \"geneva\",\n    \"genial\",\n    \"genius\",\n    \"genre\",\n    \"gentle\",\n    \"gently\",\n    \"gentry\",\n    \"genus\",\n    \"george\",\n    \"germ\",\n    \"get\",\n    \"ghetto\",\n    \"ghost\",\n    \"giant\",\n    \"gift\",\n    \"giggle\",\n    \"gill\",\n    \"gilt\",\n    \"ginger\",\n    \"girl\",\n    \"give\",\n    \"given\",\n    \"glad\",\n    \"glade\",\n    \"glance\",\n    \"gland\",\n    \"glare\",\n    \"glass\",\n    \"glassy\",\n    \"gleam\",\n    \"glee\",\n    \"glide\",\n    \"global\",\n    \"globe\",\n    \"gloom\",\n    \"gloomy\",\n    \"gloria\",\n    \"glory\",\n    \"gloss\",\n    \"glossy\",\n    \"glove\",\n    \"glow\",\n    \"glue\",\n    \"gnat\",\n    \"gnu\",\n    \"goal\",\n    \"goat\",\n    \"gold\",\n    \"golden\",\n    \"golf\",\n    \"gone\",\n    \"gong\",\n    \"goo\",\n    \"good\",\n    \"goose\",\n    \"gore\",\n    \"gorge\",\n    \"gory\",\n    \"gosh\",\n    \"gospel\",\n    \"gossip\",\n    \"got\",\n    \"gothic\",\n    \"govern\",\n    \"gown\",\n    \"grab\",\n    \"grace\",\n    \"grade\",\n    \"grail\",\n    \"grain\",\n    \"grand\",\n    \"grant\",\n    \"grape\",\n    \"graph\",\n    \"grasp\",\n    \"grass\",\n    \"grassy\",\n    \"grate\",\n    \"grave\",\n    \"gravel\",\n    \"gravy\",\n    \"grease\",\n    \"greasy\",\n    \"great\",\n    \"greece\",\n    \"greed\",\n    \"greedy\",\n    \"greek\",\n    \"green\",\n    \"greet\",\n    \"grew\",\n    \"grey\",\n    \"grid\",\n    \"grief\",\n    \"grill\",\n    \"grim\",\n    \"grin\",\n    \"grind\",\n    \"grip\",\n    \"grit\",\n    \"gritty\",\n    \"groan\",\n    \"groin\",\n    \"groom\",\n    \"groove\",\n    \"gross\",\n    \"ground\",\n    \"group\",\n    \"grove\",\n    \"grow\",\n    \"grown\",\n    \"growth\",\n    \"grudge\",\n    \"grunt\",\n    \"guard\",\n    \"guess\",\n    \"guest\",\n    \"guide\",\n    \"guild\",\n    \"guilt\",\n    \"guilty\",\n    \"guise\",\n    \"guitar\",\n    \"gulf\",\n    \"gully\",\n    \"gun\",\n    \"gunman\",\n    \"guru\",\n    \"gut\",\n    \"guy\",\n    \"gypsy\",\n    \"habit\",\n    \"hack\",\n    \"had\",\n    \"hail\",\n    \"hair\",\n    \"hairy\",\n    \"haiti\",\n    \"hale\",\n    \"half\",\n    \"hall\",\n    \"halt\",\n    \"hamlet\",\n    \"hammer\",\n    \"hand\",\n    \"handle\",\n    \"handy\",\n    \"hang\",\n    \"hangar\",\n    \"hanoi\",\n    \"happen\",\n    \"happy\",\n    \"harass\",\n    \"harbor\",\n    \"hard\",\n    \"harder\",\n    \"hardly\",\n    \"hare\",\n    \"harem\",\n    \"harm\",\n    \"harp\",\n    \"harry\",\n    \"harsh\",\n    \"has\",\n    \"hash\",\n    \"hassle\",\n    \"haste\",\n    \"hasten\",\n    \"hasty\",\n    \"hat\",\n    \"hatch\",\n    \"hate\",\n    \"haul\",\n    \"haunt\",\n    \"havana\",\n    \"have\",\n    \"haven\",\n    \"havoc\",\n    \"hawaii\",\n    \"hawk\",\n    \"hay\",\n    \"hazard\",\n    \"haze\",\n    \"hazel\",\n    \"hazy\",\n    \"head\",\n    \"heal\",\n    \"health\",\n    \"heap\",\n    \"hear\",\n    \"heard\",\n    \"heart\",\n    \"hearth\",\n    \"hearty\",\n    \"heat\",\n    \"heater\",\n    \"heaven\",\n    \"heavy\",\n    \"hebrew\",\n    \"heck\",\n    \"hectic\",\n    \"hedge\",\n    \"heel\",\n    \"hefty\",\n    \"height\",\n    \"heir\",\n    \"held\",\n    \"helium\",\n    \"helix\",\n    \"hell\",\n    \"hello\",\n    \"helm\",\n    \"helmet\",\n    \"help\",\n    \"hemp\",\n    \"hence\",\n    \"henry\",\n    \"her\",\n    \"herald\",\n    \"herb\",\n    \"herd\",\n    \"here\",\n    \"hereby\",\n    \"hermes\",\n    \"hernia\",\n    \"hero\",\n    \"heroic\",\n    \"heroin\",\n    \"hey\",\n    \"heyday\",\n    \"hick\",\n    \"hidden\",\n    \"hide\",\n    \"high\",\n    \"higher\",\n    \"highly\",\n    \"hill\",\n    \"him\",\n    \"hind\",\n    \"hinder\",\n    \"hint\",\n    \"hippie\",\n    \"hire\",\n    \"his\",\n    \"hiss\",\n    \"hit\",\n    \"hive\",\n    \"hoard\",\n    \"hoarse\",\n    \"hobby\",\n    \"hockey\",\n    \"hold\",\n    \"holder\",\n    \"hole\",\n    \"hollow\",\n    \"holly\",\n    \"holy\",\n    \"home\",\n    \"honest\",\n    \"honey\",\n    \"hood\",\n    \"hook\",\n    \"hope\",\n    \"horn\",\n    \"horrid\",\n    \"horror\",\n    \"horse\",\n    \"hose\",\n    \"host\",\n    \"hot\",\n    \"hotel\",\n    \"hound\",\n    \"hour\",\n    \"house\",\n    \"hover\",\n    \"how\",\n    \"huge\",\n    \"hull\",\n    \"human\",\n    \"humane\",\n    \"humble\",\n    \"humid\",\n    \"hung\",\n    \"hunger\",\n    \"hungry\",\n    \"hunt\",\n    \"hurdle\",\n    \"hurl\",\n    \"hurry\",\n    \"hurt\",\n    \"hush\",\n    \"hut\",\n    \"hybrid\",\n    \"hymn\",\n    \"hyphen\",\n    \"ice\",\n    \"icing\",\n    \"icon\",\n    \"idaho\",\n    \"idea\",\n    \"ideal\",\n    \"idiom\",\n    \"idiot\",\n    \"idle\",\n    \"idly\",\n    \"idol\",\n    \"ignite\",\n    \"ignore\",\n    \"ill\",\n    \"image\",\n    \"immune\",\n    \"impact\",\n    \"imply\",\n    \"import\",\n    \"impose\",\n    \"inca\",\n    \"incest\",\n    \"inch\",\n    \"income\",\n    \"incur\",\n    \"indeed\",\n    \"index\",\n    \"india\",\n    \"indian\",\n    \"indoor\",\n    \"induce\",\n    \"inept\",\n    \"inert\",\n    \"infant\",\n    \"infect\",\n    \"infer\",\n    \"influx\",\n    \"inform\",\n    \"inject\",\n    \"injure\",\n    \"injury\",\n    \"ink\",\n    \"inlaid\",\n    \"inland\",\n    \"inlet\",\n    \"inmate\",\n    \"inn\",\n    \"innate\",\n    \"inner\",\n    \"input\",\n    \"insane\",\n    \"insect\",\n    \"insert\",\n    \"inset\",\n    \"inside\",\n    \"insist\",\n    \"insult\",\n    \"insure\",\n    \"intact\",\n    \"intake\",\n    \"intend\",\n    \"inter\",\n    \"into\",\n    \"invade\",\n    \"invent\",\n    \"invest\",\n    \"invite\",\n    \"invoke\",\n    \"inward\",\n    \"iowa\",\n    \"iran\",\n    \"iraq\",\n    \"irish\",\n    \"iron\",\n    \"ironic\",\n    \"irony\",\n    \"isaac\",\n    \"isabel\",\n    \"island\",\n    \"isle\",\n    \"israel\",\n    \"issue\",\n    \"italy\",\n    \"itch\",\n    \"item\",\n    \"itself\",\n    \"ivan\",\n    \"ivory\",\n    \"jack\",\n    \"jacket\",\n    \"jacob\",\n    \"jade\",\n    \"jaguar\",\n    \"jail\",\n    \"james\",\n    \"jane\",\n    \"japan\",\n    \"jargon\",\n    \"java\",\n    \"jaw\",\n    \"jazz\",\n    \"jeep\",\n    \"jelly\",\n    \"jerky\",\n    \"jest\",\n    \"jet\",\n    \"jewel\",\n    \"jewish\",\n    \"jim\",\n    \"job\",\n    \"jock\",\n    \"jockey\",\n    \"joe\",\n    \"john\",\n    \"join\",\n    \"joint\",\n    \"joke\",\n    \"jolly\",\n    \"jolt\",\n    \"jordan\",\n    \"joseph\",\n    \"joy\",\n    \"joyful\",\n    \"joyous\",\n    \"judge\",\n    \"judy\",\n    \"juice\",\n    \"juicy\",\n    \"july\",\n    \"jumble\",\n    \"jumbo\",\n    \"jump\",\n    \"june\",\n    \"jungle\",\n    \"junior\",\n    \"junk\",\n    \"junta\",\n    \"jury\",\n    \"just\",\n    \"kansas\",\n    \"karate\",\n    \"karl\",\n    \"keel\",\n    \"keen\",\n    \"keep\",\n    \"keeper\",\n    \"kenya\",\n    \"kept\",\n    \"kernel\",\n    \"kettle\",\n    \"key\",\n    \"khaki\",\n    \"kick\",\n    \"kid\",\n    \"kidnap\",\n    \"kidney\",\n    \"kill\",\n    \"killer\",\n    \"kin\",\n    \"kind\",\n    \"kindly\",\n    \"king\",\n    \"kiss\",\n    \"kite\",\n    \"kitten\",\n    \"knack\",\n    \"knee\",\n    \"kneel\",\n    \"knew\",\n    \"knife\",\n    \"knight\",\n    \"knit\",\n    \"knob\",\n    \"knock\",\n    \"knot\",\n    \"know\",\n    \"known\",\n    \"koran\",\n    \"korea\",\n    \"kuwait\",\n    \"label\",\n    \"lace\",\n    \"lack\",\n    \"lad\",\n    \"ladder\",\n    \"laden\",\n    \"lady\",\n    \"lagoon\",\n    \"laity\",\n    \"lake\",\n    \"lamb\",\n    \"lame\",\n    \"lamp\",\n    \"lance\",\n    \"land\",\n    \"lane\",\n    \"lap\",\n    \"lapse\",\n    \"large\",\n    \"larval\",\n    \"laser\",\n    \"last\",\n    \"latch\",\n    \"late\",\n    \"lately\",\n    \"latent\",\n    \"later\",\n    \"latest\",\n    \"latin\",\n    \"latter\",\n    \"laugh\",\n    \"launch\",\n    \"lava\",\n    \"lavish\",\n    \"law\",\n    \"lawful\",\n    \"lawn\",\n    \"lawyer\",\n    \"lay\",\n    \"layer\",\n    \"layman\",\n    \"lazy\",\n    \"lead\",\n    \"leader\",\n    \"leaf\",\n    \"leafy\",\n    \"league\",\n    \"leak\",\n    \"leaky\",\n    \"lean\",\n    \"leap\",\n    \"learn\",\n    \"lease\",\n    \"leash\",\n    \"least\",\n    \"leave\",\n    \"led\",\n    \"ledge\",\n    \"left\",\n    \"leg\",\n    \"legacy\",\n    \"legal\",\n    \"legend\",\n    \"legion\",\n    \"lemon\",\n    \"lend\",\n    \"length\",\n    \"lens\",\n    \"lent\",\n    \"leo\",\n    \"leper\",\n    \"lesion\",\n    \"less\",\n    \"lessen\",\n    \"lesser\",\n    \"lesson\",\n    \"lest\",\n    \"let\",\n    \"lethal\",\n    \"letter\",\n    \"level\",\n    \"lever\",\n    \"levy\",\n    \"lewis\",\n    \"liable\",\n    \"liar\",\n    \"libel\",\n    \"libya\",\n    \"lice\",\n    \"lick\",\n    \"lid\",\n    \"lie\",\n    \"lied\",\n    \"lier\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"like\",\n    \"likely\",\n    \"limb\",\n    \"lime\",\n    \"limit\",\n    \"limp\",\n    \"line\",\n    \"linear\",\n    \"linen\",\n    \"linger\",\n    \"link\",\n    \"lint\",\n    \"lion\",\n    \"lip\",\n    \"liquid\",\n    \"liquor\",\n    \"list\",\n    \"listen\",\n    \"lit\",\n    \"live\",\n    \"lively\",\n    \"liver\",\n    \"liz\",\n    \"lizard\",\n    \"load\",\n    \"loaf\",\n    \"loan\",\n    \"lobby\",\n    \"lobe\",\n    \"local\",\n    \"locate\",\n    \"lock\",\n    \"locus\",\n    \"lodge\",\n    \"loft\",\n    \"lofty\",\n    \"log\",\n    \"logic\",\n    \"logo\",\n    \"london\",\n    \"lone\",\n    \"lonely\",\n    \"long\",\n    \"longer\",\n    \"look\",\n    \"loop\",\n    \"loose\",\n    \"loosen\",\n    \"loot\",\n    \"lord\",\n    \"lorry\",\n    \"lose\",\n    \"loss\",\n    \"lost\",\n    \"lot\",\n    \"lotion\",\n    \"lotus\",\n    \"loud\",\n    \"loudly\",\n    \"lounge\",\n    \"lousy\",\n    \"love\",\n    \"lovely\",\n    \"lover\",\n    \"low\",\n    \"lower\",\n    \"lowest\",\n    \"loyal\",\n    \"lucid\",\n    \"luck\",\n    \"lucky\",\n    \"lucy\",\n    \"lull\",\n    \"lump\",\n    \"lumpy\",\n    \"lunacy\",\n    \"lunar\",\n    \"lunch\",\n    \"lung\",\n    \"lure\",\n    \"lurid\",\n    \"lush\",\n    \"lust\",\n    \"lute\",\n    \"luther\",\n    \"luxury\",\n    \"lying\",\n    \"lymph\",\n    \"lynch\",\n    \"lyric\",\n    \"macho\",\n    \"macro\",\n    \"mad\",\n    \"madam\",\n    \"made\",\n    \"mafia\",\n    \"magic\",\n    \"magma\",\n    \"magnet\",\n    \"magnum\",\n    \"magpie\",\n    \"maid\",\n    \"maiden\",\n    \"mail\",\n    \"main\",\n    \"mainly\",\n    \"major\",\n    \"make\",\n    \"maker\",\n    \"male\",\n    \"malice\",\n    \"mall\",\n    \"malt\",\n    \"mammal\",\n    \"manage\",\n    \"mane\",\n    \"mania\",\n    \"manic\",\n    \"manner\",\n    \"manor\",\n    \"mantle\",\n    \"manual\",\n    \"manure\",\n    \"many\",\n    \"map\",\n    \"maple\",\n    \"marble\",\n    \"march\",\n    \"mare\",\n    \"margin\",\n    \"maria\",\n    \"marina\",\n    \"mark\",\n    \"market\",\n    \"marry\",\n    \"mars\",\n    \"marsh\",\n    \"martin\",\n    \"martyr\",\n    \"mary\",\n    \"mask\",\n    \"mason\",\n    \"mass\",\n    \"mast\",\n    \"master\",\n    \"mat\",\n    \"match\",\n    \"mate\",\n    \"matrix\",\n    \"matter\",\n    \"mature\",\n    \"maxim\",\n    \"may\",\n    \"maybe\",\n    \"mayor\",\n    \"maze\",\n    \"mead\",\n    \"meadow\",\n    \"meal\",\n    \"mean\",\n    \"meant\",\n    \"meat\",\n    \"medal\",\n    \"media\",\n    \"median\",\n    \"medic\",\n    \"medium\",\n    \"meet\",\n    \"mellow\",\n    \"melody\",\n    \"melon\",\n    \"melt\",\n    \"member\",\n    \"memo\",\n    \"memory\",\n    \"menace\",\n    \"mend\",\n    \"mental\",\n    \"mentor\",\n    \"menu\",\n    \"mercy\",\n    \"mere\",\n    \"merely\",\n    \"merge\",\n    \"merger\",\n    \"merit\",\n    \"merry\",\n    \"mesh\",\n    \"mess\",\n    \"messy\",\n    \"met\",\n    \"metal\",\n    \"meter\",\n    \"method\",\n    \"methyl\",\n    \"metric\",\n    \"metro\",\n    \"mexico\",\n    \"miami\",\n    \"mickey\",\n    \"mid\",\n    \"midday\",\n    \"middle\",\n    \"midst\",\n    \"midway\",\n    \"might\",\n    \"mighty\",\n    \"mild\",\n    \"mildew\",\n    \"mile\",\n    \"milk\",\n    \"milky\",\n    \"mill\",\n    \"mimic\",\n    \"mince\",\n    \"mind\",\n    \"mine\",\n    \"mini\",\n    \"mink\",\n    \"minor\",\n    \"mint\",\n    \"minus\",\n    \"minute\",\n    \"mire\",\n    \"mirror\",\n    \"mirth\",\n    \"misery\",\n    \"miss\",\n    \"mist\",\n    \"misty\",\n    \"mite\",\n    \"mix\",\n    \"moan\",\n    \"moat\",\n    \"mob\",\n    \"mobile\",\n    \"mock\",\n    \"mode\",\n    \"model\",\n    \"modem\",\n    \"modern\",\n    \"modest\",\n    \"modify\",\n    \"module\",\n    \"moist\",\n    \"molar\",\n    \"mold\",\n    \"mole\",\n    \"molten\",\n    \"moment\",\n    \"monday\",\n    \"money\",\n    \"monk\",\n    \"monkey\",\n    \"month\",\n    \"mood\",\n    \"moody\",\n    \"moon\",\n    \"moor\",\n    \"moral\",\n    \"morale\",\n    \"morbid\",\n    \"more\",\n    \"morgue\",\n    \"mortal\",\n    \"mortar\",\n    \"mosaic\",\n    \"moscow\",\n    \"moses\",\n    \"mosque\",\n    \"moss\",\n    \"most\",\n    \"mostly\",\n    \"moth\",\n    \"mother\",\n    \"motion\",\n    \"motive\",\n    \"motor\",\n    \"mount\",\n    \"mourn\",\n    \"mouse\",\n    \"mouth\",\n    \"move\",\n    \"movie\",\n    \"mrs\",\n    \"much\",\n    \"muck\",\n    \"mucus\",\n    \"mud\",\n    \"muddle\",\n    \"muddy\",\n    \"mule\",\n    \"mummy\",\n    \"munich\",\n    \"murder\",\n    \"murky\",\n    \"murmur\",\n    \"muscle\",\n    \"museum\",\n    \"music\",\n    \"mussel\",\n    \"must\",\n    \"mutant\",\n    \"mute\",\n    \"mutiny\",\n    \"mutter\",\n    \"mutton\",\n    \"mutual\",\n    \"muzzle\",\n    \"myopic\",\n    \"myriad\",\n    \"myself\",\n    \"mystic\",\n    \"myth\",\n    \"nadir\",\n    \"nail\",\n    \"naked\",\n    \"name\",\n    \"namely\",\n    \"nape\",\n    \"napkin\",\n    \"naples\",\n    \"narrow\",\n    \"nasal\",\n    \"nasty\",\n    \"nathan\",\n    \"nation\",\n    \"native\",\n    \"nature\",\n    \"nausea\",\n    \"naval\",\n    \"nave\",\n    \"navy\",\n    \"near\",\n    \"nearer\",\n    \"nearly\",\n    \"neat\",\n    \"neatly\",\n    \"neck\",\n    \"need\",\n    \"needle\",\n    \"needy\",\n    \"negate\",\n    \"neon\",\n    \"nepal\",\n    \"nephew\",\n    \"nerve\",\n    \"nest\",\n    \"net\",\n    \"neural\",\n    \"never\",\n    \"newly\",\n    \"next\",\n    \"nice\",\n    \"nicely\",\n    \"niche\",\n    \"nickel\",\n    \"niece\",\n    \"night\",\n    \"nile\",\n    \"nimble\",\n    \"nine\",\n    \"ninety\",\n    \"ninth\",\n    \"nobel\",\n    \"noble\",\n    \"nobody\",\n    \"node\",\n    \"noise\",\n    \"noisy\",\n    \"none\",\n    \"noon\",\n    \"nor\",\n    \"norm\",\n    \"normal\",\n    \"north\",\n    \"norway\",\n    \"nose\",\n    \"nosy\",\n    \"not\",\n    \"note\",\n    \"notice\",\n    \"notify\",\n    \"notion\",\n    \"noun\",\n    \"novel\",\n    \"novice\",\n    \"now\",\n    \"nozzle\",\n    \"null\",\n    \"numb\",\n    \"number\",\n    \"nurse\",\n    \"nut\",\n    \"nylon\",\n    \"nymph\",\n    \"oak\",\n    \"oar\",\n    \"oasis\",\n    \"oath\",\n    \"obese\",\n    \"obey\",\n    \"object\",\n    \"oblige\",\n    \"oboe\",\n    \"obtain\",\n    \"obtuse\",\n    \"occult\",\n    \"occupy\",\n    \"occur\",\n    \"ocean\",\n    \"octave\",\n    \"odd\",\n    \"off\",\n    \"offend\",\n    \"offer\",\n    \"office\",\n    \"offset\",\n    \"often\",\n    \"ohio\",\n    \"oil\",\n    \"oily\",\n    \"okay\",\n    \"old\",\n    \"older\",\n    \"oldest\",\n    \"olive\",\n    \"omega\",\n    \"omen\",\n    \"omit\",\n    \"once\",\n    \"one\",\n    \"onion\",\n    \"only\",\n    \"onset\",\n    \"onto\",\n    \"onus\",\n    \"onward\",\n    \"opaque\",\n    \"open\",\n    \"openly\",\n    \"opera\",\n    \"opium\",\n    \"oppose\",\n    \"optic\",\n    \"option\",\n    \"oracle\",\n    \"oral\",\n    \"orange\",\n    \"orbit\",\n    \"orchid\",\n    \"ordeal\",\n    \"order\",\n    \"organ\",\n    \"orgasm\",\n    \"orient\",\n    \"origin\",\n    \"ornate\",\n    \"orphan\",\n    \"oscar\",\n    \"other\",\n    \"otter\",\n    \"ought\",\n    \"ounce\",\n    \"our\",\n    \"out\",\n    \"outer\",\n    \"output\",\n    \"outset\",\n    \"oval\",\n    \"oven\",\n    \"over\",\n    \"overt\",\n    \"owe\",\n    \"owing\",\n    \"owl\",\n    \"own\",\n    \"owner\",\n    \"oxford\",\n    \"oxide\",\n    \"oxygen\",\n    \"oyster\",\n    \"ozone\",\n    \"pace\",\n    \"pack\",\n    \"packet\",\n    \"pact\",\n    \"pad\",\n    \"paddle\",\n    \"paddy\",\n    \"pagan\",\n    \"page\",\n    \"paid\",\n    \"pain\",\n    \"paint\",\n    \"pair\",\n    \"palace\",\n    \"pale\",\n    \"palm\",\n    \"pan\",\n    \"panama\",\n    \"panel\",\n    \"panic\",\n    \"papa\",\n    \"papal\",\n    \"paper\",\n    \"parade\",\n    \"parcel\",\n    \"pardon\",\n    \"parent\",\n    \"paris\",\n    \"parish\",\n    \"park\",\n    \"parody\",\n    \"parrot\",\n    \"part\",\n    \"partly\",\n    \"party\",\n    \"pascal\",\n    \"pass\",\n    \"past\",\n    \"paste\",\n    \"pastel\",\n    \"pastor\",\n    \"pastry\",\n    \"pat\",\n    \"patch\",\n    \"patent\",\n    \"path\",\n    \"patio\",\n    \"patrol\",\n    \"patron\",\n    \"paul\",\n    \"pause\",\n    \"pave\",\n    \"paw\",\n    \"pawn\",\n    \"pay\",\n    \"peace\",\n    \"peach\",\n    \"peak\",\n    \"pear\",\n    \"pearl\",\n    \"pedal\",\n    \"peel\",\n    \"peer\",\n    \"peking\",\n    \"pelvic\",\n    \"pelvis\",\n    \"pen\",\n    \"penal\",\n    \"pence\",\n    \"pencil\",\n    \"penny\",\n    \"people\",\n    \"pepper\",\n    \"per\",\n    \"perch\",\n    \"peril\",\n    \"period\",\n    \"perish\",\n    \"permit\",\n    \"person\",\n    \"peru\",\n    \"pest\",\n    \"pet\",\n    \"peter\",\n    \"petite\",\n    \"petrol\",\n    \"petty\",\n    \"phase\",\n    \"philip\",\n    \"phone\",\n    \"photo\",\n    \"phrase\",\n    \"piano\",\n    \"pick\",\n    \"picket\",\n    \"picnic\",\n    \"pie\",\n    \"piece\",\n    \"pier\",\n    \"pierce\",\n    \"piety\",\n    \"pig\",\n    \"pigeon\",\n    \"piggy\",\n    \"pike\",\n    \"pile\",\n    \"pill\",\n    \"pillar\",\n    \"pillow\",\n    \"pilot\",\n    \"pin\",\n    \"pinch\",\n    \"pine\",\n    \"pink\",\n    \"pint\",\n    \"pious\",\n    \"pipe\",\n    \"pirate\",\n    \"piss\",\n    \"pistol\",\n    \"piston\",\n    \"pit\",\n    \"pitch\",\n    \"pity\",\n    \"pivot\",\n    \"pixel\",\n    \"pizza\",\n    \"place\",\n    \"placid\",\n    \"plague\",\n    \"plain\",\n    \"plan\",\n    \"plane\",\n    \"planet\",\n    \"plank\",\n    \"plant\",\n    \"plasma\",\n    \"plate\",\n    \"play\",\n    \"player\",\n    \"plea\",\n    \"plead\",\n    \"please\",\n    \"pledge\",\n    \"plenty\",\n    \"plight\",\n    \"plot\",\n    \"plough\",\n    \"ploy\",\n    \"plug\",\n    \"plum\",\n    \"plump\",\n    \"plunge\",\n    \"plural\",\n    \"plus\",\n    \"plush\",\n    \"pocket\",\n    \"poem\",\n    \"poet\",\n    \"poetic\",\n    \"poetry\",\n    \"point\",\n    \"poison\",\n    \"poland\",\n    \"polar\",\n    \"pole\",\n    \"police\",\n    \"policy\",\n    \"polish\",\n    \"polite\",\n    \"poll\",\n    \"pollen\",\n    \"polo\",\n    \"pond\",\n    \"ponder\",\n    \"pony\",\n    \"pool\",\n    \"poor\",\n    \"poorly\",\n    \"pop\",\n    \"poppy\",\n    \"pore\",\n    \"pork\",\n    \"port\",\n    \"portal\",\n    \"pose\",\n    \"posh\",\n    \"post\",\n    \"postal\",\n    \"pot\",\n    \"potato\",\n    \"potent\",\n    \"pouch\",\n    \"pound\",\n    \"pour\",\n    \"powder\",\n    \"power\",\n    \"praise\",\n    \"pray\",\n    \"prayer\",\n    \"preach\",\n    \"prefer\",\n    \"prefix\",\n    \"press\",\n    \"pretty\",\n    \"price\",\n    \"pride\",\n    \"priest\",\n    \"primal\",\n    \"prime\",\n    \"prince\",\n    \"print\",\n    \"prior\",\n    \"prism\",\n    \"prison\",\n    \"privy\",\n    \"prize\",\n    \"probe\",\n    \"profit\",\n    \"prompt\",\n    \"prone\",\n    \"proof\",\n    \"propel\",\n    \"proper\",\n    \"prose\",\n    \"proton\",\n    \"proud\",\n    \"prove\",\n    \"proven\",\n    \"proxy\",\n    \"prune\",\n    \"pry\",\n    \"psalm\",\n    \"pseudo\",\n    \"psyche\",\n    \"pub\",\n    \"public\",\n    \"puff\",\n    \"pull\",\n    \"pulp\",\n    \"pulpit\",\n    \"pulsar\",\n    \"pulse\",\n    \"pump\",\n    \"punch\",\n    \"punish\",\n    \"punk\",\n    \"pupil\",\n    \"puppet\",\n    \"puppy\",\n    \"pure\",\n    \"purely\",\n    \"purge\",\n    \"purify\",\n    \"purple\",\n    \"purse\",\n    \"pursue\",\n    \"push\",\n    \"pushy\",\n    \"put\",\n    \"putt\",\n    \"puzzle\",\n    \"quaint\",\n    \"quake\",\n    \"quarry\",\n    \"quart\",\n    \"quartz\",\n    \"quebec\",\n    \"queen\",\n    \"queer\",\n    \"query\",\n    \"quest\",\n    \"queue\",\n    \"quick\",\n    \"quid\",\n    \"quiet\",\n    \"quilt\",\n    \"quirk\",\n    \"quit\",\n    \"quite\",\n    \"quiver\",\n    \"quiz\",\n    \"quota\",\n    \"quote\",\n    \"rabbit\",\n    \"race\",\n    \"racial\",\n    \"racism\",\n    \"rack\",\n    \"racket\",\n    \"radar\",\n    \"radio\",\n    \"radish\",\n    \"radius\",\n    \"raffle\",\n    \"raft\",\n    \"rage\",\n    \"raid\",\n    \"rail\",\n    \"rain\",\n    \"rainy\",\n    \"raise\",\n    \"rake\",\n    \"rally\",\n    \"ramp\",\n    \"random\",\n    \"range\",\n    \"rank\",\n    \"ransom\",\n    \"rape\",\n    \"rapid\",\n    \"rare\",\n    \"rarely\",\n    \"rarity\",\n    \"rash\",\n    \"rat\",\n    \"rate\",\n    \"rather\",\n    \"ratify\",\n    \"ratio\",\n    \"rattle\",\n    \"rave\",\n    \"raven\",\n    \"raw\",\n    \"ray\",\n    \"razor\",\n    \"reach\",\n    \"react\",\n    \"read\",\n    \"reader\",\n    \"ready\",\n    \"real\",\n    \"really\",\n    \"realm\",\n    \"reap\",\n    \"rear\",\n    \"reason\",\n    \"rebel\",\n    \"recall\",\n    \"recent\",\n    \"recess\",\n    \"recipe\",\n    \"reckon\",\n    \"record\",\n    \"recoup\",\n    \"rector\",\n    \"red\",\n    \"redeem\",\n    \"redo\",\n    \"reduce\",\n    \"reed\",\n    \"reef\",\n    \"reek\",\n    \"refer\",\n    \"reform\",\n    \"refuge\",\n    \"refuse\",\n    \"regal\",\n    \"regard\",\n    \"regent\",\n    \"regime\",\n    \"region\",\n    \"regret\",\n    \"reign\",\n    \"reject\",\n    \"relate\",\n    \"relax\",\n    \"relay\",\n    \"relic\",\n    \"relief\",\n    \"relish\",\n    \"rely\",\n    \"remain\",\n    \"remark\",\n    \"remedy\",\n    \"remind\",\n    \"remit\",\n    \"remote\",\n    \"remove\",\n    \"renal\",\n    \"render\",\n    \"rent\",\n    \"rental\",\n    \"repair\",\n    \"repeal\",\n    \"repeat\",\n    \"repent\",\n    \"reply\",\n    \"report\",\n    \"rescue\",\n    \"resent\",\n    \"reside\",\n    \"resign\",\n    \"resin\",\n    \"resist\",\n    \"resort\",\n    \"rest\",\n    \"result\",\n    \"resume\",\n    \"retail\",\n    \"retain\",\n    \"retina\",\n    \"retire\",\n    \"return\",\n    \"reveal\",\n    \"review\",\n    \"revise\",\n    \"revive\",\n    \"revolt\",\n    \"reward\",\n    \"rex\",\n    \"rhine\",\n    \"rhino\",\n    \"rhyme\",\n    \"rhythm\",\n    \"ribbon\",\n    \"rice\",\n    \"rich\",\n    \"rick\",\n    \"rid\",\n    \"ride\",\n    \"rider\",\n    \"ridge\",\n    \"rife\",\n    \"rifle\",\n    \"rift\",\n    \"right\",\n    \"rigid\",\n    \"rile\",\n    \"rim\",\n    \"ring\",\n    \"rinse\",\n    \"riot\",\n    \"ripe\",\n    \"ripen\",\n    \"ripple\",\n    \"rise\",\n    \"risk\",\n    \"risky\",\n    \"rite\",\n    \"ritual\",\n    \"ritz\",\n    \"rival\",\n    \"river\",\n    \"road\",\n    \"roar\",\n    \"roast\",\n    \"rob\",\n    \"robe\",\n    \"robert\",\n    \"robin\",\n    \"robot\",\n    \"robust\",\n    \"rock\",\n    \"rocket\",\n    \"rocky\",\n    \"rod\",\n    \"rode\",\n    \"rodent\",\n    \"rogue\",\n    \"role\",\n    \"roll\",\n    \"roman\",\n    \"rome\",\n    \"roof\",\n    \"room\",\n    \"root\",\n    \"rope\",\n    \"rose\",\n    \"rosy\",\n    \"rot\",\n    \"rotate\",\n    \"rotor\",\n    \"rotten\",\n    \"rouge\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"rover\",\n    \"row\",\n    \"royal\",\n    \"rub\",\n    \"rubber\",\n    \"rubble\",\n    \"ruby\",\n    \"rudder\",\n    \"rude\",\n    \"rug\",\n    \"rugby\",\n    \"ruin\",\n    \"rule\",\n    \"ruler\",\n    \"rumble\",\n    \"rump\",\n    \"run\",\n    \"rune\",\n    \"rung\",\n    \"runway\",\n    \"rural\",\n    \"rush\",\n    \"russia\",\n    \"rust\",\n    \"rustic\",\n    \"rusty\",\n    \"sack\",\n    \"sacred\",\n    \"sad\",\n    \"saddle\",\n    \"sadism\",\n    \"sadly\",\n    \"safari\",\n    \"safe\",\n    \"safely\",\n    \"safer\",\n    \"safety\",\n    \"saga\",\n    \"sage\",\n    \"sahara\",\n    \"said\",\n    \"sail\",\n    \"sailor\",\n    \"saint\",\n    \"sake\",\n    \"salad\",\n    \"salary\",\n    \"sale\",\n    \"saline\",\n    \"saliva\",\n    \"salmon\",\n    \"saloon\",\n    \"salt\",\n    \"salty\",\n    \"salute\",\n    \"sam\",\n    \"same\",\n    \"sample\",\n    \"sand\",\n    \"sandy\",\n    \"sane\",\n    \"sash\",\n    \"satin\",\n    \"satire\",\n    \"saturn\",\n    \"sauce\",\n    \"saucer\",\n    \"saudi\",\n    \"sauna\",\n    \"savage\",\n    \"save\",\n    \"saw\",\n    \"say\",\n    \"scale\",\n    \"scalp\",\n    \"scan\",\n    \"scant\",\n    \"scar\",\n    \"scarce\",\n    \"scare\",\n    \"scarf\",\n    \"scary\",\n    \"scene\",\n    \"scenic\",\n    \"scent\",\n    \"school\",\n    \"scold\",\n    \"scope\",\n    \"score\",\n    \"scorn\",\n    \"scotch\",\n    \"scott\",\n    \"scout\",\n    \"scrap\",\n    \"scrape\",\n    \"scream\",\n    \"screen\",\n    \"screw\",\n    \"script\",\n    \"scroll\",\n    \"scrub\",\n    \"scum\",\n    \"sea\",\n    \"seal\",\n    \"seam\",\n    \"seaman\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"sect\",\n    \"sector\",\n    \"secure\",\n    \"see\",\n    \"seed\",\n    \"seeing\",\n    \"seek\",\n    \"seem\",\n    \"seize\",\n    \"seldom\",\n    \"select\",\n    \"self\",\n    \"sell\",\n    \"seller\",\n    \"semi\",\n    \"senate\",\n    \"send\",\n    \"senile\",\n    \"senior\",\n    \"sense\",\n    \"sensor\",\n    \"sent\",\n    \"sentry\",\n    \"seoul\",\n    \"sequel\",\n    \"serene\",\n    \"serial\",\n    \"series\",\n    \"sermon\",\n    \"serum\",\n    \"serve\",\n    \"server\",\n    \"set\",\n    \"settle\",\n    \"seven\",\n    \"severe\",\n    \"sew\",\n    \"sewage\",\n    \"shabby\",\n    \"shade\",\n    \"shadow\",\n    \"shady\",\n    \"shaft\",\n    \"shaggy\",\n    \"shah\",\n    \"shake\",\n    \"shaky\",\n    \"shall\",\n    \"sham\",\n    \"shame\",\n    \"shape\",\n    \"share\",\n    \"shark\",\n    \"sharp\",\n    \"shawl\",\n    \"she\",\n    \"shear\",\n    \"sheen\",\n    \"sheep\",\n    \"sheer\",\n    \"sheet\",\n    \"shelf\",\n    \"shell\",\n    \"sherry\",\n    \"shield\",\n    \"shift\",\n    \"shine\",\n    \"shiny\",\n    \"ship\",\n    \"shire\",\n    \"shirk\",\n    \"shirt\",\n    \"shiver\",\n    \"shock\",\n    \"shoe\",\n    \"shook\",\n    \"shoot\",\n    \"shop\",\n    \"shore\",\n    \"short\",\n    \"shot\",\n    \"should\",\n    \"shout\",\n    \"show\",\n    \"shower\",\n    \"shrank\",\n    \"shrewd\",\n    \"shrill\",\n    \"shrimp\",\n    \"shrine\",\n    \"shrink\",\n    \"shrub\",\n    \"shrug\",\n    \"shut\",\n    \"shy\",\n    \"shyly\",\n    \"sick\",\n    \"side\",\n    \"siege\",\n    \"sigh\",\n    \"sight\",\n    \"sigma\",\n    \"sign\",\n    \"signal\",\n    \"silent\",\n    \"silk\",\n    \"silken\",\n    \"silky\",\n    \"sill\",\n    \"silly\",\n    \"silo\",\n    \"silver\",\n    \"simple\",\n    \"simply\",\n    \"since\",\n    \"sinful\",\n    \"sing\",\n    \"singer\",\n    \"single\",\n    \"sink\",\n    \"sir\",\n    \"sire\",\n    \"siren\",\n    \"sister\",\n    \"sit\",\n    \"site\",\n    \"sitter\",\n    \"six\",\n    \"sixth\",\n    \"sixty\",\n    \"size\",\n    \"sketch\",\n    \"skill\",\n    \"skin\",\n    \"skinny\",\n    \"skip\",\n    \"skirt\",\n    \"skull\",\n    \"sky\",\n    \"slab\",\n    \"slack\",\n    \"slain\",\n    \"slam\",\n    \"slang\",\n    \"slap\",\n    \"slat\",\n    \"slate\",\n    \"slave\",\n    \"sleek\",\n    \"sleep\",\n    \"sleepy\",\n    \"sleeve\",\n    \"slice\",\n    \"slick\",\n    \"slid\",\n    \"slide\",\n    \"slight\",\n    \"slim\",\n    \"slimy\",\n    \"sling\",\n    \"slip\",\n    \"slit\",\n    \"slogan\",\n    \"slope\",\n    \"sloppy\",\n    \"slot\",\n    \"slow\",\n    \"slowly\",\n    \"slug\",\n    \"slum\",\n    \"slump\",\n    \"smack\",\n    \"small\",\n    \"smart\",\n    \"smash\",\n    \"smear\",\n    \"smell\",\n    \"smelly\",\n    \"smelt\",\n    \"smile\",\n    \"smite\",\n    \"smoke\",\n    \"smoky\",\n    \"smooth\",\n    \"smug\",\n    \"snack\",\n    \"snail\",\n    \"snake\",\n    \"snap\",\n    \"snatch\",\n    \"sneak\",\n    \"snow\",\n    \"snowy\",\n    \"snug\",\n    \"soak\",\n    \"soap\",\n    \"sober\",\n    \"soccer\",\n    \"social\",\n    \"sock\",\n    \"socket\",\n    \"socks\",\n    \"soda\",\n    \"sodden\",\n    \"sodium\",\n    \"sofa\",\n    \"soft\",\n    \"soften\",\n    \"softly\",\n    \"soggy\",\n    \"soil\",\n    \"solar\",\n    \"sold\",\n    \"sole\",\n    \"solely\",\n    \"solemn\",\n    \"solid\",\n    \"solo\",\n    \"solve\",\n    \"some\",\n    \"son\",\n    \"sonar\",\n    \"sonata\",\n    \"song\",\n    \"sonic\",\n    \"sony\",\n    \"soon\",\n    \"sooner\",\n    \"soot\",\n    \"soothe\",\n    \"sordid\",\n    \"sore\",\n    \"sorrow\",\n    \"sorry\",\n    \"sort\",\n    \"soul\",\n    \"sound\",\n    \"soup\",\n    \"sour\",\n    \"source\",\n    \"soviet\",\n    \"sow\",\n    \"space\",\n    \"spade\",\n    \"spain\",\n    \"span\",\n    \"spare\",\n    \"spark\",\n    \"sparse\",\n    \"spasm\",\n    \"spat\",\n    \"spate\",\n    \"speak\",\n    \"spear\",\n    \"speech\",\n    \"speed\",\n    \"speedy\",\n    \"spell\",\n    \"spend\",\n    \"sphere\",\n    \"spice\",\n    \"spicy\",\n    \"spider\",\n    \"spiky\",\n    \"spill\",\n    \"spin\",\n    \"spinal\",\n    \"spine\",\n    \"spiral\",\n    \"spirit\",\n    \"spit\",\n    \"spite\",\n    \"splash\",\n    \"split\",\n    \"spoil\",\n    \"spoke\",\n    \"sponge\",\n    \"spoon\",\n    \"sport\",\n    \"spot\",\n    \"spouse\",\n    \"spray\",\n    \"spread\",\n    \"spree\",\n    \"spring\",\n    \"sprint\",\n    \"spur\",\n    \"squad\",\n    \"square\",\n    \"squash\",\n    \"squat\",\n    \"squid\",\n    \"stab\",\n    \"stable\",\n    \"stack\",\n    \"staff\",\n    \"stage\",\n    \"stain\",\n    \"stair\",\n    \"stairs\",\n    \"stake\",\n    \"stale\",\n    \"stall\",\n    \"stamp\",\n    \"stance\",\n    \"stand\",\n    \"staple\",\n    \"star\",\n    \"starch\",\n    \"stare\",\n    \"stark\",\n    \"start\",\n    \"starve\",\n    \"state\",\n    \"static\",\n    \"statue\",\n    \"status\",\n    \"stay\",\n    \"stead\",\n    \"steady\",\n    \"steak\",\n    \"steal\",\n    \"steam\",\n    \"steel\",\n    \"steep\",\n    \"steer\",\n    \"stem\",\n    \"stench\",\n    \"step\",\n    \"stereo\",\n    \"stern\",\n    \"stew\",\n    \"stick\",\n    \"sticky\",\n    \"stiff\",\n    \"stifle\",\n    \"stigma\",\n    \"still\",\n    \"sting\",\n    \"stint\",\n    \"stir\",\n    \"stitch\",\n    \"stock\",\n    \"stocky\",\n    \"stone\",\n    \"stony\",\n    \"stool\",\n    \"stop\",\n    \"store\",\n    \"storm\",\n    \"stormy\",\n    \"story\",\n    \"stout\",\n    \"stove\",\n    \"stow\",\n    \"strain\",\n    \"strait\",\n    \"strand\",\n    \"strap\",\n    \"strata\",\n    \"straw\",\n    \"stray\",\n    \"streak\",\n    \"stream\",\n    \"street\",\n    \"stress\",\n    \"strict\",\n    \"stride\",\n    \"strife\",\n    \"strike\",\n    \"string\",\n    \"strip\",\n    \"stripe\",\n    \"strive\",\n    \"stroke\",\n    \"stroll\",\n    \"strong\",\n    \"stud\",\n    \"studio\",\n    \"study\",\n    \"stuff\",\n    \"stuffy\",\n    \"stunt\",\n    \"stupid\",\n    \"sturdy\",\n    \"style\",\n    \"submit\",\n    \"subtle\",\n    \"subtly\",\n    \"suburb\",\n    \"such\",\n    \"sudden\",\n    \"sue\",\n    \"suez\",\n    \"suffer\",\n    \"sugar\",\n    \"suit\",\n    \"suite\",\n    \"suitor\",\n    \"sullen\",\n    \"sultan\",\n    \"sum\",\n    \"summer\",\n    \"summit\",\n    \"summon\",\n    \"sun\",\n    \"sunday\",\n    \"sunny\",\n    \"sunset\",\n    \"super\",\n    \"superb\",\n    \"supper\",\n    \"supple\",\n    \"supply\",\n    \"sure\",\n    \"surely\",\n    \"surf\",\n    \"surge\",\n    \"survey\",\n    \"suture\",\n    \"swamp\",\n    \"swan\",\n    \"swap\",\n    \"swarm\",\n    \"sway\",\n    \"swear\",\n    \"sweat\",\n    \"sweaty\",\n    \"sweden\",\n    \"sweep\",\n    \"sweet\",\n    \"swell\",\n    \"swift\",\n    \"swim\",\n    \"swine\",\n    \"swing\",\n    \"swirl\",\n    \"swiss\",\n    \"switch\",\n    \"sword\",\n    \"swore\",\n    \"sydney\",\n    \"symbol\",\n    \"synod\",\n    \"syntax\",\n    \"syria\",\n    \"syrup\",\n    \"system\",\n    \"table\",\n    \"tablet\",\n    \"taboo\",\n    \"tacit\",\n    \"tackle\",\n    \"tact\",\n    \"tactic\",\n    \"tail\",\n    \"tailor\",\n    \"taiwan\",\n    \"take\",\n    \"tale\",\n    \"talent\",\n    \"talk\",\n    \"tall\",\n    \"tally\",\n    \"tame\",\n    \"tampa\",\n    \"tan\",\n    \"tandem\",\n    \"tangle\",\n    \"tank\",\n    \"tap\",\n    \"tape\",\n    \"target\",\n    \"tariff\",\n    \"tarp\",\n    \"tart\",\n    \"tarzan\",\n    \"task\",\n    \"taste\",\n    \"tasty\",\n    \"tattoo\",\n    \"taurus\",\n    \"taut\",\n    \"tavern\",\n    \"tax\",\n    \"taxi\",\n    \"tea\",\n    \"teach\",\n    \"teak\",\n    \"team\",\n    \"tear\",\n    \"tease\",\n    \"tech\",\n    \"teeth\",\n    \"tell\",\n    \"temper\",\n    \"temple\",\n    \"tempo\",\n    \"tempt\",\n    \"ten\",\n    \"tenant\",\n    \"tend\",\n    \"tender\",\n    \"tendon\",\n    \"tennis\",\n    \"tenor\",\n    \"tense\",\n    \"tent\",\n    \"tenth\",\n    \"tenure\",\n    \"teresa\",\n    \"term\",\n    \"terror\",\n    \"terse\",\n    \"test\",\n    \"texas\",\n    \"text\",\n    \"thank\",\n    \"thaw\",\n    \"them\",\n    \"theme\",\n    \"thence\",\n    \"theory\",\n    \"there\",\n    \"these\",\n    \"thesis\",\n    \"they\",\n    \"thick\",\n    \"thief\",\n    \"thigh\",\n    \"thin\",\n    \"thing\",\n    \"think\",\n    \"third\",\n    \"thirst\",\n    \"thirty\",\n    \"this\",\n    \"thomas\",\n    \"thorn\",\n    \"those\",\n    \"though\",\n    \"thread\",\n    \"threat\",\n    \"three\",\n    \"thrill\",\n    \"thrive\",\n    \"throat\",\n    \"throne\",\n    \"throng\",\n    \"throw\",\n    \"thrust\",\n    \"thud\",\n    \"thug\",\n    \"thumb\",\n    \"thus\",\n    \"thyme\",\n    \"tibet\",\n    \"tick\",\n    \"ticket\",\n    \"tidal\",\n    \"tide\",\n    \"tidy\",\n    \"tie\",\n    \"tier\",\n    \"tiger\",\n    \"tight\",\n    \"tile\",\n    \"till\",\n    \"tilt\",\n    \"timber\",\n    \"time\",\n    \"timid\",\n    \"tin\",\n    \"tiny\",\n    \"tip\",\n    \"tire\",\n    \"tissue\",\n    \"title\",\n    \"toad\",\n    \"toast\",\n    \"today\",\n    \"toe\",\n    \"toilet\",\n    \"token\",\n    \"tokyo\",\n    \"told\",\n    \"toll\",\n    \"tom\",\n    \"tomato\",\n    \"tomb\",\n    \"tonal\",\n    \"tone\",\n    \"tongue\",\n    \"tonic\",\n    \"too\",\n    \"took\",\n    \"tool\",\n    \"tooth\",\n    \"top\",\n    \"topaz\",\n    \"topic\",\n    \"torch\",\n    \"torque\",\n    \"torso\",\n    \"tort\",\n    \"toss\",\n    \"total\",\n    \"touch\",\n    \"tough\",\n    \"tour\",\n    \"toward\",\n    \"towel\",\n    \"tower\",\n    \"town\",\n    \"toxic\",\n    \"toxin\",\n    \"toy\",\n    \"trace\",\n    \"track\",\n    \"tract\",\n    \"trade\",\n    \"tragic\",\n    \"trail\",\n    \"train\",\n    \"trait\",\n    \"tram\",\n    \"trance\",\n    \"trap\",\n    \"trauma\",\n    \"travel\",\n    \"tray\",\n    \"tread\",\n    \"treat\",\n    \"treaty\",\n    \"treble\",\n    \"tree\",\n    \"trek\",\n    \"tremor\",\n    \"trench\",\n    \"trend\",\n    \"trendy\",\n    \"trial\",\n    \"tribal\",\n    \"tribe\",\n    \"trick\",\n    \"tricky\",\n    \"tried\",\n    \"trifle\",\n    \"trim\",\n    \"trio\",\n    \"trip\",\n    \"triple\",\n    \"troop\",\n    \"trophy\",\n    \"trot\",\n    \"trough\",\n    \"trout\",\n    \"truce\",\n    \"truck\",\n    \"true\",\n    \"truly\",\n    \"trunk\",\n    \"trust\",\n    \"truth\",\n    \"try\",\n    \"tube\",\n    \"tumble\",\n    \"tuna\",\n    \"tundra\",\n    \"tune\",\n    \"tunic\",\n    \"tunnel\",\n    \"turban\",\n    \"turf\",\n    \"turk\",\n    \"turkey\",\n    \"turn\",\n    \"turtle\",\n    \"tutor\",\n    \"tweed\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"twin\",\n    \"twist\",\n    \"two\",\n    \"tycoon\",\n    \"tying\",\n    \"type\",\n    \"tyrant\",\n    \"ugly\",\n    \"ulcer\",\n    \"ultra\",\n    \"umpire\",\n    \"unable\",\n    \"uncle\",\n    \"under\",\n    \"uneasy\",\n    \"unfair\",\n    \"unify\",\n    \"union\",\n    \"unique\",\n    \"unit\",\n    \"unite\",\n    \"unity\",\n    \"unlike\",\n    \"unrest\",\n    \"unruly\",\n    \"until\",\n    \"update\",\n    \"upheld\",\n    \"uphill\",\n    \"uphold\",\n    \"upon\",\n    \"upper\",\n    \"uproar\",\n    \"upset\",\n    \"upshot\",\n    \"uptake\",\n    \"upturn\",\n    \"upward\",\n    \"urban\",\n    \"urge\",\n    \"urgent\",\n    \"urging\",\n    \"urine\",\n    \"usable\",\n    \"usage\",\n    \"use\",\n    \"useful\",\n    \"user\",\n    \"usual\",\n    \"utmost\",\n    \"utter\",\n    \"vacant\",\n    \"vacuum\",\n    \"vague\",\n    \"vain\",\n    \"valet\",\n    \"valid\",\n    \"valley\",\n    \"value\",\n    \"valve\",\n    \"van\",\n    \"vanish\",\n    \"vanity\",\n    \"vary\",\n    \"vase\",\n    \"vast\",\n    \"vat\",\n    \"vault\",\n    \"vector\",\n    \"veil\",\n    \"vein\",\n    \"velvet\",\n    \"vendor\",\n    \"veneer\",\n    \"venice\",\n    \"venom\",\n    \"vent\",\n    \"venue\",\n    \"venus\",\n    \"verb\",\n    \"verbal\",\n    \"verge\",\n    \"verify\",\n    \"verity\",\n    \"verse\",\n    \"versus\",\n    \"very\",\n    \"vessel\",\n    \"vest\",\n    \"vet\",\n    \"veto\",\n    \"via\",\n    \"viable\",\n    \"vicar\",\n    \"vice\",\n    \"victim\",\n    \"victor\",\n    \"video\",\n    \"vienna\",\n    \"view\",\n    \"vigil\",\n    \"viking\",\n    \"vile\",\n    \"villa\",\n    \"vine\",\n    \"vinyl\",\n    \"viola\",\n    \"violet\",\n    \"violin\",\n    \"viral\",\n    \"virgo\",\n    \"virtue\",\n    \"virus\",\n    \"visa\",\n    \"vision\",\n    \"visit\",\n    \"visual\",\n    \"vital\",\n    \"vivid\",\n    \"vocal\",\n    \"vodka\",\n    \"vogue\",\n    \"voice\",\n    \"void\",\n    \"volley\",\n    \"volume\",\n    \"vote\",\n    \"vowel\",\n    \"voyage\",\n    \"vulgar\",\n    \"wade\",\n    \"wage\",\n    \"waist\",\n    \"wait\",\n    \"waiter\",\n    \"wake\",\n    \"walk\",\n    \"walker\",\n    \"wall\",\n    \"wallet\",\n    \"walnut\",\n    \"wander\",\n    \"want\",\n    \"war\",\n    \"warden\",\n    \"warm\",\n    \"warmth\",\n    \"warn\",\n    \"warp\",\n    \"warsaw\",\n    \"wary\",\n    \"was\",\n    \"wash\",\n    \"wasp\",\n    \"waste\",\n    \"watch\",\n    \"water\",\n    \"watery\",\n    \"wave\",\n    \"wax\",\n    \"way\",\n    \"weak\",\n    \"weaken\",\n    \"wealth\",\n    \"weapon\",\n    \"wear\",\n    \"weary\",\n    \"weave\",\n    \"wedge\",\n    \"wee\",\n    \"weed\",\n    \"week\",\n    \"weekly\",\n    \"weep\",\n    \"weigh\",\n    \"weight\",\n    \"weird\",\n    \"well\",\n    \"were\",\n    \"west\",\n    \"wet\",\n    \"whale\",\n    \"wharf\",\n    \"what\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"whence\",\n    \"where\",\n    \"which\",\n    \"whiff\",\n    \"while\",\n    \"whim\",\n    \"whip\",\n    \"whisky\",\n    \"white\",\n    \"who\",\n    \"whole\",\n    \"wholly\",\n    \"whom\",\n    \"whose\",\n    \"why\",\n    \"wicked\",\n    \"wide\",\n    \"widely\",\n    \"widen\",\n    \"wider\",\n    \"widow\",\n    \"width\",\n    \"wife\",\n    \"wig\",\n    \"wild\",\n    \"wildly\",\n    \"will\",\n    \"willow\",\n    \"wily\",\n    \"win\",\n    \"wind\",\n    \"window\",\n    \"windy\",\n    \"wine\",\n    \"wing\",\n    \"wink\",\n    \"winner\",\n    \"winter\",\n    \"wipe\",\n    \"wire\",\n    \"wisdom\",\n    \"wise\",\n    \"wish\",\n    \"wit\",\n    \"witch\",\n    \"with\",\n    \"within\",\n    \"witty\",\n    \"wizard\",\n    \"woke\",\n    \"wolf\",\n    \"wolves\",\n    \"woman\",\n    \"womb\",\n    \"won\",\n    \"wonder\",\n    \"wood\",\n    \"wooden\",\n    \"woods\",\n    \"woody\",\n    \"wool\",\n    \"word\",\n    \"work\",\n    \"worker\",\n    \"world\",\n    \"worm\",\n    \"worry\",\n    \"worse\",\n    \"worst\",\n    \"worth\",\n    \"worthy\",\n    \"would\",\n    \"wound\",\n    \"wrap\",\n    \"wrath\",\n    \"wreath\",\n    \"wreck\",\n    \"wring\",\n    \"wrist\",\n    \"writ\",\n    \"write\",\n    \"writer\",\n    \"wrong\",\n    \"xerox\",\n    \"yacht\",\n    \"yale\",\n    \"yard\",\n    \"yarn\",\n    \"yeah\",\n    \"year\",\n    \"yeard\",\n    \"yeast\",\n    \"yellow\",\n    \"yet\",\n    \"yield\",\n    \"yogurt\",\n    \"yolk\",\n    \"you\",\n    \"young\",\n    \"your\",\n    \"youth\",\n    \"zaire\",\n    \"zeal\",\n    \"zebra\",\n    \"zenith\",\n    \"zero\",\n    \"zeus\",\n    \"zigzag\",\n    \"zinc\",\n    \"zombie\",\n    \"zone\",\n];\n","export default [\n    \"abandon\",\n    \"ability\",\n    \"able\",\n    \"about\",\n    \"above\",\n    \"absent\",\n    \"absorb\",\n    \"abstract\",\n    \"absurd\",\n    \"abuse\",\n    \"access\",\n    \"accident\",\n    \"account\",\n    \"accuse\",\n    \"achieve\",\n    \"acid\",\n    \"acoustic\",\n    \"acquire\",\n    \"across\",\n    \"act\",\n    \"action\",\n    \"actor\",\n    \"actress\",\n    \"actual\",\n    \"adapt\",\n    \"add\",\n    \"addict\",\n    \"address\",\n    \"adjust\",\n    \"admit\",\n    \"adult\",\n    \"advance\",\n    \"advice\",\n    \"aerobic\",\n    \"affair\",\n    \"afford\",\n    \"afraid\",\n    \"again\",\n    \"age\",\n    \"agent\",\n    \"agree\",\n    \"ahead\",\n    \"aim\",\n    \"air\",\n    \"airport\",\n    \"aisle\",\n    \"alarm\",\n    \"album\",\n    \"alcohol\",\n    \"alert\",\n    \"alien\",\n    \"all\",\n    \"alley\",\n    \"allow\",\n    \"almost\",\n    \"alone\",\n    \"alpha\",\n    \"already\",\n    \"also\",\n    \"alter\",\n    \"always\",\n    \"amateur\",\n    \"amazing\",\n    \"among\",\n    \"amount\",\n    \"amused\",\n    \"analyst\",\n    \"anchor\",\n    \"ancient\",\n    \"anger\",\n    \"angle\",\n    \"angry\",\n    \"animal\",\n    \"ankle\",\n    \"announce\",\n    \"annual\",\n    \"another\",\n    \"answer\",\n    \"antenna\",\n    \"antique\",\n    \"anxiety\",\n    \"any\",\n    \"apart\",\n    \"apology\",\n    \"appear\",\n    \"apple\",\n    \"approve\",\n    \"april\",\n    \"arch\",\n    \"arctic\",\n    \"area\",\n    \"arena\",\n    \"argue\",\n    \"arm\",\n    \"armed\",\n    \"armor\",\n    \"army\",\n    \"around\",\n    \"arrange\",\n    \"arrest\",\n    \"arrive\",\n    \"arrow\",\n    \"art\",\n    \"artefact\",\n    \"artist\",\n    \"artwork\",\n    \"ask\",\n    \"aspect\",\n    \"assault\",\n    \"asset\",\n    \"assist\",\n    \"assume\",\n    \"asthma\",\n    \"athlete\",\n    \"atom\",\n    \"attack\",\n    \"attend\",\n    \"attitude\",\n    \"attract\",\n    \"auction\",\n    \"audit\",\n    \"august\",\n    \"aunt\",\n    \"author\",\n    \"auto\",\n    \"autumn\",\n    \"average\",\n    \"avocado\",\n    \"avoid\",\n    \"awake\",\n    \"aware\",\n    \"away\",\n    \"awesome\",\n    \"awful\",\n    \"awkward\",\n    \"axis\",\n    \"baby\",\n    \"bachelor\",\n    \"bacon\",\n    \"badge\",\n    \"bag\",\n    \"balance\",\n    \"balcony\",\n    \"ball\",\n    \"bamboo\",\n    \"banana\",\n    \"banner\",\n    \"bar\",\n    \"barely\",\n    \"bargain\",\n    \"barrel\",\n    \"base\",\n    \"basic\",\n    \"basket\",\n    \"battle\",\n    \"beach\",\n    \"bean\",\n    \"beauty\",\n    \"because\",\n    \"become\",\n    \"beef\",\n    \"before\",\n    \"begin\",\n    \"behave\",\n    \"behind\",\n    \"believe\",\n    \"below\",\n    \"belt\",\n    \"bench\",\n    \"benefit\",\n    \"best\",\n    \"betray\",\n    \"better\",\n    \"between\",\n    \"beyond\",\n    \"bicycle\",\n    \"bid\",\n    \"bike\",\n    \"bind\",\n    \"biology\",\n    \"bird\",\n    \"birth\",\n    \"bitter\",\n    \"black\",\n    \"blade\",\n    \"blame\",\n    \"blanket\",\n    \"blast\",\n    \"bleak\",\n    \"bless\",\n    \"blind\",\n    \"blood\",\n    \"blossom\",\n    \"blouse\",\n    \"blue\",\n    \"blur\",\n    \"blush\",\n    \"board\",\n    \"boat\",\n    \"body\",\n    \"boil\",\n    \"bomb\",\n    \"bone\",\n    \"bonus\",\n    \"book\",\n    \"boost\",\n    \"border\",\n    \"boring\",\n    \"borrow\",\n    \"boss\",\n    \"bottom\",\n    \"bounce\",\n    \"box\",\n    \"boy\",\n    \"bracket\",\n    \"brain\",\n    \"brand\",\n    \"brass\",\n    \"brave\",\n    \"bread\",\n    \"breeze\",\n    \"brick\",\n    \"bridge\",\n    \"brief\",\n    \"bright\",\n    \"bring\",\n    \"brisk\",\n    \"broccoli\",\n    \"broken\",\n    \"bronze\",\n    \"broom\",\n    \"brother\",\n    \"brown\",\n    \"brush\",\n    \"bubble\",\n    \"buddy\",\n    \"budget\",\n    \"buffalo\",\n    \"build\",\n    \"bulb\",\n    \"bulk\",\n    \"bullet\",\n    \"bundle\",\n    \"bunker\",\n    \"burden\",\n    \"burger\",\n    \"burst\",\n    \"bus\",\n    \"business\",\n    \"busy\",\n    \"butter\",\n    \"buyer\",\n    \"buzz\",\n    \"cabbage\",\n    \"cabin\",\n    \"cable\",\n    \"cactus\",\n    \"cage\",\n    \"cake\",\n    \"call\",\n    \"calm\",\n    \"camera\",\n    \"camp\",\n    \"can\",\n    \"canal\",\n    \"cancel\",\n    \"candy\",\n    \"cannon\",\n    \"canoe\",\n    \"canvas\",\n    \"canyon\",\n    \"capable\",\n    \"capital\",\n    \"captain\",\n    \"car\",\n    \"carbon\",\n    \"card\",\n    \"cargo\",\n    \"carpet\",\n    \"carry\",\n    \"cart\",\n    \"case\",\n    \"cash\",\n    \"casino\",\n    \"castle\",\n    \"casual\",\n    \"cat\",\n    \"catalog\",\n    \"catch\",\n    \"category\",\n    \"cattle\",\n    \"caught\",\n    \"cause\",\n    \"caution\",\n    \"cave\",\n    \"ceiling\",\n    \"celery\",\n    \"cement\",\n    \"census\",\n    \"century\",\n    \"cereal\",\n    \"certain\",\n    \"chair\",\n    \"chalk\",\n    \"champion\",\n    \"change\",\n    \"chaos\",\n    \"chapter\",\n    \"charge\",\n    \"chase\",\n    \"chat\",\n    \"cheap\",\n    \"check\",\n    \"cheese\",\n    \"chef\",\n    \"cherry\",\n    \"chest\",\n    \"chicken\",\n    \"chief\",\n    \"child\",\n    \"chimney\",\n    \"choice\",\n    \"choose\",\n    \"chronic\",\n    \"chuckle\",\n    \"chunk\",\n    \"churn\",\n    \"cigar\",\n    \"cinnamon\",\n    \"circle\",\n    \"citizen\",\n    \"city\",\n    \"civil\",\n    \"claim\",\n    \"clap\",\n    \"clarify\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"clerk\",\n    \"clever\",\n    \"click\",\n    \"client\",\n    \"cliff\",\n    \"climb\",\n    \"clinic\",\n    \"clip\",\n    \"clock\",\n    \"clog\",\n    \"close\",\n    \"cloth\",\n    \"cloud\",\n    \"clown\",\n    \"club\",\n    \"clump\",\n    \"cluster\",\n    \"clutch\",\n    \"coach\",\n    \"coast\",\n    \"coconut\",\n    \"code\",\n    \"coffee\",\n    \"coil\",\n    \"coin\",\n    \"collect\",\n    \"color\",\n    \"column\",\n    \"combine\",\n    \"come\",\n    \"comfort\",\n    \"comic\",\n    \"common\",\n    \"company\",\n    \"concert\",\n    \"conduct\",\n    \"confirm\",\n    \"congress\",\n    \"connect\",\n    \"consider\",\n    \"control\",\n    \"convince\",\n    \"cook\",\n    \"cool\",\n    \"copper\",\n    \"copy\",\n    \"coral\",\n    \"core\",\n    \"corn\",\n    \"correct\",\n    \"cost\",\n    \"cotton\",\n    \"couch\",\n    \"country\",\n    \"couple\",\n    \"course\",\n    \"cousin\",\n    \"cover\",\n    \"coyote\",\n    \"crack\",\n    \"cradle\",\n    \"craft\",\n    \"cram\",\n    \"crane\",\n    \"crash\",\n    \"crater\",\n    \"crawl\",\n    \"crazy\",\n    \"cream\",\n    \"credit\",\n    \"creek\",\n    \"crew\",\n    \"cricket\",\n    \"crime\",\n    \"crisp\",\n    \"critic\",\n    \"crop\",\n    \"cross\",\n    \"crouch\",\n    \"crowd\",\n    \"crucial\",\n    \"cruel\",\n    \"cruise\",\n    \"crumble\",\n    \"crunch\",\n    \"crush\",\n    \"cry\",\n    \"crystal\",\n    \"cube\",\n    \"culture\",\n    \"cup\",\n    \"cupboard\",\n    \"curious\",\n    \"current\",\n    \"curtain\",\n    \"curve\",\n    \"cushion\",\n    \"custom\",\n    \"cute\",\n    \"cycle\",\n    \"dad\",\n    \"damage\",\n    \"damp\",\n    \"dance\",\n    \"danger\",\n    \"daring\",\n    \"dash\",\n    \"daughter\",\n    \"dawn\",\n    \"day\",\n    \"deal\",\n    \"debate\",\n    \"debris\",\n    \"decade\",\n    \"december\",\n    \"decide\",\n    \"decline\",\n    \"decorate\",\n    \"decrease\",\n    \"deer\",\n    \"defense\",\n    \"define\",\n    \"defy\",\n    \"degree\",\n    \"delay\",\n    \"deliver\",\n    \"demand\",\n    \"demise\",\n    \"denial\",\n    \"dentist\",\n    \"deny\",\n    \"depart\",\n    \"depend\",\n    \"deposit\",\n    \"depth\",\n    \"deputy\",\n    \"derive\",\n    \"describe\",\n    \"desert\",\n    \"design\",\n    \"desk\",\n    \"despair\",\n    \"destroy\",\n    \"detail\",\n    \"detect\",\n    \"develop\",\n    \"device\",\n    \"devote\",\n    \"diagram\",\n    \"dial\",\n    \"diamond\",\n    \"diary\",\n    \"dice\",\n    \"diesel\",\n    \"diet\",\n    \"differ\",\n    \"digital\",\n    \"dignity\",\n    \"dilemma\",\n    \"dinner\",\n    \"dinosaur\",\n    \"direct\",\n    \"dirt\",\n    \"disagree\",\n    \"discover\",\n    \"disease\",\n    \"dish\",\n    \"dismiss\",\n    \"disorder\",\n    \"display\",\n    \"distance\",\n    \"divert\",\n    \"divide\",\n    \"divorce\",\n    \"dizzy\",\n    \"doctor\",\n    \"document\",\n    \"dog\",\n    \"doll\",\n    \"dolphin\",\n    \"domain\",\n    \"donate\",\n    \"donkey\",\n    \"donor\",\n    \"door\",\n    \"dose\",\n    \"double\",\n    \"dove\",\n    \"draft\",\n    \"dragon\",\n    \"drama\",\n    \"drastic\",\n    \"draw\",\n    \"dream\",\n    \"dress\",\n    \"drift\",\n    \"drill\",\n    \"drink\",\n    \"drip\",\n    \"drive\",\n    \"drop\",\n    \"drum\",\n    \"dry\",\n    \"duck\",\n    \"dumb\",\n    \"dune\",\n    \"during\",\n    \"dust\",\n    \"dutch\",\n    \"duty\",\n    \"dwarf\",\n    \"dynamic\",\n    \"eager\",\n    \"eagle\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"easily\",\n    \"east\",\n    \"easy\",\n    \"echo\",\n    \"ecology\",\n    \"economy\",\n    \"edge\",\n    \"edit\",\n    \"educate\",\n    \"effort\",\n    \"egg\",\n    \"eight\",\n    \"either\",\n    \"elbow\",\n    \"elder\",\n    \"electric\",\n    \"elegant\",\n    \"element\",\n    \"elephant\",\n    \"elevator\",\n    \"elite\",\n    \"else\",\n    \"embark\",\n    \"embody\",\n    \"embrace\",\n    \"emerge\",\n    \"emotion\",\n    \"employ\",\n    \"empower\",\n    \"empty\",\n    \"enable\",\n    \"enact\",\n    \"end\",\n    \"endless\",\n    \"endorse\",\n    \"enemy\",\n    \"energy\",\n    \"enforce\",\n    \"engage\",\n    \"engine\",\n    \"enhance\",\n    \"enjoy\",\n    \"enlist\",\n    \"enough\",\n    \"enrich\",\n    \"enroll\",\n    \"ensure\",\n    \"enter\",\n    \"entire\",\n    \"entry\",\n    \"envelope\",\n    \"episode\",\n    \"equal\",\n    \"equip\",\n    \"era\",\n    \"erase\",\n    \"erode\",\n    \"erosion\",\n    \"error\",\n    \"erupt\",\n    \"escape\",\n    \"essay\",\n    \"essence\",\n    \"estate\",\n    \"eternal\",\n    \"ethics\",\n    \"evidence\",\n    \"evil\",\n    \"evoke\",\n    \"evolve\",\n    \"exact\",\n    \"example\",\n    \"excess\",\n    \"exchange\",\n    \"excite\",\n    \"exclude\",\n    \"excuse\",\n    \"execute\",\n    \"exercise\",\n    \"exhaust\",\n    \"exhibit\",\n    \"exile\",\n    \"exist\",\n    \"exit\",\n    \"exotic\",\n    \"expand\",\n    \"expect\",\n    \"expire\",\n    \"explain\",\n    \"expose\",\n    \"express\",\n    \"extend\",\n    \"extra\",\n    \"eye\",\n    \"eyebrow\",\n    \"fabric\",\n    \"face\",\n    \"faculty\",\n    \"fade\",\n    \"faint\",\n    \"faith\",\n    \"fall\",\n    \"false\",\n    \"fame\",\n    \"family\",\n    \"famous\",\n    \"fan\",\n    \"fancy\",\n    \"fantasy\",\n    \"farm\",\n    \"fashion\",\n    \"fat\",\n    \"fatal\",\n    \"father\",\n    \"fatigue\",\n    \"fault\",\n    \"favorite\",\n    \"feature\",\n    \"february\",\n    \"federal\",\n    \"fee\",\n    \"feed\",\n    \"feel\",\n    \"female\",\n    \"fence\",\n    \"festival\",\n    \"fetch\",\n    \"fever\",\n    \"few\",\n    \"fiber\",\n    \"fiction\",\n    \"field\",\n    \"figure\",\n    \"file\",\n    \"film\",\n    \"filter\",\n    \"final\",\n    \"find\",\n    \"fine\",\n    \"finger\",\n    \"finish\",\n    \"fire\",\n    \"firm\",\n    \"first\",\n    \"fiscal\",\n    \"fish\",\n    \"fit\",\n    \"fitness\",\n    \"fix\",\n    \"flag\",\n    \"flame\",\n    \"flash\",\n    \"flat\",\n    \"flavor\",\n    \"flee\",\n    \"flight\",\n    \"flip\",\n    \"float\",\n    \"flock\",\n    \"floor\",\n    \"flower\",\n    \"fluid\",\n    \"flush\",\n    \"fly\",\n    \"foam\",\n    \"focus\",\n    \"fog\",\n    \"foil\",\n    \"fold\",\n    \"follow\",\n    \"food\",\n    \"foot\",\n    \"force\",\n    \"forest\",\n    \"forget\",\n    \"fork\",\n    \"fortune\",\n    \"forum\",\n    \"forward\",\n    \"fossil\",\n    \"foster\",\n    \"found\",\n    \"fox\",\n    \"fragile\",\n    \"frame\",\n    \"frequent\",\n    \"fresh\",\n    \"friend\",\n    \"fringe\",\n    \"frog\",\n    \"front\",\n    \"frost\",\n    \"frown\",\n    \"frozen\",\n    \"fruit\",\n    \"fuel\",\n    \"fun\",\n    \"funny\",\n    \"furnace\",\n    \"fury\",\n    \"future\",\n    \"gadget\",\n    \"gain\",\n    \"galaxy\",\n    \"gallery\",\n    \"game\",\n    \"gap\",\n    \"garage\",\n    \"garbage\",\n    \"garden\",\n    \"garlic\",\n    \"garment\",\n    \"gas\",\n    \"gasp\",\n    \"gate\",\n    \"gather\",\n    \"gauge\",\n    \"gaze\",\n    \"general\",\n    \"genius\",\n    \"genre\",\n    \"gentle\",\n    \"genuine\",\n    \"gesture\",\n    \"ghost\",\n    \"giant\",\n    \"gift\",\n    \"giggle\",\n    \"ginger\",\n    \"giraffe\",\n    \"girl\",\n    \"give\",\n    \"glad\",\n    \"glance\",\n    \"glare\",\n    \"glass\",\n    \"glide\",\n    \"glimpse\",\n    \"globe\",\n    \"gloom\",\n    \"glory\",\n    \"glove\",\n    \"glow\",\n    \"glue\",\n    \"goat\",\n    \"goddess\",\n    \"gold\",\n    \"good\",\n    \"goose\",\n    \"gorilla\",\n    \"gospel\",\n    \"gossip\",\n    \"govern\",\n    \"gown\",\n    \"grab\",\n    \"grace\",\n    \"grain\",\n    \"grant\",\n    \"grape\",\n    \"grass\",\n    \"gravity\",\n    \"great\",\n    \"green\",\n    \"grid\",\n    \"grief\",\n    \"grit\",\n    \"grocery\",\n    \"group\",\n    \"grow\",\n    \"grunt\",\n    \"guard\",\n    \"guess\",\n    \"guide\",\n    \"guilt\",\n    \"guitar\",\n    \"gun\",\n    \"gym\",\n    \"habit\",\n    \"hair\",\n    \"half\",\n    \"hammer\",\n    \"hamster\",\n    \"hand\",\n    \"happy\",\n    \"harbor\",\n    \"hard\",\n    \"harsh\",\n    \"harvest\",\n    \"hat\",\n    \"have\",\n    \"hawk\",\n    \"hazard\",\n    \"head\",\n    \"health\",\n    \"heart\",\n    \"heavy\",\n    \"hedgehog\",\n    \"height\",\n    \"hello\",\n    \"helmet\",\n    \"help\",\n    \"hen\",\n    \"hero\",\n    \"hidden\",\n    \"high\",\n    \"hill\",\n    \"hint\",\n    \"hip\",\n    \"hire\",\n    \"history\",\n    \"hobby\",\n    \"hockey\",\n    \"hold\",\n    \"hole\",\n    \"holiday\",\n    \"hollow\",\n    \"home\",\n    \"honey\",\n    \"hood\",\n    \"hope\",\n    \"horn\",\n    \"horror\",\n    \"horse\",\n    \"hospital\",\n    \"host\",\n    \"hotel\",\n    \"hour\",\n    \"hover\",\n    \"hub\",\n    \"huge\",\n    \"human\",\n    \"humble\",\n    \"humor\",\n    \"hundred\",\n    \"hungry\",\n    \"hunt\",\n    \"hurdle\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"hybrid\",\n    \"ice\",\n    \"icon\",\n    \"idea\",\n    \"identify\",\n    \"idle\",\n    \"ignore\",\n    \"ill\",\n    \"illegal\",\n    \"illness\",\n    \"image\",\n    \"imitate\",\n    \"immense\",\n    \"immune\",\n    \"impact\",\n    \"impose\",\n    \"improve\",\n    \"impulse\",\n    \"inch\",\n    \"include\",\n    \"income\",\n    \"increase\",\n    \"index\",\n    \"indicate\",\n    \"indoor\",\n    \"industry\",\n    \"infant\",\n    \"inflict\",\n    \"inform\",\n    \"inhale\",\n    \"inherit\",\n    \"initial\",\n    \"inject\",\n    \"injury\",\n    \"inmate\",\n    \"inner\",\n    \"innocent\",\n    \"input\",\n    \"inquiry\",\n    \"insane\",\n    \"insect\",\n    \"inside\",\n    \"inspire\",\n    \"install\",\n    \"intact\",\n    \"interest\",\n    \"into\",\n    \"invest\",\n    \"invite\",\n    \"involve\",\n    \"iron\",\n    \"island\",\n    \"isolate\",\n    \"issue\",\n    \"item\",\n    \"ivory\",\n    \"jacket\",\n    \"jaguar\",\n    \"jar\",\n    \"jazz\",\n    \"jealous\",\n    \"jeans\",\n    \"jelly\",\n    \"jewel\",\n    \"job\",\n    \"join\",\n    \"joke\",\n    \"journey\",\n    \"joy\",\n    \"judge\",\n    \"juice\",\n    \"jump\",\n    \"jungle\",\n    \"junior\",\n    \"junk\",\n    \"just\",\n    \"kangaroo\",\n    \"keen\",\n    \"keep\",\n    \"ketchup\",\n    \"key\",\n    \"kick\",\n    \"kid\",\n    \"kidney\",\n    \"kind\",\n    \"kingdom\",\n    \"kiss\",\n    \"kit\",\n    \"kitchen\",\n    \"kite\",\n    \"kitten\",\n    \"kiwi\",\n    \"knee\",\n    \"knife\",\n    \"knock\",\n    \"know\",\n    \"lab\",\n    \"label\",\n    \"labor\",\n    \"ladder\",\n    \"lady\",\n    \"lake\",\n    \"lamp\",\n    \"language\",\n    \"laptop\",\n    \"large\",\n    \"later\",\n    \"latin\",\n    \"laugh\",\n    \"laundry\",\n    \"lava\",\n    \"law\",\n    \"lawn\",\n    \"lawsuit\",\n    \"layer\",\n    \"lazy\",\n    \"leader\",\n    \"leaf\",\n    \"learn\",\n    \"leave\",\n    \"lecture\",\n    \"left\",\n    \"leg\",\n    \"legal\",\n    \"legend\",\n    \"leisure\",\n    \"lemon\",\n    \"lend\",\n    \"length\",\n    \"lens\",\n    \"leopard\",\n    \"lesson\",\n    \"letter\",\n    \"level\",\n    \"liar\",\n    \"liberty\",\n    \"library\",\n    \"license\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"like\",\n    \"limb\",\n    \"limit\",\n    \"link\",\n    \"lion\",\n    \"liquid\",\n    \"list\",\n    \"little\",\n    \"live\",\n    \"lizard\",\n    \"load\",\n    \"loan\",\n    \"lobster\",\n    \"local\",\n    \"lock\",\n    \"logic\",\n    \"lonely\",\n    \"long\",\n    \"loop\",\n    \"lottery\",\n    \"loud\",\n    \"lounge\",\n    \"love\",\n    \"loyal\",\n    \"lucky\",\n    \"luggage\",\n    \"lumber\",\n    \"lunar\",\n    \"lunch\",\n    \"luxury\",\n    \"lyrics\",\n    \"machine\",\n    \"mad\",\n    \"magic\",\n    \"magnet\",\n    \"maid\",\n    \"mail\",\n    \"main\",\n    \"major\",\n    \"make\",\n    \"mammal\",\n    \"man\",\n    \"manage\",\n    \"mandate\",\n    \"mango\",\n    \"mansion\",\n    \"manual\",\n    \"maple\",\n    \"marble\",\n    \"march\",\n    \"margin\",\n    \"marine\",\n    \"market\",\n    \"marriage\",\n    \"mask\",\n    \"mass\",\n    \"master\",\n    \"match\",\n    \"material\",\n    \"math\",\n    \"matrix\",\n    \"matter\",\n    \"maximum\",\n    \"maze\",\n    \"meadow\",\n    \"mean\",\n    \"measure\",\n    \"meat\",\n    \"mechanic\",\n    \"medal\",\n    \"media\",\n    \"melody\",\n    \"melt\",\n    \"member\",\n    \"memory\",\n    \"mention\",\n    \"menu\",\n    \"mercy\",\n    \"merge\",\n    \"merit\",\n    \"merry\",\n    \"mesh\",\n    \"message\",\n    \"metal\",\n    \"method\",\n    \"middle\",\n    \"midnight\",\n    \"milk\",\n    \"million\",\n    \"mimic\",\n    \"mind\",\n    \"minimum\",\n    \"minor\",\n    \"minute\",\n    \"miracle\",\n    \"mirror\",\n    \"misery\",\n    \"miss\",\n    \"mistake\",\n    \"mix\",\n    \"mixed\",\n    \"mixture\",\n    \"mobile\",\n    \"model\",\n    \"modify\",\n    \"mom\",\n    \"moment\",\n    \"monitor\",\n    \"monkey\",\n    \"monster\",\n    \"month\",\n    \"moon\",\n    \"moral\",\n    \"more\",\n    \"morning\",\n    \"mosquito\",\n    \"mother\",\n    \"motion\",\n    \"motor\",\n    \"mountain\",\n    \"mouse\",\n    \"move\",\n    \"movie\",\n    \"much\",\n    \"muffin\",\n    \"mule\",\n    \"multiply\",\n    \"muscle\",\n    \"museum\",\n    \"mushroom\",\n    \"music\",\n    \"must\",\n    \"mutual\",\n    \"myself\",\n    \"mystery\",\n    \"myth\",\n    \"naive\",\n    \"name\",\n    \"napkin\",\n    \"narrow\",\n    \"nasty\",\n    \"nation\",\n    \"nature\",\n    \"near\",\n    \"neck\",\n    \"need\",\n    \"negative\",\n    \"neglect\",\n    \"neither\",\n    \"nephew\",\n    \"nerve\",\n    \"nest\",\n    \"net\",\n    \"network\",\n    \"neutral\",\n    \"never\",\n    \"news\",\n    \"next\",\n    \"nice\",\n    \"night\",\n    \"noble\",\n    \"noise\",\n    \"nominee\",\n    \"noodle\",\n    \"normal\",\n    \"north\",\n    \"nose\",\n    \"notable\",\n    \"note\",\n    \"nothing\",\n    \"notice\",\n    \"novel\",\n    \"now\",\n    \"nuclear\",\n    \"number\",\n    \"nurse\",\n    \"nut\",\n    \"oak\",\n    \"obey\",\n    \"object\",\n    \"oblige\",\n    \"obscure\",\n    \"observe\",\n    \"obtain\",\n    \"obvious\",\n    \"occur\",\n    \"ocean\",\n    \"october\",\n    \"odor\",\n    \"off\",\n    \"offer\",\n    \"office\",\n    \"often\",\n    \"oil\",\n    \"okay\",\n    \"old\",\n    \"olive\",\n    \"olympic\",\n    \"omit\",\n    \"once\",\n    \"one\",\n    \"onion\",\n    \"online\",\n    \"only\",\n    \"open\",\n    \"opera\",\n    \"opinion\",\n    \"oppose\",\n    \"option\",\n    \"orange\",\n    \"orbit\",\n    \"orchard\",\n    \"order\",\n    \"ordinary\",\n    \"organ\",\n    \"orient\",\n    \"original\",\n    \"orphan\",\n    \"ostrich\",\n    \"other\",\n    \"outdoor\",\n    \"outer\",\n    \"output\",\n    \"outside\",\n    \"oval\",\n    \"oven\",\n    \"over\",\n    \"own\",\n    \"owner\",\n    \"oxygen\",\n    \"oyster\",\n    \"ozone\",\n    \"pact\",\n    \"paddle\",\n    \"page\",\n    \"pair\",\n    \"palace\",\n    \"palm\",\n    \"panda\",\n    \"panel\",\n    \"panic\",\n    \"panther\",\n    \"paper\",\n    \"parade\",\n    \"parent\",\n    \"park\",\n    \"parrot\",\n    \"party\",\n    \"pass\",\n    \"patch\",\n    \"path\",\n    \"patient\",\n    \"patrol\",\n    \"pattern\",\n    \"pause\",\n    \"pave\",\n    \"payment\",\n    \"peace\",\n    \"peanut\",\n    \"pear\",\n    \"peasant\",\n    \"pelican\",\n    \"pen\",\n    \"penalty\",\n    \"pencil\",\n    \"people\",\n    \"pepper\",\n    \"perfect\",\n    \"permit\",\n    \"person\",\n    \"pet\",\n    \"phone\",\n    \"photo\",\n    \"phrase\",\n    \"physical\",\n    \"piano\",\n    \"picnic\",\n    \"picture\",\n    \"piece\",\n    \"pig\",\n    \"pigeon\",\n    \"pill\",\n    \"pilot\",\n    \"pink\",\n    \"pioneer\",\n    \"pipe\",\n    \"pistol\",\n    \"pitch\",\n    \"pizza\",\n    \"place\",\n    \"planet\",\n    \"plastic\",\n    \"plate\",\n    \"play\",\n    \"please\",\n    \"pledge\",\n    \"pluck\",\n    \"plug\",\n    \"plunge\",\n    \"poem\",\n    \"poet\",\n    \"point\",\n    \"polar\",\n    \"pole\",\n    \"police\",\n    \"pond\",\n    \"pony\",\n    \"pool\",\n    \"popular\",\n    \"portion\",\n    \"position\",\n    \"possible\",\n    \"post\",\n    \"potato\",\n    \"pottery\",\n    \"poverty\",\n    \"powder\",\n    \"power\",\n    \"practice\",\n    \"praise\",\n    \"predict\",\n    \"prefer\",\n    \"prepare\",\n    \"present\",\n    \"pretty\",\n    \"prevent\",\n    \"price\",\n    \"pride\",\n    \"primary\",\n    \"print\",\n    \"priority\",\n    \"prison\",\n    \"private\",\n    \"prize\",\n    \"problem\",\n    \"process\",\n    \"produce\",\n    \"profit\",\n    \"program\",\n    \"project\",\n    \"promote\",\n    \"proof\",\n    \"property\",\n    \"prosper\",\n    \"protect\",\n    \"proud\",\n    \"provide\",\n    \"public\",\n    \"pudding\",\n    \"pull\",\n    \"pulp\",\n    \"pulse\",\n    \"pumpkin\",\n    \"punch\",\n    \"pupil\",\n    \"puppy\",\n    \"purchase\",\n    \"purity\",\n    \"purpose\",\n    \"purse\",\n    \"push\",\n    \"put\",\n    \"puzzle\",\n    \"pyramid\",\n    \"quality\",\n    \"quantum\",\n    \"quarter\",\n    \"question\",\n    \"quick\",\n    \"quit\",\n    \"quiz\",\n    \"quote\",\n    \"rabbit\",\n    \"raccoon\",\n    \"race\",\n    \"rack\",\n    \"radar\",\n    \"radio\",\n    \"rail\",\n    \"rain\",\n    \"raise\",\n    \"rally\",\n    \"ramp\",\n    \"ranch\",\n    \"random\",\n    \"range\",\n    \"rapid\",\n    \"rare\",\n    \"rate\",\n    \"rather\",\n    \"raven\",\n    \"raw\",\n    \"razor\",\n    \"ready\",\n    \"real\",\n    \"reason\",\n    \"rebel\",\n    \"rebuild\",\n    \"recall\",\n    \"receive\",\n    \"recipe\",\n    \"record\",\n    \"recycle\",\n    \"reduce\",\n    \"reflect\",\n    \"reform\",\n    \"refuse\",\n    \"region\",\n    \"regret\",\n    \"regular\",\n    \"reject\",\n    \"relax\",\n    \"release\",\n    \"relief\",\n    \"rely\",\n    \"remain\",\n    \"remember\",\n    \"remind\",\n    \"remove\",\n    \"render\",\n    \"renew\",\n    \"rent\",\n    \"reopen\",\n    \"repair\",\n    \"repeat\",\n    \"replace\",\n    \"report\",\n    \"require\",\n    \"rescue\",\n    \"resemble\",\n    \"resist\",\n    \"resource\",\n    \"response\",\n    \"result\",\n    \"retire\",\n    \"retreat\",\n    \"return\",\n    \"reunion\",\n    \"reveal\",\n    \"review\",\n    \"reward\",\n    \"rhythm\",\n    \"rib\",\n    \"ribbon\",\n    \"rice\",\n    \"rich\",\n    \"ride\",\n    \"ridge\",\n    \"rifle\",\n    \"right\",\n    \"rigid\",\n    \"ring\",\n    \"riot\",\n    \"ripple\",\n    \"risk\",\n    \"ritual\",\n    \"rival\",\n    \"river\",\n    \"road\",\n    \"roast\",\n    \"robot\",\n    \"robust\",\n    \"rocket\",\n    \"romance\",\n    \"roof\",\n    \"rookie\",\n    \"room\",\n    \"rose\",\n    \"rotate\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"royal\",\n    \"rubber\",\n    \"rude\",\n    \"rug\",\n    \"rule\",\n    \"run\",\n    \"runway\",\n    \"rural\",\n    \"sad\",\n    \"saddle\",\n    \"sadness\",\n    \"safe\",\n    \"sail\",\n    \"salad\",\n    \"salmon\",\n    \"salon\",\n    \"salt\",\n    \"salute\",\n    \"same\",\n    \"sample\",\n    \"sand\",\n    \"satisfy\",\n    \"satoshi\",\n    \"sauce\",\n    \"sausage\",\n    \"save\",\n    \"say\",\n    \"scale\",\n    \"scan\",\n    \"scare\",\n    \"scatter\",\n    \"scene\",\n    \"scheme\",\n    \"school\",\n    \"science\",\n    \"scissors\",\n    \"scorpion\",\n    \"scout\",\n    \"scrap\",\n    \"screen\",\n    \"script\",\n    \"scrub\",\n    \"sea\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"section\",\n    \"security\",\n    \"seed\",\n    \"seek\",\n    \"segment\",\n    \"select\",\n    \"sell\",\n    \"seminar\",\n    \"senior\",\n    \"sense\",\n    \"sentence\",\n    \"series\",\n    \"service\",\n    \"session\",\n    \"settle\",\n    \"setup\",\n    \"seven\",\n    \"shadow\",\n    \"shaft\",\n    \"shallow\",\n    \"share\",\n    \"shed\",\n    \"shell\",\n    \"sheriff\",\n    \"shield\",\n    \"shift\",\n    \"shine\",\n    \"ship\",\n    \"shiver\",\n    \"shock\",\n    \"shoe\",\n    \"shoot\",\n    \"shop\",\n    \"short\",\n    \"shoulder\",\n    \"shove\",\n    \"shrimp\",\n    \"shrug\",\n    \"shuffle\",\n    \"shy\",\n    \"sibling\",\n    \"sick\",\n    \"side\",\n    \"siege\",\n    \"sight\",\n    \"sign\",\n    \"silent\",\n    \"silk\",\n    \"silly\",\n    \"silver\",\n    \"similar\",\n    \"simple\",\n    \"since\",\n    \"sing\",\n    \"siren\",\n    \"sister\",\n    \"situate\",\n    \"six\",\n    \"size\",\n    \"skate\",\n    \"sketch\",\n    \"ski\",\n    \"skill\",\n    \"skin\",\n    \"skirt\",\n    \"skull\",\n    \"slab\",\n    \"slam\",\n    \"sleep\",\n    \"slender\",\n    \"slice\",\n    \"slide\",\n    \"slight\",\n    \"slim\",\n    \"slogan\",\n    \"slot\",\n    \"slow\",\n    \"slush\",\n    \"small\",\n    \"smart\",\n    \"smile\",\n    \"smoke\",\n    \"smooth\",\n    \"snack\",\n    \"snake\",\n    \"snap\",\n    \"sniff\",\n    \"snow\",\n    \"soap\",\n    \"soccer\",\n    \"social\",\n    \"sock\",\n    \"soda\",\n    \"soft\",\n    \"solar\",\n    \"soldier\",\n    \"solid\",\n    \"solution\",\n    \"solve\",\n    \"someone\",\n    \"song\",\n    \"soon\",\n    \"sorry\",\n    \"sort\",\n    \"soul\",\n    \"sound\",\n    \"soup\",\n    \"source\",\n    \"south\",\n    \"space\",\n    \"spare\",\n    \"spatial\",\n    \"spawn\",\n    \"speak\",\n    \"special\",\n    \"speed\",\n    \"spell\",\n    \"spend\",\n    \"sphere\",\n    \"spice\",\n    \"spider\",\n    \"spike\",\n    \"spin\",\n    \"spirit\",\n    \"split\",\n    \"spoil\",\n    \"sponsor\",\n    \"spoon\",\n    \"sport\",\n    \"spot\",\n    \"spray\",\n    \"spread\",\n    \"spring\",\n    \"spy\",\n    \"square\",\n    \"squeeze\",\n    \"squirrel\",\n    \"stable\",\n    \"stadium\",\n    \"staff\",\n    \"stage\",\n    \"stairs\",\n    \"stamp\",\n    \"stand\",\n    \"start\",\n    \"state\",\n    \"stay\",\n    \"steak\",\n    \"steel\",\n    \"stem\",\n    \"step\",\n    \"stereo\",\n    \"stick\",\n    \"still\",\n    \"sting\",\n    \"stock\",\n    \"stomach\",\n    \"stone\",\n    \"stool\",\n    \"story\",\n    \"stove\",\n    \"strategy\",\n    \"street\",\n    \"strike\",\n    \"strong\",\n    \"struggle\",\n    \"student\",\n    \"stuff\",\n    \"stumble\",\n    \"style\",\n    \"subject\",\n    \"submit\",\n    \"subway\",\n    \"success\",\n    \"such\",\n    \"sudden\",\n    \"suffer\",\n    \"sugar\",\n    \"suggest\",\n    \"suit\",\n    \"summer\",\n    \"sun\",\n    \"sunny\",\n    \"sunset\",\n    \"super\",\n    \"supply\",\n    \"supreme\",\n    \"sure\",\n    \"surface\",\n    \"surge\",\n    \"surprise\",\n    \"surround\",\n    \"survey\",\n    \"suspect\",\n    \"sustain\",\n    \"swallow\",\n    \"swamp\",\n    \"swap\",\n    \"swarm\",\n    \"swear\",\n    \"sweet\",\n    \"swift\",\n    \"swim\",\n    \"swing\",\n    \"switch\",\n    \"sword\",\n    \"symbol\",\n    \"symptom\",\n    \"syrup\",\n    \"system\",\n    \"table\",\n    \"tackle\",\n    \"tag\",\n    \"tail\",\n    \"talent\",\n    \"talk\",\n    \"tank\",\n    \"tape\",\n    \"target\",\n    \"task\",\n    \"taste\",\n    \"tattoo\",\n    \"taxi\",\n    \"teach\",\n    \"team\",\n    \"tell\",\n    \"ten\",\n    \"tenant\",\n    \"tennis\",\n    \"tent\",\n    \"term\",\n    \"test\",\n    \"text\",\n    \"thank\",\n    \"that\",\n    \"theme\",\n    \"then\",\n    \"theory\",\n    \"there\",\n    \"they\",\n    \"thing\",\n    \"this\",\n    \"thought\",\n    \"three\",\n    \"thrive\",\n    \"throw\",\n    \"thumb\",\n    \"thunder\",\n    \"ticket\",\n    \"tide\",\n    \"tiger\",\n    \"tilt\",\n    \"timber\",\n    \"time\",\n    \"tiny\",\n    \"tip\",\n    \"tired\",\n    \"tissue\",\n    \"title\",\n    \"toast\",\n    \"tobacco\",\n    \"today\",\n    \"toddler\",\n    \"toe\",\n    \"together\",\n    \"toilet\",\n    \"token\",\n    \"tomato\",\n    \"tomorrow\",\n    \"tone\",\n    \"tongue\",\n    \"tonight\",\n    \"tool\",\n    \"tooth\",\n    \"top\",\n    \"topic\",\n    \"topple\",\n    \"torch\",\n    \"tornado\",\n    \"tortoise\",\n    \"toss\",\n    \"total\",\n    \"tourist\",\n    \"toward\",\n    \"tower\",\n    \"town\",\n    \"toy\",\n    \"track\",\n    \"trade\",\n    \"traffic\",\n    \"tragic\",\n    \"train\",\n    \"transfer\",\n    \"trap\",\n    \"trash\",\n    \"travel\",\n    \"tray\",\n    \"treat\",\n    \"tree\",\n    \"trend\",\n    \"trial\",\n    \"tribe\",\n    \"trick\",\n    \"trigger\",\n    \"trim\",\n    \"trip\",\n    \"trophy\",\n    \"trouble\",\n    \"truck\",\n    \"true\",\n    \"truly\",\n    \"trumpet\",\n    \"trust\",\n    \"truth\",\n    \"try\",\n    \"tube\",\n    \"tuition\",\n    \"tumble\",\n    \"tuna\",\n    \"tunnel\",\n    \"turkey\",\n    \"turn\",\n    \"turtle\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"twin\",\n    \"twist\",\n    \"two\",\n    \"type\",\n    \"typical\",\n    \"ugly\",\n    \"umbrella\",\n    \"unable\",\n    \"unaware\",\n    \"uncle\",\n    \"uncover\",\n    \"under\",\n    \"undo\",\n    \"unfair\",\n    \"unfold\",\n    \"unhappy\",\n    \"uniform\",\n    \"unique\",\n    \"unit\",\n    \"universe\",\n    \"unknown\",\n    \"unlock\",\n    \"until\",\n    \"unusual\",\n    \"unveil\",\n    \"update\",\n    \"upgrade\",\n    \"uphold\",\n    \"upon\",\n    \"upper\",\n    \"upset\",\n    \"urban\",\n    \"urge\",\n    \"usage\",\n    \"use\",\n    \"used\",\n    \"useful\",\n    \"useless\",\n    \"usual\",\n    \"utility\",\n    \"vacant\",\n    \"vacuum\",\n    \"vague\",\n    \"valid\",\n    \"valley\",\n    \"valve\",\n    \"van\",\n    \"vanish\",\n    \"vapor\",\n    \"various\",\n    \"vast\",\n    \"vault\",\n    \"vehicle\",\n    \"velvet\",\n    \"vendor\",\n    \"venture\",\n    \"venue\",\n    \"verb\",\n    \"verify\",\n    \"version\",\n    \"very\",\n    \"vessel\",\n    \"veteran\",\n    \"viable\",\n    \"vibrant\",\n    \"vicious\",\n    \"victory\",\n    \"video\",\n    \"view\",\n    \"village\",\n    \"vintage\",\n    \"violin\",\n    \"virtual\",\n    \"virus\",\n    \"visa\",\n    \"visit\",\n    \"visual\",\n    \"vital\",\n    \"vivid\",\n    \"vocal\",\n    \"voice\",\n    \"void\",\n    \"volcano\",\n    \"volume\",\n    \"vote\",\n    \"voyage\",\n    \"wage\",\n    \"wagon\",\n    \"wait\",\n    \"walk\",\n    \"wall\",\n    \"walnut\",\n    \"want\",\n    \"warfare\",\n    \"warm\",\n    \"warrior\",\n    \"wash\",\n    \"wasp\",\n    \"waste\",\n    \"water\",\n    \"wave\",\n    \"way\",\n    \"wealth\",\n    \"weapon\",\n    \"wear\",\n    \"weasel\",\n    \"weather\",\n    \"web\",\n    \"wedding\",\n    \"weekend\",\n    \"weird\",\n    \"welcome\",\n    \"west\",\n    \"wet\",\n    \"whale\",\n    \"what\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"where\",\n    \"whip\",\n    \"whisper\",\n    \"wide\",\n    \"width\",\n    \"wife\",\n    \"wild\",\n    \"will\",\n    \"win\",\n    \"window\",\n    \"wine\",\n    \"wing\",\n    \"wink\",\n    \"winner\",\n    \"winter\",\n    \"wire\",\n    \"wisdom\",\n    \"wise\",\n    \"wish\",\n    \"witness\",\n    \"wolf\",\n    \"woman\",\n    \"wonder\",\n    \"wood\",\n    \"wool\",\n    \"word\",\n    \"work\",\n    \"world\",\n    \"worry\",\n    \"worth\",\n    \"wrap\",\n    \"wreck\",\n    \"wrestle\",\n    \"wrist\",\n    \"write\",\n    \"wrong\",\n    \"yard\",\n    \"year\",\n    \"yellow\",\n    \"you\",\n    \"young\",\n    \"youth\",\n    \"zebra\",\n    \"zero\",\n    \"zone\",\n    \"zoo\",\n];\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/**\n * @param {Uint8Array} data\n * @returns {Promise<Uint8Array>}\n */\nexport async function digest(data) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\n    return new Uint8Array(await crypto.subtle.digest(\"SHA-256\", data));\n}\n","/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nexport function decode(data) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    return new TextDecoder().decode(data);\n}\n\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nexport function encode(text) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    return new TextEncoder().encode(text);\n}\n","import * as utf8 from \"../encoding/utf8.js\";\n\n/**\n * @typedef {import(\"./hmac.js\").HashAlgorithm} HashAlgorithm\n */\n\n/**\n * @param {HashAlgorithm} algorithm\n * @param {Uint8Array | string} password\n * @param {Uint8Array | string} salt\n * @param {number} iterations\n * @param {number} length\n * @returns {Promise<Uint8Array>}\n */\nexport async function deriveKey(algorithm, password, salt, iterations, length) {\n    const pass =\n        typeof password === \"string\"\n            ? // Valid ASCII is also valid UTF-8 so encoding the password as UTF-8\n              // should be fine if only valid ASCII characters are used in the password\n              utf8.encode(password)\n            : password;\n\n    const nacl = typeof salt === \"string\" ? utf8.encode(salt) : salt;\n\n    try {\n        const key = await window.crypto.subtle.importKey(\n            \"raw\",\n            pass,\n            {\n                name: \"PBKDF2\",\n                hash: algorithm,\n            },\n            false,\n            [\"deriveBits\"]\n        );\n\n        return new Uint8Array(\n            await window.crypto.subtle.deriveBits(\n                {\n                    name: \"PBKDF2\",\n                    hash: algorithm,\n                    salt: nacl,\n                    iterations,\n                },\n                key,\n                length << 3\n            )\n        );\n    } catch {\n        throw new Error(\"(BUG) Non-Exhaustive switch statement for algorithms\");\n    }\n}\n","import * as utf8 from \"../encoding/utf8.js\";\n\n/**\n * @enum {string}\n */\nexport const HashAlgorithm = {\n    Sha256: \"SHA-256\",\n    Sha384: \"SHA-384\",\n    Sha512: \"SHA-512\",\n};\n\n/**\n * @param {HashAlgorithm} algorithm\n * @param {Uint8Array | string} secretKey\n * @param {Uint8Array | string} data\n * @returns {Promise<Uint8Array>}\n */\nexport async function hash(algorithm, secretKey, data) {\n    const key =\n        typeof secretKey === \"string\" ? utf8.encode(secretKey) : secretKey;\n    const value = typeof data === \"string\" ? utf8.encode(data) : data;\n\n    try {\n        const key_ = await window.crypto.subtle.importKey(\n            \"raw\",\n            key,\n            {\n                name: \"HMAC\",\n                hash: algorithm,\n            },\n            false,\n            [\"sign\"]\n        );\n\n        return new Uint8Array(\n            await window.crypto.subtle.sign(\"HMAC\", key_, value)\n        );\n    } catch {\n        throw new Error(\"Fallback if SubtleCrypto fails is not implemented\");\n    }\n}\n","import * as hmac from \"../primitive/hmac.js\";\n\n/**\n * @param {Uint8Array} parentKey\n * @param {Uint8Array} chainCode\n * @param {number} index\n * @returns {Promise<{ keyData: Uint8Array; chainCode: Uint8Array }>}\n */\nexport async function derive(parentKey, chainCode, index) {\n    const input = new Uint8Array(37);\n\n    // 0x00 + parentKey + index(BE)\n    input[0] = 0;\n    input.set(parentKey, 1);\n    new DataView(input.buffer).setUint32(33, index, false);\n\n    // set the index to hardened\n    input[33] |= 128;\n\n    const digest = await hmac.hash(hmac.HashAlgorithm.Sha512, chainCode, input);\n\n    return { keyData: digest.subarray(0, 32), chainCode: digest.subarray(32) };\n}\n","import PrivateKey from \"./PrivateKey.js\";\nimport BadMnemonicError from \"./BadMnemonicError.js\";\nimport BadMnemonicReason from \"./BadMnemonicReason.js\";\nimport legacyWords from \"./words/legacy.js\";\nimport bip39Words from \"./words/bip39.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as sha256 from \"./primitive/sha256.js\";\nimport * as pbkdf2 from \"./primitive/pbkdf2.js\";\nimport nacl from \"tweetnacl\";\nimport * as hmac from \"./primitive/hmac.js\";\nimport * as slip10 from \"./primitive/slip10.js\";\n\n/**\n * Multi-word mnemonic phrase (BIP-39).\n *\n * Compatible with the official Hedera mobile\n * wallets (24-words or 22-words) and BRD (12-words).\n */\nexport default class Mnemonic {\n    /**\n     * @param {Object} props\n     * @param {string[]} props.words\n     * @param {boolean} props.legacy\n     * @throws {BadMnemonicError}\n     * @hideconstructor\n     * @private\n     */\n    constructor({ words, legacy }) {\n        this.words = words;\n        this._isLegacy = legacy;\n    }\n\n    /**\n     * Returns a new random 24-word mnemonic from the BIP-39\n     * standard English word list.\n     *\n     * @returns {Promise<Mnemonic>}\n     */\n    static generate() {\n        return Mnemonic._generate(24);\n    }\n\n    /**\n     * Returns a new random 12-word mnemonic from the BIP-39\n     * standard English word list.\n     *\n     * @returns {Promise<Mnemonic>}\n     */\n    static generate12() {\n        return Mnemonic._generate(12);\n    }\n\n    /**\n     * @param {number} length\n     * @returns {Promise<Mnemonic>}\n     */\n    static async _generate(length) {\n        // only 12-word or 24-word lengths are supported\n        let neededEntropy;\n\n        if (length === 12) neededEntropy = 16;\n        else if (length === 24) neededEntropy = 32;\n        else {\n            throw new Error(\n                `unsupported phrase length ${length}, only 12 or 24 are supported`\n            );\n        }\n\n        // inlined from (ISC) with heavy alternations for modern crypto\n        // https://github.com/bitcoinjs/bip39/blob/8461e83677a1d2c685d0d5a9ba2a76bd228f74c6/ts_src/index.ts#L125\n        const entropy = nacl.randomBytes(neededEntropy);\n        const entropyBits = bytesToBinary(Array.from(entropy));\n        const checksumBits = await deriveChecksumBits(entropy);\n        const bits = entropyBits + checksumBits;\n        const chunks = bits.match(/(.{1,11})/g);\n\n        const words = (chunks != null ? chunks : []).map(\n            (binary) => bip39Words[binaryToByte(binary)]\n        );\n\n        return new Mnemonic({ words, legacy: false });\n    }\n\n    /**\n     * Construct a mnemonic from a list of words. Handles 12, 22 (legacy), and 24 words.\n     *\n     * An exception of BadMnemonicError will be thrown if the mnemonic\n     * contains unknown words or fails the checksum. An invalid mnemonic\n     * can still be used to create private keys, the exception will\n     * contain the failing mnemonic in case you wish to ignore the\n     * validation error and continue.\n     *\n     * @param {string[]} words\n     * @throws {BadMnemonicError}\n     * @returns {Promise<Mnemonic>}\n     */\n    static async fromWords(words) {\n        return await new Mnemonic({\n            words,\n            legacy: words.length === 22,\n        })._validate();\n    }\n\n    /**\n     * Recover a private key from this mnemonic phrase, with an\n     * optional passphrase.\n     *\n     * @param {string} [passphrase]\n     * @returns {Promise<PrivateKey>}\n     */\n    async toPrivateKey(passphrase = \"\") {\n        if (this._isLegacy) {\n            if (passphrase.length > 0) {\n                throw new Error(\n                    \"legacy 22-word mnemonics do not support passphrases\"\n                );\n            }\n\n            return this._toLegacyPrivateKey();\n        }\n\n        return await this._toPrivateKey(passphrase);\n    }\n\n    /**\n     * Recover a mnemonic phrase from a string, splitting on spaces. Handles 12, 22 (legacy), and 24 words.\n     *\n     * @param {string} mnemonic\n     * @returns {Promise<Mnemonic>}\n     */\n    static async fromString(mnemonic) {\n        return Mnemonic.fromWords(mnemonic.split(/\\s|,/));\n    }\n\n    /**\n     * @returns {Promise<Mnemonic>}\n     * @private\n     */\n    async _validate() {\n        // Validate that this is a valid BIP-39 mnemonic\n        // as generated by BIP-39's rules.\n\n        // Technically, invalid mnemonics can still be used to generate valid private keys,\n        // but if they became invalid due to user error then it will be difficult for the user\n        // to tell the difference unless they compare the generated keys.\n\n        // During validation, the following conditions are checked in order\n\n        //  1)) 24 or 12 words\n\n        //  2) All strings in {@link this.words} exist in the BIP-39\n        //     standard English word list (no normalization is done)\n\n        //  3) The calculated checksum for the mnemonic equals the\n        //     checksum encoded in the mnemonic\n\n        if (this._isLegacy) {\n            if (this.words.length !== 22) {\n                throw new BadMnemonicError(\n                    this,\n                    BadMnemonicReason.BadLength,\n                    []\n                );\n            }\n\n            const unknownWordIndices = this.words.reduce(\n                (/** @type {number[]} */ unknowns, word, index) =>\n                    legacyWords.includes(word.toLowerCase())\n                        ? unknowns\n                        : [...unknowns, index],\n                []\n            );\n\n            if (unknownWordIndices.length > 0) {\n                throw new BadMnemonicError(\n                    this,\n                    BadMnemonicReason.UnknownWords,\n                    unknownWordIndices\n                );\n            }\n\n            const [entropy, checksum] = this._toLegacyEntropy();\n            const newChecksum = _crc8(entropy);\n\n            if (checksum !== newChecksum) {\n                throw new BadMnemonicError(\n                    this,\n                    BadMnemonicReason.ChecksumMismatch,\n                    []\n                );\n            }\n        } else {\n            if (!(this.words.length === 12 || this.words.length === 24)) {\n                throw new BadMnemonicError(\n                    this,\n                    BadMnemonicReason.BadLength,\n                    []\n                );\n            }\n\n            const unknownWordIndices = this.words.reduce(\n                (/** @type {number[]} */ unknowns, word, index) =>\n                    bip39Words.includes(word) ? unknowns : [...unknowns, index],\n                []\n            );\n\n            if (unknownWordIndices.length > 0) {\n                throw new BadMnemonicError(\n                    this,\n                    BadMnemonicReason.UnknownWords,\n                    unknownWordIndices\n                );\n            }\n\n            // FIXME: calculate checksum and compare\n            // https://github.com/bitcoinjs/bip39/blob/master/ts_src/index.ts#L112\n\n            const bits = this.words\n                .map((word) => {\n                    return bip39Words\n                        .indexOf(word)\n                        .toString(2)\n                        .padStart(11, \"0\");\n                })\n                .join(\"\");\n\n            const dividerIndex = Math.floor(bits.length / 33) * 32;\n            const entropyBits = bits.slice(0, dividerIndex);\n            const checksumBits = bits.slice(dividerIndex);\n            const entropyBitsRegex = entropyBits.match(/(.{1,8})/g);\n            const entropyBytes = /** @type {RegExpMatchArray} */ (entropyBitsRegex).map(\n                binaryToByte\n            );\n\n            const newChecksum = await deriveChecksumBits(\n                Uint8Array.from(entropyBytes)\n            );\n\n            if (newChecksum !== checksumBits) {\n                throw new BadMnemonicError(\n                    this,\n                    BadMnemonicReason.ChecksumMismatch,\n                    []\n                );\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {string} passphrase\n     * @returns {Promise<PrivateKey>}\n     */\n    async _toPrivateKey(passphrase = \"\") {\n        const input = this.words.join(\" \");\n        const salt = `mnemonic${passphrase}`;\n\n        const seed = await pbkdf2.deriveKey(\n            hmac.HashAlgorithm.Sha512,\n            input,\n            salt,\n            2048,\n            64\n        );\n\n        const digest = await hmac.hash(\n            hmac.HashAlgorithm.Sha512,\n            \"ed25519 seed\",\n            seed\n        );\n\n        let keyData = digest.subarray(0, 32);\n        let chainCode = digest.subarray(32);\n\n        for (const index of [44, 3030, 0, 0]) {\n            ({ keyData, chainCode } = await slip10.derive(\n                keyData,\n                chainCode,\n                index\n            ));\n        }\n\n        const keyPair = nacl.sign.keyPair.fromSeed(keyData);\n\n        return new PrivateKey(keyPair, chainCode);\n    }\n\n    /**\n     * @private\n     * @returns {Promise<PrivateKey>}\n     */\n    async _toLegacyPrivateKey() {\n        const index = -1;\n        const [entropy] = this._toLegacyEntropy();\n\n        const password = new Uint8Array(entropy.length + 8);\n        password.set(entropy, 0);\n\n        const view = new DataView(\n            password.buffer,\n            password.byteOffset + entropy.length,\n            8\n        );\n        view.setInt32(0, index);\n        view.setInt32(4, index);\n\n        const salt = Uint8Array.from([0xff]);\n        const keyData = await pbkdf2.deriveKey(\n            hmac.HashAlgorithm.Sha512,\n            password,\n            salt,\n            2048,\n            32\n        );\n\n        return PrivateKey.fromBytes(keyData);\n    }\n\n    /**\n     * @private\n     * @returns {[Uint8Array, number]}\n     */\n    _toLegacyEntropy() {\n        const indicies = this.words.map((word) =>\n            legacyWords.indexOf(word.toLowerCase())\n        );\n        const data = _convertRadix(indicies, legacyWords.length, 256, 33);\n        const checksum = data[data.length - 1];\n        const result = new Uint8Array(data.length - 1);\n\n        for (let i = 0; i < data.length - 1; i += 1) {\n            result[i] = data[i] ^ checksum;\n        }\n\n        return [result, checksum];\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return this.words.join(\" \");\n    }\n}\n\n/**\n * @param {Uint8Array} data\n * @returns {number}\n */\nfunction _crc8(data) {\n    let crc = 0xff;\n\n    for (let i = 0; i < data.length - 1; i += 1) {\n        crc ^= data[i];\n        for (let j = 0; j < 8; j += 1) {\n            crc = (crc >>> 1) ^ ((crc & 1) === 0 ? 0 : 0xb2);\n        }\n    }\n\n    return crc ^ 0xff;\n}\n\n/**\n * @param {number[]} nums\n * @param {number} fromRadix\n * @param {number} toRadix\n * @param {number} toLength\n * @returns {Uint8Array}\n */\nfunction _convertRadix(nums, fromRadix, toRadix, toLength) {\n    let num = new BigNumber(0);\n\n    for (const element of nums) {\n        num = num.times(fromRadix);\n        num = num.plus(element);\n    }\n\n    const result = new Uint8Array(toLength);\n\n    for (let i = toLength - 1; i >= 0; i -= 1) {\n        const tem = num.dividedToIntegerBy(toRadix);\n        const rem = num.modulo(toRadix);\n        num = tem;\n        result[i] = rem.toNumber();\n    }\n\n    return result;\n}\n\n/**\n * @param {string} bin\n * @returns {number}\n */\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\n\n/**\n * @param {number[]} bytes\n * @returns {string}\n */\nfunction bytesToBinary(bytes) {\n    return bytes.map((x) => x.toString(2).padStart(8, \"0\")).join(\"\");\n}\n\n/**\n * @param {Uint8Array} entropyBuffer\n * @returns {Promise<string>}\n */\nasync function deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = await sha256.digest(entropyBuffer);\n\n    return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\n","export const CipherAlgorithm = {\n    Aes128Ctr: \"AES-128-CTR\",\n    Aes128Cbc: \"AES-128-CBC\",\n};\n\n/**\n * @param {string} algorithm\n * @param {Uint8Array} key\n * @param {Uint8Array} iv\n * @param {Uint8Array} data\n * @returns {Promise<Uint8Array>}\n */\nexport async function createCipheriv(algorithm, key, iv, data) {\n    let algorithm_;\n\n    switch (algorithm) {\n        case CipherAlgorithm.Aes128Ctr:\n            algorithm_ = {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 128,\n            };\n            break;\n        case CipherAlgorithm.Aes128Cbc:\n            algorithm_ = {\n                name: \"AES-CBC\",\n                length: 128,\n            };\n            break;\n        default:\n            throw new Error(\n                \"(BUG) non-exhaustive switch statement for CipherAlgorithm\"\n            );\n    }\n\n    const key_ = await window.crypto.subtle.importKey(\n        \"raw\",\n        key,\n        algorithm_.name,\n        false,\n        [\"encrypt\"]\n    );\n\n    return new Uint8Array(\n        await window.crypto.subtle.encrypt(algorithm_, key_, data)\n    );\n}\n\n/**\n * @param {string} algorithm\n * @param {Uint8Array} key\n * @param {Uint8Array} iv\n * @param {Uint8Array} data\n * @returns {Promise<Uint8Array>}\n */\nexport async function createDecipheriv(algorithm, key, iv, data) {\n    let algorithm_;\n\n    switch (algorithm) {\n        case CipherAlgorithm.Aes128Ctr:\n            algorithm_ = {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 128,\n            };\n            break;\n        case CipherAlgorithm.Aes128Cbc:\n            algorithm_ = {\n                name: \"AES-CBC\",\n                iv,\n            };\n            break;\n        default:\n            throw new Error(\n                \"(BUG) non-exhaustive switch statement for CipherAlgorithm\"\n            );\n    }\n\n    const key_ = await window.crypto.subtle.importKey(\n        \"raw\",\n        key,\n        algorithm_.name,\n        false,\n        [\"decrypt\"]\n    );\n\n    return new Uint8Array(\n        await window.crypto.subtle.decrypt(algorithm_, key_, data)\n    );\n}\n","import nacl from \"tweetnacl\";\nimport BadKeyError from \"../BadKeyError.js\";\nimport * as crypto from \"./aes.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as hmac from \"./hmac.js\";\nimport * as pbkdf2 from \"./pbkdf2.js\";\n\nconst HMAC_SHA256 = \"hmac-sha256\";\n\n/**\n * @typedef {Object} KeystoreKdfParams\n * @property {number} dkLen\n * @property {string} salt\n * @property {number} c\n * @property {string} prf\n */\n\n/**\n * @typedef {Object} KeystoreCipherParams\n * @property {string} iv\n */\n\n/**\n * @typedef {Object} KeystoreCrypto\n * @property {string} ciphertext\n * @property {KeystoreCipherParams} cipherparams\n * @property {string} cipher\n * @property {string} kdf\n * @property {KeystoreKdfParams} kdfparams\n * @property {string} mac\n */\n\n/**\n * @typedef {Object} Keystore\n * @property {number} version\n * @property {KeystoreCrypto} crypto\n */\n\n/**\n * @param {Uint8Array} privateKey\n * @param {string} passphrase\n * @returns {Promise<Uint8Array>}\n */\nexport async function createKeystore(privateKey, passphrase) {\n    // all values taken from https://github.com/ethereumjs/ethereumjs-wallet/blob/de3a92e752673ada1d78f95cf80bc56ae1f59775/src/index.ts#L25\n    const dkLen = 32;\n    const c = 262144;\n    const saltLen = 32;\n    const salt = nacl.randomBytes(saltLen);\n\n    const key = await pbkdf2.deriveKey(\n        hmac.HashAlgorithm.Sha256,\n        passphrase,\n        salt,\n        c,\n        dkLen\n    );\n\n    const iv = nacl.randomBytes(16);\n\n    // AES-128-CTR with the first half of the derived key and a random IV\n    const cipherText = await crypto.createCipheriv(\n        crypto.CipherAlgorithm.Aes128Ctr,\n        key.slice(0, 16),\n        iv,\n        privateKey\n    );\n\n    const mac = await hmac.hash(\n        hmac.HashAlgorithm.Sha384,\n        key.slice(16),\n        cipherText\n    );\n\n    /**\n     * @type {Keystore}\n     */\n    const keystore = {\n        version: 1,\n        crypto: {\n            ciphertext: hex.encode(cipherText),\n            cipherparams: { iv: hex.encode(iv) },\n            cipher: crypto.CipherAlgorithm.Aes128Ctr,\n            kdf: \"pbkdf2\",\n            kdfparams: {\n                dkLen,\n                salt: hex.encode(salt),\n                c,\n                prf: HMAC_SHA256,\n            },\n            mac: hex.encode(mac),\n        },\n    };\n\n    return utf8.encode(JSON.stringify(keystore));\n}\n\n/**\n * @param {Uint8Array} keystoreBytes\n * @param {string} passphrase\n * @returns {Promise<nacl.SignKeyPair>}\n */\nexport async function loadKeystore(keystoreBytes, passphrase) {\n    /**\n     * @type {Keystore}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const keystore = JSON.parse(utf8.decode(keystoreBytes));\n\n    if (keystore.version !== 1) {\n        throw new BadKeyError(\n            `unsupported keystore version: ${keystore.version}`\n        );\n    }\n\n    const {\n        ciphertext,\n        cipherparams: { iv },\n        cipher,\n        kdf,\n        kdfparams: { dkLen, salt, c, prf },\n        mac,\n    } = keystore.crypto;\n\n    if (kdf !== \"pbkdf2\") {\n        throw new BadKeyError(`unsupported key derivation function:\" + ${kdf}`);\n    }\n\n    if (prf !== HMAC_SHA256) {\n        throw new BadKeyError(\n            `unsupported key derivation hash function: ${prf}`\n        );\n    }\n\n    const saltBytes = hex.decode(salt);\n    const ivBytes = hex.decode(iv);\n    const cipherBytes = hex.decode(ciphertext);\n\n    const key = await pbkdf2.deriveKey(\n        hmac.HashAlgorithm.Sha256,\n        passphrase,\n        saltBytes,\n        c,\n        dkLen\n    );\n\n    const macHex = hex.decode(mac);\n    const verifyHmac = await hmac.hash(\n        hmac.HashAlgorithm.Sha384,\n        key.slice(16),\n        cipherBytes\n    );\n\n    // compare that these two Uint8Arrays are equivalent\n    if (!macHex.every((b, i) => b === verifyHmac[i])) {\n        throw new BadKeyError(\"HMAC mismatch; passphrase is incorrect\");\n    }\n\n    const bytes = await crypto.createDecipheriv(\n        cipher,\n        key.slice(0, 16),\n        ivBytes,\n        cipherBytes\n    );\n\n    return nacl.sign.keyPair.fromSeed(Uint8Array.from(bytes));\n}\n","/**\n * @typedef {Object} AsnSeq\n * @property {AsnType[]} seq\n */\n\n/**\n * @typedef {Object} AsnInt\n * @property {number} int\n */\n\n/**\n * @typedef {Object} AsnBytes\n * @property {Uint8Array} bytes\n */\n\n/**\n * @typedef {Object} AsnIdent\n * @property {string} ident\n */\n\n/**\n * @typedef {{}} AsnNull\n */\n\n/**\n * @typedef {AsnSeq | AsnInt | AsnBytes | AsnIdent | AsnNull} AsnType\n */\n\n/**\n * Note: may throw weird errors on malformed input. Catch and rethrow with, e.g. `BadKeyError`.\n *\n *@param {Uint8Array} data\n *@returns {AsnType}\n */\nexport function decode(data) {\n    return decodeIncremental(data)[0];\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {[AsnType, Uint8Array]}\n */\nfunction decodeIncremental(bytes) {\n    // slice off the initial tag byte, `decodeLength` returns a slice of the remaining data\n    const [len, rem] = decodeLength(bytes.subarray(1));\n    const data = rem.subarray(0, len);\n    const tail = rem.subarray(len);\n\n    switch (bytes[0]) {\n        case 2:\n            return [{ int: decodeInt(data) }, tail];\n        case 4: // must always be primitive form in DER; for OCTET STRING this is literal bytes\n            return [{ bytes: data }, tail];\n        case 5: // empty\n            return [{}, tail];\n        case 6:\n            return [{ ident: decodeObjectIdent(data) }, tail];\n        case 48:\n            return [{ seq: decodeSeq(data) }, tail];\n        default:\n            throw new Error(`unsupported DER type tag: ${bytes[0]}`);\n    }\n}\n\n/**\n * @param {Uint8Array} seqBytes\n * @returns {AsnType[]}\n */\nfunction decodeSeq(seqBytes) {\n    let data = seqBytes;\n\n    const seq = [];\n\n    while (data.length !== 0) {\n        const [decoded, remaining] = decodeIncremental(data);\n        seq.push(decoded);\n        data = remaining;\n    }\n\n    return seq;\n}\n\n/**\n * @param {Uint8Array} idBytes\n * @returns {string}\n */\nfunction decodeObjectIdent(idBytes) {\n    const id = [\n        // first octet is 40 * value1 + value2\n        Math.floor(idBytes[0] / 40),\n        idBytes[0] % 40,\n    ];\n\n    // each following ID component is big-endian base128 where the MSB is set if another byte\n    // follows for the same value\n    let val = 0;\n\n    for (const byte of idBytes.subarray(1)) {\n        // shift the entire value left by 7 bits\n        val *= 128;\n\n        if (byte < 128) {\n            // no more octets follow for this value, finish it off\n            val += byte;\n            id.push(val);\n            val = 0;\n        } else {\n            // zero the MSB\n            val += byte & 127;\n        }\n    }\n\n    return id.join(\".\");\n}\n\n/**\n * @param {Uint8Array} lenBytes\n * @returns {[number, Uint8Array]}\n */\nfunction decodeLength(lenBytes) {\n    if (lenBytes[0] < 128) {\n        // definite, short form\n        return [lenBytes[0], lenBytes.subarray(1)];\n    }\n\n    const numBytes = lenBytes[0] - 128;\n\n    const intBytes = lenBytes.subarray(1, numBytes + 1);\n    const rem = lenBytes.subarray(numBytes + 1);\n\n    return [decodeInt(intBytes), rem];\n}\n\n/**\n * @param {Uint8Array} intBytes\n * @returns {number}\n */\nfunction decodeInt(intBytes) {\n    const len = intBytes.length;\n    if (len === 1) {\n        return intBytes[0];\n    }\n\n    let view = new DataView(\n        intBytes.buffer,\n        intBytes.byteOffset,\n        intBytes.byteLength\n    );\n\n    if (len === 2) return view.getUint16(0, false);\n\n    if (len === 3) {\n        // prefix a zero byte and we'll treat it as a 32-bit int\n        const data = Uint8Array.of(0, ...intBytes);\n        view = new DataView(data.buffer);\n    }\n\n    if (len > 4) {\n        // this probably means a bug in the decoding as this would mean a >4GB structure\n        throw new Error(`unsupported DER integer length of ${len} bytes`);\n    }\n\n    return view.getUint32(0, false);\n}\n","import * as crypto from \"./aes.js\";\nimport * as der from \"../encoding/der.js\";\nimport * as pbkdf2 from \"./pbkdf2.js\";\nimport * as hmac from \"./hmac.js\";\n\nexport class AlgorithmIdentifier {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\"seq\" in asn && asn.seq.length >= 1 && \"ident\" in asn.seq[0]) {\n            /**\n             * @type {string}\n             */\n            this.algIdent = asn.seq[0].ident;\n\n            /**\n             * @type {import(\"../encoding/der.js\").AsnType | undefined}\n             */\n            this.parameters = asn.seq[1];\n        } else {\n            throw new Error(\n                `error parsing AlgorithmIdentifier from ${JSON.stringify(asn)}`\n            );\n        }\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this);\n    }\n}\n\nclass PBES2Params {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\"seq\" in asn && asn.seq.length === 2) {\n            /**\n             * @type {AlgorithmIdentifier}\n             */\n            this.kdf = new AlgorithmIdentifier(asn.seq[0]);\n\n            /**\n             * @type {AlgorithmIdentifier}\n             */\n            this.encScheme = new AlgorithmIdentifier(asn.seq[1]);\n        } else {\n            throw new Error(\n                `error parsing PBES2Params from ${JSON.stringify(asn)}`\n            );\n        }\n    }\n}\n\nclass PBKDF2Params {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\n            \"seq\" in asn &&\n            asn.seq.length >= 2 &&\n            \"bytes\" in asn.seq[0] &&\n            \"int\" in asn.seq[1]\n        ) {\n            /**\n             * @type {Uint8Array}\n             */\n            this.salt = asn.seq[0].bytes;\n\n            /**\n             * @type {number}\n             */\n            this.iterCount = asn.seq[1][\"int\"];\n\n            if (asn.seq.length > 2) {\n                if (\"seq\" in asn.seq[2]) {\n                    this.prf = new AlgorithmIdentifier(asn.seq[2]);\n                    return;\n                } else if (\"int\" in asn.seq[2]) {\n                    /**\n                     * @type {number | undefined}\n                     */\n                    this.keyLength = asn.seq[2][\"int\"];\n                }\n\n                if (asn.seq.length === 4) {\n                    /**\n                     * @type {AlgorithmIdentifier | undefined}\n                     */\n                    this.prf = new AlgorithmIdentifier(asn.seq[3]);\n                }\n\n                return;\n            }\n        }\n\n        throw new Error(\n            `error parsing PBKDF2Params from ${JSON.stringify(asn)}`\n        );\n    }\n}\n\nexport class PrivateKeyInfo {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\"seq\" in asn && asn.seq.length === 3) {\n            if (\"int\" in asn.seq[0] && asn.seq[0][\"int\"] === 0) {\n                /**\n                 * @type {number}\n                 */\n                this.version = 0;\n            } else {\n                throw new Error(\n                    `expected version = 0, got ${JSON.stringify(asn.seq[0])}`\n                );\n            }\n\n            /**\n             * @type {AlgorithmIdentifier}\n             */\n            this.algId = new AlgorithmIdentifier(asn.seq[1]);\n\n            if (\"bytes\" in asn.seq[2]) {\n                /**\n                 * @type {Uint8Array}\n                 */\n                this.privateKey = asn.seq[2].bytes;\n            } else {\n                throw new Error(\n                    `expected octet string as 3rd element, got ${JSON.stringify(\n                        asn.seq[3]\n                    )}`\n                );\n            }\n\n            return;\n        }\n\n        throw new Error(\n            `error parsing PrivateKeyInfo from ${JSON.stringify(asn)}`\n        );\n    }\n\n    /**\n     * @param {Uint8Array} encoded\n     * @returns {PrivateKeyInfo}\n     */\n    static parse(encoded) {\n        return new PrivateKeyInfo(der.decode(encoded));\n    }\n}\n\nexport class EncryptedPrivateKeyInfo {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\"seq\" in asn && asn.seq.length === 2 && \"bytes\" in asn.seq[1]) {\n            /**\n             * @type {AlgorithmIdentifier}\n             */\n            this.algId = new AlgorithmIdentifier(asn.seq[0]);\n\n            /**\n             * @type {Uint8Array}\n             */\n            this.data = asn.seq[1].bytes;\n            return;\n        }\n\n        throw new Error(\n            `error parsing EncryptedPrivateKeyInfo from ${JSON.stringify(asn)}`\n        );\n    }\n\n    /**\n     * @param {Uint8Array} encoded\n     * @returns {EncryptedPrivateKeyInfo}\n     */\n    static parse(encoded) {\n        return new EncryptedPrivateKeyInfo(der.decode(encoded));\n    }\n\n    /**\n     * @param {string} passphrase\n     * @returns {Promise<PrivateKeyInfo>}\n     */\n    async decrypt(passphrase) {\n        if (\n            this.algId.algIdent !== \"1.2.840.113549.1.5.13\" ||\n            !this.algId.parameters\n        ) {\n            // PBES2\n            throw new Error(\n                `unsupported key encryption algorithm: ${this.algId.toString()}`\n            );\n        }\n\n        const pbes2Params = new PBES2Params(this.algId.parameters);\n\n        if (\n            pbes2Params.kdf.algIdent !== \"1.2.840.113549.1.5.12\" ||\n            !pbes2Params.kdf.parameters\n        ) {\n            // PBKDF2\n            throw new Error(\n                `unsupported key derivation function: ${pbes2Params.kdf.toString()}`\n            );\n        }\n\n        const pbkdf2Params = new PBKDF2Params(pbes2Params.kdf.parameters);\n\n        if (!pbkdf2Params.prf) {\n            throw new Error(\"unsupported PRF HMAC-SHA-1\");\n        } else if (pbkdf2Params.prf.algIdent !== \"1.2.840.113549.2.9\") {\n            // HMAC-SHA-256\n            throw new Error(`unsupported PRF ${pbkdf2Params.prf.toString()}`);\n        }\n\n        if (pbes2Params.encScheme.algIdent !== \"2.16.840.1.101.3.4.1.2\") {\n            // AES-128-CBC\n            throw new Error(\n                `unsupported encryption scheme: ${pbes2Params.encScheme.toString()}`\n            );\n        }\n\n        if (\n            !pbes2Params.encScheme.parameters ||\n            !(\"bytes\" in pbes2Params.encScheme.parameters)\n        ) {\n            throw new Error(\n                \"expected IV as bytes for AES-128-CBC, \" +\n                    `got: ${JSON.stringify(pbes2Params.encScheme.parameters)}`\n            );\n        }\n\n        const keyLen = pbkdf2Params.keyLength || 16;\n        const iv = pbes2Params.encScheme.parameters.bytes;\n\n        const key = await pbkdf2.deriveKey(\n            hmac.HashAlgorithm.Sha256,\n            passphrase,\n            pbkdf2Params.salt,\n            pbkdf2Params.iterCount,\n            keyLen\n        );\n\n        const decrypted = await crypto.createDecipheriv(\n            crypto.CipherAlgorithm.Aes128Cbc,\n            key,\n            iv,\n            this.data\n        );\n\n        return PrivateKeyInfo.parse(decrypted);\n    }\n}\n","/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nexport function decode(text) {\n    // note: assumes <atob> is available in the global scope if <Buffer> is not\n    return Uint8Array.from(atob(text), (c) => c.charCodeAt(0));\n}\n\n/**\n * @param {Uint8Array} data\n * @returns {string};\n */\nexport function encode(data) {\n    // note: assumes <btoa> is available in the global scope if <Buffer> is not\n    return btoa(String.fromCharCode.apply(null, Array.from(data)));\n}\n","import BadKeyError from \"../BadKeyError.js\";\nimport { EncryptedPrivateKeyInfo } from \"../primitive/pkcs.js\";\nimport * as der from \"./der.js\";\nimport * as base64 from \"./base64.js\";\nimport nacl from \"tweetnacl\";\n\nconst BEGIN_PRIVATEKEY = \"-----BEGIN PRIVATE KEY-----\\n\";\nconst END_PRIVATEKEY = \"-----END PRIVATE KEY-----\\n\";\n\nconst BEGIN_ENCRYPTED_PRIVATEKEY = \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\n\";\nconst END_ENCRYPTED_PRIVATEKEY = \"-----END ENCRYPTED PRIVATE KEY-----\\n\";\n\n/**\n * @param {string} pem\n * @param {string} [passphrase]\n * @returns {Promise<nacl.SignKeyPair>}\n */\nexport async function read(pem, passphrase) {\n    const beginTag = passphrase ? BEGIN_ENCRYPTED_PRIVATEKEY : BEGIN_PRIVATEKEY;\n\n    const endTag = passphrase ? END_ENCRYPTED_PRIVATEKEY : END_PRIVATEKEY;\n\n    const beginIndex = pem.indexOf(beginTag);\n    const endIndex = pem.indexOf(endTag);\n\n    if (beginIndex === -1 || endIndex === -1) {\n        throw new BadKeyError(\"failed to find a private key in the PEM file\");\n    }\n\n    const keyEncoded = pem.slice(beginIndex + beginTag.length, endIndex);\n\n    const key = base64.decode(keyEncoded);\n\n    if (passphrase) {\n        let encrypted;\n\n        try {\n            encrypted = EncryptedPrivateKeyInfo.parse(key);\n        } catch (error) {\n            throw new BadKeyError(\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/explicit-module-boundary-types\n                `failed to parse encrypted private key: ${error.message}`\n            );\n        }\n\n        const decrypted = await encrypted.decrypt(passphrase);\n\n        if (decrypted.algId.algIdent !== \"1.3.101.112\") {\n            throw new BadKeyError(\n                `unknown private key algorithm ${decrypted.algId.toString()}`\n            );\n        }\n\n        const keyData = der.decode(decrypted.privateKey);\n\n        if (\"bytes\" in keyData) {\n            return nacl.sign.keyPair.fromSeed(keyData.bytes);\n        }\n\n        throw new BadKeyError(\n            `expected ASN bytes, got ${JSON.stringify(keyData)}`\n        );\n    }\n\n    return nacl.sign.keyPair.fromSeed(key.subarray(16));\n}\n","import nacl from \"tweetnacl\";\nimport PublicKey from \"./PublicKey.js\";\nimport Mnemonic from \"./Mnemonic.js\";\nimport { arrayStartsWith } from \"./util/array.js\";\nimport { createKeystore, loadKeystore } from \"./primitive/keystore.js\";\nimport BadKeyError from \"./BadKeyError.js\";\nimport * as hex from \"./encoding/hex.js\";\nimport { read as readPem } from \"./encoding/pem.js\";\nimport * as slip10 from \"./primitive/slip10.js\";\nimport Key from \"./Key.js\";\n\nconst derPrefix = \"302e020100300506032b657004220420\";\nconst derPrefixBytes = hex.decode(derPrefix);\n\n/**\n * @typedef {object} ProtoSignaturePair\n * @property {(Uint8Array | null)=} pubKeyPrefix\n * @property {(Uint8Array | null)=} ed25519\n */\n\n/**\n * @typedef {object} ProtoSigMap\n * @property {(ProtoSignaturePair[] | null)=} sigPair\n */\n\n/**\n * @typedef {object} ProtoSignedTransaction\n * @property {(Uint8Array | null)=} bodyBytes\n * @property {(ProtoSigMap | null)=} sigMap\n */\n\n/**\n * @typedef {object} Transaction\n * @property {() => boolean} _isFrozen\n * @property {ProtoSignedTransaction[]} _signedTransactions\n * @property {Set<string>} _signerPublicKeys\n * @property {(publicKey: PublicKey, signature: Uint8Array) => Transaction} addSignature\n * @property {() => void} _requireFrozen\n * @property {() => Transaction} freeze\n */\n\n/**\n * A private key on the Hedera™ network.\n */\nexport default class PrivateKey extends Key {\n    /**\n     * @hideconstructor\n     * @internal\n     * @param {nacl.SignKeyPair} keyPair\n     * @param {?Uint8Array} chainCode\n     */\n    constructor(keyPair, chainCode) {\n        super();\n\n        /**\n         * @type {nacl.SignKeyPair}\n         * @readonly\n         * @private\n         */\n        this._keyPair = keyPair;\n\n        /**\n         * @type {?Uint8Array}\n         * @readonly\n         * @private\n         */\n        this._chainCode = chainCode;\n    }\n\n    /**\n     * Generate a random Ed25519 private key.\n     *\n     * @returns {PrivateKey}\n     */\n    static generate() {\n        // 32 bytes for the secret key\n        // 32 bytes for the chain code (to support derivation)\n        const entropy = nacl.randomBytes(64);\n\n        return new PrivateKey(\n            nacl.sign.keyPair.fromSeed(entropy.subarray(0, 32)),\n            entropy.subarray(32)\n        );\n    }\n\n    /**\n     * Construct a private key from bytes.\n     *\n     * @param {Uint8Array} data\n     * @returns {PrivateKey}\n     */\n    static fromBytes(data) {\n        switch (data.length) {\n            case 48:\n                if (arrayStartsWith(data, derPrefixBytes)) {\n                    const keyPair = nacl.sign.keyPair.fromSeed(\n                        data.subarray(16)\n                    );\n\n                    return new PrivateKey(keyPair, null);\n                }\n\n                break;\n\n            case 32:\n                return new PrivateKey(nacl.sign.keyPair.fromSeed(data), null);\n\n            case 64:\n                // priv + pub key\n                return new PrivateKey(\n                    nacl.sign.keyPair.fromSecretKey(data),\n                    null\n                );\n\n            default:\n        }\n\n        throw new BadKeyError(\n            `invalid private key length: ${data.length} bytes`\n        );\n    }\n\n    /**\n     * Construct a private key from a hex-encoded string.\n     *\n     * @param {string} text\n     * @returns {PrivateKey}\n     */\n    static fromString(text) {\n        return PrivateKey.fromBytes(hex.decode(text));\n    }\n\n    /**\n     * Recover a private key from a mnemonic phrase (and optionally a password).\n     *\n     * @param {Mnemonic | string} mnemonic\n     * @param {string} [passphrase]\n     * @returns {Promise<PrivateKey>}\n     */\n    static async fromMnemonic(mnemonic, passphrase = \"\") {\n        return (typeof mnemonic === \"string\"\n            ? await Mnemonic.fromString(mnemonic)\n            : mnemonic\n        ).toPrivateKey(passphrase);\n    }\n\n    /**\n     * Recover a private key from a keystore, previously created by `.toKeystore()`.\n     *\n     * This key will _not_ support child key derivation.\n     *\n     * @param {Uint8Array} data\n     * @param {string} [passphrase]\n     * @returns {Promise<PrivateKey>}\n     * @throws {BadKeyError} If the passphrase is incorrect or the hash fails to validate.\n     */\n    static async fromKeystore(data, passphrase = \"\") {\n        return new PrivateKey(await loadKeystore(data, passphrase), null);\n    }\n\n    /**\n     * Recover a private key from a pem string; the private key may be encrypted.\n     *\n     * This method assumes the .pem file has been converted to a string already.\n     *\n     * If `passphrase` is not null or empty, this looks for the first `ENCRYPTED PRIVATE KEY`\n     * section and uses `passphrase` to decrypt it; otherwise, it looks for the first `PRIVATE KEY`\n     * section and decodes that as a DER-encoded  private key.\n     *\n     * @param {string} data\n     * @param {string} [passphrase]\n     * @returns {Promise<PrivateKey>}\n     */\n    static async fromPem(data, passphrase = \"\") {\n        return new PrivateKey(await readPem(data, passphrase), null);\n    }\n\n    /**\n     * Derive a new private key at the given wallet index.\n     *\n     * Only currently supported for keys created with `fromMnemonic()`; other keys will throw\n     * an error.\n     *\n     * You can check if a key supports derivation with `.supportsDerivation()`\n     *\n     * @param {number} index\n     * @returns {Promise<PrivateKey>}\n     * @throws If this key does not support derivation.\n     */\n    async derive(index) {\n        if (this._chainCode == null) {\n            throw new Error(\"this private key does not support key derivation\");\n        }\n\n        const { keyData, chainCode } = await slip10.derive(\n            this.toBytes(),\n            this._chainCode,\n            index\n        );\n\n        const keyPair = nacl.sign.keyPair.fromSeed(keyData);\n\n        return new PrivateKey(keyPair, chainCode);\n    }\n\n    /**\n     * Get the public key associated with this private key.\n     *\n     * The public key can be freely given and used by other parties to verify\n     * the signatures generated by this private key.\n     *\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        return new PublicKey(this._keyPair.publicKey);\n    }\n\n    /**\n     * Sign a message with this private key.\n     *\n     * @param {Uint8Array} bytes\n     * @returns {Uint8Array} - The signature bytes without the message\n     */\n    sign(bytes) {\n        return nacl.sign.detached(bytes, this._keyPair.secretKey);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {Uint8Array}\n     */\n    signTransaction(transaction) {\n        transaction._requireFrozen();\n\n        if (!transaction._isFrozen()) {\n            transaction.freeze();\n        }\n\n        if (transaction._signedTransactions.length != 1) {\n            throw new Error(\n                \"`PrivateKey.signTransaction()` requires `Transaction` to have a single node `AccountId` set\"\n            );\n        }\n\n        const tx = /** @type {ProtoSignedTransaction} */ (transaction\n            ._signedTransactions[0]);\n\n        const publicKeyHex = hex.encode(this.publicKey.toBytes());\n\n        if (tx.sigMap == null) {\n            tx.sigMap = {};\n        }\n\n        if (tx.sigMap.sigPair == null) {\n            tx.sigMap.sigPair = [];\n        }\n\n        for (const sigPair of tx.sigMap.sigPair) {\n            if (\n                sigPair.pubKeyPrefix != null &&\n                hex.encode(sigPair.pubKeyPrefix) === publicKeyHex\n            ) {\n                return /** @type {Uint8Array} */ (sigPair.ed25519);\n            }\n        }\n\n        const siganture = this.sign(\n            tx.bodyBytes != null ? tx.bodyBytes : new Uint8Array()\n        );\n\n        tx.sigMap.sigPair.push({\n            pubKeyPrefix: this.publicKey.toBytes(),\n            ed25519: siganture,\n        });\n\n        transaction._signerPublicKeys.add(publicKeyHex);\n\n        return siganture;\n    }\n\n    /**\n     * Check if `derive` can be called on this private key.\n     *\n     * This is only the case if the key was created from a mnemonic.\n     *\n     * @returns {boolean}\n     */\n    isDerivable() {\n        return this._chainCode != null;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        // copy the bytes so they can't be modified accidentally\n        return this._keyPair.secretKey.slice(0, 32);\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return derPrefix + hex.encode(this.toBytes());\n    }\n\n    /**\n     * Create a keystore with a given passphrase.\n     *\n     * The key can be recovered later with `fromKeystore()`.\n     *\n     * Note that this will not retain the ancillary data used for\n     * deriving child keys, thus `.derive()` on the restored key will\n     * throw even if this instance supports derivation.\n     *\n     * @param {string} [passphrase]\n     * @returns {Promise<Uint8Array>}\n     */\n    toKeystore(passphrase = \"\") {\n        return createKeystore(this.toBytes(), passphrase);\n    }\n}\n","export { default as Key } from \"./Key.js\";\nexport { default as KeyList } from \"./KeyList.js\";\nexport { default as PrivateKey } from \"./PrivateKey.js\";\nexport { default as PublicKey } from \"./PublicKey.js\";\nexport { default as Mnemonic } from \"./Mnemonic.js\";\nexport { default as BadMnemonicError } from \"./BadMnemonicError.js\";\nexport { default as BadMnemonicReason } from \"./BadMnemonicReason.js\";\n","/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ResponseCodeEnum} proto.ResponseCodeEnum\n */\n\nexport default class Status {\n    /**\n     * @hideconstructor\n     * @internal\n     * @param {number} code\n     */\n    constructor(code) {\n        /** @readonly */\n        this._code = code;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        switch (this) {\n            case Status.Ok:\n                return \"OK\";\n            case Status.InvalidTransaction:\n                return \"INVALID_TRANSACTION\";\n            case Status.PayerAccountNotFound:\n                return \"PAYER_ACCOUNT_NOT_FOUND\";\n            case Status.InvalidNodeAccount:\n                return \"INVALID_NODE_ACCOUNT\";\n            case Status.TransactionExpired:\n                return \"TRANSACTION_EXPIRED\";\n            case Status.InvalidTransactionStart:\n                return \"INVALID_TRANSACTION_START\";\n            case Status.InvalidTransactionDuration:\n                return \"INVALID_TRANSACTION_DURATION\";\n            case Status.InvalidSignature:\n                return \"INVALID_SIGNATURE\";\n            case Status.MemoTooLong:\n                return \"MEMO_TOO_LONG\";\n            case Status.InsufficientTxFee:\n                return \"INSUFFICIENT_TX_FEE\";\n            case Status.InsufficientPayerBalance:\n                return \"INSUFFICIENT_PAYER_BALANCE\";\n            case Status.DuplicateTransaction:\n                return \"DUPLICATE_TRANSACTION\";\n            case Status.Busy:\n                return \"BUSY\";\n            case Status.NotSupported:\n                return \"NOT_SUPPORTED\";\n            case Status.InvalidFileId:\n                return \"INVALID_FILE_ID\";\n            case Status.InvalidAccountId:\n                return \"INVALID_ACCOUNT_ID\";\n            case Status.InvalidContractId:\n                return \"INVALID_CONTRACT_ID\";\n            case Status.InvalidTransactionId:\n                return \"INVALID_TRANSACTION_ID\";\n            case Status.ReceiptNotFound:\n                return \"RECEIPT_NOT_FOUND\";\n            case Status.RecordNotFound:\n                return \"RECORD_NOT_FOUND\";\n            case Status.InvalidSolidityId:\n                return \"INVALID_SOLIDITY_ID\";\n            case Status.Unknown:\n                return \"UNKNOWN\";\n            case Status.Success:\n                return \"SUCCESS\";\n            case Status.FailInvalid:\n                return \"FAIL_INVALID\";\n            case Status.FailFee:\n                return \"FAIL_FEE\";\n            case Status.FailBalance:\n                return \"FAIL_BALANCE\";\n            case Status.KeyRequired:\n                return \"KEY_REQUIRED\";\n            case Status.BadEncoding:\n                return \"BAD_ENCODING\";\n            case Status.InsufficientAccountBalance:\n                return \"INSUFFICIENT_ACCOUNT_BALANCE\";\n            case Status.InvalidSolidityAddress:\n                return \"INVALID_SOLIDITY_ADDRESS\";\n            case Status.InsufficientGas:\n                return \"INSUFFICIENT_GAS\";\n            case Status.ContractSizeLimitExceeded:\n                return \"CONTRACT_SIZE_LIMIT_EXCEEDED\";\n            case Status.LocalCallModificationException:\n                return \"LOCAL_CALL_MODIFICATION_EXCEPTION\";\n            case Status.ContractRevertExecuted:\n                return \"CONTRACT_REVERT_EXECUTED\";\n            case Status.ContractExecutionException:\n                return \"CONTRACT_EXECUTION_EXCEPTION\";\n            case Status.InvalidReceivingNodeAccount:\n                return \"INVALID_RECEIVING_NODE_ACCOUNT\";\n            case Status.MissingQueryHeader:\n                return \"MISSING_QUERY_HEADER\";\n            case Status.AccountUpdateFailed:\n                return \"ACCOUNT_UPDATE_FAILED\";\n            case Status.InvalidKeyEncoding:\n                return \"INVALID_KEY_ENCODING\";\n            case Status.NullSolidityAddress:\n                return \"NULL_SOLIDITY_ADDRESS\";\n            case Status.ContractUpdateFailed:\n                return \"CONTRACT_UPDATE_FAILED\";\n            case Status.InvalidQueryHeader:\n                return \"INVALID_QUERY_HEADER\";\n            case Status.InvalidFeeSubmitted:\n                return \"INVALID_FEE_SUBMITTED\";\n            case Status.InvalidPayerSignature:\n                return \"INVALID_PAYER_SIGNATURE\";\n            case Status.KeyNotProvided:\n                return \"KEY_NOT_PROVIDED\";\n            case Status.InvalidExpirationTime:\n                return \"INVALID_EXPIRATION_TIME\";\n            case Status.NoWaclKey:\n                return \"NO_WACL_KEY\";\n            case Status.FileContentEmpty:\n                return \"FILE_CONTENT_EMPTY\";\n            case Status.InvalidAccountAmounts:\n                return \"INVALID_ACCOUNT_AMOUNTS\";\n            case Status.EmptyTransactionBody:\n                return \"EMPTY_TRANSACTION_BODY\";\n            case Status.InvalidTransactionBody:\n                return \"INVALID_TRANSACTION_BODY\";\n            case Status.InvalidSignatureTypeMismatchingKey:\n                return \"INVALID_SIGNATURE_TYPE_MISMATCHING_KEY\";\n            case Status.InvalidSignatureCountMismatchingKey:\n                return \"INVALID_SIGNATURE_COUNT_MISMATCHING_KEY\";\n            case Status.EmptyLiveHashBody:\n                return \"EMPTY_LIVE_HASH_BODY\";\n            case Status.EmptyLiveHash:\n                return \"EMPTY_LIVE_HASH\";\n            case Status.EmptyLiveHashKeys:\n                return \"EMPTY_LIVE_HASH_KEYS\";\n            case Status.InvalidLiveHashSize:\n                return \"INVALID_LIVE_HASH_SIZE\";\n            case Status.EmptyQueryBody:\n                return \"EMPTY_QUERY_BODY\";\n            case Status.EmptyLiveHashQuery:\n                return \"EMPTY_LIVE_HASH_QUERY\";\n            case Status.LiveHashNotFound:\n                return \"LIVE_HASH_NOT_FOUND\";\n            case Status.AccountIdDoesNotExist:\n                return \"ACCOUNT_ID_DOES_NOT_EXIST\";\n            case Status.LiveHashAlreadyExists:\n                return \"LIVE_HASH_ALREADY_EXISTS\";\n            case Status.InvalidFileWacl:\n                return \"INVALID_FILE_WACL\";\n            case Status.SerializationFailed:\n                return \"SERIALIZATION_FAILED\";\n            case Status.TransactionOversize:\n                return \"TRANSACTION_OVERSIZE\";\n            case Status.TransactionTooManyLayers:\n                return \"TRANSACTION_TOO_MANY_LAYERS\";\n            case Status.ContractDeleted:\n                return \"CONTRACT_DELETED\";\n            case Status.PlatformNotActive:\n                return \"PLATFORM_NOT_ACTIVE\";\n            case Status.KeyPrefixMismatch:\n                return \"KEY_PREFIX_MISMATCH\";\n            case Status.PlatformTransactionNotCreated:\n                return \"PLATFORM_TRANSACTION_NOT_CREATED\";\n            case Status.InvalidRenewalPeriod:\n                return \"INVALID_RENEWAL_PERIOD\";\n            case Status.InvalidPayerAccountId:\n                return \"INVALID_PAYER_ACCOUNT_ID\";\n            case Status.AccountDeleted:\n                return \"ACCOUNT_DELETED\";\n            case Status.FileDeleted:\n                return \"FILE_DELETED\";\n            case Status.AccountRepeatedInAccountAmounts:\n                return \"ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS\";\n            case Status.SettingNegativeAccountBalance:\n                return \"SETTING_NEGATIVE_ACCOUNT_BALANCE\";\n            case Status.ObtainerRequired:\n                return \"OBTAINER_REQUIRED\";\n            case Status.ObtainerSameContractId:\n                return \"OBTAINER_SAME_CONTRACT_ID\";\n            case Status.ObtainerDoesNotExist:\n                return \"OBTAINER_DOES_NOT_EXIST\";\n            case Status.ModifyingImmutableContract:\n                return \"MODIFYING_IMMUTABLE_CONTRACT\";\n            case Status.FileSystemException:\n                return \"FILE_SYSTEM_EXCEPTION\";\n            case Status.AutorenewDurationNotInRange:\n                return \"AUTORENEW_DURATION_NOT_IN_RANGE\";\n            case Status.ErrorDecodingBytestring:\n                return \"ERROR_DECODING_BYTESTRING\";\n            case Status.ContractFileEmpty:\n                return \"CONTRACT_FILE_EMPTY\";\n            case Status.ContractBytecodeEmpty:\n                return \"CONTRACT_BYTECODE_EMPTY\";\n            case Status.InvalidInitialBalance:\n                return \"INVALID_INITIAL_BALANCE\";\n            case Status.InvalidReceiveRecordThreshold:\n                return \"INVALID_RECEIVE_RECORD_THRESHOLD\";\n            case Status.InvalidSendRecordThreshold:\n                return \"INVALID_SEND_RECORD_THRESHOLD\";\n            case Status.AccountIsNotGenesisAccount:\n                return \"ACCOUNT_IS_NOT_GENESIS_ACCOUNT\";\n            case Status.PayerAccountUnauthorized:\n                return \"PAYER_ACCOUNT_UNAUTHORIZED\";\n            case Status.InvalidFreezeTransactionBody:\n                return \"INVALID_FREEZE_TRANSACTION_BODY\";\n            case Status.FreezeTransactionBodyNotFound:\n                return \"FREEZE_TRANSACTION_BODY_NOT_FOUND\";\n            case Status.TransferListSizeLimitExceeded:\n                return \"TRANSFER_LIST_SIZE_LIMIT_EXCEEDED\";\n            case Status.ResultSizeLimitExceeded:\n                return \"RESULT_SIZE_LIMIT_EXCEEDED\";\n            case Status.NotSpecialAccount:\n                return \"NOT_SPECIAL_ACCOUNT\";\n            case Status.ContractNegativeGas:\n                return \"CONTRACT_NEGATIVE_GAS\";\n            case Status.ContractNegativeValue:\n                return \"CONTRACT_NEGATIVE_VALUE\";\n            case Status.InvalidFeeFile:\n                return \"INVALID_FEE_FILE\";\n            case Status.InvalidExchangeRateFile:\n                return \"INVALID_EXCHANGE_RATE_FILE\";\n            case Status.InsufficientLocalCallGas:\n                return \"INSUFFICIENT_LOCAL_CALL_GAS\";\n            case Status.EntityNotAllowedToDelete:\n                return \"ENTITY_NOT_ALLOWED_TO_DELETE\";\n            case Status.AuthorizationFailed:\n                return \"AUTHORIZATION_FAILED\";\n            case Status.FileUploadedProtoInvalid:\n                return \"FILE_UPLOADED_PROTO_INVALID\";\n            case Status.FileUploadedProtoNotSavedToDisk:\n                return \"FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK\";\n            case Status.FeeScheduleFilePartUploaded:\n                return \"FEE_SCHEDULE_FILE_PART_UPLOADED\";\n            case Status.ExchangeRateChangeLimitExceeded:\n                return \"EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED\";\n            case Status.MaxContractStorageExceeded:\n                return \"MAX_CONTRACT_STORAGE_EXCEEDED\";\n            case Status.TransferAccountSameAsDeleteAccount:\n                return \"TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT\";\n            case Status.TotalLedgerBalanceInvalid:\n                return \"TOTAL_LEDGER_BALANCE_INVALID\";\n            case Status.ExpirationReductionNotAllowed:\n                return \"EXPIRATION_REDUCTION_NOT_ALLOWED\";\n            case Status.MaxGasLimitExceeded:\n                return \"MAX_GAS_LIMIT_EXCEEDED\";\n            case Status.MaxFileSizeExceeded:\n                return \"MAX_FILE_SIZE_EXCEEDED\";\n            case Status.InvalidTopicId:\n                return \"INVALID_TOPIC_ID\";\n            case Status.InvalidAdminKey:\n                return \"INVALID_ADMIN_KEY\";\n            case Status.InvalidSubmitKey:\n                return \"INVALID_SUBMIT_KEY\";\n            case Status.Unauthorized:\n                return \"UNAUTHORIZED\";\n            case Status.InvalidTopicMessage:\n                return \"INVALID_TOPIC_MESSAGE\";\n            case Status.InvalidAutorenewAccount:\n                return \"INVALID_AUTORENEW_ACCOUNT\";\n            case Status.AutoRenewAccountNotAllowed:\n                return \"AUTO_RENEW_ACCOUNT_NOT_ALLOWED\";\n            case Status.TopicExpired:\n                return \"TOPIC_EXPIRED\";\n            case Status.InvalidChunkNumber:\n                return \"INVALID_CHUNK_NUMBER\";\n            case Status.InvalidChunkTransactionId:\n                return \"INVALID_CHUNK_TRANSACTION_ID\";\n            case Status.AccountFrozenForToken:\n                return \"ACCOUNT_FROZEN_FOR_TOKEN\";\n            case Status.TokensPerAccountLimitExceeded:\n                return \"TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED\";\n            case Status.InvalidTokenId:\n                return \"INVALID_TOKEN_ID\";\n            case Status.InvalidTokenDecimals:\n                return \"INVALID_TOKEN_DECIMALS\";\n            case Status.InvalidTokenInitialSupply:\n                return \"INVALID_TOKEN_INITIAL_SUPPLY\";\n            case Status.InvalidTreasuryAccountForToken:\n                return \"INVALID_TREASURY_ACCOUNT_FOR_TOKEN\";\n            case Status.InvalidTokenSymbol:\n                return \"INVALID_TOKEN_SYMBOL\";\n            case Status.TokenHasNoFreezeKey:\n                return \"TOKEN_HAS_NO_FREEZE_KEY\";\n            case Status.TransfersNotZeroSumForToken:\n                return \"TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN\";\n            case Status.MissingTokenSymbol:\n                return \"MISSING_TOKEN_SYMBOL\";\n            case Status.TokenSymbolTooLong:\n                return \"TOKEN_SYMBOL_TOO_LONG\";\n            case Status.AccountKycNotGrantedForToken:\n                return \"ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN\";\n            case Status.TokenHasNoKycKey:\n                return \"TOKEN_HAS_NO_KYC_KEY\";\n            case Status.InsufficientTokenBalance:\n                return \"INSUFFICIENT_TOKEN_BALANCE\";\n            case Status.TokenWasDeleted:\n                return \"TOKEN_WAS_DELETED\";\n            case Status.TokenHasNoSupplyKey:\n                return \"TOKEN_HAS_NO_SUPPLY_KEY\";\n            case Status.TokenHasNoWipeKey:\n                return \"TOKEN_HAS_NO_WIPE_KEY\";\n            case Status.InvalidTokenMintAmount:\n                return \"INVALID_TOKEN_MINT_AMOUNT\";\n            case Status.InvalidTokenBurnAmount:\n                return \"INVALID_TOKEN_BURN_AMOUNT\";\n            case Status.TokenNotAssociatedToAccount:\n                return \"TOKEN_NOT_ASSOCIATED_TO_ACCOUNT\";\n            case Status.CannotWipeTokenTreasuryAccount:\n                return \"CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT\";\n            case Status.InvalidKycKey:\n                return \"INVALID_KYC_KEY\";\n            case Status.InvalidWipeKey:\n                return \"INVALID_WIPE_KEY\";\n            case Status.InvalidFreezeKey:\n                return \"INVALID_FREEZE_KEY\";\n            case Status.InvalidSupplyKey:\n                return \"INVALID_SUPPLY_KEY\";\n            case Status.MissingTokenName:\n                return \"MISSING_TOKEN_NAME\";\n            case Status.TokenNameTooLong:\n                return \"TOKEN_NAME_TOO_LONG\";\n            case Status.InvalidWipingAmount:\n                return \"INVALID_WIPING_AMOUNT\";\n            case Status.TokenIsImmutable:\n                return \"TOKEN_IS_IMMUTABLE\";\n            case Status.TokenAlreadyAssociatedToAccount:\n                return \"TokenAlreadyAssociatedToAccount\";\n            case Status.TransactionRequiresZeroTokenBalances:\n                return \"TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES\";\n            case Status.AccountIsTreasury:\n                return \"ACCOUNT_IS_TREASURY\";\n            case Status.TokenIdRepeatedInTokenList:\n                return \"TOKEN_ID_REPEATED_IN_TOKEN_LIST\";\n            case Status.TokenTransferListSizeLimitExceeded:\n                return \"TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED\";\n            case Status.EmptyTokenTransferBody:\n                return \"EMPTY_TOKEN_TRANSFER_BODY\";\n            case Status.EmptyTokenTransferAccountAmounts:\n                return \"EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS\";\n            default:\n                return `UNKNOWN (${this._code})`;\n        }\n    }\n\n    /**\n     * @internal\n     * @param {number} code\n     * @returns {Status}\n     */\n    static _fromCode(code) {\n        switch (code) {\n            case 0:\n                return Status.Ok;\n            case 1:\n                return Status.InvalidTransaction;\n            case 2:\n                return Status.PayerAccountNotFound;\n            case 3:\n                return Status.InvalidNodeAccount;\n            case 4:\n                return Status.TransactionExpired;\n            case 5:\n                return Status.InvalidTransactionStart;\n            case 6:\n                return Status.InvalidTransactionDuration;\n            case 7:\n                return Status.InvalidSignature;\n            case 8:\n                return Status.MemoTooLong;\n            case 9:\n                return Status.InsufficientTxFee;\n            case 10:\n                return Status.InsufficientPayerBalance;\n            case 11:\n                return Status.DuplicateTransaction;\n            case 12:\n                return Status.Busy;\n            case 13:\n                return Status.NotSupported;\n            case 14:\n                return Status.InvalidFileId;\n            case 15:\n                return Status.InvalidAccountId;\n            case 16:\n                return Status.InvalidContractId;\n            case 17:\n                return Status.InvalidTransactionId;\n            case 18:\n                return Status.ReceiptNotFound;\n            case 19:\n                return Status.RecordNotFound;\n            case 20:\n                return Status.InvalidSolidityId;\n            case 21:\n                return Status.Unknown;\n            case 22:\n                return Status.Success;\n            case 23:\n                return Status.FailInvalid;\n            case 24:\n                return Status.FailFee;\n            case 25:\n                return Status.FailBalance;\n            case 26:\n                return Status.KeyRequired;\n            case 27:\n                return Status.BadEncoding;\n            case 28:\n                return Status.InsufficientAccountBalance;\n            case 29:\n                return Status.InvalidSolidityAddress;\n            case 30:\n                return Status.InsufficientGas;\n            case 31:\n                return Status.ContractSizeLimitExceeded;\n            case 32:\n                return Status.LocalCallModificationException;\n            case 33:\n                return Status.ContractRevertExecuted;\n            case 34:\n                return Status.ContractExecutionException;\n            case 35:\n                return Status.InvalidReceivingNodeAccount;\n            case 36:\n                return Status.MissingQueryHeader;\n            case 37:\n                return Status.AccountUpdateFailed;\n            case 38:\n                return Status.InvalidKeyEncoding;\n            case 39:\n                return Status.NullSolidityAddress;\n            case 40:\n                return Status.ContractUpdateFailed;\n            case 41:\n                return Status.InvalidQueryHeader;\n            case 42:\n                return Status.InvalidFeeSubmitted;\n            case 43:\n                return Status.InvalidPayerSignature;\n            case 44:\n                return Status.KeyNotProvided;\n            case 45:\n                return Status.InvalidExpirationTime;\n            case 46:\n                return Status.NoWaclKey;\n            case 47:\n                return Status.FileContentEmpty;\n            case 48:\n                return Status.InvalidAccountAmounts;\n            case 49:\n                return Status.EmptyTransactionBody;\n            case 50:\n                return Status.InvalidTransactionBody;\n            case 51:\n                return Status.InvalidSignatureTypeMismatchingKey;\n            case 52:\n                return Status.InvalidSignatureCountMismatchingKey;\n            case 53:\n                return Status.EmptyLiveHashBody;\n            case 54:\n                return Status.EmptyLiveHash;\n            case 55:\n                return Status.EmptyLiveHashKeys;\n            case 56:\n                return Status.InvalidLiveHashSize;\n            case 57:\n                return Status.EmptyQueryBody;\n            case 58:\n                return Status.EmptyLiveHashQuery;\n            case 59:\n                return Status.LiveHashNotFound;\n            case 60:\n                return Status.AccountIdDoesNotExist;\n            case 61:\n                return Status.LiveHashAlreadyExists;\n            case 62:\n                return Status.InvalidFileWacl;\n            case 63:\n                return Status.SerializationFailed;\n            case 64:\n                return Status.TransactionOversize;\n            case 65:\n                return Status.TransactionTooManyLayers;\n            case 66:\n                return Status.ContractDeleted;\n            case 67:\n                return Status.PlatformNotActive;\n            case 68:\n                return Status.KeyPrefixMismatch;\n            case 69:\n                return Status.PlatformTransactionNotCreated;\n            case 70:\n                return Status.InvalidRenewalPeriod;\n            case 71:\n                return Status.InvalidPayerAccountId;\n            case 72:\n                return Status.AccountDeleted;\n            case 73:\n                return Status.FileDeleted;\n            case 74:\n                return Status.AccountRepeatedInAccountAmounts;\n            case 75:\n                return Status.SettingNegativeAccountBalance;\n            case 76:\n                return Status.ObtainerRequired;\n            case 77:\n                return Status.ObtainerSameContractId;\n            case 78:\n                return Status.ObtainerDoesNotExist;\n            case 79:\n                return Status.ModifyingImmutableContract;\n            case 80:\n                return Status.FileSystemException;\n            case 81:\n                return Status.AutorenewDurationNotInRange;\n            case 82:\n                return Status.ErrorDecodingBytestring;\n            case 83:\n                return Status.ContractFileEmpty;\n            case 84:\n                return Status.ContractBytecodeEmpty;\n            case 85:\n                return Status.InvalidInitialBalance;\n            case 86:\n                return Status.InvalidReceiveRecordThreshold;\n            case 87:\n                return Status.InvalidSendRecordThreshold;\n            case 88:\n                return Status.AccountIsNotGenesisAccount;\n            case 89:\n                return Status.PayerAccountUnauthorized;\n            case 90:\n                return Status.InvalidFreezeTransactionBody;\n            case 91:\n                return Status.FreezeTransactionBodyNotFound;\n            case 92:\n                return Status.TransferListSizeLimitExceeded;\n            case 93:\n                return Status.ResultSizeLimitExceeded;\n            case 94:\n                return Status.NotSpecialAccount;\n            case 95:\n                return Status.ContractNegativeGas;\n            case 96:\n                return Status.ContractNegativeValue;\n            case 97:\n                return Status.InvalidFeeFile;\n            case 98:\n                return Status.InvalidExchangeRateFile;\n            case 99:\n                return Status.InsufficientLocalCallGas;\n            case 100:\n                return Status.EntityNotAllowedToDelete;\n            case 101:\n                return Status.AuthorizationFailed;\n            case 102:\n                return Status.FileUploadedProtoInvalid;\n            case 103:\n                return Status.FileUploadedProtoNotSavedToDisk;\n            case 104:\n                return Status.FeeScheduleFilePartUploaded;\n            case 105:\n                return Status.ExchangeRateChangeLimitExceeded;\n            case 106:\n                return Status.MaxContractStorageExceeded;\n            case 107:\n                return Status.TransferAccountSameAsDeleteAccount;\n            case 108:\n                return Status.TotalLedgerBalanceInvalid;\n            case 110:\n                return Status.ExpirationReductionNotAllowed;\n            case 111:\n                return Status.MaxGasLimitExceeded;\n            case 112:\n                return Status.MaxFileSizeExceeded;\n            case 150:\n                return Status.InvalidTopicId;\n            case 155:\n                return Status.InvalidAdminKey;\n            case 156:\n                return Status.InvalidSubmitKey;\n            case 157:\n                return Status.Unauthorized;\n            case 158:\n                return Status.InvalidTopicMessage;\n            case 159:\n                return Status.InvalidAutorenewAccount;\n            case 160:\n                return Status.AutoRenewAccountNotAllowed;\n            case 162:\n                return Status.TopicExpired;\n            case 163:\n                return Status.InvalidChunkNumber;\n            case 164:\n                return Status.InvalidChunkTransactionId;\n            case 165:\n                return Status.AccountFrozenForToken;\n            case 166:\n                return Status.TokensPerAccountLimitExceeded;\n            case 167:\n                return Status.InvalidTokenId;\n            case 168:\n                return Status.InvalidTokenDecimals;\n            case 169:\n                return Status.InvalidTokenInitialSupply;\n            case 170:\n                return Status.InvalidTreasuryAccountForToken;\n            case 171:\n                return Status.InvalidTokenSymbol;\n            case 172:\n                return Status.TokenHasNoFreezeKey;\n            case 173:\n                return Status.TransfersNotZeroSumForToken;\n            case 174:\n                return Status.MissingTokenSymbol;\n            case 175:\n                return Status.TokenSymbolTooLong;\n            case 176:\n                return Status.AccountKycNotGrantedForToken;\n            case 177:\n                return Status.TokenHasNoKycKey;\n            case 178:\n                return Status.InsufficientTokenBalance;\n            case 179:\n                return Status.TokenWasDeleted;\n            case 180:\n                return Status.TokenHasNoSupplyKey;\n            case 181:\n                return Status.TokenHasNoWipeKey;\n            case 182:\n                return Status.InvalidTokenMintAmount;\n            case 183:\n                return Status.InvalidTokenBurnAmount;\n            case 184:\n                return Status.TokenNotAssociatedToAccount;\n            case 185:\n                return Status.CannotWipeTokenTreasuryAccount;\n            case 186:\n                return Status.InvalidKycKey;\n            case 187:\n                return Status.InvalidWipeKey;\n            case 188:\n                return Status.InvalidFreezeKey;\n            case 189:\n                return Status.InvalidSupplyKey;\n            case 190:\n                return Status.MissingTokenName;\n            case 191:\n                return Status.TokenNameTooLong;\n            case 192:\n                return Status.InvalidWipingAmount;\n            case 193:\n                return Status.TokenIsImmutable;\n            case 194:\n                return Status.TokenAlreadyAssociatedToAccount;\n            case 195:\n                return Status.TransactionRequiresZeroTokenBalances;\n            case 196:\n                return Status.AccountIsTreasury;\n            case 197:\n                return Status.TokenIdRepeatedInTokenList;\n            case 198:\n                return Status.TokenTransferListSizeLimitExceeded;\n            case 199:\n                return Status.EmptyTokenTransferBody;\n            case 200:\n                return Status.EmptyTokenTransferAccountAmounts;\n        }\n\n        throw new Error(\n            `(BUG) Status.fromCode() does not handle code: ${code}`\n        );\n    }\n\n    /**\n     * @returns {proto.ResponseCodeEnum}\n     */\n    valueOf() {\n        return this._code;\n    }\n}\n\n/**\n * The transaction passed the precheck validations.\n */\nStatus.Ok = new Status(0);\n\n/**\n * For any error not handled by specific error codes listed below.\n */\nStatus.InvalidTransaction = new Status(1);\n\n/**\n * Payer account does not exist.\n */\nStatus.PayerAccountNotFound = new Status(2);\n\n/**\n * Node Account provided does not match the node account of the node the transaction was submitted to.\n */\nStatus.InvalidNodeAccount = new Status(3);\n\n/**\n * Pre-Check error when TransactionValidStart + transactionValidDuration is less than current consensus time.\n */\nStatus.TransactionExpired = new Status(4);\n\n/**\n * Transaction start time is greater than current consensus time\n */\nStatus.InvalidTransactionStart = new Status(5);\n\n/**\n * Valid transaction duration is a positive non zero number that does not exceed 120 seconds\n */\nStatus.InvalidTransactionDuration = new Status(6);\n\n/**\n * The transaction signature is not valid\n */\nStatus.InvalidSignature = new Status(7);\n\n/**\n * Transaction memo size exceeded 100 bytes\n */\nStatus.MemoTooLong = new Status(8);\n\n/**\n * The fee provided in the transaction is insufficient for this type of transaction\n */\nStatus.InsufficientTxFee = new Status(9);\n\n/**\n * The payer account has insufficient cryptocurrency to pay the transaction fee\n */\nStatus.InsufficientPayerBalance = new Status(10);\n\n/**\n * This transaction ID is a duplicate of one that was submitted to this node or reached consensus in the last 180 seconds (receipt period)\n */\nStatus.DuplicateTransaction = new Status(11);\n\n/**\n * If API is throttled out\n */\nStatus.Busy = new Status(12);\n\n/**\n * The API is not currently supported\n */\nStatus.NotSupported = new Status(13);\n\n/**\n * The file id is invalid or does not exist\n */\nStatus.InvalidFileId = new Status(14);\n\n/**\n * The account id is invalid or does not exist\n */\nStatus.InvalidAccountId = new Status(15);\n\n/**\n * The contract id is invalid or does not exist\n */\nStatus.InvalidContractId = new Status(16);\n\n/**\n * Transaction id is not valid\n */\nStatus.InvalidTransactionId = new Status(17);\n\n/**\n * Receipt for given transaction id does not exist\n */\nStatus.ReceiptNotFound = new Status(18);\n\n/**\n * Record for given transaction id does not exist\n */\nStatus.RecordNotFound = new Status(19);\n\n/**\n * The solidity id is invalid or entity with this solidity id does not exist\n */\nStatus.InvalidSolidityId = new Status(20);\n\n/**\n * Transaction hasn't yet reached consensus, or has already expired\n */\nStatus.Unknown = new Status(21);\n\n/**\n * The transaction succeeded\n */\nStatus.Success = new Status(22);\n\n/**\n * There was a system error and the transaction failed because of invalid request parameters.\n */\nStatus.FailInvalid = new Status(23);\n\n/**\n * There was a system error while performing fee calculation, reserved for future.\n */\nStatus.FailFee = new Status(24);\n\n/**\n * There was a system error while performing balance checks, reserved for future.\n */\nStatus.FailBalance = new Status(25);\n\n/**\n * Key not provided in the transaction body\n */\nStatus.KeyRequired = new Status(26);\n\n/**\n * Unsupported algorithm/encoding used for keys in the transaction\n */\nStatus.BadEncoding = new Status(27);\n\n/**\n * When the account balance is not sufficient for the transfer\n */\nStatus.InsufficientAccountBalance = new Status(28);\n\n/**\n * During an update transaction when the system is not able to find the Users Solidity address\n */\nStatus.InvalidSolidityAddress = new Status(29);\n\n/**\n * Not enough gas was supplied to execute transaction\n */\nStatus.InsufficientGas = new Status(30);\n\n/**\n * Contract byte code size is over the limit\n */\nStatus.ContractSizeLimitExceeded = new Status(31);\n\n/**\n * local execution (query) is requested for a function which changes state\n */\nStatus.LocalCallModificationException = new Status(32);\n\n/**\n * Contract REVERT OPCODE executed\n */\nStatus.ContractRevertExecuted = new Status(33);\n\n/**\n * For any contract execution related error not handled by specific error codes listed above.\n */\nStatus.ContractExecutionException = new Status(34);\n\n/**\n * In Query validation, account with +ve(amount) value should be Receiving node account,\n * the receiver account should be only one account in the list\n */\nStatus.InvalidReceivingNodeAccount = new Status(35);\n\n/**\n * Header is missing in Query request\n */\nStatus.MissingQueryHeader = new Status(36);\n\n/**\n * The update of the account failed\n */\nStatus.AccountUpdateFailed = new Status(37);\n\n/**\n * Provided key encoding was not supported by the system\n */\nStatus.InvalidKeyEncoding = new Status(38);\n\n/**\n * Null solidity address\n */\nStatus.NullSolidityAddress = new Status(39);\n\n/**\n * Update of the contract failed\n */\nStatus.ContractUpdateFailed = new Status(40);\n\n/**\n * The query header is invalid\n */\nStatus.InvalidQueryHeader = new Status(41);\n\n/**\n * Invalid fee submitted\n */\nStatus.InvalidFeeSubmitted = new Status(42);\n\n/**\n * Payer signature is invalid\n */\nStatus.InvalidPayerSignature = new Status(43);\n\n/**\n * The keys were not provided in the request.\n */\nStatus.KeyNotProvided = new Status(44);\n\n/**\n * Expiration time provided in the transaction was invalid.\n */\nStatus.InvalidExpirationTime = new Status(45);\n\n/**\n * WriteAccess Control Keys are not provided for the file\n */\nStatus.NoWaclKey = new Status(46);\n\n/**\n * The contents of file are provided as empty.\n */\nStatus.FileContentEmpty = new Status(47);\n\n/**\n * The crypto transfer credit and debit do not sum equal to 0\n */\nStatus.InvalidAccountAmounts = new Status(48);\n\n/**\n * Transaction body provided is empty\n */\nStatus.EmptyTransactionBody = new Status(49);\n\n/**\n * Invalid transaction body provided\n */\nStatus.InvalidTransactionBody = new Status(50);\n\n/**\n * The type of key (base ed25519 key, KeyList, or ThresholdKey) does not match the type of\n * signature (base ed25519 signature, SignatureList, or ThresholdKeySignature).\n */\nStatus.InvalidSignatureTypeMismatchingKey = new Status(51);\n\n/**\n * The number of key (KeyList, or ThresholdKey) does not match that of signature\n * (SignatureList, or ThresholdKeySignature). e.g. if a keyList has 3 base keys,\n * then the corresponding signatureList should also have 3 base signatures.\n */\nStatus.InvalidSignatureCountMismatchingKey = new Status(52);\n\n/**\n * The livehash body is empty\n */\nStatus.EmptyLiveHashBody = new Status(53);\n\n/**\n * The livehash data is missing\n */\nStatus.EmptyLiveHash = new Status(54);\n\n/**\n * The keys for a livehash are missing\n */\nStatus.EmptyLiveHashKeys = new Status(55);\n\n/**\n * The livehash data is not the output of a Sha-384 digest\n */\nStatus.InvalidLiveHashSize = new Status(56);\n\n/**\n * The claim body is empty.\n */\nStatus.EmptyClaimBody = new Status(53);\n\n/**\n * The hash for the claim is empty\n */\nStatus.EmptyClaimHash = new Status(54);\n\n/**\n * The key list is empty\n */\nStatus.EmptyClaimKeys = new Status(55);\n\n/**\n * The size of the claim hash is not 48 bytes\n */\nStatus.InvalidClaimHashSize = new Status(56);\n\n/**\n * The query body is empty\n */\nStatus.EmptyQueryBody = new Status(57);\n\n/**\n * The crypto livehash query is empty\n */\nStatus.EmptyLiveHashQuery = new Status(58);\n\n/**\n * The livehash is not present\n */\nStatus.LiveHashNotFound = new Status(59);\n\n/**\n * The crypto claim query is empty\n */\nStatus.EmptyClaimQuery = new Status(58);\n\n/**\n * The crypto claim doesn't exists in the file system. It expired or was never persisted.\n */\nStatus.ClaimNotFound = new Status(59);\n\n/**\n * The account id passed has not yet been created.\n */\nStatus.AccountIdDoesNotExist = new Status(60);\n\n/**\n * The livehash already exists for a given account\n */\nStatus.LiveHashAlreadyExists = new Status(61);\n\n/**\n * The claim hash already exists\n */\nStatus.ClaimAlreadyExists = new Status(61);\n\n/**\n * File WACL keys are invalid\n */\nStatus.InvalidFileWacl = new Status(62);\n\n/**\n * Serialization failure\n */\nStatus.SerializationFailed = new Status(63);\n\n/**\n * The size of the Transaction is greater than transactionMaxBytes\n */\nStatus.TransactionOversize = new Status(64);\n\n/**\n * The Transaction has more than 50 levels\n */\nStatus.TransactionTooManyLayers = new Status(65);\n\n/**\n * Contract is marked as deleted\n */\nStatus.ContractDeleted = new Status(66);\n\n/**\n * The platform node is either disconnected or lagging behind.\n */\nStatus.PlatformNotActive = new Status(67);\n\n/**\n * One key matches more than one prefixes on the signature map.\n */\nStatus.KeyPrefixMismatch = new Status(68);\n\n/**\n * Transaction not created by platform due to either large backlog or\n * message size exceeded transactionMaxBytes.\n */\nStatus.PlatformTransactionNotCreated = new Status(69);\n\n/**\n * Auto renewal period is not a positive number of seconds.\n */\nStatus.InvalidRenewalPeriod = new Status(70);\n\n/**\n * The response code when a smart contract id is passed for a crypto API request.\n */\nStatus.InvalidPayerAccountId = new Status(71);\n\n/**\n * The account has been marked as deleted.\n */\nStatus.AccountDeleted = new Status(72);\n\n/**\n * The file has been marked as deleted.\n */\nStatus.FileDeleted = new Status(73);\n\n/**\n * Same accounts repeated in the transfer account list.\n */\nStatus.AccountRepeatedInAccountAmounts = new Status(74);\n\n/**\n * Attempting to set negative balance value for crypto account.\n */\nStatus.SettingNegativeAccountBalance = new Status(75);\n\n/**\n * When deleting smart contract that has crypto balance either transfer account or transfer.\n * smart contract is required.\n */\nStatus.ObtainerRequired = new Status(76);\n\n/**\n * When deleting smart contract that has crypto balance you can not use the same contract id\n * as transferContractId as the one being deleted.\n */\nStatus.ObtainerSameContractId = new Status(77);\n\n/**\n * TransferAccountId or transferContractId specified for contract delete does not exist.\n */\nStatus.ObtainerDoesNotExist = new Status(78);\n\n/**\n * Attempting to modify (update or delete a immutable smart contract,\n * i.e. one created without a admin key).\n */\nStatus.ModifyingImmutableContract = new Status(79);\n\n/**\n * Unexpected exception thrown by file system functions.\n */\nStatus.FileSystemException = new Status(80);\n\n/**\n * The duration is not a subset of [MINIMUM_AUTORENEW_DURATION,MAXIMUM_AUTORENEW_DURATION].\n */\nStatus.AutorenewDurationNotInRange = new Status(81);\n\n/**\n * Decoding the smart contract binary to a byte array failed.\n * Check that the input is a valid hex string.\n */\nStatus.ErrorDecodingBytestring = new Status(82);\n\n/**\n * File to create a smart contract was of length zero.\n */\nStatus.ContractFileEmpty = new Status(83);\n\n/**\n * Bytecode for smart contract is of length zero.\n */\nStatus.ContractBytecodeEmpty = new Status(84);\n\n/**\n * Attempt to set negative initial balance.\n */\nStatus.InvalidInitialBalance = new Status(85);\n\n/**\n * Attempt to set negative receive record threshold.\n */\nStatus.InvalidReceiveRecordThreshold = new Status(86);\n\n/**\n * Attempt to set negative send record threshold.\n */\nStatus.InvalidSendRecordThreshold = new Status(87);\n\n/**\n * Special Account Operations should be performed by only Genesis account, return this code if it is not Genesis Account\n */\nStatus.AccountIsNotGenesisAccount = new Status(88);\n\n/**\n * The fee payer account doesn't have permission to submit such Transaction\n */\nStatus.PayerAccountUnauthorized = new Status(89);\n\n/**\n * FreezeTransactionBody is invalid\n */\nStatus.InvalidFreezeTransactionBody = new Status(90);\n\n/**\n * FreezeTransactionBody does not exist\n */\nStatus.FreezeTransactionBodyNotFound = new Status(91);\n\n/**\n * Exceeded the number of accounts (both from and to) allowed for crypto transfer list.\n */\nStatus.TransferListSizeLimitExceeded = new Status(92);\n\n/**\n * Smart contract result size greater than specified maxResultSize.\n */\nStatus.ResultSizeLimitExceeded = new Status(93);\n\n/**\n * The payer account is not a special account(account 0.0.55).\n */\nStatus.NotSpecialAccount = new Status(94);\n\n/**\n * Negative gas was offered in smart contract call.\n */\nStatus.ContractNegativeGas = new Status(95);\n\n/**\n * Negative value / initial balance was specified in a smart contract call / create.\n */\nStatus.ContractNegativeValue = new Status(96);\n\n/**\n * Failed to update fee file.\n */\nStatus.InvalidFeeFile = new Status(97);\n\n/**\n * Failed to update exchange rate file.\n */\nStatus.InvalidExchangeRateFile = new Status(98);\n\n/**\n * Payment tendered for contract local call cannot cover both the fee and the gas.\n */\nStatus.InsufficientLocalCallGas = new Status(99);\n\n/**\n * Entities with Entity ID below 1000 are not allowed to be deleted.\n */\nStatus.EntityNotAllowedToDelete = new Status(100);\n\n/**\n * Violating one of these rules: 1) treasury account can update all entities below 0.0.1000, 2)\n * account 0.0.50 can update all entities from 0.0.51 - 0.0.80, 3) Network Function Master\n * Account A/c 0.0.50 - Update all Network Function accounts & perform all the Network Functions\n * listed below, 4) Network Function Accounts: i) A/c 0.0.55 - Update Address Book files\n * (0.0.101/102), ii) A/c 0.0.56 - Update Fee schedule (0.0.111), iii) A/c 0.0.57 -\n * Update Exchange Rate (0.0.112).\n */\nStatus.AuthorizationFailed = new Status(101);\n\n/**\n * Fee Schedule Proto uploaded but not valid (append or update is required).\n */\nStatus.FileUploadedProtoInvalid = new Status(102);\n\n/**\n * Fee Schedule Proto uploaded but not valid (append or update is required).\n */\nStatus.FileUploadedProtoNotSavedToDisk = new Status(103);\n\n/**\n * Fee Schedule Proto File Part uploaded.\n */\nStatus.FeeScheduleFilePartUploaded = new Status(104);\n\n/**\n * The change on Exchange Rate exceeds Exchange_Rate_Allowed_Percentage.\n */\nStatus.ExchangeRateChangeLimitExceeded = new Status(105);\n\n/**\n * Contract permanent storage exceeded the currently allowable limit\n */\nStatus.MaxContractStorageExceeded = new Status(106);\n\n/**\n * Transfer Account should not be same as Account to be deleted\n */\nStatus.TransferAccountSameAsDeleteAccount = new Status(107);\n\nStatus.TotalLedgerBalanceInvalid = new Status(108);\n\n/**\n * The expiration date/time on a smart contract may not be reduced.\n */\nStatus.ExpirationReductionNotAllowed = new Status(110);\n\n/**\n * Gas exceeded currently allowable gas limit per transaction\n */\nStatus.MaxGasLimitExceeded = new Status(111);\n\n/**\n * File size exceeded the currently allowable limit\n */\nStatus.MaxFileSizeExceeded = new Status(112);\n\n/**\n * The Topic ID specified is not in the system.\n */\nStatus.InvalidTopicId = new Status(150);\n\nStatus.InvalidTopicExpirationTime = new Status(154);\nStatus.InvalidAdminKey = new Status(155);\nStatus.InvalidSubmitKey = new Status(156);\n\n/**\n * An attempted operation was not authorized (ie - a deleteTopic for a topic with no adminKey).\n */\nStatus.Unauthorized = new Status(157);\n\n/**\n * A ConsensusService message is empty.\n */\nStatus.InvalidTopicMessage = new Status(158);\n\n/**\n * The autoRenewAccount specified is not a valid, active account.\n */\nStatus.InvalidAutorenewAccount = new Status(159);\n\n/**\n * An admin key was not specified on the topic, so there must not be an autorenew account.\n */\nStatus.AutoRenewAccountNotAllowed = new Status(160);\n\n/**\n * The autoRenewAccount didn't sign the transaction.\n */\nStatus.AutoRenewAccountSignatureMissing = new Status(161);\n\n/**\n * The topic has expired, was not automatically renewed, and is in a 7 day grace period before\n * the topic will be deleted unrecoverably. This error response code will not be returned\n * until autoRenew functionality is supported by HAPI.\n */\nStatus.TopicExpired = new Status(162);\n\n/**\n * Chunk number must be from 1 to total (chunks) inclusive.\n */\nStatus.InvalidChunkNumber = new Status(163);\n\n/**\n * For every chunk, the payer account that is part of initialTransactionId must match the Payer\n * Account of this transaction. The entire initialTransactionId should match the transactionId of\n * the first chunk, but this is not checked or enforced by Hedera except when the chunk number is 1.\n */\nStatus.InvalidChunkTransactionId = new Status(164);\n\n/**\n * Account is frozen and cannot transact with the token\n */\nStatus.AccountFrozenForToken = new Status(165);\n\n/**\n * Maximum number of token relations for agiven account is exceeded\n */\nStatus.TokensPerAccountLimitExceeded = new Status(166);\n\n/**\n * The token is invalid or does not exist\n */\nStatus.InvalidTokenId = new Status(167);\n\n/**\n * Invalid token decimals\n */\nStatus.InvalidTokenDecimals = new Status(168);\n\n/**\n * Invalid token initial supply\n */\nStatus.InvalidTokenInitialSupply = new Status(169);\n\n/**\n * Treasury Account does not exist or is deleted\n */\nStatus.InvalidTreasuryAccountForToken = new Status(170);\n\n/**\n * Token Symbol is not Utf-8 capitalized alphabetical string\n */\nStatus.InvalidTokenSymbol = new Status(171);\n\n/**\n * Freeze key is not set on token\n */\nStatus.TokenHasNoFreezeKey = new Status(172);\n\n/**\n * Amounts in transfer list are not net zero\n */\nStatus.TransfersNotZeroSumForToken = new Status(173);\n\n/**\n * Token Symbol is not provided\n */\nStatus.MissingTokenSymbol = new Status(174);\n\n/**\n * Token Symbol is too long\n */\nStatus.TokenSymbolTooLong = new Status(175);\n\n/**\n * Kyc must be granted and account does not have Kyc granted\n */\nStatus.AccountKycNotGrantedForToken = new Status(176);\n\n/**\n * Kyc key is not set on token\n */\nStatus.TokenHasNoKycKey = new Status(177);\n\n/**\n * Token balance is not sufficient for the transaction\n */\nStatus.InsufficientTokenBalance = new Status(178);\n\n/**\n * Token transactions cannot be executed on deleted token\n */\nStatus.TokenWasDeleted = new Status(179);\n\n/**\n * Supply key is not set on token\n */\nStatus.TokenHasNoSupplyKey = new Status(180);\n\n/**\n * Wipe key is not set on token\n */\nStatus.TokenHasNoWipeKey = new Status(181);\n\nStatus.InvalidTokenMintAmount = new Status(182);\n\nStatus.InvalidTokenBurnAmount = new Status(183);\n\nStatus.TokenNotAssociatedToAccount = new Status(184);\n\n/**\n * Cannot execute wipe operation on treasury account\n */\nStatus.CannotWipeTokenTreasuryAccount = new Status(185);\n\nStatus.InvalidKycKey = new Status(186);\n\nStatus.InvalidWipeKey = new Status(187);\n\nStatus.InvalidFreezeKey = new Status(188);\n\nStatus.InvalidSupplyKey = new Status(189);\n\n/**\n * Token Name is not provided\n */\nStatus.MissingTokenName = new Status(190);\n\n/**\n * Token Name is too long\n */\nStatus.TokenNameTooLong = new Status(191);\n\n/**\n * The provided wipe amount must not be negative, zero or bigger than the token holder balance\n */\nStatus.InvalidWipingAmount = new Status(192);\n\n/**\n * Token does not have Admin key set, thus update/delete transactions cannot be performed\n */\nStatus.TokenIsImmutable = new Status(193);\n\n/**\n * An <tt>associateToken</tt> operation specified a token already associated to the account\n */\nStatus.TokenAlreadyAssociatedToAccount = new Status(194);\n\n/**\n * An attempted operation is invalid until all token balances for the target account are zero\n */\nStatus.TransactionRequiresZeroTokenBalances = new Status(195);\n\n/**\n * An attempted operation is invalid because the account is a treasury\n */\nStatus.AccountIsTreasury = new Status(196);\n\n/**\n * Same TokenIds present in the token list\n */\nStatus.TokenIdRepeatedInTokenList = new Status(197);\n\n/**\n * Exceeded the number of token transfers (both from and to) allowed for token transfer list\n */\nStatus.TokenTransferListSizeLimitExceeded = new Status(198);\n\n/**\n * TokenTransfersTransactionBody has no TokenTransferList\n */\nStatus.EmptyTokenTransferBody = new Status(199);\n\n/**\n * TokenTransfersTransactionBody has a TokenTransferList with no AccountAmounts\n */\nStatus.EmptyTokenTransferAccountAmounts = new Status(200);\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @type {string[]}\n */\nconst byteToHex = [];\n\nfor (let n = 0; n <= 0xff; n += 1) {\n    byteToHex.push(n.toString(16).padStart(2, \"0\"));\n}\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nexport function encode(data) {\n    let string = \"\";\n\n    for (const byte of data) {\n        string += byteToHex[byte];\n    }\n\n    return string;\n}\n\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nexport function decode(text) {\n    const str = text.startsWith(\"0x\") ? text.substring(2) : text;\n    const result = str.match(/.{1,2}/gu);\n\n    return new Uint8Array(\n        (result == null ? [] : result).map((byte) => parseInt(byte, 16))\n    );\n}\n","import Long from \"long\";\nimport * as hex from \"./encoding/hex.js\";\n\n/**\n * @typedef {object} IEntityId\n * @property {number | Long} num\n * @property {(number | Long)=} shard\n * @property {(number | Long)=} realm\n */\n\n/**\n * @param {number | Long | IEntityId} props\n * @param {(number | null | Long)=} realm\n * @param {(number | null | Long)=} num\n * @returns {[Long, Long, Long]}\n */\nexport function constructor(props, realm, num) {\n    let shard_ = Long.ZERO;\n    let realm_ = Long.ZERO;\n    let num_ = Long.ZERO;\n\n    if (typeof props === \"number\" || props instanceof Long) {\n        if (realm == null) {\n            num_ = Long.fromValue(props);\n        } else {\n            shard_ = Long.fromValue(props);\n            realm_ = Long.fromValue(realm);\n            num_ = num != null ? Long.fromValue(num) : Long.ZERO;\n        }\n    } else {\n        shard_ = Long.fromValue(props.shard != null ? props.shard : 0);\n        realm_ = Long.fromValue(props.realm != null ? props.realm : 0);\n        num_ = Long.fromValue(props.num != null ? props.num : 0);\n    }\n\n    if (shard_.isNegative() || realm_.isNegative() || num_.isNegative()) {\n        throw new Error(\"negative numbers are not allowed in IDs\");\n    }\n\n    return [shard_, realm_, num_];\n}\n\n/**\n * @param {string} text\n * @returns {[Long, Long, Long]}\n */\nexport function fromString(text) {\n    const strings = text.split(\".\");\n\n    for (const string of strings) {\n        if (string === \"\") {\n            throw new Error(\"invalid format for entity ID\");\n        }\n    }\n\n    const components = strings.map(Number);\n\n    for (const component of components) {\n        if (Number.isNaN(component)) {\n            throw new Error(\"invalid format for entity ID\");\n        }\n    }\n\n    let shard = Long.ZERO;\n    let realm = Long.ZERO;\n    let num;\n\n    if (components.length === 1) {\n        num = Long.fromNumber(components[0]);\n    } else if (components.length === 3) {\n        shard = Long.fromNumber(components[0]);\n        realm = Long.fromNumber(components[1]);\n        num = Long.fromNumber(components[2]);\n    } else {\n        throw new Error(\"invalid format for entity ID\");\n    }\n\n    return [shard, realm, num];\n}\n\n/**\n * @param {string} address\n * @returns {[Long, Long, Long]}\n */\nexport function fromSolidityAddress(address) {\n    const addr = address.startsWith(\"0x\")\n        ? hex.decode(address.slice(2))\n        : hex.decode(address);\n\n    if (addr.length !== 20) {\n        throw new Error(`Invalid hex encoded solidity address length:\n                expected length 40, got length ${address.length}`);\n    }\n\n    const shard = Long.fromBytesBE(Array.from(addr.slice(0, 4)));\n    const realm = Long.fromBytesBE(Array.from(addr.slice(4, 12)));\n    const num = Long.fromBytesBE(Array.from(addr.slice(12, 20)));\n\n    return [shard, realm, num];\n}\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = function inquire(module) {\n    // all calls to inquire will fail\n    return null;\n};\n    \n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n    if (typeof Buffer !== \"undefined\" && Buffer.prototype.utf8Write) {\n        return Buffer;\n    }\n\n    return null;\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = require(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport * as $protobuf from \"@hashgraph/protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const proto = $root.proto = (() => {\n\n    /**\n     * Namespace proto.\n     * @exports proto\n     * @namespace\n     */\n    const proto = {};\n\n    proto.ShardID = (function() {\n\n        /**\n         * Properties of a ShardID.\n         * @memberof proto\n         * @interface IShardID\n         * @property {Long|null} [shardNum] ShardID shardNum\n         */\n\n        /**\n         * Constructs a new ShardID.\n         * @memberof proto\n         * @classdesc Represents a ShardID.\n         * @implements IShardID\n         * @constructor\n         * @param {proto.IShardID=} [p] Properties to set\n         */\n        function ShardID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ShardID shardNum.\n         * @member {Long} shardNum\n         * @memberof proto.ShardID\n         * @instance\n         */\n        ShardID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new ShardID instance using the specified properties.\n         * @function create\n         * @memberof proto.ShardID\n         * @static\n         * @param {proto.IShardID=} [properties] Properties to set\n         * @returns {proto.ShardID} ShardID instance\n         */\n        ShardID.create = function create(properties) {\n            return new ShardID(properties);\n        };\n\n        /**\n         * Encodes the specified ShardID message. Does not implicitly {@link proto.ShardID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ShardID\n         * @static\n         * @param {proto.IShardID} m ShardID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ShardID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.shardNum != null && Object.hasOwnProperty.call(m, \"shardNum\"))\n                w.uint32(8).int64(m.shardNum);\n            return w;\n        };\n\n        /**\n         * Decodes a ShardID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ShardID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ShardID} ShardID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ShardID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ShardID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.shardNum = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ShardID;\n    })();\n\n    proto.RealmID = (function() {\n\n        /**\n         * Properties of a RealmID.\n         * @memberof proto\n         * @interface IRealmID\n         * @property {Long|null} [shardNum] RealmID shardNum\n         * @property {Long|null} [realmNum] RealmID realmNum\n         */\n\n        /**\n         * Constructs a new RealmID.\n         * @memberof proto\n         * @classdesc Represents a RealmID.\n         * @implements IRealmID\n         * @constructor\n         * @param {proto.IRealmID=} [p] Properties to set\n         */\n        function RealmID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * RealmID shardNum.\n         * @member {Long} shardNum\n         * @memberof proto.RealmID\n         * @instance\n         */\n        RealmID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * RealmID realmNum.\n         * @member {Long} realmNum\n         * @memberof proto.RealmID\n         * @instance\n         */\n        RealmID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new RealmID instance using the specified properties.\n         * @function create\n         * @memberof proto.RealmID\n         * @static\n         * @param {proto.IRealmID=} [properties] Properties to set\n         * @returns {proto.RealmID} RealmID instance\n         */\n        RealmID.create = function create(properties) {\n            return new RealmID(properties);\n        };\n\n        /**\n         * Encodes the specified RealmID message. Does not implicitly {@link proto.RealmID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.RealmID\n         * @static\n         * @param {proto.IRealmID} m RealmID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RealmID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.shardNum != null && Object.hasOwnProperty.call(m, \"shardNum\"))\n                w.uint32(8).int64(m.shardNum);\n            if (m.realmNum != null && Object.hasOwnProperty.call(m, \"realmNum\"))\n                w.uint32(16).int64(m.realmNum);\n            return w;\n        };\n\n        /**\n         * Decodes a RealmID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.RealmID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.RealmID} RealmID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RealmID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RealmID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.shardNum = r.int64();\n                    break;\n                case 2:\n                    m.realmNum = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return RealmID;\n    })();\n\n    proto.AccountID = (function() {\n\n        /**\n         * Properties of an AccountID.\n         * @memberof proto\n         * @interface IAccountID\n         * @property {Long|null} [shardNum] AccountID shardNum\n         * @property {Long|null} [realmNum] AccountID realmNum\n         * @property {Long|null} [accountNum] AccountID accountNum\n         */\n\n        /**\n         * Constructs a new AccountID.\n         * @memberof proto\n         * @classdesc Represents an AccountID.\n         * @implements IAccountID\n         * @constructor\n         * @param {proto.IAccountID=} [p] Properties to set\n         */\n        function AccountID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AccountID shardNum.\n         * @member {Long} shardNum\n         * @memberof proto.AccountID\n         * @instance\n         */\n        AccountID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AccountID realmNum.\n         * @member {Long} realmNum\n         * @memberof proto.AccountID\n         * @instance\n         */\n        AccountID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AccountID accountNum.\n         * @member {Long} accountNum\n         * @memberof proto.AccountID\n         * @instance\n         */\n        AccountID.prototype.accountNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new AccountID instance using the specified properties.\n         * @function create\n         * @memberof proto.AccountID\n         * @static\n         * @param {proto.IAccountID=} [properties] Properties to set\n         * @returns {proto.AccountID} AccountID instance\n         */\n        AccountID.create = function create(properties) {\n            return new AccountID(properties);\n        };\n\n        /**\n         * Encodes the specified AccountID message. Does not implicitly {@link proto.AccountID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.AccountID\n         * @static\n         * @param {proto.IAccountID} m AccountID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AccountID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.shardNum != null && Object.hasOwnProperty.call(m, \"shardNum\"))\n                w.uint32(8).int64(m.shardNum);\n            if (m.realmNum != null && Object.hasOwnProperty.call(m, \"realmNum\"))\n                w.uint32(16).int64(m.realmNum);\n            if (m.accountNum != null && Object.hasOwnProperty.call(m, \"accountNum\"))\n                w.uint32(24).int64(m.accountNum);\n            return w;\n        };\n\n        /**\n         * Decodes an AccountID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.AccountID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.AccountID} AccountID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AccountID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AccountID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.shardNum = r.int64();\n                    break;\n                case 2:\n                    m.realmNum = r.int64();\n                    break;\n                case 3:\n                    m.accountNum = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return AccountID;\n    })();\n\n    proto.FileID = (function() {\n\n        /**\n         * Properties of a FileID.\n         * @memberof proto\n         * @interface IFileID\n         * @property {Long|null} [shardNum] FileID shardNum\n         * @property {Long|null} [realmNum] FileID realmNum\n         * @property {Long|null} [fileNum] FileID fileNum\n         */\n\n        /**\n         * Constructs a new FileID.\n         * @memberof proto\n         * @classdesc Represents a FileID.\n         * @implements IFileID\n         * @constructor\n         * @param {proto.IFileID=} [p] Properties to set\n         */\n        function FileID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileID shardNum.\n         * @member {Long} shardNum\n         * @memberof proto.FileID\n         * @instance\n         */\n        FileID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FileID realmNum.\n         * @member {Long} realmNum\n         * @memberof proto.FileID\n         * @instance\n         */\n        FileID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FileID fileNum.\n         * @member {Long} fileNum\n         * @memberof proto.FileID\n         * @instance\n         */\n        FileID.prototype.fileNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new FileID instance using the specified properties.\n         * @function create\n         * @memberof proto.FileID\n         * @static\n         * @param {proto.IFileID=} [properties] Properties to set\n         * @returns {proto.FileID} FileID instance\n         */\n        FileID.create = function create(properties) {\n            return new FileID(properties);\n        };\n\n        /**\n         * Encodes the specified FileID message. Does not implicitly {@link proto.FileID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileID\n         * @static\n         * @param {proto.IFileID} m FileID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.shardNum != null && Object.hasOwnProperty.call(m, \"shardNum\"))\n                w.uint32(8).int64(m.shardNum);\n            if (m.realmNum != null && Object.hasOwnProperty.call(m, \"realmNum\"))\n                w.uint32(16).int64(m.realmNum);\n            if (m.fileNum != null && Object.hasOwnProperty.call(m, \"fileNum\"))\n                w.uint32(24).int64(m.fileNum);\n            return w;\n        };\n\n        /**\n         * Decodes a FileID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileID} FileID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.shardNum = r.int64();\n                    break;\n                case 2:\n                    m.realmNum = r.int64();\n                    break;\n                case 3:\n                    m.fileNum = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FileID;\n    })();\n\n    proto.ContractID = (function() {\n\n        /**\n         * Properties of a ContractID.\n         * @memberof proto\n         * @interface IContractID\n         * @property {Long|null} [shardNum] ContractID shardNum\n         * @property {Long|null} [realmNum] ContractID realmNum\n         * @property {Long|null} [contractNum] ContractID contractNum\n         */\n\n        /**\n         * Constructs a new ContractID.\n         * @memberof proto\n         * @classdesc Represents a ContractID.\n         * @implements IContractID\n         * @constructor\n         * @param {proto.IContractID=} [p] Properties to set\n         */\n        function ContractID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractID shardNum.\n         * @member {Long} shardNum\n         * @memberof proto.ContractID\n         * @instance\n         */\n        ContractID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ContractID realmNum.\n         * @member {Long} realmNum\n         * @memberof proto.ContractID\n         * @instance\n         */\n        ContractID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ContractID contractNum.\n         * @member {Long} contractNum\n         * @memberof proto.ContractID\n         * @instance\n         */\n        ContractID.prototype.contractNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new ContractID instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractID\n         * @static\n         * @param {proto.IContractID=} [properties] Properties to set\n         * @returns {proto.ContractID} ContractID instance\n         */\n        ContractID.create = function create(properties) {\n            return new ContractID(properties);\n        };\n\n        /**\n         * Encodes the specified ContractID message. Does not implicitly {@link proto.ContractID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractID\n         * @static\n         * @param {proto.IContractID} m ContractID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.shardNum != null && Object.hasOwnProperty.call(m, \"shardNum\"))\n                w.uint32(8).int64(m.shardNum);\n            if (m.realmNum != null && Object.hasOwnProperty.call(m, \"realmNum\"))\n                w.uint32(16).int64(m.realmNum);\n            if (m.contractNum != null && Object.hasOwnProperty.call(m, \"contractNum\"))\n                w.uint32(24).int64(m.contractNum);\n            return w;\n        };\n\n        /**\n         * Decodes a ContractID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractID} ContractID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.shardNum = r.int64();\n                    break;\n                case 2:\n                    m.realmNum = r.int64();\n                    break;\n                case 3:\n                    m.contractNum = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractID;\n    })();\n\n    proto.TransactionID = (function() {\n\n        /**\n         * Properties of a TransactionID.\n         * @memberof proto\n         * @interface ITransactionID\n         * @property {proto.ITimestamp|null} [transactionValidStart] TransactionID transactionValidStart\n         * @property {proto.IAccountID|null} [accountID] TransactionID accountID\n         */\n\n        /**\n         * Constructs a new TransactionID.\n         * @memberof proto\n         * @classdesc Represents a TransactionID.\n         * @implements ITransactionID\n         * @constructor\n         * @param {proto.ITransactionID=} [p] Properties to set\n         */\n        function TransactionID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionID transactionValidStart.\n         * @member {proto.ITimestamp|null|undefined} transactionValidStart\n         * @memberof proto.TransactionID\n         * @instance\n         */\n        TransactionID.prototype.transactionValidStart = null;\n\n        /**\n         * TransactionID accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.TransactionID\n         * @instance\n         */\n        TransactionID.prototype.accountID = null;\n\n        /**\n         * Creates a new TransactionID instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionID\n         * @static\n         * @param {proto.ITransactionID=} [properties] Properties to set\n         * @returns {proto.TransactionID} TransactionID instance\n         */\n        TransactionID.create = function create(properties) {\n            return new TransactionID(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionID message. Does not implicitly {@link proto.TransactionID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionID\n         * @static\n         * @param {proto.ITransactionID} m TransactionID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.transactionValidStart != null && Object.hasOwnProperty.call(m, \"transactionValidStart\"))\n                $root.proto.Timestamp.encode(m.transactionValidStart, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionID} TransactionID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.transactionValidStart = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionID;\n    })();\n\n    proto.AccountAmount = (function() {\n\n        /**\n         * Properties of an AccountAmount.\n         * @memberof proto\n         * @interface IAccountAmount\n         * @property {proto.IAccountID|null} [accountID] AccountAmount accountID\n         * @property {Long|null} [amount] AccountAmount amount\n         */\n\n        /**\n         * Constructs a new AccountAmount.\n         * @memberof proto\n         * @classdesc Represents an AccountAmount.\n         * @implements IAccountAmount\n         * @constructor\n         * @param {proto.IAccountAmount=} [p] Properties to set\n         */\n        function AccountAmount(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AccountAmount accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.AccountAmount\n         * @instance\n         */\n        AccountAmount.prototype.accountID = null;\n\n        /**\n         * AccountAmount amount.\n         * @member {Long} amount\n         * @memberof proto.AccountAmount\n         * @instance\n         */\n        AccountAmount.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new AccountAmount instance using the specified properties.\n         * @function create\n         * @memberof proto.AccountAmount\n         * @static\n         * @param {proto.IAccountAmount=} [properties] Properties to set\n         * @returns {proto.AccountAmount} AccountAmount instance\n         */\n        AccountAmount.create = function create(properties) {\n            return new AccountAmount(properties);\n        };\n\n        /**\n         * Encodes the specified AccountAmount message. Does not implicitly {@link proto.AccountAmount.verify|verify} messages.\n         * @function encode\n         * @memberof proto.AccountAmount\n         * @static\n         * @param {proto.IAccountAmount} m AccountAmount message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AccountAmount.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();\n            if (m.amount != null && Object.hasOwnProperty.call(m, \"amount\"))\n                w.uint32(16).sint64(m.amount);\n            return w;\n        };\n\n        /**\n         * Decodes an AccountAmount message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.AccountAmount\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.AccountAmount} AccountAmount\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AccountAmount.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AccountAmount();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.amount = r.sint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return AccountAmount;\n    })();\n\n    proto.TransferList = (function() {\n\n        /**\n         * Properties of a TransferList.\n         * @memberof proto\n         * @interface ITransferList\n         * @property {Array.<proto.IAccountAmount>|null} [accountAmounts] TransferList accountAmounts\n         */\n\n        /**\n         * Constructs a new TransferList.\n         * @memberof proto\n         * @classdesc Represents a TransferList.\n         * @implements ITransferList\n         * @constructor\n         * @param {proto.ITransferList=} [p] Properties to set\n         */\n        function TransferList(p) {\n            this.accountAmounts = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransferList accountAmounts.\n         * @member {Array.<proto.IAccountAmount>} accountAmounts\n         * @memberof proto.TransferList\n         * @instance\n         */\n        TransferList.prototype.accountAmounts = $util.emptyArray;\n\n        /**\n         * Creates a new TransferList instance using the specified properties.\n         * @function create\n         * @memberof proto.TransferList\n         * @static\n         * @param {proto.ITransferList=} [properties] Properties to set\n         * @returns {proto.TransferList} TransferList instance\n         */\n        TransferList.create = function create(properties) {\n            return new TransferList(properties);\n        };\n\n        /**\n         * Encodes the specified TransferList message. Does not implicitly {@link proto.TransferList.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransferList\n         * @static\n         * @param {proto.ITransferList} m TransferList message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransferList.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountAmounts != null && m.accountAmounts.length) {\n                for (var i = 0; i < m.accountAmounts.length; ++i)\n                    $root.proto.AccountAmount.encode(m.accountAmounts[i], w.uint32(10).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TransferList message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransferList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransferList} TransferList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransferList.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransferList();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.accountAmounts && m.accountAmounts.length))\n                        m.accountAmounts = [];\n                    m.accountAmounts.push($root.proto.AccountAmount.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransferList;\n    })();\n\n    proto.TokenTransferList = (function() {\n\n        /**\n         * Properties of a TokenTransferList.\n         * @memberof proto\n         * @interface ITokenTransferList\n         * @property {proto.ITokenID|null} [token] TokenTransferList token\n         * @property {Array.<proto.IAccountAmount>|null} [transfers] TokenTransferList transfers\n         */\n\n        /**\n         * Constructs a new TokenTransferList.\n         * @memberof proto\n         * @classdesc Represents a TokenTransferList.\n         * @implements ITokenTransferList\n         * @constructor\n         * @param {proto.ITokenTransferList=} [p] Properties to set\n         */\n        function TokenTransferList(p) {\n            this.transfers = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenTransferList token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenTransferList\n         * @instance\n         */\n        TokenTransferList.prototype.token = null;\n\n        /**\n         * TokenTransferList transfers.\n         * @member {Array.<proto.IAccountAmount>} transfers\n         * @memberof proto.TokenTransferList\n         * @instance\n         */\n        TokenTransferList.prototype.transfers = $util.emptyArray;\n\n        /**\n         * Creates a new TokenTransferList instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenTransferList\n         * @static\n         * @param {proto.ITokenTransferList=} [properties] Properties to set\n         * @returns {proto.TokenTransferList} TokenTransferList instance\n         */\n        TokenTransferList.create = function create(properties) {\n            return new TokenTransferList(properties);\n        };\n\n        /**\n         * Encodes the specified TokenTransferList message. Does not implicitly {@link proto.TokenTransferList.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenTransferList\n         * @static\n         * @param {proto.ITokenTransferList} m TokenTransferList message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenTransferList.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.transfers != null && m.transfers.length) {\n                for (var i = 0; i < m.transfers.length; ++i)\n                    $root.proto.AccountAmount.encode(m.transfers[i], w.uint32(18).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TokenTransferList message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenTransferList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenTransferList} TokenTransferList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenTransferList.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenTransferList();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    if (!(m.transfers && m.transfers.length))\n                        m.transfers = [];\n                    m.transfers.push($root.proto.AccountAmount.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenTransferList;\n    })();\n\n    proto.TopicID = (function() {\n\n        /**\n         * Properties of a TopicID.\n         * @memberof proto\n         * @interface ITopicID\n         * @property {Long|null} [shardNum] TopicID shardNum\n         * @property {Long|null} [realmNum] TopicID realmNum\n         * @property {Long|null} [topicNum] TopicID topicNum\n         */\n\n        /**\n         * Constructs a new TopicID.\n         * @memberof proto\n         * @classdesc Represents a TopicID.\n         * @implements ITopicID\n         * @constructor\n         * @param {proto.ITopicID=} [p] Properties to set\n         */\n        function TopicID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TopicID shardNum.\n         * @member {Long} shardNum\n         * @memberof proto.TopicID\n         * @instance\n         */\n        TopicID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * TopicID realmNum.\n         * @member {Long} realmNum\n         * @memberof proto.TopicID\n         * @instance\n         */\n        TopicID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * TopicID topicNum.\n         * @member {Long} topicNum\n         * @memberof proto.TopicID\n         * @instance\n         */\n        TopicID.prototype.topicNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new TopicID instance using the specified properties.\n         * @function create\n         * @memberof proto.TopicID\n         * @static\n         * @param {proto.ITopicID=} [properties] Properties to set\n         * @returns {proto.TopicID} TopicID instance\n         */\n        TopicID.create = function create(properties) {\n            return new TopicID(properties);\n        };\n\n        /**\n         * Encodes the specified TopicID message. Does not implicitly {@link proto.TopicID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TopicID\n         * @static\n         * @param {proto.ITopicID} m TopicID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TopicID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.shardNum != null && Object.hasOwnProperty.call(m, \"shardNum\"))\n                w.uint32(8).int64(m.shardNum);\n            if (m.realmNum != null && Object.hasOwnProperty.call(m, \"realmNum\"))\n                w.uint32(16).int64(m.realmNum);\n            if (m.topicNum != null && Object.hasOwnProperty.call(m, \"topicNum\"))\n                w.uint32(24).int64(m.topicNum);\n            return w;\n        };\n\n        /**\n         * Decodes a TopicID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TopicID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TopicID} TopicID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TopicID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TopicID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.shardNum = r.int64();\n                    break;\n                case 2:\n                    m.realmNum = r.int64();\n                    break;\n                case 3:\n                    m.topicNum = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TopicID;\n    })();\n\n    proto.TokenID = (function() {\n\n        /**\n         * Properties of a TokenID.\n         * @memberof proto\n         * @interface ITokenID\n         * @property {Long|null} [shardNum] TokenID shardNum\n         * @property {Long|null} [realmNum] TokenID realmNum\n         * @property {Long|null} [tokenNum] TokenID tokenNum\n         */\n\n        /**\n         * Constructs a new TokenID.\n         * @memberof proto\n         * @classdesc Represents a TokenID.\n         * @implements ITokenID\n         * @constructor\n         * @param {proto.ITokenID=} [p] Properties to set\n         */\n        function TokenID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenID shardNum.\n         * @member {Long} shardNum\n         * @memberof proto.TokenID\n         * @instance\n         */\n        TokenID.prototype.shardNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * TokenID realmNum.\n         * @member {Long} realmNum\n         * @memberof proto.TokenID\n         * @instance\n         */\n        TokenID.prototype.realmNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * TokenID tokenNum.\n         * @member {Long} tokenNum\n         * @memberof proto.TokenID\n         * @instance\n         */\n        TokenID.prototype.tokenNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new TokenID instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenID\n         * @static\n         * @param {proto.ITokenID=} [properties] Properties to set\n         * @returns {proto.TokenID} TokenID instance\n         */\n        TokenID.create = function create(properties) {\n            return new TokenID(properties);\n        };\n\n        /**\n         * Encodes the specified TokenID message. Does not implicitly {@link proto.TokenID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenID\n         * @static\n         * @param {proto.ITokenID} m TokenID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.shardNum != null && Object.hasOwnProperty.call(m, \"shardNum\"))\n                w.uint32(8).int64(m.shardNum);\n            if (m.realmNum != null && Object.hasOwnProperty.call(m, \"realmNum\"))\n                w.uint32(16).int64(m.realmNum);\n            if (m.tokenNum != null && Object.hasOwnProperty.call(m, \"tokenNum\"))\n                w.uint32(24).int64(m.tokenNum);\n            return w;\n        };\n\n        /**\n         * Decodes a TokenID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenID} TokenID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.shardNum = r.int64();\n                    break;\n                case 2:\n                    m.realmNum = r.int64();\n                    break;\n                case 3:\n                    m.tokenNum = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenID;\n    })();\n\n    /**\n     * TokenFreezeStatus enum.\n     * @name proto.TokenFreezeStatus\n     * @enum {number}\n     * @property {number} FreezeNotApplicable=0 FreezeNotApplicable value\n     * @property {number} Frozen=1 Frozen value\n     * @property {number} Unfrozen=2 Unfrozen value\n     */\n    proto.TokenFreezeStatus = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"FreezeNotApplicable\"] = 0;\n        values[valuesById[1] = \"Frozen\"] = 1;\n        values[valuesById[2] = \"Unfrozen\"] = 2;\n        return values;\n    })();\n\n    /**\n     * TokenKycStatus enum.\n     * @name proto.TokenKycStatus\n     * @enum {number}\n     * @property {number} KycNotApplicable=0 KycNotApplicable value\n     * @property {number} Granted=1 Granted value\n     * @property {number} Revoked=2 Revoked value\n     */\n    proto.TokenKycStatus = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"KycNotApplicable\"] = 0;\n        values[valuesById[1] = \"Granted\"] = 1;\n        values[valuesById[2] = \"Revoked\"] = 2;\n        return values;\n    })();\n\n    proto.Key = (function() {\n\n        /**\n         * Properties of a Key.\n         * @memberof proto\n         * @interface IKey\n         * @property {proto.IContractID|null} [contractID] Key contractID\n         * @property {Uint8Array|null} [ed25519] Key ed25519\n         * @property {Uint8Array|null} [RSA_3072] Key RSA_3072\n         * @property {Uint8Array|null} [ECDSA_384] Key ECDSA_384\n         * @property {proto.IThresholdKey|null} [thresholdKey] Key thresholdKey\n         * @property {proto.IKeyList|null} [keyList] Key keyList\n         */\n\n        /**\n         * Constructs a new Key.\n         * @memberof proto\n         * @classdesc Represents a Key.\n         * @implements IKey\n         * @constructor\n         * @param {proto.IKey=} [p] Properties to set\n         */\n        function Key(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Key contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.Key\n         * @instance\n         */\n        Key.prototype.contractID = null;\n\n        /**\n         * Key ed25519.\n         * @member {Uint8Array} ed25519\n         * @memberof proto.Key\n         * @instance\n         */\n        Key.prototype.ed25519 = $util.newBuffer([]);\n\n        /**\n         * Key RSA_3072.\n         * @member {Uint8Array} RSA_3072\n         * @memberof proto.Key\n         * @instance\n         */\n        Key.prototype.RSA_3072 = $util.newBuffer([]);\n\n        /**\n         * Key ECDSA_384.\n         * @member {Uint8Array} ECDSA_384\n         * @memberof proto.Key\n         * @instance\n         */\n        Key.prototype.ECDSA_384 = $util.newBuffer([]);\n\n        /**\n         * Key thresholdKey.\n         * @member {proto.IThresholdKey|null|undefined} thresholdKey\n         * @memberof proto.Key\n         * @instance\n         */\n        Key.prototype.thresholdKey = null;\n\n        /**\n         * Key keyList.\n         * @member {proto.IKeyList|null|undefined} keyList\n         * @memberof proto.Key\n         * @instance\n         */\n        Key.prototype.keyList = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Key key.\n         * @member {\"contractID\"|\"ed25519\"|\"RSA_3072\"|\"ECDSA_384\"|\"thresholdKey\"|\"keyList\"|undefined} key\n         * @memberof proto.Key\n         * @instance\n         */\n        Object.defineProperty(Key.prototype, \"key\", {\n            get: $util.oneOfGetter($oneOfFields = [\"contractID\", \"ed25519\", \"RSA_3072\", \"ECDSA_384\", \"thresholdKey\", \"keyList\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Key instance using the specified properties.\n         * @function create\n         * @memberof proto.Key\n         * @static\n         * @param {proto.IKey=} [properties] Properties to set\n         * @returns {proto.Key} Key instance\n         */\n        Key.create = function create(properties) {\n            return new Key(properties);\n        };\n\n        /**\n         * Encodes the specified Key message. Does not implicitly {@link proto.Key.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Key\n         * @static\n         * @param {proto.IKey} m Key message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Key.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();\n            if (m.ed25519 != null && Object.hasOwnProperty.call(m, \"ed25519\"))\n                w.uint32(18).bytes(m.ed25519);\n            if (m.RSA_3072 != null && Object.hasOwnProperty.call(m, \"RSA_3072\"))\n                w.uint32(26).bytes(m.RSA_3072);\n            if (m.ECDSA_384 != null && Object.hasOwnProperty.call(m, \"ECDSA_384\"))\n                w.uint32(34).bytes(m.ECDSA_384);\n            if (m.thresholdKey != null && Object.hasOwnProperty.call(m, \"thresholdKey\"))\n                $root.proto.ThresholdKey.encode(m.thresholdKey, w.uint32(42).fork()).ldelim();\n            if (m.keyList != null && Object.hasOwnProperty.call(m, \"keyList\"))\n                $root.proto.KeyList.encode(m.keyList, w.uint32(50).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a Key message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Key\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Key} Key\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Key.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Key();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.ed25519 = r.bytes();\n                    break;\n                case 3:\n                    m.RSA_3072 = r.bytes();\n                    break;\n                case 4:\n                    m.ECDSA_384 = r.bytes();\n                    break;\n                case 5:\n                    m.thresholdKey = $root.proto.ThresholdKey.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.keyList = $root.proto.KeyList.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Key;\n    })();\n\n    proto.ThresholdKey = (function() {\n\n        /**\n         * Properties of a ThresholdKey.\n         * @memberof proto\n         * @interface IThresholdKey\n         * @property {number|null} [threshold] ThresholdKey threshold\n         * @property {proto.IKeyList|null} [keys] ThresholdKey keys\n         */\n\n        /**\n         * Constructs a new ThresholdKey.\n         * @memberof proto\n         * @classdesc Represents a ThresholdKey.\n         * @implements IThresholdKey\n         * @constructor\n         * @param {proto.IThresholdKey=} [p] Properties to set\n         */\n        function ThresholdKey(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ThresholdKey threshold.\n         * @member {number} threshold\n         * @memberof proto.ThresholdKey\n         * @instance\n         */\n        ThresholdKey.prototype.threshold = 0;\n\n        /**\n         * ThresholdKey keys.\n         * @member {proto.IKeyList|null|undefined} keys\n         * @memberof proto.ThresholdKey\n         * @instance\n         */\n        ThresholdKey.prototype.keys = null;\n\n        /**\n         * Creates a new ThresholdKey instance using the specified properties.\n         * @function create\n         * @memberof proto.ThresholdKey\n         * @static\n         * @param {proto.IThresholdKey=} [properties] Properties to set\n         * @returns {proto.ThresholdKey} ThresholdKey instance\n         */\n        ThresholdKey.create = function create(properties) {\n            return new ThresholdKey(properties);\n        };\n\n        /**\n         * Encodes the specified ThresholdKey message. Does not implicitly {@link proto.ThresholdKey.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ThresholdKey\n         * @static\n         * @param {proto.IThresholdKey} m ThresholdKey message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ThresholdKey.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.threshold != null && Object.hasOwnProperty.call(m, \"threshold\"))\n                w.uint32(8).uint32(m.threshold);\n            if (m.keys != null && Object.hasOwnProperty.call(m, \"keys\"))\n                $root.proto.KeyList.encode(m.keys, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ThresholdKey message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ThresholdKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ThresholdKey} ThresholdKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ThresholdKey.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ThresholdKey();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.threshold = r.uint32();\n                    break;\n                case 2:\n                    m.keys = $root.proto.KeyList.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ThresholdKey;\n    })();\n\n    proto.KeyList = (function() {\n\n        /**\n         * Properties of a KeyList.\n         * @memberof proto\n         * @interface IKeyList\n         * @property {Array.<proto.IKey>|null} [keys] KeyList keys\n         */\n\n        /**\n         * Constructs a new KeyList.\n         * @memberof proto\n         * @classdesc Represents a KeyList.\n         * @implements IKeyList\n         * @constructor\n         * @param {proto.IKeyList=} [p] Properties to set\n         */\n        function KeyList(p) {\n            this.keys = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * KeyList keys.\n         * @member {Array.<proto.IKey>} keys\n         * @memberof proto.KeyList\n         * @instance\n         */\n        KeyList.prototype.keys = $util.emptyArray;\n\n        /**\n         * Creates a new KeyList instance using the specified properties.\n         * @function create\n         * @memberof proto.KeyList\n         * @static\n         * @param {proto.IKeyList=} [properties] Properties to set\n         * @returns {proto.KeyList} KeyList instance\n         */\n        KeyList.create = function create(properties) {\n            return new KeyList(properties);\n        };\n\n        /**\n         * Encodes the specified KeyList message. Does not implicitly {@link proto.KeyList.verify|verify} messages.\n         * @function encode\n         * @memberof proto.KeyList\n         * @static\n         * @param {proto.IKeyList} m KeyList message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeyList.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.keys != null && m.keys.length) {\n                for (var i = 0; i < m.keys.length; ++i)\n                    $root.proto.Key.encode(m.keys[i], w.uint32(10).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a KeyList message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.KeyList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.KeyList} KeyList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeyList.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.KeyList();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.keys && m.keys.length))\n                        m.keys = [];\n                    m.keys.push($root.proto.Key.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return KeyList;\n    })();\n\n    proto.Signature = (function() {\n\n        /**\n         * Properties of a Signature.\n         * @memberof proto\n         * @interface ISignature\n         * @property {Uint8Array|null} [contract] Signature contract\n         * @property {Uint8Array|null} [ed25519] Signature ed25519\n         * @property {Uint8Array|null} [RSA_3072] Signature RSA_3072\n         * @property {Uint8Array|null} [ECDSA_384] Signature ECDSA_384\n         * @property {proto.IThresholdSignature|null} [thresholdSignature] Signature thresholdSignature\n         * @property {proto.ISignatureList|null} [signatureList] Signature signatureList\n         */\n\n        /**\n         * Constructs a new Signature.\n         * @memberof proto\n         * @classdesc Represents a Signature.\n         * @implements ISignature\n         * @constructor\n         * @param {proto.ISignature=} [p] Properties to set\n         */\n        function Signature(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Signature contract.\n         * @member {Uint8Array} contract\n         * @memberof proto.Signature\n         * @instance\n         */\n        Signature.prototype.contract = $util.newBuffer([]);\n\n        /**\n         * Signature ed25519.\n         * @member {Uint8Array} ed25519\n         * @memberof proto.Signature\n         * @instance\n         */\n        Signature.prototype.ed25519 = $util.newBuffer([]);\n\n        /**\n         * Signature RSA_3072.\n         * @member {Uint8Array} RSA_3072\n         * @memberof proto.Signature\n         * @instance\n         */\n        Signature.prototype.RSA_3072 = $util.newBuffer([]);\n\n        /**\n         * Signature ECDSA_384.\n         * @member {Uint8Array} ECDSA_384\n         * @memberof proto.Signature\n         * @instance\n         */\n        Signature.prototype.ECDSA_384 = $util.newBuffer([]);\n\n        /**\n         * Signature thresholdSignature.\n         * @member {proto.IThresholdSignature|null|undefined} thresholdSignature\n         * @memberof proto.Signature\n         * @instance\n         */\n        Signature.prototype.thresholdSignature = null;\n\n        /**\n         * Signature signatureList.\n         * @member {proto.ISignatureList|null|undefined} signatureList\n         * @memberof proto.Signature\n         * @instance\n         */\n        Signature.prototype.signatureList = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Signature signature.\n         * @member {\"contract\"|\"ed25519\"|\"RSA_3072\"|\"ECDSA_384\"|\"thresholdSignature\"|\"signatureList\"|undefined} signature\n         * @memberof proto.Signature\n         * @instance\n         */\n        Object.defineProperty(Signature.prototype, \"signature\", {\n            get: $util.oneOfGetter($oneOfFields = [\"contract\", \"ed25519\", \"RSA_3072\", \"ECDSA_384\", \"thresholdSignature\", \"signatureList\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Signature instance using the specified properties.\n         * @function create\n         * @memberof proto.Signature\n         * @static\n         * @param {proto.ISignature=} [properties] Properties to set\n         * @returns {proto.Signature} Signature instance\n         */\n        Signature.create = function create(properties) {\n            return new Signature(properties);\n        };\n\n        /**\n         * Encodes the specified Signature message. Does not implicitly {@link proto.Signature.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Signature\n         * @static\n         * @param {proto.ISignature} m Signature message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signature.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.contract != null && Object.hasOwnProperty.call(m, \"contract\"))\n                w.uint32(10).bytes(m.contract);\n            if (m.ed25519 != null && Object.hasOwnProperty.call(m, \"ed25519\"))\n                w.uint32(18).bytes(m.ed25519);\n            if (m.RSA_3072 != null && Object.hasOwnProperty.call(m, \"RSA_3072\"))\n                w.uint32(26).bytes(m.RSA_3072);\n            if (m.ECDSA_384 != null && Object.hasOwnProperty.call(m, \"ECDSA_384\"))\n                w.uint32(34).bytes(m.ECDSA_384);\n            if (m.thresholdSignature != null && Object.hasOwnProperty.call(m, \"thresholdSignature\"))\n                $root.proto.ThresholdSignature.encode(m.thresholdSignature, w.uint32(42).fork()).ldelim();\n            if (m.signatureList != null && Object.hasOwnProperty.call(m, \"signatureList\"))\n                $root.proto.SignatureList.encode(m.signatureList, w.uint32(50).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a Signature message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Signature\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Signature} Signature\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signature.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Signature();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.contract = r.bytes();\n                    break;\n                case 2:\n                    m.ed25519 = r.bytes();\n                    break;\n                case 3:\n                    m.RSA_3072 = r.bytes();\n                    break;\n                case 4:\n                    m.ECDSA_384 = r.bytes();\n                    break;\n                case 5:\n                    m.thresholdSignature = $root.proto.ThresholdSignature.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.signatureList = $root.proto.SignatureList.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Signature;\n    })();\n\n    proto.ThresholdSignature = (function() {\n\n        /**\n         * Properties of a ThresholdSignature.\n         * @memberof proto\n         * @interface IThresholdSignature\n         * @property {proto.ISignatureList|null} [sigs] ThresholdSignature sigs\n         */\n\n        /**\n         * Constructs a new ThresholdSignature.\n         * @memberof proto\n         * @classdesc Represents a ThresholdSignature.\n         * @implements IThresholdSignature\n         * @constructor\n         * @param {proto.IThresholdSignature=} [p] Properties to set\n         */\n        function ThresholdSignature(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ThresholdSignature sigs.\n         * @member {proto.ISignatureList|null|undefined} sigs\n         * @memberof proto.ThresholdSignature\n         * @instance\n         */\n        ThresholdSignature.prototype.sigs = null;\n\n        /**\n         * Creates a new ThresholdSignature instance using the specified properties.\n         * @function create\n         * @memberof proto.ThresholdSignature\n         * @static\n         * @param {proto.IThresholdSignature=} [properties] Properties to set\n         * @returns {proto.ThresholdSignature} ThresholdSignature instance\n         */\n        ThresholdSignature.create = function create(properties) {\n            return new ThresholdSignature(properties);\n        };\n\n        /**\n         * Encodes the specified ThresholdSignature message. Does not implicitly {@link proto.ThresholdSignature.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ThresholdSignature\n         * @static\n         * @param {proto.IThresholdSignature} m ThresholdSignature message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ThresholdSignature.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.sigs != null && Object.hasOwnProperty.call(m, \"sigs\"))\n                $root.proto.SignatureList.encode(m.sigs, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ThresholdSignature message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ThresholdSignature\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ThresholdSignature} ThresholdSignature\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ThresholdSignature.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ThresholdSignature();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 2:\n                    m.sigs = $root.proto.SignatureList.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ThresholdSignature;\n    })();\n\n    proto.SignatureList = (function() {\n\n        /**\n         * Properties of a SignatureList.\n         * @memberof proto\n         * @interface ISignatureList\n         * @property {Array.<proto.ISignature>|null} [sigs] SignatureList sigs\n         */\n\n        /**\n         * Constructs a new SignatureList.\n         * @memberof proto\n         * @classdesc Represents a SignatureList.\n         * @implements ISignatureList\n         * @constructor\n         * @param {proto.ISignatureList=} [p] Properties to set\n         */\n        function SignatureList(p) {\n            this.sigs = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * SignatureList sigs.\n         * @member {Array.<proto.ISignature>} sigs\n         * @memberof proto.SignatureList\n         * @instance\n         */\n        SignatureList.prototype.sigs = $util.emptyArray;\n\n        /**\n         * Creates a new SignatureList instance using the specified properties.\n         * @function create\n         * @memberof proto.SignatureList\n         * @static\n         * @param {proto.ISignatureList=} [properties] Properties to set\n         * @returns {proto.SignatureList} SignatureList instance\n         */\n        SignatureList.create = function create(properties) {\n            return new SignatureList(properties);\n        };\n\n        /**\n         * Encodes the specified SignatureList message. Does not implicitly {@link proto.SignatureList.verify|verify} messages.\n         * @function encode\n         * @memberof proto.SignatureList\n         * @static\n         * @param {proto.ISignatureList} m SignatureList message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SignatureList.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.sigs != null && m.sigs.length) {\n                for (var i = 0; i < m.sigs.length; ++i)\n                    $root.proto.Signature.encode(m.sigs[i], w.uint32(18).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a SignatureList message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.SignatureList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.SignatureList} SignatureList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SignatureList.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SignatureList();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 2:\n                    if (!(m.sigs && m.sigs.length))\n                        m.sigs = [];\n                    m.sigs.push($root.proto.Signature.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SignatureList;\n    })();\n\n    proto.SignaturePair = (function() {\n\n        /**\n         * Properties of a SignaturePair.\n         * @memberof proto\n         * @interface ISignaturePair\n         * @property {Uint8Array|null} [pubKeyPrefix] SignaturePair pubKeyPrefix\n         * @property {Uint8Array|null} [contract] SignaturePair contract\n         * @property {Uint8Array|null} [ed25519] SignaturePair ed25519\n         * @property {Uint8Array|null} [RSA_3072] SignaturePair RSA_3072\n         * @property {Uint8Array|null} [ECDSA_384] SignaturePair ECDSA_384\n         */\n\n        /**\n         * Constructs a new SignaturePair.\n         * @memberof proto\n         * @classdesc Represents a SignaturePair.\n         * @implements ISignaturePair\n         * @constructor\n         * @param {proto.ISignaturePair=} [p] Properties to set\n         */\n        function SignaturePair(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * SignaturePair pubKeyPrefix.\n         * @member {Uint8Array} pubKeyPrefix\n         * @memberof proto.SignaturePair\n         * @instance\n         */\n        SignaturePair.prototype.pubKeyPrefix = $util.newBuffer([]);\n\n        /**\n         * SignaturePair contract.\n         * @member {Uint8Array} contract\n         * @memberof proto.SignaturePair\n         * @instance\n         */\n        SignaturePair.prototype.contract = $util.newBuffer([]);\n\n        /**\n         * SignaturePair ed25519.\n         * @member {Uint8Array} ed25519\n         * @memberof proto.SignaturePair\n         * @instance\n         */\n        SignaturePair.prototype.ed25519 = $util.newBuffer([]);\n\n        /**\n         * SignaturePair RSA_3072.\n         * @member {Uint8Array} RSA_3072\n         * @memberof proto.SignaturePair\n         * @instance\n         */\n        SignaturePair.prototype.RSA_3072 = $util.newBuffer([]);\n\n        /**\n         * SignaturePair ECDSA_384.\n         * @member {Uint8Array} ECDSA_384\n         * @memberof proto.SignaturePair\n         * @instance\n         */\n        SignaturePair.prototype.ECDSA_384 = $util.newBuffer([]);\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * SignaturePair signature.\n         * @member {\"contract\"|\"ed25519\"|\"RSA_3072\"|\"ECDSA_384\"|undefined} signature\n         * @memberof proto.SignaturePair\n         * @instance\n         */\n        Object.defineProperty(SignaturePair.prototype, \"signature\", {\n            get: $util.oneOfGetter($oneOfFields = [\"contract\", \"ed25519\", \"RSA_3072\", \"ECDSA_384\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new SignaturePair instance using the specified properties.\n         * @function create\n         * @memberof proto.SignaturePair\n         * @static\n         * @param {proto.ISignaturePair=} [properties] Properties to set\n         * @returns {proto.SignaturePair} SignaturePair instance\n         */\n        SignaturePair.create = function create(properties) {\n            return new SignaturePair(properties);\n        };\n\n        /**\n         * Encodes the specified SignaturePair message. Does not implicitly {@link proto.SignaturePair.verify|verify} messages.\n         * @function encode\n         * @memberof proto.SignaturePair\n         * @static\n         * @param {proto.ISignaturePair} m SignaturePair message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SignaturePair.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.pubKeyPrefix != null && Object.hasOwnProperty.call(m, \"pubKeyPrefix\"))\n                w.uint32(10).bytes(m.pubKeyPrefix);\n            if (m.contract != null && Object.hasOwnProperty.call(m, \"contract\"))\n                w.uint32(18).bytes(m.contract);\n            if (m.ed25519 != null && Object.hasOwnProperty.call(m, \"ed25519\"))\n                w.uint32(26).bytes(m.ed25519);\n            if (m.RSA_3072 != null && Object.hasOwnProperty.call(m, \"RSA_3072\"))\n                w.uint32(34).bytes(m.RSA_3072);\n            if (m.ECDSA_384 != null && Object.hasOwnProperty.call(m, \"ECDSA_384\"))\n                w.uint32(42).bytes(m.ECDSA_384);\n            return w;\n        };\n\n        /**\n         * Decodes a SignaturePair message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.SignaturePair\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.SignaturePair} SignaturePair\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SignaturePair.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SignaturePair();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.pubKeyPrefix = r.bytes();\n                    break;\n                case 2:\n                    m.contract = r.bytes();\n                    break;\n                case 3:\n                    m.ed25519 = r.bytes();\n                    break;\n                case 4:\n                    m.RSA_3072 = r.bytes();\n                    break;\n                case 5:\n                    m.ECDSA_384 = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SignaturePair;\n    })();\n\n    proto.SignatureMap = (function() {\n\n        /**\n         * Properties of a SignatureMap.\n         * @memberof proto\n         * @interface ISignatureMap\n         * @property {Array.<proto.ISignaturePair>|null} [sigPair] SignatureMap sigPair\n         */\n\n        /**\n         * Constructs a new SignatureMap.\n         * @memberof proto\n         * @classdesc Represents a SignatureMap.\n         * @implements ISignatureMap\n         * @constructor\n         * @param {proto.ISignatureMap=} [p] Properties to set\n         */\n        function SignatureMap(p) {\n            this.sigPair = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * SignatureMap sigPair.\n         * @member {Array.<proto.ISignaturePair>} sigPair\n         * @memberof proto.SignatureMap\n         * @instance\n         */\n        SignatureMap.prototype.sigPair = $util.emptyArray;\n\n        /**\n         * Creates a new SignatureMap instance using the specified properties.\n         * @function create\n         * @memberof proto.SignatureMap\n         * @static\n         * @param {proto.ISignatureMap=} [properties] Properties to set\n         * @returns {proto.SignatureMap} SignatureMap instance\n         */\n        SignatureMap.create = function create(properties) {\n            return new SignatureMap(properties);\n        };\n\n        /**\n         * Encodes the specified SignatureMap message. Does not implicitly {@link proto.SignatureMap.verify|verify} messages.\n         * @function encode\n         * @memberof proto.SignatureMap\n         * @static\n         * @param {proto.ISignatureMap} m SignatureMap message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SignatureMap.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.sigPair != null && m.sigPair.length) {\n                for (var i = 0; i < m.sigPair.length; ++i)\n                    $root.proto.SignaturePair.encode(m.sigPair[i], w.uint32(10).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a SignatureMap message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.SignatureMap\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.SignatureMap} SignatureMap\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SignatureMap.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SignatureMap();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.sigPair && m.sigPair.length))\n                        m.sigPair = [];\n                    m.sigPair.push($root.proto.SignaturePair.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SignatureMap;\n    })();\n\n    /**\n     * HederaFunctionality enum.\n     * @name proto.HederaFunctionality\n     * @enum {number}\n     * @property {number} NONE=0 NONE value\n     * @property {number} CryptoTransfer=1 CryptoTransfer value\n     * @property {number} CryptoUpdate=2 CryptoUpdate value\n     * @property {number} CryptoDelete=3 CryptoDelete value\n     * @property {number} CryptoAddLiveHash=4 CryptoAddLiveHash value\n     * @property {number} CryptoDeleteLiveHash=5 CryptoDeleteLiveHash value\n     * @property {number} ContractCall=6 ContractCall value\n     * @property {number} ContractCreate=7 ContractCreate value\n     * @property {number} ContractUpdate=8 ContractUpdate value\n     * @property {number} FileCreate=9 FileCreate value\n     * @property {number} FileAppend=10 FileAppend value\n     * @property {number} FileUpdate=11 FileUpdate value\n     * @property {number} FileDelete=12 FileDelete value\n     * @property {number} CryptoGetAccountBalance=13 CryptoGetAccountBalance value\n     * @property {number} CryptoGetAccountRecords=14 CryptoGetAccountRecords value\n     * @property {number} CryptoGetInfo=15 CryptoGetInfo value\n     * @property {number} ContractCallLocal=16 ContractCallLocal value\n     * @property {number} ContractGetInfo=17 ContractGetInfo value\n     * @property {number} ContractGetBytecode=18 ContractGetBytecode value\n     * @property {number} GetBySolidityID=19 GetBySolidityID value\n     * @property {number} GetByKey=20 GetByKey value\n     * @property {number} CryptoGetLiveHash=21 CryptoGetLiveHash value\n     * @property {number} CryptoGetStakers=22 CryptoGetStakers value\n     * @property {number} FileGetContents=23 FileGetContents value\n     * @property {number} FileGetInfo=24 FileGetInfo value\n     * @property {number} TransactionGetRecord=25 TransactionGetRecord value\n     * @property {number} ContractGetRecords=26 ContractGetRecords value\n     * @property {number} CryptoCreate=27 CryptoCreate value\n     * @property {number} SystemDelete=28 SystemDelete value\n     * @property {number} SystemUndelete=29 SystemUndelete value\n     * @property {number} ContractDelete=30 ContractDelete value\n     * @property {number} Freeze=31 Freeze value\n     * @property {number} CreateTransactionRecord=32 CreateTransactionRecord value\n     * @property {number} CryptoAccountAutoRenew=33 CryptoAccountAutoRenew value\n     * @property {number} ContractAutoRenew=34 ContractAutoRenew value\n     * @property {number} GetVersionInfo=35 GetVersionInfo value\n     * @property {number} TransactionGetReceipt=36 TransactionGetReceipt value\n     * @property {number} ConsensusCreateTopic=50 ConsensusCreateTopic value\n     * @property {number} ConsensusUpdateTopic=51 ConsensusUpdateTopic value\n     * @property {number} ConsensusDeleteTopic=52 ConsensusDeleteTopic value\n     * @property {number} ConsensusGetTopicInfo=53 ConsensusGetTopicInfo value\n     * @property {number} ConsensusSubmitMessage=54 ConsensusSubmitMessage value\n     * @property {number} UncheckedSubmit=55 UncheckedSubmit value\n     * @property {number} TokenCreate=56 TokenCreate value\n     * @property {number} TokenGetInfo=58 TokenGetInfo value\n     * @property {number} TokenFreezeAccount=59 TokenFreezeAccount value\n     * @property {number} TokenUnfreezeAccount=60 TokenUnfreezeAccount value\n     * @property {number} TokenGrantKycToAccount=61 TokenGrantKycToAccount value\n     * @property {number} TokenRevokeKycFromAccount=62 TokenRevokeKycFromAccount value\n     * @property {number} TokenDelete=63 TokenDelete value\n     * @property {number} TokenUpdate=64 TokenUpdate value\n     * @property {number} TokenMint=65 TokenMint value\n     * @property {number} TokenBurn=66 TokenBurn value\n     * @property {number} TokenAccountWipe=67 TokenAccountWipe value\n     * @property {number} TokenAssociateToAccount=68 TokenAssociateToAccount value\n     * @property {number} TokenDissociateFromAccount=69 TokenDissociateFromAccount value\n     */\n    proto.HederaFunctionality = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NONE\"] = 0;\n        values[valuesById[1] = \"CryptoTransfer\"] = 1;\n        values[valuesById[2] = \"CryptoUpdate\"] = 2;\n        values[valuesById[3] = \"CryptoDelete\"] = 3;\n        values[valuesById[4] = \"CryptoAddLiveHash\"] = 4;\n        values[valuesById[5] = \"CryptoDeleteLiveHash\"] = 5;\n        values[valuesById[6] = \"ContractCall\"] = 6;\n        values[valuesById[7] = \"ContractCreate\"] = 7;\n        values[valuesById[8] = \"ContractUpdate\"] = 8;\n        values[valuesById[9] = \"FileCreate\"] = 9;\n        values[valuesById[10] = \"FileAppend\"] = 10;\n        values[valuesById[11] = \"FileUpdate\"] = 11;\n        values[valuesById[12] = \"FileDelete\"] = 12;\n        values[valuesById[13] = \"CryptoGetAccountBalance\"] = 13;\n        values[valuesById[14] = \"CryptoGetAccountRecords\"] = 14;\n        values[valuesById[15] = \"CryptoGetInfo\"] = 15;\n        values[valuesById[16] = \"ContractCallLocal\"] = 16;\n        values[valuesById[17] = \"ContractGetInfo\"] = 17;\n        values[valuesById[18] = \"ContractGetBytecode\"] = 18;\n        values[valuesById[19] = \"GetBySolidityID\"] = 19;\n        values[valuesById[20] = \"GetByKey\"] = 20;\n        values[valuesById[21] = \"CryptoGetLiveHash\"] = 21;\n        values[valuesById[22] = \"CryptoGetStakers\"] = 22;\n        values[valuesById[23] = \"FileGetContents\"] = 23;\n        values[valuesById[24] = \"FileGetInfo\"] = 24;\n        values[valuesById[25] = \"TransactionGetRecord\"] = 25;\n        values[valuesById[26] = \"ContractGetRecords\"] = 26;\n        values[valuesById[27] = \"CryptoCreate\"] = 27;\n        values[valuesById[28] = \"SystemDelete\"] = 28;\n        values[valuesById[29] = \"SystemUndelete\"] = 29;\n        values[valuesById[30] = \"ContractDelete\"] = 30;\n        values[valuesById[31] = \"Freeze\"] = 31;\n        values[valuesById[32] = \"CreateTransactionRecord\"] = 32;\n        values[valuesById[33] = \"CryptoAccountAutoRenew\"] = 33;\n        values[valuesById[34] = \"ContractAutoRenew\"] = 34;\n        values[valuesById[35] = \"GetVersionInfo\"] = 35;\n        values[valuesById[36] = \"TransactionGetReceipt\"] = 36;\n        values[valuesById[50] = \"ConsensusCreateTopic\"] = 50;\n        values[valuesById[51] = \"ConsensusUpdateTopic\"] = 51;\n        values[valuesById[52] = \"ConsensusDeleteTopic\"] = 52;\n        values[valuesById[53] = \"ConsensusGetTopicInfo\"] = 53;\n        values[valuesById[54] = \"ConsensusSubmitMessage\"] = 54;\n        values[valuesById[55] = \"UncheckedSubmit\"] = 55;\n        values[valuesById[56] = \"TokenCreate\"] = 56;\n        values[valuesById[58] = \"TokenGetInfo\"] = 58;\n        values[valuesById[59] = \"TokenFreezeAccount\"] = 59;\n        values[valuesById[60] = \"TokenUnfreezeAccount\"] = 60;\n        values[valuesById[61] = \"TokenGrantKycToAccount\"] = 61;\n        values[valuesById[62] = \"TokenRevokeKycFromAccount\"] = 62;\n        values[valuesById[63] = \"TokenDelete\"] = 63;\n        values[valuesById[64] = \"TokenUpdate\"] = 64;\n        values[valuesById[65] = \"TokenMint\"] = 65;\n        values[valuesById[66] = \"TokenBurn\"] = 66;\n        values[valuesById[67] = \"TokenAccountWipe\"] = 67;\n        values[valuesById[68] = \"TokenAssociateToAccount\"] = 68;\n        values[valuesById[69] = \"TokenDissociateFromAccount\"] = 69;\n        return values;\n    })();\n\n    proto.FeeComponents = (function() {\n\n        /**\n         * Properties of a FeeComponents.\n         * @memberof proto\n         * @interface IFeeComponents\n         * @property {Long|null} [min] FeeComponents min\n         * @property {Long|null} [max] FeeComponents max\n         * @property {Long|null} [constant] FeeComponents constant\n         * @property {Long|null} [bpt] FeeComponents bpt\n         * @property {Long|null} [vpt] FeeComponents vpt\n         * @property {Long|null} [rbh] FeeComponents rbh\n         * @property {Long|null} [sbh] FeeComponents sbh\n         * @property {Long|null} [gas] FeeComponents gas\n         * @property {Long|null} [tv] FeeComponents tv\n         * @property {Long|null} [bpr] FeeComponents bpr\n         * @property {Long|null} [sbpr] FeeComponents sbpr\n         */\n\n        /**\n         * Constructs a new FeeComponents.\n         * @memberof proto\n         * @classdesc Represents a FeeComponents.\n         * @implements IFeeComponents\n         * @constructor\n         * @param {proto.IFeeComponents=} [p] Properties to set\n         */\n        function FeeComponents(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FeeComponents min.\n         * @member {Long} min\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.min = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents max.\n         * @member {Long} max\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.max = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents constant.\n         * @member {Long} constant\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.constant = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents bpt.\n         * @member {Long} bpt\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.bpt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents vpt.\n         * @member {Long} vpt\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.vpt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents rbh.\n         * @member {Long} rbh\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.rbh = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents sbh.\n         * @member {Long} sbh\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.sbh = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents gas.\n         * @member {Long} gas\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents tv.\n         * @member {Long} tv\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.tv = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents bpr.\n         * @member {Long} bpr\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.bpr = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * FeeComponents sbpr.\n         * @member {Long} sbpr\n         * @memberof proto.FeeComponents\n         * @instance\n         */\n        FeeComponents.prototype.sbpr = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new FeeComponents instance using the specified properties.\n         * @function create\n         * @memberof proto.FeeComponents\n         * @static\n         * @param {proto.IFeeComponents=} [properties] Properties to set\n         * @returns {proto.FeeComponents} FeeComponents instance\n         */\n        FeeComponents.create = function create(properties) {\n            return new FeeComponents(properties);\n        };\n\n        /**\n         * Encodes the specified FeeComponents message. Does not implicitly {@link proto.FeeComponents.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FeeComponents\n         * @static\n         * @param {proto.IFeeComponents} m FeeComponents message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeeComponents.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.min != null && Object.hasOwnProperty.call(m, \"min\"))\n                w.uint32(8).int64(m.min);\n            if (m.max != null && Object.hasOwnProperty.call(m, \"max\"))\n                w.uint32(16).int64(m.max);\n            if (m.constant != null && Object.hasOwnProperty.call(m, \"constant\"))\n                w.uint32(24).int64(m.constant);\n            if (m.bpt != null && Object.hasOwnProperty.call(m, \"bpt\"))\n                w.uint32(32).int64(m.bpt);\n            if (m.vpt != null && Object.hasOwnProperty.call(m, \"vpt\"))\n                w.uint32(40).int64(m.vpt);\n            if (m.rbh != null && Object.hasOwnProperty.call(m, \"rbh\"))\n                w.uint32(48).int64(m.rbh);\n            if (m.sbh != null && Object.hasOwnProperty.call(m, \"sbh\"))\n                w.uint32(56).int64(m.sbh);\n            if (m.gas != null && Object.hasOwnProperty.call(m, \"gas\"))\n                w.uint32(64).int64(m.gas);\n            if (m.tv != null && Object.hasOwnProperty.call(m, \"tv\"))\n                w.uint32(72).int64(m.tv);\n            if (m.bpr != null && Object.hasOwnProperty.call(m, \"bpr\"))\n                w.uint32(80).int64(m.bpr);\n            if (m.sbpr != null && Object.hasOwnProperty.call(m, \"sbpr\"))\n                w.uint32(88).int64(m.sbpr);\n            return w;\n        };\n\n        /**\n         * Decodes a FeeComponents message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FeeComponents\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FeeComponents} FeeComponents\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeeComponents.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FeeComponents();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.min = r.int64();\n                    break;\n                case 2:\n                    m.max = r.int64();\n                    break;\n                case 3:\n                    m.constant = r.int64();\n                    break;\n                case 4:\n                    m.bpt = r.int64();\n                    break;\n                case 5:\n                    m.vpt = r.int64();\n                    break;\n                case 6:\n                    m.rbh = r.int64();\n                    break;\n                case 7:\n                    m.sbh = r.int64();\n                    break;\n                case 8:\n                    m.gas = r.int64();\n                    break;\n                case 9:\n                    m.tv = r.int64();\n                    break;\n                case 10:\n                    m.bpr = r.int64();\n                    break;\n                case 11:\n                    m.sbpr = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FeeComponents;\n    })();\n\n    proto.TransactionFeeSchedule = (function() {\n\n        /**\n         * Properties of a TransactionFeeSchedule.\n         * @memberof proto\n         * @interface ITransactionFeeSchedule\n         * @property {proto.HederaFunctionality|null} [hederaFunctionality] TransactionFeeSchedule hederaFunctionality\n         * @property {proto.IFeeData|null} [feeData] TransactionFeeSchedule feeData\n         */\n\n        /**\n         * Constructs a new TransactionFeeSchedule.\n         * @memberof proto\n         * @classdesc Represents a TransactionFeeSchedule.\n         * @implements ITransactionFeeSchedule\n         * @constructor\n         * @param {proto.ITransactionFeeSchedule=} [p] Properties to set\n         */\n        function TransactionFeeSchedule(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionFeeSchedule hederaFunctionality.\n         * @member {proto.HederaFunctionality} hederaFunctionality\n         * @memberof proto.TransactionFeeSchedule\n         * @instance\n         */\n        TransactionFeeSchedule.prototype.hederaFunctionality = 0;\n\n        /**\n         * TransactionFeeSchedule feeData.\n         * @member {proto.IFeeData|null|undefined} feeData\n         * @memberof proto.TransactionFeeSchedule\n         * @instance\n         */\n        TransactionFeeSchedule.prototype.feeData = null;\n\n        /**\n         * Creates a new TransactionFeeSchedule instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionFeeSchedule\n         * @static\n         * @param {proto.ITransactionFeeSchedule=} [properties] Properties to set\n         * @returns {proto.TransactionFeeSchedule} TransactionFeeSchedule instance\n         */\n        TransactionFeeSchedule.create = function create(properties) {\n            return new TransactionFeeSchedule(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionFeeSchedule message. Does not implicitly {@link proto.TransactionFeeSchedule.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionFeeSchedule\n         * @static\n         * @param {proto.ITransactionFeeSchedule} m TransactionFeeSchedule message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionFeeSchedule.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.hederaFunctionality != null && Object.hasOwnProperty.call(m, \"hederaFunctionality\"))\n                w.uint32(8).int32(m.hederaFunctionality);\n            if (m.feeData != null && Object.hasOwnProperty.call(m, \"feeData\"))\n                $root.proto.FeeData.encode(m.feeData, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionFeeSchedule message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionFeeSchedule\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionFeeSchedule} TransactionFeeSchedule\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionFeeSchedule.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionFeeSchedule();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.hederaFunctionality = r.int32();\n                    break;\n                case 2:\n                    m.feeData = $root.proto.FeeData.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionFeeSchedule;\n    })();\n\n    proto.FeeData = (function() {\n\n        /**\n         * Properties of a FeeData.\n         * @memberof proto\n         * @interface IFeeData\n         * @property {proto.IFeeComponents|null} [nodedata] FeeData nodedata\n         * @property {proto.IFeeComponents|null} [networkdata] FeeData networkdata\n         * @property {proto.IFeeComponents|null} [servicedata] FeeData servicedata\n         */\n\n        /**\n         * Constructs a new FeeData.\n         * @memberof proto\n         * @classdesc Represents a FeeData.\n         * @implements IFeeData\n         * @constructor\n         * @param {proto.IFeeData=} [p] Properties to set\n         */\n        function FeeData(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FeeData nodedata.\n         * @member {proto.IFeeComponents|null|undefined} nodedata\n         * @memberof proto.FeeData\n         * @instance\n         */\n        FeeData.prototype.nodedata = null;\n\n        /**\n         * FeeData networkdata.\n         * @member {proto.IFeeComponents|null|undefined} networkdata\n         * @memberof proto.FeeData\n         * @instance\n         */\n        FeeData.prototype.networkdata = null;\n\n        /**\n         * FeeData servicedata.\n         * @member {proto.IFeeComponents|null|undefined} servicedata\n         * @memberof proto.FeeData\n         * @instance\n         */\n        FeeData.prototype.servicedata = null;\n\n        /**\n         * Creates a new FeeData instance using the specified properties.\n         * @function create\n         * @memberof proto.FeeData\n         * @static\n         * @param {proto.IFeeData=} [properties] Properties to set\n         * @returns {proto.FeeData} FeeData instance\n         */\n        FeeData.create = function create(properties) {\n            return new FeeData(properties);\n        };\n\n        /**\n         * Encodes the specified FeeData message. Does not implicitly {@link proto.FeeData.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FeeData\n         * @static\n         * @param {proto.IFeeData} m FeeData message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeeData.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.nodedata != null && Object.hasOwnProperty.call(m, \"nodedata\"))\n                $root.proto.FeeComponents.encode(m.nodedata, w.uint32(10).fork()).ldelim();\n            if (m.networkdata != null && Object.hasOwnProperty.call(m, \"networkdata\"))\n                $root.proto.FeeComponents.encode(m.networkdata, w.uint32(18).fork()).ldelim();\n            if (m.servicedata != null && Object.hasOwnProperty.call(m, \"servicedata\"))\n                $root.proto.FeeComponents.encode(m.servicedata, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a FeeData message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FeeData\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FeeData} FeeData\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeeData.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FeeData();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.nodedata = $root.proto.FeeComponents.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.networkdata = $root.proto.FeeComponents.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.servicedata = $root.proto.FeeComponents.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FeeData;\n    })();\n\n    proto.FeeSchedule = (function() {\n\n        /**\n         * Properties of a FeeSchedule.\n         * @memberof proto\n         * @interface IFeeSchedule\n         * @property {Array.<proto.ITransactionFeeSchedule>|null} [transactionFeeSchedule] FeeSchedule transactionFeeSchedule\n         * @property {proto.ITimestampSeconds|null} [expiryTime] FeeSchedule expiryTime\n         */\n\n        /**\n         * Constructs a new FeeSchedule.\n         * @memberof proto\n         * @classdesc Represents a FeeSchedule.\n         * @implements IFeeSchedule\n         * @constructor\n         * @param {proto.IFeeSchedule=} [p] Properties to set\n         */\n        function FeeSchedule(p) {\n            this.transactionFeeSchedule = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FeeSchedule transactionFeeSchedule.\n         * @member {Array.<proto.ITransactionFeeSchedule>} transactionFeeSchedule\n         * @memberof proto.FeeSchedule\n         * @instance\n         */\n        FeeSchedule.prototype.transactionFeeSchedule = $util.emptyArray;\n\n        /**\n         * FeeSchedule expiryTime.\n         * @member {proto.ITimestampSeconds|null|undefined} expiryTime\n         * @memberof proto.FeeSchedule\n         * @instance\n         */\n        FeeSchedule.prototype.expiryTime = null;\n\n        /**\n         * Creates a new FeeSchedule instance using the specified properties.\n         * @function create\n         * @memberof proto.FeeSchedule\n         * @static\n         * @param {proto.IFeeSchedule=} [properties] Properties to set\n         * @returns {proto.FeeSchedule} FeeSchedule instance\n         */\n        FeeSchedule.create = function create(properties) {\n            return new FeeSchedule(properties);\n        };\n\n        /**\n         * Encodes the specified FeeSchedule message. Does not implicitly {@link proto.FeeSchedule.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FeeSchedule\n         * @static\n         * @param {proto.IFeeSchedule} m FeeSchedule message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeeSchedule.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.transactionFeeSchedule != null && m.transactionFeeSchedule.length) {\n                for (var i = 0; i < m.transactionFeeSchedule.length; ++i)\n                    $root.proto.TransactionFeeSchedule.encode(m.transactionFeeSchedule[i], w.uint32(10).fork()).ldelim();\n            }\n            if (m.expiryTime != null && Object.hasOwnProperty.call(m, \"expiryTime\"))\n                $root.proto.TimestampSeconds.encode(m.expiryTime, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a FeeSchedule message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FeeSchedule\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FeeSchedule} FeeSchedule\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeeSchedule.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FeeSchedule();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.transactionFeeSchedule && m.transactionFeeSchedule.length))\n                        m.transactionFeeSchedule = [];\n                    m.transactionFeeSchedule.push($root.proto.TransactionFeeSchedule.decode(r, r.uint32()));\n                    break;\n                case 2:\n                    m.expiryTime = $root.proto.TimestampSeconds.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FeeSchedule;\n    })();\n\n    proto.CurrentAndNextFeeSchedule = (function() {\n\n        /**\n         * Properties of a CurrentAndNextFeeSchedule.\n         * @memberof proto\n         * @interface ICurrentAndNextFeeSchedule\n         * @property {proto.IFeeSchedule|null} [currentFeeSchedule] CurrentAndNextFeeSchedule currentFeeSchedule\n         * @property {proto.IFeeSchedule|null} [nextFeeSchedule] CurrentAndNextFeeSchedule nextFeeSchedule\n         */\n\n        /**\n         * Constructs a new CurrentAndNextFeeSchedule.\n         * @memberof proto\n         * @classdesc Represents a CurrentAndNextFeeSchedule.\n         * @implements ICurrentAndNextFeeSchedule\n         * @constructor\n         * @param {proto.ICurrentAndNextFeeSchedule=} [p] Properties to set\n         */\n        function CurrentAndNextFeeSchedule(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CurrentAndNextFeeSchedule currentFeeSchedule.\n         * @member {proto.IFeeSchedule|null|undefined} currentFeeSchedule\n         * @memberof proto.CurrentAndNextFeeSchedule\n         * @instance\n         */\n        CurrentAndNextFeeSchedule.prototype.currentFeeSchedule = null;\n\n        /**\n         * CurrentAndNextFeeSchedule nextFeeSchedule.\n         * @member {proto.IFeeSchedule|null|undefined} nextFeeSchedule\n         * @memberof proto.CurrentAndNextFeeSchedule\n         * @instance\n         */\n        CurrentAndNextFeeSchedule.prototype.nextFeeSchedule = null;\n\n        /**\n         * Creates a new CurrentAndNextFeeSchedule instance using the specified properties.\n         * @function create\n         * @memberof proto.CurrentAndNextFeeSchedule\n         * @static\n         * @param {proto.ICurrentAndNextFeeSchedule=} [properties] Properties to set\n         * @returns {proto.CurrentAndNextFeeSchedule} CurrentAndNextFeeSchedule instance\n         */\n        CurrentAndNextFeeSchedule.create = function create(properties) {\n            return new CurrentAndNextFeeSchedule(properties);\n        };\n\n        /**\n         * Encodes the specified CurrentAndNextFeeSchedule message. Does not implicitly {@link proto.CurrentAndNextFeeSchedule.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CurrentAndNextFeeSchedule\n         * @static\n         * @param {proto.ICurrentAndNextFeeSchedule} m CurrentAndNextFeeSchedule message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CurrentAndNextFeeSchedule.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.currentFeeSchedule != null && Object.hasOwnProperty.call(m, \"currentFeeSchedule\"))\n                $root.proto.FeeSchedule.encode(m.currentFeeSchedule, w.uint32(10).fork()).ldelim();\n            if (m.nextFeeSchedule != null && Object.hasOwnProperty.call(m, \"nextFeeSchedule\"))\n                $root.proto.FeeSchedule.encode(m.nextFeeSchedule, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CurrentAndNextFeeSchedule message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CurrentAndNextFeeSchedule\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CurrentAndNextFeeSchedule} CurrentAndNextFeeSchedule\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CurrentAndNextFeeSchedule.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CurrentAndNextFeeSchedule();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.currentFeeSchedule = $root.proto.FeeSchedule.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.nextFeeSchedule = $root.proto.FeeSchedule.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CurrentAndNextFeeSchedule;\n    })();\n\n    proto.NodeAddress = (function() {\n\n        /**\n         * Properties of a NodeAddress.\n         * @memberof proto\n         * @interface INodeAddress\n         * @property {Uint8Array|null} [ipAddress] NodeAddress ipAddress\n         * @property {number|null} [portno] NodeAddress portno\n         * @property {Uint8Array|null} [memo] NodeAddress memo\n         * @property {string|null} [RSA_PubKey] NodeAddress RSA_PubKey\n         * @property {Long|null} [nodeId] NodeAddress nodeId\n         * @property {proto.IAccountID|null} [nodeAccountId] NodeAddress nodeAccountId\n         * @property {Uint8Array|null} [nodeCertHash] NodeAddress nodeCertHash\n         */\n\n        /**\n         * Constructs a new NodeAddress.\n         * @memberof proto\n         * @classdesc Represents a NodeAddress.\n         * @implements INodeAddress\n         * @constructor\n         * @param {proto.INodeAddress=} [p] Properties to set\n         */\n        function NodeAddress(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * NodeAddress ipAddress.\n         * @member {Uint8Array} ipAddress\n         * @memberof proto.NodeAddress\n         * @instance\n         */\n        NodeAddress.prototype.ipAddress = $util.newBuffer([]);\n\n        /**\n         * NodeAddress portno.\n         * @member {number} portno\n         * @memberof proto.NodeAddress\n         * @instance\n         */\n        NodeAddress.prototype.portno = 0;\n\n        /**\n         * NodeAddress memo.\n         * @member {Uint8Array} memo\n         * @memberof proto.NodeAddress\n         * @instance\n         */\n        NodeAddress.prototype.memo = $util.newBuffer([]);\n\n        /**\n         * NodeAddress RSA_PubKey.\n         * @member {string} RSA_PubKey\n         * @memberof proto.NodeAddress\n         * @instance\n         */\n        NodeAddress.prototype.RSA_PubKey = \"\";\n\n        /**\n         * NodeAddress nodeId.\n         * @member {Long} nodeId\n         * @memberof proto.NodeAddress\n         * @instance\n         */\n        NodeAddress.prototype.nodeId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * NodeAddress nodeAccountId.\n         * @member {proto.IAccountID|null|undefined} nodeAccountId\n         * @memberof proto.NodeAddress\n         * @instance\n         */\n        NodeAddress.prototype.nodeAccountId = null;\n\n        /**\n         * NodeAddress nodeCertHash.\n         * @member {Uint8Array} nodeCertHash\n         * @memberof proto.NodeAddress\n         * @instance\n         */\n        NodeAddress.prototype.nodeCertHash = $util.newBuffer([]);\n\n        /**\n         * Creates a new NodeAddress instance using the specified properties.\n         * @function create\n         * @memberof proto.NodeAddress\n         * @static\n         * @param {proto.INodeAddress=} [properties] Properties to set\n         * @returns {proto.NodeAddress} NodeAddress instance\n         */\n        NodeAddress.create = function create(properties) {\n            return new NodeAddress(properties);\n        };\n\n        /**\n         * Encodes the specified NodeAddress message. Does not implicitly {@link proto.NodeAddress.verify|verify} messages.\n         * @function encode\n         * @memberof proto.NodeAddress\n         * @static\n         * @param {proto.INodeAddress} m NodeAddress message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeAddress.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.ipAddress != null && Object.hasOwnProperty.call(m, \"ipAddress\"))\n                w.uint32(10).bytes(m.ipAddress);\n            if (m.portno != null && Object.hasOwnProperty.call(m, \"portno\"))\n                w.uint32(16).int32(m.portno);\n            if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                w.uint32(26).bytes(m.memo);\n            if (m.RSA_PubKey != null && Object.hasOwnProperty.call(m, \"RSA_PubKey\"))\n                w.uint32(34).string(m.RSA_PubKey);\n            if (m.nodeId != null && Object.hasOwnProperty.call(m, \"nodeId\"))\n                w.uint32(40).int64(m.nodeId);\n            if (m.nodeAccountId != null && Object.hasOwnProperty.call(m, \"nodeAccountId\"))\n                $root.proto.AccountID.encode(m.nodeAccountId, w.uint32(50).fork()).ldelim();\n            if (m.nodeCertHash != null && Object.hasOwnProperty.call(m, \"nodeCertHash\"))\n                w.uint32(58).bytes(m.nodeCertHash);\n            return w;\n        };\n\n        /**\n         * Decodes a NodeAddress message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.NodeAddress\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.NodeAddress} NodeAddress\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeAddress.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NodeAddress();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.ipAddress = r.bytes();\n                    break;\n                case 2:\n                    m.portno = r.int32();\n                    break;\n                case 3:\n                    m.memo = r.bytes();\n                    break;\n                case 4:\n                    m.RSA_PubKey = r.string();\n                    break;\n                case 5:\n                    m.nodeId = r.int64();\n                    break;\n                case 6:\n                    m.nodeAccountId = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.nodeCertHash = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return NodeAddress;\n    })();\n\n    proto.NodeAddressBook = (function() {\n\n        /**\n         * Properties of a NodeAddressBook.\n         * @memberof proto\n         * @interface INodeAddressBook\n         * @property {Array.<proto.INodeAddress>|null} [nodeAddress] NodeAddressBook nodeAddress\n         */\n\n        /**\n         * Constructs a new NodeAddressBook.\n         * @memberof proto\n         * @classdesc Represents a NodeAddressBook.\n         * @implements INodeAddressBook\n         * @constructor\n         * @param {proto.INodeAddressBook=} [p] Properties to set\n         */\n        function NodeAddressBook(p) {\n            this.nodeAddress = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * NodeAddressBook nodeAddress.\n         * @member {Array.<proto.INodeAddress>} nodeAddress\n         * @memberof proto.NodeAddressBook\n         * @instance\n         */\n        NodeAddressBook.prototype.nodeAddress = $util.emptyArray;\n\n        /**\n         * Creates a new NodeAddressBook instance using the specified properties.\n         * @function create\n         * @memberof proto.NodeAddressBook\n         * @static\n         * @param {proto.INodeAddressBook=} [properties] Properties to set\n         * @returns {proto.NodeAddressBook} NodeAddressBook instance\n         */\n        NodeAddressBook.create = function create(properties) {\n            return new NodeAddressBook(properties);\n        };\n\n        /**\n         * Encodes the specified NodeAddressBook message. Does not implicitly {@link proto.NodeAddressBook.verify|verify} messages.\n         * @function encode\n         * @memberof proto.NodeAddressBook\n         * @static\n         * @param {proto.INodeAddressBook} m NodeAddressBook message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeAddressBook.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.nodeAddress != null && m.nodeAddress.length) {\n                for (var i = 0; i < m.nodeAddress.length; ++i)\n                    $root.proto.NodeAddress.encode(m.nodeAddress[i], w.uint32(10).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a NodeAddressBook message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.NodeAddressBook\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.NodeAddressBook} NodeAddressBook\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeAddressBook.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NodeAddressBook();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.nodeAddress && m.nodeAddress.length))\n                        m.nodeAddress = [];\n                    m.nodeAddress.push($root.proto.NodeAddress.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return NodeAddressBook;\n    })();\n\n    proto.SemanticVersion = (function() {\n\n        /**\n         * Properties of a SemanticVersion.\n         * @memberof proto\n         * @interface ISemanticVersion\n         * @property {number|null} [major] SemanticVersion major\n         * @property {number|null} [minor] SemanticVersion minor\n         * @property {number|null} [patch] SemanticVersion patch\n         */\n\n        /**\n         * Constructs a new SemanticVersion.\n         * @memberof proto\n         * @classdesc Represents a SemanticVersion.\n         * @implements ISemanticVersion\n         * @constructor\n         * @param {proto.ISemanticVersion=} [p] Properties to set\n         */\n        function SemanticVersion(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * SemanticVersion major.\n         * @member {number} major\n         * @memberof proto.SemanticVersion\n         * @instance\n         */\n        SemanticVersion.prototype.major = 0;\n\n        /**\n         * SemanticVersion minor.\n         * @member {number} minor\n         * @memberof proto.SemanticVersion\n         * @instance\n         */\n        SemanticVersion.prototype.minor = 0;\n\n        /**\n         * SemanticVersion patch.\n         * @member {number} patch\n         * @memberof proto.SemanticVersion\n         * @instance\n         */\n        SemanticVersion.prototype.patch = 0;\n\n        /**\n         * Creates a new SemanticVersion instance using the specified properties.\n         * @function create\n         * @memberof proto.SemanticVersion\n         * @static\n         * @param {proto.ISemanticVersion=} [properties] Properties to set\n         * @returns {proto.SemanticVersion} SemanticVersion instance\n         */\n        SemanticVersion.create = function create(properties) {\n            return new SemanticVersion(properties);\n        };\n\n        /**\n         * Encodes the specified SemanticVersion message. Does not implicitly {@link proto.SemanticVersion.verify|verify} messages.\n         * @function encode\n         * @memberof proto.SemanticVersion\n         * @static\n         * @param {proto.ISemanticVersion} m SemanticVersion message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SemanticVersion.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.major != null && Object.hasOwnProperty.call(m, \"major\"))\n                w.uint32(8).int32(m.major);\n            if (m.minor != null && Object.hasOwnProperty.call(m, \"minor\"))\n                w.uint32(16).int32(m.minor);\n            if (m.patch != null && Object.hasOwnProperty.call(m, \"patch\"))\n                w.uint32(24).int32(m.patch);\n            return w;\n        };\n\n        /**\n         * Decodes a SemanticVersion message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.SemanticVersion\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.SemanticVersion} SemanticVersion\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SemanticVersion.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SemanticVersion();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.major = r.int32();\n                    break;\n                case 2:\n                    m.minor = r.int32();\n                    break;\n                case 3:\n                    m.patch = r.int32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SemanticVersion;\n    })();\n\n    proto.Setting = (function() {\n\n        /**\n         * Properties of a Setting.\n         * @memberof proto\n         * @interface ISetting\n         * @property {string|null} [name] Setting name\n         * @property {string|null} [value] Setting value\n         * @property {Uint8Array|null} [data] Setting data\n         */\n\n        /**\n         * Constructs a new Setting.\n         * @memberof proto\n         * @classdesc Represents a Setting.\n         * @implements ISetting\n         * @constructor\n         * @param {proto.ISetting=} [p] Properties to set\n         */\n        function Setting(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Setting name.\n         * @member {string} name\n         * @memberof proto.Setting\n         * @instance\n         */\n        Setting.prototype.name = \"\";\n\n        /**\n         * Setting value.\n         * @member {string} value\n         * @memberof proto.Setting\n         * @instance\n         */\n        Setting.prototype.value = \"\";\n\n        /**\n         * Setting data.\n         * @member {Uint8Array} data\n         * @memberof proto.Setting\n         * @instance\n         */\n        Setting.prototype.data = $util.newBuffer([]);\n\n        /**\n         * Creates a new Setting instance using the specified properties.\n         * @function create\n         * @memberof proto.Setting\n         * @static\n         * @param {proto.ISetting=} [properties] Properties to set\n         * @returns {proto.Setting} Setting instance\n         */\n        Setting.create = function create(properties) {\n            return new Setting(properties);\n        };\n\n        /**\n         * Encodes the specified Setting message. Does not implicitly {@link proto.Setting.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Setting\n         * @static\n         * @param {proto.ISetting} m Setting message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Setting.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.name != null && Object.hasOwnProperty.call(m, \"name\"))\n                w.uint32(10).string(m.name);\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(18).string(m.value);\n            if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                w.uint32(26).bytes(m.data);\n            return w;\n        };\n\n        /**\n         * Decodes a Setting message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Setting\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Setting} Setting\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Setting.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Setting();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.name = r.string();\n                    break;\n                case 2:\n                    m.value = r.string();\n                    break;\n                case 3:\n                    m.data = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Setting;\n    })();\n\n    proto.ServicesConfigurationList = (function() {\n\n        /**\n         * Properties of a ServicesConfigurationList.\n         * @memberof proto\n         * @interface IServicesConfigurationList\n         * @property {Array.<proto.ISetting>|null} [nameValue] ServicesConfigurationList nameValue\n         */\n\n        /**\n         * Constructs a new ServicesConfigurationList.\n         * @memberof proto\n         * @classdesc Represents a ServicesConfigurationList.\n         * @implements IServicesConfigurationList\n         * @constructor\n         * @param {proto.IServicesConfigurationList=} [p] Properties to set\n         */\n        function ServicesConfigurationList(p) {\n            this.nameValue = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ServicesConfigurationList nameValue.\n         * @member {Array.<proto.ISetting>} nameValue\n         * @memberof proto.ServicesConfigurationList\n         * @instance\n         */\n        ServicesConfigurationList.prototype.nameValue = $util.emptyArray;\n\n        /**\n         * Creates a new ServicesConfigurationList instance using the specified properties.\n         * @function create\n         * @memberof proto.ServicesConfigurationList\n         * @static\n         * @param {proto.IServicesConfigurationList=} [properties] Properties to set\n         * @returns {proto.ServicesConfigurationList} ServicesConfigurationList instance\n         */\n        ServicesConfigurationList.create = function create(properties) {\n            return new ServicesConfigurationList(properties);\n        };\n\n        /**\n         * Encodes the specified ServicesConfigurationList message. Does not implicitly {@link proto.ServicesConfigurationList.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ServicesConfigurationList\n         * @static\n         * @param {proto.IServicesConfigurationList} m ServicesConfigurationList message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServicesConfigurationList.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.nameValue != null && m.nameValue.length) {\n                for (var i = 0; i < m.nameValue.length; ++i)\n                    $root.proto.Setting.encode(m.nameValue[i], w.uint32(10).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a ServicesConfigurationList message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ServicesConfigurationList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ServicesConfigurationList} ServicesConfigurationList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServicesConfigurationList.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ServicesConfigurationList();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.nameValue && m.nameValue.length))\n                        m.nameValue = [];\n                    m.nameValue.push($root.proto.Setting.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ServicesConfigurationList;\n    })();\n\n    proto.TokenRelationship = (function() {\n\n        /**\n         * Properties of a TokenRelationship.\n         * @memberof proto\n         * @interface ITokenRelationship\n         * @property {proto.ITokenID|null} [tokenId] TokenRelationship tokenId\n         * @property {string|null} [symbol] TokenRelationship symbol\n         * @property {Long|null} [balance] TokenRelationship balance\n         * @property {proto.TokenKycStatus|null} [kycStatus] TokenRelationship kycStatus\n         * @property {proto.TokenFreezeStatus|null} [freezeStatus] TokenRelationship freezeStatus\n         */\n\n        /**\n         * Constructs a new TokenRelationship.\n         * @memberof proto\n         * @classdesc Represents a TokenRelationship.\n         * @implements ITokenRelationship\n         * @constructor\n         * @param {proto.ITokenRelationship=} [p] Properties to set\n         */\n        function TokenRelationship(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenRelationship tokenId.\n         * @member {proto.ITokenID|null|undefined} tokenId\n         * @memberof proto.TokenRelationship\n         * @instance\n         */\n        TokenRelationship.prototype.tokenId = null;\n\n        /**\n         * TokenRelationship symbol.\n         * @member {string} symbol\n         * @memberof proto.TokenRelationship\n         * @instance\n         */\n        TokenRelationship.prototype.symbol = \"\";\n\n        /**\n         * TokenRelationship balance.\n         * @member {Long} balance\n         * @memberof proto.TokenRelationship\n         * @instance\n         */\n        TokenRelationship.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TokenRelationship kycStatus.\n         * @member {proto.TokenKycStatus} kycStatus\n         * @memberof proto.TokenRelationship\n         * @instance\n         */\n        TokenRelationship.prototype.kycStatus = 0;\n\n        /**\n         * TokenRelationship freezeStatus.\n         * @member {proto.TokenFreezeStatus} freezeStatus\n         * @memberof proto.TokenRelationship\n         * @instance\n         */\n        TokenRelationship.prototype.freezeStatus = 0;\n\n        /**\n         * Creates a new TokenRelationship instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenRelationship\n         * @static\n         * @param {proto.ITokenRelationship=} [properties] Properties to set\n         * @returns {proto.TokenRelationship} TokenRelationship instance\n         */\n        TokenRelationship.create = function create(properties) {\n            return new TokenRelationship(properties);\n        };\n\n        /**\n         * Encodes the specified TokenRelationship message. Does not implicitly {@link proto.TokenRelationship.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenRelationship\n         * @static\n         * @param {proto.ITokenRelationship} m TokenRelationship message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenRelationship.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.tokenId != null && Object.hasOwnProperty.call(m, \"tokenId\"))\n                $root.proto.TokenID.encode(m.tokenId, w.uint32(10).fork()).ldelim();\n            if (m.symbol != null && Object.hasOwnProperty.call(m, \"symbol\"))\n                w.uint32(18).string(m.symbol);\n            if (m.balance != null && Object.hasOwnProperty.call(m, \"balance\"))\n                w.uint32(24).uint64(m.balance);\n            if (m.kycStatus != null && Object.hasOwnProperty.call(m, \"kycStatus\"))\n                w.uint32(32).int32(m.kycStatus);\n            if (m.freezeStatus != null && Object.hasOwnProperty.call(m, \"freezeStatus\"))\n                w.uint32(40).int32(m.freezeStatus);\n            return w;\n        };\n\n        /**\n         * Decodes a TokenRelationship message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenRelationship\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenRelationship} TokenRelationship\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenRelationship.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenRelationship();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.tokenId = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.symbol = r.string();\n                    break;\n                case 3:\n                    m.balance = r.uint64();\n                    break;\n                case 4:\n                    m.kycStatus = r.int32();\n                    break;\n                case 5:\n                    m.freezeStatus = r.int32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenRelationship;\n    })();\n\n    proto.Timestamp = (function() {\n\n        /**\n         * Properties of a Timestamp.\n         * @memberof proto\n         * @interface ITimestamp\n         * @property {Long|null} [seconds] Timestamp seconds\n         * @property {number|null} [nanos] Timestamp nanos\n         */\n\n        /**\n         * Constructs a new Timestamp.\n         * @memberof proto\n         * @classdesc Represents a Timestamp.\n         * @implements ITimestamp\n         * @constructor\n         * @param {proto.ITimestamp=} [p] Properties to set\n         */\n        function Timestamp(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Timestamp seconds.\n         * @member {Long} seconds\n         * @memberof proto.Timestamp\n         * @instance\n         */\n        Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Timestamp nanos.\n         * @member {number} nanos\n         * @memberof proto.Timestamp\n         * @instance\n         */\n        Timestamp.prototype.nanos = 0;\n\n        /**\n         * Creates a new Timestamp instance using the specified properties.\n         * @function create\n         * @memberof proto.Timestamp\n         * @static\n         * @param {proto.ITimestamp=} [properties] Properties to set\n         * @returns {proto.Timestamp} Timestamp instance\n         */\n        Timestamp.create = function create(properties) {\n            return new Timestamp(properties);\n        };\n\n        /**\n         * Encodes the specified Timestamp message. Does not implicitly {@link proto.Timestamp.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Timestamp\n         * @static\n         * @param {proto.ITimestamp} m Timestamp message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Timestamp.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.seconds != null && Object.hasOwnProperty.call(m, \"seconds\"))\n                w.uint32(8).int64(m.seconds);\n            if (m.nanos != null && Object.hasOwnProperty.call(m, \"nanos\"))\n                w.uint32(16).int32(m.nanos);\n            return w;\n        };\n\n        /**\n         * Decodes a Timestamp message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Timestamp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Timestamp} Timestamp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Timestamp.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Timestamp();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.seconds = r.int64();\n                    break;\n                case 2:\n                    m.nanos = r.int32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Timestamp;\n    })();\n\n    proto.TimestampSeconds = (function() {\n\n        /**\n         * Properties of a TimestampSeconds.\n         * @memberof proto\n         * @interface ITimestampSeconds\n         * @property {Long|null} [seconds] TimestampSeconds seconds\n         */\n\n        /**\n         * Constructs a new TimestampSeconds.\n         * @memberof proto\n         * @classdesc Represents a TimestampSeconds.\n         * @implements ITimestampSeconds\n         * @constructor\n         * @param {proto.ITimestampSeconds=} [p] Properties to set\n         */\n        function TimestampSeconds(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TimestampSeconds seconds.\n         * @member {Long} seconds\n         * @memberof proto.TimestampSeconds\n         * @instance\n         */\n        TimestampSeconds.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new TimestampSeconds instance using the specified properties.\n         * @function create\n         * @memberof proto.TimestampSeconds\n         * @static\n         * @param {proto.ITimestampSeconds=} [properties] Properties to set\n         * @returns {proto.TimestampSeconds} TimestampSeconds instance\n         */\n        TimestampSeconds.create = function create(properties) {\n            return new TimestampSeconds(properties);\n        };\n\n        /**\n         * Encodes the specified TimestampSeconds message. Does not implicitly {@link proto.TimestampSeconds.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TimestampSeconds\n         * @static\n         * @param {proto.ITimestampSeconds} m TimestampSeconds message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TimestampSeconds.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.seconds != null && Object.hasOwnProperty.call(m, \"seconds\"))\n                w.uint32(8).int64(m.seconds);\n            return w;\n        };\n\n        /**\n         * Decodes a TimestampSeconds message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TimestampSeconds\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TimestampSeconds} TimestampSeconds\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TimestampSeconds.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TimestampSeconds();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.seconds = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TimestampSeconds;\n    })();\n\n    proto.ConsensusCreateTopicTransactionBody = (function() {\n\n        /**\n         * Properties of a ConsensusCreateTopicTransactionBody.\n         * @memberof proto\n         * @interface IConsensusCreateTopicTransactionBody\n         * @property {string|null} [memo] ConsensusCreateTopicTransactionBody memo\n         * @property {proto.IKey|null} [adminKey] ConsensusCreateTopicTransactionBody adminKey\n         * @property {proto.IKey|null} [submitKey] ConsensusCreateTopicTransactionBody submitKey\n         * @property {proto.IDuration|null} [autoRenewPeriod] ConsensusCreateTopicTransactionBody autoRenewPeriod\n         * @property {proto.IAccountID|null} [autoRenewAccount] ConsensusCreateTopicTransactionBody autoRenewAccount\n         */\n\n        /**\n         * Constructs a new ConsensusCreateTopicTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a ConsensusCreateTopicTransactionBody.\n         * @implements IConsensusCreateTopicTransactionBody\n         * @constructor\n         * @param {proto.IConsensusCreateTopicTransactionBody=} [p] Properties to set\n         */\n        function ConsensusCreateTopicTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusCreateTopicTransactionBody memo.\n         * @member {string} memo\n         * @memberof proto.ConsensusCreateTopicTransactionBody\n         * @instance\n         */\n        ConsensusCreateTopicTransactionBody.prototype.memo = \"\";\n\n        /**\n         * ConsensusCreateTopicTransactionBody adminKey.\n         * @member {proto.IKey|null|undefined} adminKey\n         * @memberof proto.ConsensusCreateTopicTransactionBody\n         * @instance\n         */\n        ConsensusCreateTopicTransactionBody.prototype.adminKey = null;\n\n        /**\n         * ConsensusCreateTopicTransactionBody submitKey.\n         * @member {proto.IKey|null|undefined} submitKey\n         * @memberof proto.ConsensusCreateTopicTransactionBody\n         * @instance\n         */\n        ConsensusCreateTopicTransactionBody.prototype.submitKey = null;\n\n        /**\n         * ConsensusCreateTopicTransactionBody autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.ConsensusCreateTopicTransactionBody\n         * @instance\n         */\n        ConsensusCreateTopicTransactionBody.prototype.autoRenewPeriod = null;\n\n        /**\n         * ConsensusCreateTopicTransactionBody autoRenewAccount.\n         * @member {proto.IAccountID|null|undefined} autoRenewAccount\n         * @memberof proto.ConsensusCreateTopicTransactionBody\n         * @instance\n         */\n        ConsensusCreateTopicTransactionBody.prototype.autoRenewAccount = null;\n\n        /**\n         * Creates a new ConsensusCreateTopicTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusCreateTopicTransactionBody\n         * @static\n         * @param {proto.IConsensusCreateTopicTransactionBody=} [properties] Properties to set\n         * @returns {proto.ConsensusCreateTopicTransactionBody} ConsensusCreateTopicTransactionBody instance\n         */\n        ConsensusCreateTopicTransactionBody.create = function create(properties) {\n            return new ConsensusCreateTopicTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusCreateTopicTransactionBody message. Does not implicitly {@link proto.ConsensusCreateTopicTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusCreateTopicTransactionBody\n         * @static\n         * @param {proto.IConsensusCreateTopicTransactionBody} m ConsensusCreateTopicTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusCreateTopicTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                w.uint32(10).string(m.memo);\n            if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                $root.proto.Key.encode(m.adminKey, w.uint32(18).fork()).ldelim();\n            if (m.submitKey != null && Object.hasOwnProperty.call(m, \"submitKey\"))\n                $root.proto.Key.encode(m.submitKey, w.uint32(26).fork()).ldelim();\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(50).fork()).ldelim();\n            if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, \"autoRenewAccount\"))\n                $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(58).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusCreateTopicTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusCreateTopicTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusCreateTopicTransactionBody} ConsensusCreateTopicTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusCreateTopicTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusCreateTopicTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.memo = r.string();\n                    break;\n                case 2:\n                    m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.submitKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusCreateTopicTransactionBody;\n    })();\n\n    proto.Duration = (function() {\n\n        /**\n         * Properties of a Duration.\n         * @memberof proto\n         * @interface IDuration\n         * @property {Long|null} [seconds] Duration seconds\n         */\n\n        /**\n         * Constructs a new Duration.\n         * @memberof proto\n         * @classdesc Represents a Duration.\n         * @implements IDuration\n         * @constructor\n         * @param {proto.IDuration=} [p] Properties to set\n         */\n        function Duration(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Duration seconds.\n         * @member {Long} seconds\n         * @memberof proto.Duration\n         * @instance\n         */\n        Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new Duration instance using the specified properties.\n         * @function create\n         * @memberof proto.Duration\n         * @static\n         * @param {proto.IDuration=} [properties] Properties to set\n         * @returns {proto.Duration} Duration instance\n         */\n        Duration.create = function create(properties) {\n            return new Duration(properties);\n        };\n\n        /**\n         * Encodes the specified Duration message. Does not implicitly {@link proto.Duration.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Duration\n         * @static\n         * @param {proto.IDuration} m Duration message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Duration.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.seconds != null && Object.hasOwnProperty.call(m, \"seconds\"))\n                w.uint32(8).int64(m.seconds);\n            return w;\n        };\n\n        /**\n         * Decodes a Duration message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Duration\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Duration} Duration\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Duration.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Duration();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.seconds = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Duration;\n    })();\n\n    proto.ConsensusDeleteTopicTransactionBody = (function() {\n\n        /**\n         * Properties of a ConsensusDeleteTopicTransactionBody.\n         * @memberof proto\n         * @interface IConsensusDeleteTopicTransactionBody\n         * @property {proto.ITopicID|null} [topicID] ConsensusDeleteTopicTransactionBody topicID\n         */\n\n        /**\n         * Constructs a new ConsensusDeleteTopicTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a ConsensusDeleteTopicTransactionBody.\n         * @implements IConsensusDeleteTopicTransactionBody\n         * @constructor\n         * @param {proto.IConsensusDeleteTopicTransactionBody=} [p] Properties to set\n         */\n        function ConsensusDeleteTopicTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusDeleteTopicTransactionBody topicID.\n         * @member {proto.ITopicID|null|undefined} topicID\n         * @memberof proto.ConsensusDeleteTopicTransactionBody\n         * @instance\n         */\n        ConsensusDeleteTopicTransactionBody.prototype.topicID = null;\n\n        /**\n         * Creates a new ConsensusDeleteTopicTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusDeleteTopicTransactionBody\n         * @static\n         * @param {proto.IConsensusDeleteTopicTransactionBody=} [properties] Properties to set\n         * @returns {proto.ConsensusDeleteTopicTransactionBody} ConsensusDeleteTopicTransactionBody instance\n         */\n        ConsensusDeleteTopicTransactionBody.create = function create(properties) {\n            return new ConsensusDeleteTopicTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusDeleteTopicTransactionBody message. Does not implicitly {@link proto.ConsensusDeleteTopicTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusDeleteTopicTransactionBody\n         * @static\n         * @param {proto.IConsensusDeleteTopicTransactionBody} m ConsensusDeleteTopicTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusDeleteTopicTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                $root.proto.TopicID.encode(m.topicID, w.uint32(10).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusDeleteTopicTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusDeleteTopicTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusDeleteTopicTransactionBody} ConsensusDeleteTopicTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusDeleteTopicTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusDeleteTopicTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.topicID = $root.proto.TopicID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusDeleteTopicTransactionBody;\n    })();\n\n    proto.ConsensusGetTopicInfoQuery = (function() {\n\n        /**\n         * Properties of a ConsensusGetTopicInfoQuery.\n         * @memberof proto\n         * @interface IConsensusGetTopicInfoQuery\n         * @property {proto.IQueryHeader|null} [header] ConsensusGetTopicInfoQuery header\n         * @property {proto.ITopicID|null} [topicID] ConsensusGetTopicInfoQuery topicID\n         */\n\n        /**\n         * Constructs a new ConsensusGetTopicInfoQuery.\n         * @memberof proto\n         * @classdesc Represents a ConsensusGetTopicInfoQuery.\n         * @implements IConsensusGetTopicInfoQuery\n         * @constructor\n         * @param {proto.IConsensusGetTopicInfoQuery=} [p] Properties to set\n         */\n        function ConsensusGetTopicInfoQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusGetTopicInfoQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.ConsensusGetTopicInfoQuery\n         * @instance\n         */\n        ConsensusGetTopicInfoQuery.prototype.header = null;\n\n        /**\n         * ConsensusGetTopicInfoQuery topicID.\n         * @member {proto.ITopicID|null|undefined} topicID\n         * @memberof proto.ConsensusGetTopicInfoQuery\n         * @instance\n         */\n        ConsensusGetTopicInfoQuery.prototype.topicID = null;\n\n        /**\n         * Creates a new ConsensusGetTopicInfoQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusGetTopicInfoQuery\n         * @static\n         * @param {proto.IConsensusGetTopicInfoQuery=} [properties] Properties to set\n         * @returns {proto.ConsensusGetTopicInfoQuery} ConsensusGetTopicInfoQuery instance\n         */\n        ConsensusGetTopicInfoQuery.create = function create(properties) {\n            return new ConsensusGetTopicInfoQuery(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusGetTopicInfoQuery message. Does not implicitly {@link proto.ConsensusGetTopicInfoQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusGetTopicInfoQuery\n         * @static\n         * @param {proto.IConsensusGetTopicInfoQuery} m ConsensusGetTopicInfoQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusGetTopicInfoQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                $root.proto.TopicID.encode(m.topicID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusGetTopicInfoQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusGetTopicInfoQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusGetTopicInfoQuery} ConsensusGetTopicInfoQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusGetTopicInfoQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusGetTopicInfoQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.topicID = $root.proto.TopicID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusGetTopicInfoQuery;\n    })();\n\n    proto.ConsensusGetTopicInfoResponse = (function() {\n\n        /**\n         * Properties of a ConsensusGetTopicInfoResponse.\n         * @memberof proto\n         * @interface IConsensusGetTopicInfoResponse\n         * @property {proto.IResponseHeader|null} [header] ConsensusGetTopicInfoResponse header\n         * @property {proto.ITopicID|null} [topicID] ConsensusGetTopicInfoResponse topicID\n         * @property {proto.IConsensusTopicInfo|null} [topicInfo] ConsensusGetTopicInfoResponse topicInfo\n         */\n\n        /**\n         * Constructs a new ConsensusGetTopicInfoResponse.\n         * @memberof proto\n         * @classdesc Represents a ConsensusGetTopicInfoResponse.\n         * @implements IConsensusGetTopicInfoResponse\n         * @constructor\n         * @param {proto.IConsensusGetTopicInfoResponse=} [p] Properties to set\n         */\n        function ConsensusGetTopicInfoResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusGetTopicInfoResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.ConsensusGetTopicInfoResponse\n         * @instance\n         */\n        ConsensusGetTopicInfoResponse.prototype.header = null;\n\n        /**\n         * ConsensusGetTopicInfoResponse topicID.\n         * @member {proto.ITopicID|null|undefined} topicID\n         * @memberof proto.ConsensusGetTopicInfoResponse\n         * @instance\n         */\n        ConsensusGetTopicInfoResponse.prototype.topicID = null;\n\n        /**\n         * ConsensusGetTopicInfoResponse topicInfo.\n         * @member {proto.IConsensusTopicInfo|null|undefined} topicInfo\n         * @memberof proto.ConsensusGetTopicInfoResponse\n         * @instance\n         */\n        ConsensusGetTopicInfoResponse.prototype.topicInfo = null;\n\n        /**\n         * Creates a new ConsensusGetTopicInfoResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusGetTopicInfoResponse\n         * @static\n         * @param {proto.IConsensusGetTopicInfoResponse=} [properties] Properties to set\n         * @returns {proto.ConsensusGetTopicInfoResponse} ConsensusGetTopicInfoResponse instance\n         */\n        ConsensusGetTopicInfoResponse.create = function create(properties) {\n            return new ConsensusGetTopicInfoResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusGetTopicInfoResponse message. Does not implicitly {@link proto.ConsensusGetTopicInfoResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusGetTopicInfoResponse\n         * @static\n         * @param {proto.IConsensusGetTopicInfoResponse} m ConsensusGetTopicInfoResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusGetTopicInfoResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                $root.proto.TopicID.encode(m.topicID, w.uint32(18).fork()).ldelim();\n            if (m.topicInfo != null && Object.hasOwnProperty.call(m, \"topicInfo\"))\n                $root.proto.ConsensusTopicInfo.encode(m.topicInfo, w.uint32(42).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusGetTopicInfoResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusGetTopicInfoResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusGetTopicInfoResponse} ConsensusGetTopicInfoResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusGetTopicInfoResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusGetTopicInfoResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.topicID = $root.proto.TopicID.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.topicInfo = $root.proto.ConsensusTopicInfo.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusGetTopicInfoResponse;\n    })();\n\n    /**\n     * ResponseType enum.\n     * @name proto.ResponseType\n     * @enum {number}\n     * @property {number} ANSWER_ONLY=0 ANSWER_ONLY value\n     * @property {number} ANSWER_STATE_PROOF=1 ANSWER_STATE_PROOF value\n     * @property {number} COST_ANSWER=2 COST_ANSWER value\n     * @property {number} COST_ANSWER_STATE_PROOF=3 COST_ANSWER_STATE_PROOF value\n     */\n    proto.ResponseType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"ANSWER_ONLY\"] = 0;\n        values[valuesById[1] = \"ANSWER_STATE_PROOF\"] = 1;\n        values[valuesById[2] = \"COST_ANSWER\"] = 2;\n        values[valuesById[3] = \"COST_ANSWER_STATE_PROOF\"] = 3;\n        return values;\n    })();\n\n    proto.QueryHeader = (function() {\n\n        /**\n         * Properties of a QueryHeader.\n         * @memberof proto\n         * @interface IQueryHeader\n         * @property {proto.ITransaction|null} [payment] QueryHeader payment\n         * @property {proto.ResponseType|null} [responseType] QueryHeader responseType\n         */\n\n        /**\n         * Constructs a new QueryHeader.\n         * @memberof proto\n         * @classdesc Represents a QueryHeader.\n         * @implements IQueryHeader\n         * @constructor\n         * @param {proto.IQueryHeader=} [p] Properties to set\n         */\n        function QueryHeader(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * QueryHeader payment.\n         * @member {proto.ITransaction|null|undefined} payment\n         * @memberof proto.QueryHeader\n         * @instance\n         */\n        QueryHeader.prototype.payment = null;\n\n        /**\n         * QueryHeader responseType.\n         * @member {proto.ResponseType} responseType\n         * @memberof proto.QueryHeader\n         * @instance\n         */\n        QueryHeader.prototype.responseType = 0;\n\n        /**\n         * Creates a new QueryHeader instance using the specified properties.\n         * @function create\n         * @memberof proto.QueryHeader\n         * @static\n         * @param {proto.IQueryHeader=} [properties] Properties to set\n         * @returns {proto.QueryHeader} QueryHeader instance\n         */\n        QueryHeader.create = function create(properties) {\n            return new QueryHeader(properties);\n        };\n\n        /**\n         * Encodes the specified QueryHeader message. Does not implicitly {@link proto.QueryHeader.verify|verify} messages.\n         * @function encode\n         * @memberof proto.QueryHeader\n         * @static\n         * @param {proto.IQueryHeader} m QueryHeader message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryHeader.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.payment != null && Object.hasOwnProperty.call(m, \"payment\"))\n                $root.proto.Transaction.encode(m.payment, w.uint32(10).fork()).ldelim();\n            if (m.responseType != null && Object.hasOwnProperty.call(m, \"responseType\"))\n                w.uint32(16).int32(m.responseType);\n            return w;\n        };\n\n        /**\n         * Decodes a QueryHeader message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.QueryHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.QueryHeader} QueryHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryHeader.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.QueryHeader();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.payment = $root.proto.Transaction.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.responseType = r.int32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return QueryHeader;\n    })();\n\n    proto.Transaction = (function() {\n\n        /**\n         * Properties of a Transaction.\n         * @memberof proto\n         * @interface ITransaction\n         * @property {Uint8Array|null} [signedTransactionBytes] Transaction signedTransactionBytes\n         * @property {Uint8Array|null} [bodyBytes] Transaction bodyBytes\n         * @property {proto.ISignatureMap|null} [sigMap] Transaction sigMap\n         */\n\n        /**\n         * Constructs a new Transaction.\n         * @memberof proto\n         * @classdesc Represents a Transaction.\n         * @implements ITransaction\n         * @constructor\n         * @param {proto.ITransaction=} [p] Properties to set\n         */\n        function Transaction(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Transaction signedTransactionBytes.\n         * @member {Uint8Array} signedTransactionBytes\n         * @memberof proto.Transaction\n         * @instance\n         */\n        Transaction.prototype.signedTransactionBytes = $util.newBuffer([]);\n\n        /**\n         * Transaction bodyBytes.\n         * @member {Uint8Array} bodyBytes\n         * @memberof proto.Transaction\n         * @instance\n         */\n        Transaction.prototype.bodyBytes = $util.newBuffer([]);\n\n        /**\n         * Transaction sigMap.\n         * @member {proto.ISignatureMap|null|undefined} sigMap\n         * @memberof proto.Transaction\n         * @instance\n         */\n        Transaction.prototype.sigMap = null;\n\n        /**\n         * Creates a new Transaction instance using the specified properties.\n         * @function create\n         * @memberof proto.Transaction\n         * @static\n         * @param {proto.ITransaction=} [properties] Properties to set\n         * @returns {proto.Transaction} Transaction instance\n         */\n        Transaction.create = function create(properties) {\n            return new Transaction(properties);\n        };\n\n        /**\n         * Encodes the specified Transaction message. Does not implicitly {@link proto.Transaction.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Transaction\n         * @static\n         * @param {proto.ITransaction} m Transaction message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Transaction.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.sigMap != null && Object.hasOwnProperty.call(m, \"sigMap\"))\n                $root.proto.SignatureMap.encode(m.sigMap, w.uint32(26).fork()).ldelim();\n            if (m.bodyBytes != null && Object.hasOwnProperty.call(m, \"bodyBytes\"))\n                w.uint32(34).bytes(m.bodyBytes);\n            if (m.signedTransactionBytes != null && Object.hasOwnProperty.call(m, \"signedTransactionBytes\"))\n                w.uint32(42).bytes(m.signedTransactionBytes);\n            return w;\n        };\n\n        /**\n         * Decodes a Transaction message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Transaction\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Transaction} Transaction\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Transaction.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Transaction();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 5:\n                    m.signedTransactionBytes = r.bytes();\n                    break;\n                case 4:\n                    m.bodyBytes = r.bytes();\n                    break;\n                case 3:\n                    m.sigMap = $root.proto.SignatureMap.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Transaction;\n    })();\n\n    proto.TransactionBody = (function() {\n\n        /**\n         * Properties of a TransactionBody.\n         * @memberof proto\n         * @interface ITransactionBody\n         * @property {proto.ITransactionID|null} [transactionID] TransactionBody transactionID\n         * @property {proto.IAccountID|null} [nodeAccountID] TransactionBody nodeAccountID\n         * @property {Long|null} [transactionFee] TransactionBody transactionFee\n         * @property {proto.IDuration|null} [transactionValidDuration] TransactionBody transactionValidDuration\n         * @property {boolean|null} [generateRecord] TransactionBody generateRecord\n         * @property {string|null} [memo] TransactionBody memo\n         * @property {proto.IContractCallTransactionBody|null} [contractCall] TransactionBody contractCall\n         * @property {proto.IContractCreateTransactionBody|null} [contractCreateInstance] TransactionBody contractCreateInstance\n         * @property {proto.IContractUpdateTransactionBody|null} [contractUpdateInstance] TransactionBody contractUpdateInstance\n         * @property {proto.IContractDeleteTransactionBody|null} [contractDeleteInstance] TransactionBody contractDeleteInstance\n         * @property {proto.ICryptoAddLiveHashTransactionBody|null} [cryptoAddLiveHash] TransactionBody cryptoAddLiveHash\n         * @property {proto.ICryptoCreateTransactionBody|null} [cryptoCreateAccount] TransactionBody cryptoCreateAccount\n         * @property {proto.ICryptoDeleteTransactionBody|null} [cryptoDelete] TransactionBody cryptoDelete\n         * @property {proto.ICryptoDeleteLiveHashTransactionBody|null} [cryptoDeleteLiveHash] TransactionBody cryptoDeleteLiveHash\n         * @property {proto.ICryptoTransferTransactionBody|null} [cryptoTransfer] TransactionBody cryptoTransfer\n         * @property {proto.ICryptoUpdateTransactionBody|null} [cryptoUpdateAccount] TransactionBody cryptoUpdateAccount\n         * @property {proto.IFileAppendTransactionBody|null} [fileAppend] TransactionBody fileAppend\n         * @property {proto.IFileCreateTransactionBody|null} [fileCreate] TransactionBody fileCreate\n         * @property {proto.IFileDeleteTransactionBody|null} [fileDelete] TransactionBody fileDelete\n         * @property {proto.IFileUpdateTransactionBody|null} [fileUpdate] TransactionBody fileUpdate\n         * @property {proto.ISystemDeleteTransactionBody|null} [systemDelete] TransactionBody systemDelete\n         * @property {proto.ISystemUndeleteTransactionBody|null} [systemUndelete] TransactionBody systemUndelete\n         * @property {proto.IFreezeTransactionBody|null} [freeze] TransactionBody freeze\n         * @property {proto.IConsensusCreateTopicTransactionBody|null} [consensusCreateTopic] TransactionBody consensusCreateTopic\n         * @property {proto.IConsensusUpdateTopicTransactionBody|null} [consensusUpdateTopic] TransactionBody consensusUpdateTopic\n         * @property {proto.IConsensusDeleteTopicTransactionBody|null} [consensusDeleteTopic] TransactionBody consensusDeleteTopic\n         * @property {proto.IConsensusSubmitMessageTransactionBody|null} [consensusSubmitMessage] TransactionBody consensusSubmitMessage\n         * @property {proto.IUncheckedSubmitBody|null} [uncheckedSubmit] TransactionBody uncheckedSubmit\n         * @property {proto.ITokenCreateTransactionBody|null} [tokenCreation] TransactionBody tokenCreation\n         * @property {proto.ITokenFreezeAccountTransactionBody|null} [tokenFreeze] TransactionBody tokenFreeze\n         * @property {proto.ITokenUnfreezeAccountTransactionBody|null} [tokenUnfreeze] TransactionBody tokenUnfreeze\n         * @property {proto.ITokenGrantKycTransactionBody|null} [tokenGrantKyc] TransactionBody tokenGrantKyc\n         * @property {proto.ITokenRevokeKycTransactionBody|null} [tokenRevokeKyc] TransactionBody tokenRevokeKyc\n         * @property {proto.ITokenDeleteTransactionBody|null} [tokenDeletion] TransactionBody tokenDeletion\n         * @property {proto.ITokenUpdateTransactionBody|null} [tokenUpdate] TransactionBody tokenUpdate\n         * @property {proto.ITokenMintTransactionBody|null} [tokenMint] TransactionBody tokenMint\n         * @property {proto.ITokenBurnTransactionBody|null} [tokenBurn] TransactionBody tokenBurn\n         * @property {proto.ITokenWipeAccountTransactionBody|null} [tokenWipe] TransactionBody tokenWipe\n         * @property {proto.ITokenAssociateTransactionBody|null} [tokenAssociate] TransactionBody tokenAssociate\n         * @property {proto.ITokenDissociateTransactionBody|null} [tokenDissociate] TransactionBody tokenDissociate\n         */\n\n        /**\n         * Constructs a new TransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TransactionBody.\n         * @implements ITransactionBody\n         * @constructor\n         * @param {proto.ITransactionBody=} [p] Properties to set\n         */\n        function TransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionBody transactionID.\n         * @member {proto.ITransactionID|null|undefined} transactionID\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.transactionID = null;\n\n        /**\n         * TransactionBody nodeAccountID.\n         * @member {proto.IAccountID|null|undefined} nodeAccountID\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.nodeAccountID = null;\n\n        /**\n         * TransactionBody transactionFee.\n         * @member {Long} transactionFee\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.transactionFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TransactionBody transactionValidDuration.\n         * @member {proto.IDuration|null|undefined} transactionValidDuration\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.transactionValidDuration = null;\n\n        /**\n         * TransactionBody generateRecord.\n         * @member {boolean} generateRecord\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.generateRecord = false;\n\n        /**\n         * TransactionBody memo.\n         * @member {string} memo\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.memo = \"\";\n\n        /**\n         * TransactionBody contractCall.\n         * @member {proto.IContractCallTransactionBody|null|undefined} contractCall\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.contractCall = null;\n\n        /**\n         * TransactionBody contractCreateInstance.\n         * @member {proto.IContractCreateTransactionBody|null|undefined} contractCreateInstance\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.contractCreateInstance = null;\n\n        /**\n         * TransactionBody contractUpdateInstance.\n         * @member {proto.IContractUpdateTransactionBody|null|undefined} contractUpdateInstance\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.contractUpdateInstance = null;\n\n        /**\n         * TransactionBody contractDeleteInstance.\n         * @member {proto.IContractDeleteTransactionBody|null|undefined} contractDeleteInstance\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.contractDeleteInstance = null;\n\n        /**\n         * TransactionBody cryptoAddLiveHash.\n         * @member {proto.ICryptoAddLiveHashTransactionBody|null|undefined} cryptoAddLiveHash\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.cryptoAddLiveHash = null;\n\n        /**\n         * TransactionBody cryptoCreateAccount.\n         * @member {proto.ICryptoCreateTransactionBody|null|undefined} cryptoCreateAccount\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.cryptoCreateAccount = null;\n\n        /**\n         * TransactionBody cryptoDelete.\n         * @member {proto.ICryptoDeleteTransactionBody|null|undefined} cryptoDelete\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.cryptoDelete = null;\n\n        /**\n         * TransactionBody cryptoDeleteLiveHash.\n         * @member {proto.ICryptoDeleteLiveHashTransactionBody|null|undefined} cryptoDeleteLiveHash\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.cryptoDeleteLiveHash = null;\n\n        /**\n         * TransactionBody cryptoTransfer.\n         * @member {proto.ICryptoTransferTransactionBody|null|undefined} cryptoTransfer\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.cryptoTransfer = null;\n\n        /**\n         * TransactionBody cryptoUpdateAccount.\n         * @member {proto.ICryptoUpdateTransactionBody|null|undefined} cryptoUpdateAccount\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.cryptoUpdateAccount = null;\n\n        /**\n         * TransactionBody fileAppend.\n         * @member {proto.IFileAppendTransactionBody|null|undefined} fileAppend\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.fileAppend = null;\n\n        /**\n         * TransactionBody fileCreate.\n         * @member {proto.IFileCreateTransactionBody|null|undefined} fileCreate\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.fileCreate = null;\n\n        /**\n         * TransactionBody fileDelete.\n         * @member {proto.IFileDeleteTransactionBody|null|undefined} fileDelete\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.fileDelete = null;\n\n        /**\n         * TransactionBody fileUpdate.\n         * @member {proto.IFileUpdateTransactionBody|null|undefined} fileUpdate\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.fileUpdate = null;\n\n        /**\n         * TransactionBody systemDelete.\n         * @member {proto.ISystemDeleteTransactionBody|null|undefined} systemDelete\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.systemDelete = null;\n\n        /**\n         * TransactionBody systemUndelete.\n         * @member {proto.ISystemUndeleteTransactionBody|null|undefined} systemUndelete\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.systemUndelete = null;\n\n        /**\n         * TransactionBody freeze.\n         * @member {proto.IFreezeTransactionBody|null|undefined} freeze\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.freeze = null;\n\n        /**\n         * TransactionBody consensusCreateTopic.\n         * @member {proto.IConsensusCreateTopicTransactionBody|null|undefined} consensusCreateTopic\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.consensusCreateTopic = null;\n\n        /**\n         * TransactionBody consensusUpdateTopic.\n         * @member {proto.IConsensusUpdateTopicTransactionBody|null|undefined} consensusUpdateTopic\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.consensusUpdateTopic = null;\n\n        /**\n         * TransactionBody consensusDeleteTopic.\n         * @member {proto.IConsensusDeleteTopicTransactionBody|null|undefined} consensusDeleteTopic\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.consensusDeleteTopic = null;\n\n        /**\n         * TransactionBody consensusSubmitMessage.\n         * @member {proto.IConsensusSubmitMessageTransactionBody|null|undefined} consensusSubmitMessage\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.consensusSubmitMessage = null;\n\n        /**\n         * TransactionBody uncheckedSubmit.\n         * @member {proto.IUncheckedSubmitBody|null|undefined} uncheckedSubmit\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.uncheckedSubmit = null;\n\n        /**\n         * TransactionBody tokenCreation.\n         * @member {proto.ITokenCreateTransactionBody|null|undefined} tokenCreation\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenCreation = null;\n\n        /**\n         * TransactionBody tokenFreeze.\n         * @member {proto.ITokenFreezeAccountTransactionBody|null|undefined} tokenFreeze\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenFreeze = null;\n\n        /**\n         * TransactionBody tokenUnfreeze.\n         * @member {proto.ITokenUnfreezeAccountTransactionBody|null|undefined} tokenUnfreeze\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenUnfreeze = null;\n\n        /**\n         * TransactionBody tokenGrantKyc.\n         * @member {proto.ITokenGrantKycTransactionBody|null|undefined} tokenGrantKyc\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenGrantKyc = null;\n\n        /**\n         * TransactionBody tokenRevokeKyc.\n         * @member {proto.ITokenRevokeKycTransactionBody|null|undefined} tokenRevokeKyc\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenRevokeKyc = null;\n\n        /**\n         * TransactionBody tokenDeletion.\n         * @member {proto.ITokenDeleteTransactionBody|null|undefined} tokenDeletion\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenDeletion = null;\n\n        /**\n         * TransactionBody tokenUpdate.\n         * @member {proto.ITokenUpdateTransactionBody|null|undefined} tokenUpdate\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenUpdate = null;\n\n        /**\n         * TransactionBody tokenMint.\n         * @member {proto.ITokenMintTransactionBody|null|undefined} tokenMint\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenMint = null;\n\n        /**\n         * TransactionBody tokenBurn.\n         * @member {proto.ITokenBurnTransactionBody|null|undefined} tokenBurn\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenBurn = null;\n\n        /**\n         * TransactionBody tokenWipe.\n         * @member {proto.ITokenWipeAccountTransactionBody|null|undefined} tokenWipe\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenWipe = null;\n\n        /**\n         * TransactionBody tokenAssociate.\n         * @member {proto.ITokenAssociateTransactionBody|null|undefined} tokenAssociate\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenAssociate = null;\n\n        /**\n         * TransactionBody tokenDissociate.\n         * @member {proto.ITokenDissociateTransactionBody|null|undefined} tokenDissociate\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        TransactionBody.prototype.tokenDissociate = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * TransactionBody data.\n         * @member {\"contractCall\"|\"contractCreateInstance\"|\"contractUpdateInstance\"|\"contractDeleteInstance\"|\"cryptoAddLiveHash\"|\"cryptoCreateAccount\"|\"cryptoDelete\"|\"cryptoDeleteLiveHash\"|\"cryptoTransfer\"|\"cryptoUpdateAccount\"|\"fileAppend\"|\"fileCreate\"|\"fileDelete\"|\"fileUpdate\"|\"systemDelete\"|\"systemUndelete\"|\"freeze\"|\"consensusCreateTopic\"|\"consensusUpdateTopic\"|\"consensusDeleteTopic\"|\"consensusSubmitMessage\"|\"uncheckedSubmit\"|\"tokenCreation\"|\"tokenFreeze\"|\"tokenUnfreeze\"|\"tokenGrantKyc\"|\"tokenRevokeKyc\"|\"tokenDeletion\"|\"tokenUpdate\"|\"tokenMint\"|\"tokenBurn\"|\"tokenWipe\"|\"tokenAssociate\"|\"tokenDissociate\"|undefined} data\n         * @memberof proto.TransactionBody\n         * @instance\n         */\n        Object.defineProperty(TransactionBody.prototype, \"data\", {\n            get: $util.oneOfGetter($oneOfFields = [\"contractCall\", \"contractCreateInstance\", \"contractUpdateInstance\", \"contractDeleteInstance\", \"cryptoAddLiveHash\", \"cryptoCreateAccount\", \"cryptoDelete\", \"cryptoDeleteLiveHash\", \"cryptoTransfer\", \"cryptoUpdateAccount\", \"fileAppend\", \"fileCreate\", \"fileDelete\", \"fileUpdate\", \"systemDelete\", \"systemUndelete\", \"freeze\", \"consensusCreateTopic\", \"consensusUpdateTopic\", \"consensusDeleteTopic\", \"consensusSubmitMessage\", \"uncheckedSubmit\", \"tokenCreation\", \"tokenFreeze\", \"tokenUnfreeze\", \"tokenGrantKyc\", \"tokenRevokeKyc\", \"tokenDeletion\", \"tokenUpdate\", \"tokenMint\", \"tokenBurn\", \"tokenWipe\", \"tokenAssociate\", \"tokenDissociate\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionBody\n         * @static\n         * @param {proto.ITransactionBody=} [properties] Properties to set\n         * @returns {proto.TransactionBody} TransactionBody instance\n         */\n        TransactionBody.create = function create(properties) {\n            return new TransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionBody message. Does not implicitly {@link proto.TransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionBody\n         * @static\n         * @param {proto.ITransactionBody} m TransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.transactionID != null && Object.hasOwnProperty.call(m, \"transactionID\"))\n                $root.proto.TransactionID.encode(m.transactionID, w.uint32(10).fork()).ldelim();\n            if (m.nodeAccountID != null && Object.hasOwnProperty.call(m, \"nodeAccountID\"))\n                $root.proto.AccountID.encode(m.nodeAccountID, w.uint32(18).fork()).ldelim();\n            if (m.transactionFee != null && Object.hasOwnProperty.call(m, \"transactionFee\"))\n                w.uint32(24).uint64(m.transactionFee);\n            if (m.transactionValidDuration != null && Object.hasOwnProperty.call(m, \"transactionValidDuration\"))\n                $root.proto.Duration.encode(m.transactionValidDuration, w.uint32(34).fork()).ldelim();\n            if (m.generateRecord != null && Object.hasOwnProperty.call(m, \"generateRecord\"))\n                w.uint32(40).bool(m.generateRecord);\n            if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                w.uint32(50).string(m.memo);\n            if (m.contractCall != null && Object.hasOwnProperty.call(m, \"contractCall\"))\n                $root.proto.ContractCallTransactionBody.encode(m.contractCall, w.uint32(58).fork()).ldelim();\n            if (m.contractCreateInstance != null && Object.hasOwnProperty.call(m, \"contractCreateInstance\"))\n                $root.proto.ContractCreateTransactionBody.encode(m.contractCreateInstance, w.uint32(66).fork()).ldelim();\n            if (m.contractUpdateInstance != null && Object.hasOwnProperty.call(m, \"contractUpdateInstance\"))\n                $root.proto.ContractUpdateTransactionBody.encode(m.contractUpdateInstance, w.uint32(74).fork()).ldelim();\n            if (m.cryptoAddLiveHash != null && Object.hasOwnProperty.call(m, \"cryptoAddLiveHash\"))\n                $root.proto.CryptoAddLiveHashTransactionBody.encode(m.cryptoAddLiveHash, w.uint32(82).fork()).ldelim();\n            if (m.cryptoCreateAccount != null && Object.hasOwnProperty.call(m, \"cryptoCreateAccount\"))\n                $root.proto.CryptoCreateTransactionBody.encode(m.cryptoCreateAccount, w.uint32(90).fork()).ldelim();\n            if (m.cryptoDelete != null && Object.hasOwnProperty.call(m, \"cryptoDelete\"))\n                $root.proto.CryptoDeleteTransactionBody.encode(m.cryptoDelete, w.uint32(98).fork()).ldelim();\n            if (m.cryptoDeleteLiveHash != null && Object.hasOwnProperty.call(m, \"cryptoDeleteLiveHash\"))\n                $root.proto.CryptoDeleteLiveHashTransactionBody.encode(m.cryptoDeleteLiveHash, w.uint32(106).fork()).ldelim();\n            if (m.cryptoTransfer != null && Object.hasOwnProperty.call(m, \"cryptoTransfer\"))\n                $root.proto.CryptoTransferTransactionBody.encode(m.cryptoTransfer, w.uint32(114).fork()).ldelim();\n            if (m.cryptoUpdateAccount != null && Object.hasOwnProperty.call(m, \"cryptoUpdateAccount\"))\n                $root.proto.CryptoUpdateTransactionBody.encode(m.cryptoUpdateAccount, w.uint32(122).fork()).ldelim();\n            if (m.fileAppend != null && Object.hasOwnProperty.call(m, \"fileAppend\"))\n                $root.proto.FileAppendTransactionBody.encode(m.fileAppend, w.uint32(130).fork()).ldelim();\n            if (m.fileCreate != null && Object.hasOwnProperty.call(m, \"fileCreate\"))\n                $root.proto.FileCreateTransactionBody.encode(m.fileCreate, w.uint32(138).fork()).ldelim();\n            if (m.fileDelete != null && Object.hasOwnProperty.call(m, \"fileDelete\"))\n                $root.proto.FileDeleteTransactionBody.encode(m.fileDelete, w.uint32(146).fork()).ldelim();\n            if (m.fileUpdate != null && Object.hasOwnProperty.call(m, \"fileUpdate\"))\n                $root.proto.FileUpdateTransactionBody.encode(m.fileUpdate, w.uint32(154).fork()).ldelim();\n            if (m.systemDelete != null && Object.hasOwnProperty.call(m, \"systemDelete\"))\n                $root.proto.SystemDeleteTransactionBody.encode(m.systemDelete, w.uint32(162).fork()).ldelim();\n            if (m.systemUndelete != null && Object.hasOwnProperty.call(m, \"systemUndelete\"))\n                $root.proto.SystemUndeleteTransactionBody.encode(m.systemUndelete, w.uint32(170).fork()).ldelim();\n            if (m.contractDeleteInstance != null && Object.hasOwnProperty.call(m, \"contractDeleteInstance\"))\n                $root.proto.ContractDeleteTransactionBody.encode(m.contractDeleteInstance, w.uint32(178).fork()).ldelim();\n            if (m.freeze != null && Object.hasOwnProperty.call(m, \"freeze\"))\n                $root.proto.FreezeTransactionBody.encode(m.freeze, w.uint32(186).fork()).ldelim();\n            if (m.consensusCreateTopic != null && Object.hasOwnProperty.call(m, \"consensusCreateTopic\"))\n                $root.proto.ConsensusCreateTopicTransactionBody.encode(m.consensusCreateTopic, w.uint32(194).fork()).ldelim();\n            if (m.consensusUpdateTopic != null && Object.hasOwnProperty.call(m, \"consensusUpdateTopic\"))\n                $root.proto.ConsensusUpdateTopicTransactionBody.encode(m.consensusUpdateTopic, w.uint32(202).fork()).ldelim();\n            if (m.consensusDeleteTopic != null && Object.hasOwnProperty.call(m, \"consensusDeleteTopic\"))\n                $root.proto.ConsensusDeleteTopicTransactionBody.encode(m.consensusDeleteTopic, w.uint32(210).fork()).ldelim();\n            if (m.consensusSubmitMessage != null && Object.hasOwnProperty.call(m, \"consensusSubmitMessage\"))\n                $root.proto.ConsensusSubmitMessageTransactionBody.encode(m.consensusSubmitMessage, w.uint32(218).fork()).ldelim();\n            if (m.uncheckedSubmit != null && Object.hasOwnProperty.call(m, \"uncheckedSubmit\"))\n                $root.proto.UncheckedSubmitBody.encode(m.uncheckedSubmit, w.uint32(226).fork()).ldelim();\n            if (m.tokenCreation != null && Object.hasOwnProperty.call(m, \"tokenCreation\"))\n                $root.proto.TokenCreateTransactionBody.encode(m.tokenCreation, w.uint32(234).fork()).ldelim();\n            if (m.tokenFreeze != null && Object.hasOwnProperty.call(m, \"tokenFreeze\"))\n                $root.proto.TokenFreezeAccountTransactionBody.encode(m.tokenFreeze, w.uint32(250).fork()).ldelim();\n            if (m.tokenUnfreeze != null && Object.hasOwnProperty.call(m, \"tokenUnfreeze\"))\n                $root.proto.TokenUnfreezeAccountTransactionBody.encode(m.tokenUnfreeze, w.uint32(258).fork()).ldelim();\n            if (m.tokenGrantKyc != null && Object.hasOwnProperty.call(m, \"tokenGrantKyc\"))\n                $root.proto.TokenGrantKycTransactionBody.encode(m.tokenGrantKyc, w.uint32(266).fork()).ldelim();\n            if (m.tokenRevokeKyc != null && Object.hasOwnProperty.call(m, \"tokenRevokeKyc\"))\n                $root.proto.TokenRevokeKycTransactionBody.encode(m.tokenRevokeKyc, w.uint32(274).fork()).ldelim();\n            if (m.tokenDeletion != null && Object.hasOwnProperty.call(m, \"tokenDeletion\"))\n                $root.proto.TokenDeleteTransactionBody.encode(m.tokenDeletion, w.uint32(282).fork()).ldelim();\n            if (m.tokenUpdate != null && Object.hasOwnProperty.call(m, \"tokenUpdate\"))\n                $root.proto.TokenUpdateTransactionBody.encode(m.tokenUpdate, w.uint32(290).fork()).ldelim();\n            if (m.tokenMint != null && Object.hasOwnProperty.call(m, \"tokenMint\"))\n                $root.proto.TokenMintTransactionBody.encode(m.tokenMint, w.uint32(298).fork()).ldelim();\n            if (m.tokenBurn != null && Object.hasOwnProperty.call(m, \"tokenBurn\"))\n                $root.proto.TokenBurnTransactionBody.encode(m.tokenBurn, w.uint32(306).fork()).ldelim();\n            if (m.tokenWipe != null && Object.hasOwnProperty.call(m, \"tokenWipe\"))\n                $root.proto.TokenWipeAccountTransactionBody.encode(m.tokenWipe, w.uint32(314).fork()).ldelim();\n            if (m.tokenAssociate != null && Object.hasOwnProperty.call(m, \"tokenAssociate\"))\n                $root.proto.TokenAssociateTransactionBody.encode(m.tokenAssociate, w.uint32(322).fork()).ldelim();\n            if (m.tokenDissociate != null && Object.hasOwnProperty.call(m, \"tokenDissociate\"))\n                $root.proto.TokenDissociateTransactionBody.encode(m.tokenDissociate, w.uint32(330).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionBody} TransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.nodeAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.transactionFee = r.uint64();\n                    break;\n                case 4:\n                    m.transactionValidDuration = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.generateRecord = r.bool();\n                    break;\n                case 6:\n                    m.memo = r.string();\n                    break;\n                case 7:\n                    m.contractCall = $root.proto.ContractCallTransactionBody.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.contractCreateInstance = $root.proto.ContractCreateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.contractUpdateInstance = $root.proto.ContractUpdateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 22:\n                    m.contractDeleteInstance = $root.proto.ContractDeleteTransactionBody.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.cryptoAddLiveHash = $root.proto.CryptoAddLiveHashTransactionBody.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.cryptoCreateAccount = $root.proto.CryptoCreateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 12:\n                    m.cryptoDelete = $root.proto.CryptoDeleteTransactionBody.decode(r, r.uint32());\n                    break;\n                case 13:\n                    m.cryptoDeleteLiveHash = $root.proto.CryptoDeleteLiveHashTransactionBody.decode(r, r.uint32());\n                    break;\n                case 14:\n                    m.cryptoTransfer = $root.proto.CryptoTransferTransactionBody.decode(r, r.uint32());\n                    break;\n                case 15:\n                    m.cryptoUpdateAccount = $root.proto.CryptoUpdateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 16:\n                    m.fileAppend = $root.proto.FileAppendTransactionBody.decode(r, r.uint32());\n                    break;\n                case 17:\n                    m.fileCreate = $root.proto.FileCreateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 18:\n                    m.fileDelete = $root.proto.FileDeleteTransactionBody.decode(r, r.uint32());\n                    break;\n                case 19:\n                    m.fileUpdate = $root.proto.FileUpdateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 20:\n                    m.systemDelete = $root.proto.SystemDeleteTransactionBody.decode(r, r.uint32());\n                    break;\n                case 21:\n                    m.systemUndelete = $root.proto.SystemUndeleteTransactionBody.decode(r, r.uint32());\n                    break;\n                case 23:\n                    m.freeze = $root.proto.FreezeTransactionBody.decode(r, r.uint32());\n                    break;\n                case 24:\n                    m.consensusCreateTopic = $root.proto.ConsensusCreateTopicTransactionBody.decode(r, r.uint32());\n                    break;\n                case 25:\n                    m.consensusUpdateTopic = $root.proto.ConsensusUpdateTopicTransactionBody.decode(r, r.uint32());\n                    break;\n                case 26:\n                    m.consensusDeleteTopic = $root.proto.ConsensusDeleteTopicTransactionBody.decode(r, r.uint32());\n                    break;\n                case 27:\n                    m.consensusSubmitMessage = $root.proto.ConsensusSubmitMessageTransactionBody.decode(r, r.uint32());\n                    break;\n                case 28:\n                    m.uncheckedSubmit = $root.proto.UncheckedSubmitBody.decode(r, r.uint32());\n                    break;\n                case 29:\n                    m.tokenCreation = $root.proto.TokenCreateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 31:\n                    m.tokenFreeze = $root.proto.TokenFreezeAccountTransactionBody.decode(r, r.uint32());\n                    break;\n                case 32:\n                    m.tokenUnfreeze = $root.proto.TokenUnfreezeAccountTransactionBody.decode(r, r.uint32());\n                    break;\n                case 33:\n                    m.tokenGrantKyc = $root.proto.TokenGrantKycTransactionBody.decode(r, r.uint32());\n                    break;\n                case 34:\n                    m.tokenRevokeKyc = $root.proto.TokenRevokeKycTransactionBody.decode(r, r.uint32());\n                    break;\n                case 35:\n                    m.tokenDeletion = $root.proto.TokenDeleteTransactionBody.decode(r, r.uint32());\n                    break;\n                case 36:\n                    m.tokenUpdate = $root.proto.TokenUpdateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 37:\n                    m.tokenMint = $root.proto.TokenMintTransactionBody.decode(r, r.uint32());\n                    break;\n                case 38:\n                    m.tokenBurn = $root.proto.TokenBurnTransactionBody.decode(r, r.uint32());\n                    break;\n                case 39:\n                    m.tokenWipe = $root.proto.TokenWipeAccountTransactionBody.decode(r, r.uint32());\n                    break;\n                case 40:\n                    m.tokenAssociate = $root.proto.TokenAssociateTransactionBody.decode(r, r.uint32());\n                    break;\n                case 41:\n                    m.tokenDissociate = $root.proto.TokenDissociateTransactionBody.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionBody;\n    })();\n\n    proto.SystemDeleteTransactionBody = (function() {\n\n        /**\n         * Properties of a SystemDeleteTransactionBody.\n         * @memberof proto\n         * @interface ISystemDeleteTransactionBody\n         * @property {proto.IFileID|null} [fileID] SystemDeleteTransactionBody fileID\n         * @property {proto.IContractID|null} [contractID] SystemDeleteTransactionBody contractID\n         * @property {proto.ITimestampSeconds|null} [expirationTime] SystemDeleteTransactionBody expirationTime\n         */\n\n        /**\n         * Constructs a new SystemDeleteTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a SystemDeleteTransactionBody.\n         * @implements ISystemDeleteTransactionBody\n         * @constructor\n         * @param {proto.ISystemDeleteTransactionBody=} [p] Properties to set\n         */\n        function SystemDeleteTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * SystemDeleteTransactionBody fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.SystemDeleteTransactionBody\n         * @instance\n         */\n        SystemDeleteTransactionBody.prototype.fileID = null;\n\n        /**\n         * SystemDeleteTransactionBody contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.SystemDeleteTransactionBody\n         * @instance\n         */\n        SystemDeleteTransactionBody.prototype.contractID = null;\n\n        /**\n         * SystemDeleteTransactionBody expirationTime.\n         * @member {proto.ITimestampSeconds|null|undefined} expirationTime\n         * @memberof proto.SystemDeleteTransactionBody\n         * @instance\n         */\n        SystemDeleteTransactionBody.prototype.expirationTime = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * SystemDeleteTransactionBody id.\n         * @member {\"fileID\"|\"contractID\"|undefined} id\n         * @memberof proto.SystemDeleteTransactionBody\n         * @instance\n         */\n        Object.defineProperty(SystemDeleteTransactionBody.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"fileID\", \"contractID\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new SystemDeleteTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.SystemDeleteTransactionBody\n         * @static\n         * @param {proto.ISystemDeleteTransactionBody=} [properties] Properties to set\n         * @returns {proto.SystemDeleteTransactionBody} SystemDeleteTransactionBody instance\n         */\n        SystemDeleteTransactionBody.create = function create(properties) {\n            return new SystemDeleteTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified SystemDeleteTransactionBody message. Does not implicitly {@link proto.SystemDeleteTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.SystemDeleteTransactionBody\n         * @static\n         * @param {proto.ISystemDeleteTransactionBody} m SystemDeleteTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SystemDeleteTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();\n            if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                $root.proto.TimestampSeconds.encode(m.expirationTime, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a SystemDeleteTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.SystemDeleteTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.SystemDeleteTransactionBody} SystemDeleteTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SystemDeleteTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SystemDeleteTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.expirationTime = $root.proto.TimestampSeconds.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SystemDeleteTransactionBody;\n    })();\n\n    proto.SystemUndeleteTransactionBody = (function() {\n\n        /**\n         * Properties of a SystemUndeleteTransactionBody.\n         * @memberof proto\n         * @interface ISystemUndeleteTransactionBody\n         * @property {proto.IFileID|null} [fileID] SystemUndeleteTransactionBody fileID\n         * @property {proto.IContractID|null} [contractID] SystemUndeleteTransactionBody contractID\n         */\n\n        /**\n         * Constructs a new SystemUndeleteTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a SystemUndeleteTransactionBody.\n         * @implements ISystemUndeleteTransactionBody\n         * @constructor\n         * @param {proto.ISystemUndeleteTransactionBody=} [p] Properties to set\n         */\n        function SystemUndeleteTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * SystemUndeleteTransactionBody fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.SystemUndeleteTransactionBody\n         * @instance\n         */\n        SystemUndeleteTransactionBody.prototype.fileID = null;\n\n        /**\n         * SystemUndeleteTransactionBody contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.SystemUndeleteTransactionBody\n         * @instance\n         */\n        SystemUndeleteTransactionBody.prototype.contractID = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * SystemUndeleteTransactionBody id.\n         * @member {\"fileID\"|\"contractID\"|undefined} id\n         * @memberof proto.SystemUndeleteTransactionBody\n         * @instance\n         */\n        Object.defineProperty(SystemUndeleteTransactionBody.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"fileID\", \"contractID\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new SystemUndeleteTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.SystemUndeleteTransactionBody\n         * @static\n         * @param {proto.ISystemUndeleteTransactionBody=} [properties] Properties to set\n         * @returns {proto.SystemUndeleteTransactionBody} SystemUndeleteTransactionBody instance\n         */\n        SystemUndeleteTransactionBody.create = function create(properties) {\n            return new SystemUndeleteTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified SystemUndeleteTransactionBody message. Does not implicitly {@link proto.SystemUndeleteTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.SystemUndeleteTransactionBody\n         * @static\n         * @param {proto.ISystemUndeleteTransactionBody} m SystemUndeleteTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SystemUndeleteTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a SystemUndeleteTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.SystemUndeleteTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.SystemUndeleteTransactionBody} SystemUndeleteTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SystemUndeleteTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SystemUndeleteTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SystemUndeleteTransactionBody;\n    })();\n\n    proto.FreezeTransactionBody = (function() {\n\n        /**\n         * Properties of a FreezeTransactionBody.\n         * @memberof proto\n         * @interface IFreezeTransactionBody\n         * @property {number|null} [startHour] FreezeTransactionBody startHour\n         * @property {number|null} [startMin] FreezeTransactionBody startMin\n         * @property {number|null} [endHour] FreezeTransactionBody endHour\n         * @property {number|null} [endMin] FreezeTransactionBody endMin\n         * @property {proto.IFileID|null} [updateFile] FreezeTransactionBody updateFile\n         * @property {Uint8Array|null} [fileHash] FreezeTransactionBody fileHash\n         */\n\n        /**\n         * Constructs a new FreezeTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a FreezeTransactionBody.\n         * @implements IFreezeTransactionBody\n         * @constructor\n         * @param {proto.IFreezeTransactionBody=} [p] Properties to set\n         */\n        function FreezeTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FreezeTransactionBody startHour.\n         * @member {number} startHour\n         * @memberof proto.FreezeTransactionBody\n         * @instance\n         */\n        FreezeTransactionBody.prototype.startHour = 0;\n\n        /**\n         * FreezeTransactionBody startMin.\n         * @member {number} startMin\n         * @memberof proto.FreezeTransactionBody\n         * @instance\n         */\n        FreezeTransactionBody.prototype.startMin = 0;\n\n        /**\n         * FreezeTransactionBody endHour.\n         * @member {number} endHour\n         * @memberof proto.FreezeTransactionBody\n         * @instance\n         */\n        FreezeTransactionBody.prototype.endHour = 0;\n\n        /**\n         * FreezeTransactionBody endMin.\n         * @member {number} endMin\n         * @memberof proto.FreezeTransactionBody\n         * @instance\n         */\n        FreezeTransactionBody.prototype.endMin = 0;\n\n        /**\n         * FreezeTransactionBody updateFile.\n         * @member {proto.IFileID|null|undefined} updateFile\n         * @memberof proto.FreezeTransactionBody\n         * @instance\n         */\n        FreezeTransactionBody.prototype.updateFile = null;\n\n        /**\n         * FreezeTransactionBody fileHash.\n         * @member {Uint8Array} fileHash\n         * @memberof proto.FreezeTransactionBody\n         * @instance\n         */\n        FreezeTransactionBody.prototype.fileHash = $util.newBuffer([]);\n\n        /**\n         * Creates a new FreezeTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.FreezeTransactionBody\n         * @static\n         * @param {proto.IFreezeTransactionBody=} [properties] Properties to set\n         * @returns {proto.FreezeTransactionBody} FreezeTransactionBody instance\n         */\n        FreezeTransactionBody.create = function create(properties) {\n            return new FreezeTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified FreezeTransactionBody message. Does not implicitly {@link proto.FreezeTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FreezeTransactionBody\n         * @static\n         * @param {proto.IFreezeTransactionBody} m FreezeTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FreezeTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.startHour != null && Object.hasOwnProperty.call(m, \"startHour\"))\n                w.uint32(8).int32(m.startHour);\n            if (m.startMin != null && Object.hasOwnProperty.call(m, \"startMin\"))\n                w.uint32(16).int32(m.startMin);\n            if (m.endHour != null && Object.hasOwnProperty.call(m, \"endHour\"))\n                w.uint32(24).int32(m.endHour);\n            if (m.endMin != null && Object.hasOwnProperty.call(m, \"endMin\"))\n                w.uint32(32).int32(m.endMin);\n            if (m.updateFile != null && Object.hasOwnProperty.call(m, \"updateFile\"))\n                $root.proto.FileID.encode(m.updateFile, w.uint32(42).fork()).ldelim();\n            if (m.fileHash != null && Object.hasOwnProperty.call(m, \"fileHash\"))\n                w.uint32(50).bytes(m.fileHash);\n            return w;\n        };\n\n        /**\n         * Decodes a FreezeTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FreezeTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FreezeTransactionBody} FreezeTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FreezeTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FreezeTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.startHour = r.int32();\n                    break;\n                case 2:\n                    m.startMin = r.int32();\n                    break;\n                case 3:\n                    m.endHour = r.int32();\n                    break;\n                case 4:\n                    m.endMin = r.int32();\n                    break;\n                case 5:\n                    m.updateFile = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.fileHash = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FreezeTransactionBody;\n    })();\n\n    proto.ContractCallTransactionBody = (function() {\n\n        /**\n         * Properties of a ContractCallTransactionBody.\n         * @memberof proto\n         * @interface IContractCallTransactionBody\n         * @property {proto.IContractID|null} [contractID] ContractCallTransactionBody contractID\n         * @property {Long|null} [gas] ContractCallTransactionBody gas\n         * @property {Long|null} [amount] ContractCallTransactionBody amount\n         * @property {Uint8Array|null} [functionParameters] ContractCallTransactionBody functionParameters\n         */\n\n        /**\n         * Constructs a new ContractCallTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a ContractCallTransactionBody.\n         * @implements IContractCallTransactionBody\n         * @constructor\n         * @param {proto.IContractCallTransactionBody=} [p] Properties to set\n         */\n        function ContractCallTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractCallTransactionBody contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractCallTransactionBody\n         * @instance\n         */\n        ContractCallTransactionBody.prototype.contractID = null;\n\n        /**\n         * ContractCallTransactionBody gas.\n         * @member {Long} gas\n         * @memberof proto.ContractCallTransactionBody\n         * @instance\n         */\n        ContractCallTransactionBody.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ContractCallTransactionBody amount.\n         * @member {Long} amount\n         * @memberof proto.ContractCallTransactionBody\n         * @instance\n         */\n        ContractCallTransactionBody.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ContractCallTransactionBody functionParameters.\n         * @member {Uint8Array} functionParameters\n         * @memberof proto.ContractCallTransactionBody\n         * @instance\n         */\n        ContractCallTransactionBody.prototype.functionParameters = $util.newBuffer([]);\n\n        /**\n         * Creates a new ContractCallTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractCallTransactionBody\n         * @static\n         * @param {proto.IContractCallTransactionBody=} [properties] Properties to set\n         * @returns {proto.ContractCallTransactionBody} ContractCallTransactionBody instance\n         */\n        ContractCallTransactionBody.create = function create(properties) {\n            return new ContractCallTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified ContractCallTransactionBody message. Does not implicitly {@link proto.ContractCallTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractCallTransactionBody\n         * @static\n         * @param {proto.IContractCallTransactionBody} m ContractCallTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractCallTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();\n            if (m.gas != null && Object.hasOwnProperty.call(m, \"gas\"))\n                w.uint32(16).int64(m.gas);\n            if (m.amount != null && Object.hasOwnProperty.call(m, \"amount\"))\n                w.uint32(24).int64(m.amount);\n            if (m.functionParameters != null && Object.hasOwnProperty.call(m, \"functionParameters\"))\n                w.uint32(34).bytes(m.functionParameters);\n            return w;\n        };\n\n        /**\n         * Decodes a ContractCallTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractCallTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractCallTransactionBody} ContractCallTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractCallTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractCallTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.gas = r.int64();\n                    break;\n                case 3:\n                    m.amount = r.int64();\n                    break;\n                case 4:\n                    m.functionParameters = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractCallTransactionBody;\n    })();\n\n    proto.ContractCreateTransactionBody = (function() {\n\n        /**\n         * Properties of a ContractCreateTransactionBody.\n         * @memberof proto\n         * @interface IContractCreateTransactionBody\n         * @property {proto.IFileID|null} [fileID] ContractCreateTransactionBody fileID\n         * @property {proto.IKey|null} [adminKey] ContractCreateTransactionBody adminKey\n         * @property {Long|null} [gas] ContractCreateTransactionBody gas\n         * @property {Long|null} [initialBalance] ContractCreateTransactionBody initialBalance\n         * @property {proto.IAccountID|null} [proxyAccountID] ContractCreateTransactionBody proxyAccountID\n         * @property {proto.IDuration|null} [autoRenewPeriod] ContractCreateTransactionBody autoRenewPeriod\n         * @property {Uint8Array|null} [constructorParameters] ContractCreateTransactionBody constructorParameters\n         * @property {proto.IShardID|null} [shardID] ContractCreateTransactionBody shardID\n         * @property {proto.IRealmID|null} [realmID] ContractCreateTransactionBody realmID\n         * @property {proto.IKey|null} [newRealmAdminKey] ContractCreateTransactionBody newRealmAdminKey\n         * @property {string|null} [memo] ContractCreateTransactionBody memo\n         */\n\n        /**\n         * Constructs a new ContractCreateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a ContractCreateTransactionBody.\n         * @implements IContractCreateTransactionBody\n         * @constructor\n         * @param {proto.IContractCreateTransactionBody=} [p] Properties to set\n         */\n        function ContractCreateTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractCreateTransactionBody fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.fileID = null;\n\n        /**\n         * ContractCreateTransactionBody adminKey.\n         * @member {proto.IKey|null|undefined} adminKey\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.adminKey = null;\n\n        /**\n         * ContractCreateTransactionBody gas.\n         * @member {Long} gas\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ContractCreateTransactionBody initialBalance.\n         * @member {Long} initialBalance\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.initialBalance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ContractCreateTransactionBody proxyAccountID.\n         * @member {proto.IAccountID|null|undefined} proxyAccountID\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.proxyAccountID = null;\n\n        /**\n         * ContractCreateTransactionBody autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.autoRenewPeriod = null;\n\n        /**\n         * ContractCreateTransactionBody constructorParameters.\n         * @member {Uint8Array} constructorParameters\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.constructorParameters = $util.newBuffer([]);\n\n        /**\n         * ContractCreateTransactionBody shardID.\n         * @member {proto.IShardID|null|undefined} shardID\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.shardID = null;\n\n        /**\n         * ContractCreateTransactionBody realmID.\n         * @member {proto.IRealmID|null|undefined} realmID\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.realmID = null;\n\n        /**\n         * ContractCreateTransactionBody newRealmAdminKey.\n         * @member {proto.IKey|null|undefined} newRealmAdminKey\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.newRealmAdminKey = null;\n\n        /**\n         * ContractCreateTransactionBody memo.\n         * @member {string} memo\n         * @memberof proto.ContractCreateTransactionBody\n         * @instance\n         */\n        ContractCreateTransactionBody.prototype.memo = \"\";\n\n        /**\n         * Creates a new ContractCreateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractCreateTransactionBody\n         * @static\n         * @param {proto.IContractCreateTransactionBody=} [properties] Properties to set\n         * @returns {proto.ContractCreateTransactionBody} ContractCreateTransactionBody instance\n         */\n        ContractCreateTransactionBody.create = function create(properties) {\n            return new ContractCreateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified ContractCreateTransactionBody message. Does not implicitly {@link proto.ContractCreateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractCreateTransactionBody\n         * @static\n         * @param {proto.IContractCreateTransactionBody} m ContractCreateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractCreateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();\n            if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                $root.proto.Key.encode(m.adminKey, w.uint32(26).fork()).ldelim();\n            if (m.gas != null && Object.hasOwnProperty.call(m, \"gas\"))\n                w.uint32(32).int64(m.gas);\n            if (m.initialBalance != null && Object.hasOwnProperty.call(m, \"initialBalance\"))\n                w.uint32(40).int64(m.initialBalance);\n            if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, \"proxyAccountID\"))\n                $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(50).fork()).ldelim();\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(66).fork()).ldelim();\n            if (m.constructorParameters != null && Object.hasOwnProperty.call(m, \"constructorParameters\"))\n                w.uint32(74).bytes(m.constructorParameters);\n            if (m.shardID != null && Object.hasOwnProperty.call(m, \"shardID\"))\n                $root.proto.ShardID.encode(m.shardID, w.uint32(82).fork()).ldelim();\n            if (m.realmID != null && Object.hasOwnProperty.call(m, \"realmID\"))\n                $root.proto.RealmID.encode(m.realmID, w.uint32(90).fork()).ldelim();\n            if (m.newRealmAdminKey != null && Object.hasOwnProperty.call(m, \"newRealmAdminKey\"))\n                $root.proto.Key.encode(m.newRealmAdminKey, w.uint32(98).fork()).ldelim();\n            if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                w.uint32(106).string(m.memo);\n            return w;\n        };\n\n        /**\n         * Decodes a ContractCreateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractCreateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractCreateTransactionBody} ContractCreateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractCreateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractCreateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.gas = r.int64();\n                    break;\n                case 5:\n                    m.initialBalance = r.int64();\n                    break;\n                case 6:\n                    m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.constructorParameters = r.bytes();\n                    break;\n                case 10:\n                    m.shardID = $root.proto.ShardID.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.realmID = $root.proto.RealmID.decode(r, r.uint32());\n                    break;\n                case 12:\n                    m.newRealmAdminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 13:\n                    m.memo = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractCreateTransactionBody;\n    })();\n\n    proto.ContractUpdateTransactionBody = (function() {\n\n        /**\n         * Properties of a ContractUpdateTransactionBody.\n         * @memberof proto\n         * @interface IContractUpdateTransactionBody\n         * @property {proto.IContractID|null} [contractID] ContractUpdateTransactionBody contractID\n         * @property {proto.ITimestamp|null} [expirationTime] ContractUpdateTransactionBody expirationTime\n         * @property {proto.IKey|null} [adminKey] ContractUpdateTransactionBody adminKey\n         * @property {proto.IAccountID|null} [proxyAccountID] ContractUpdateTransactionBody proxyAccountID\n         * @property {proto.IDuration|null} [autoRenewPeriod] ContractUpdateTransactionBody autoRenewPeriod\n         * @property {proto.IFileID|null} [fileID] ContractUpdateTransactionBody fileID\n         * @property {string|null} [memo] ContractUpdateTransactionBody memo\n         */\n\n        /**\n         * Constructs a new ContractUpdateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a ContractUpdateTransactionBody.\n         * @implements IContractUpdateTransactionBody\n         * @constructor\n         * @param {proto.IContractUpdateTransactionBody=} [p] Properties to set\n         */\n        function ContractUpdateTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractUpdateTransactionBody contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractUpdateTransactionBody\n         * @instance\n         */\n        ContractUpdateTransactionBody.prototype.contractID = null;\n\n        /**\n         * ContractUpdateTransactionBody expirationTime.\n         * @member {proto.ITimestamp|null|undefined} expirationTime\n         * @memberof proto.ContractUpdateTransactionBody\n         * @instance\n         */\n        ContractUpdateTransactionBody.prototype.expirationTime = null;\n\n        /**\n         * ContractUpdateTransactionBody adminKey.\n         * @member {proto.IKey|null|undefined} adminKey\n         * @memberof proto.ContractUpdateTransactionBody\n         * @instance\n         */\n        ContractUpdateTransactionBody.prototype.adminKey = null;\n\n        /**\n         * ContractUpdateTransactionBody proxyAccountID.\n         * @member {proto.IAccountID|null|undefined} proxyAccountID\n         * @memberof proto.ContractUpdateTransactionBody\n         * @instance\n         */\n        ContractUpdateTransactionBody.prototype.proxyAccountID = null;\n\n        /**\n         * ContractUpdateTransactionBody autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.ContractUpdateTransactionBody\n         * @instance\n         */\n        ContractUpdateTransactionBody.prototype.autoRenewPeriod = null;\n\n        /**\n         * ContractUpdateTransactionBody fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.ContractUpdateTransactionBody\n         * @instance\n         */\n        ContractUpdateTransactionBody.prototype.fileID = null;\n\n        /**\n         * ContractUpdateTransactionBody memo.\n         * @member {string} memo\n         * @memberof proto.ContractUpdateTransactionBody\n         * @instance\n         */\n        ContractUpdateTransactionBody.prototype.memo = \"\";\n\n        /**\n         * Creates a new ContractUpdateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractUpdateTransactionBody\n         * @static\n         * @param {proto.IContractUpdateTransactionBody=} [properties] Properties to set\n         * @returns {proto.ContractUpdateTransactionBody} ContractUpdateTransactionBody instance\n         */\n        ContractUpdateTransactionBody.create = function create(properties) {\n            return new ContractUpdateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified ContractUpdateTransactionBody message. Does not implicitly {@link proto.ContractUpdateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractUpdateTransactionBody\n         * @static\n         * @param {proto.IContractUpdateTransactionBody} m ContractUpdateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractUpdateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();\n            if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                $root.proto.Timestamp.encode(m.expirationTime, w.uint32(18).fork()).ldelim();\n            if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                $root.proto.Key.encode(m.adminKey, w.uint32(26).fork()).ldelim();\n            if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, \"proxyAccountID\"))\n                $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(50).fork()).ldelim();\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(58).fork()).ldelim();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(66).fork()).ldelim();\n            if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                w.uint32(74).string(m.memo);\n            return w;\n        };\n\n        /**\n         * Decodes a ContractUpdateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractUpdateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractUpdateTransactionBody} ContractUpdateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractUpdateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractUpdateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.memo = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractUpdateTransactionBody;\n    })();\n\n    proto.LiveHash = (function() {\n\n        /**\n         * Properties of a LiveHash.\n         * @memberof proto\n         * @interface ILiveHash\n         * @property {proto.IAccountID|null} [accountId] LiveHash accountId\n         * @property {Uint8Array|null} [hash] LiveHash hash\n         * @property {proto.IKeyList|null} [keys] LiveHash keys\n         * @property {proto.IDuration|null} [duration] LiveHash duration\n         */\n\n        /**\n         * Constructs a new LiveHash.\n         * @memberof proto\n         * @classdesc Represents a LiveHash.\n         * @implements ILiveHash\n         * @constructor\n         * @param {proto.ILiveHash=} [p] Properties to set\n         */\n        function LiveHash(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * LiveHash accountId.\n         * @member {proto.IAccountID|null|undefined} accountId\n         * @memberof proto.LiveHash\n         * @instance\n         */\n        LiveHash.prototype.accountId = null;\n\n        /**\n         * LiveHash hash.\n         * @member {Uint8Array} hash\n         * @memberof proto.LiveHash\n         * @instance\n         */\n        LiveHash.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * LiveHash keys.\n         * @member {proto.IKeyList|null|undefined} keys\n         * @memberof proto.LiveHash\n         * @instance\n         */\n        LiveHash.prototype.keys = null;\n\n        /**\n         * LiveHash duration.\n         * @member {proto.IDuration|null|undefined} duration\n         * @memberof proto.LiveHash\n         * @instance\n         */\n        LiveHash.prototype.duration = null;\n\n        /**\n         * Creates a new LiveHash instance using the specified properties.\n         * @function create\n         * @memberof proto.LiveHash\n         * @static\n         * @param {proto.ILiveHash=} [properties] Properties to set\n         * @returns {proto.LiveHash} LiveHash instance\n         */\n        LiveHash.create = function create(properties) {\n            return new LiveHash(properties);\n        };\n\n        /**\n         * Encodes the specified LiveHash message. Does not implicitly {@link proto.LiveHash.verify|verify} messages.\n         * @function encode\n         * @memberof proto.LiveHash\n         * @static\n         * @param {proto.ILiveHash} m LiveHash message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LiveHash.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountId != null && Object.hasOwnProperty.call(m, \"accountId\"))\n                $root.proto.AccountID.encode(m.accountId, w.uint32(10).fork()).ldelim();\n            if (m.hash != null && Object.hasOwnProperty.call(m, \"hash\"))\n                w.uint32(18).bytes(m.hash);\n            if (m.keys != null && Object.hasOwnProperty.call(m, \"keys\"))\n                $root.proto.KeyList.encode(m.keys, w.uint32(26).fork()).ldelim();\n            if (m.duration != null && Object.hasOwnProperty.call(m, \"duration\"))\n                $root.proto.Duration.encode(m.duration, w.uint32(42).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a LiveHash message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.LiveHash\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.LiveHash} LiveHash\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LiveHash.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.LiveHash();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.accountId = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.hash = r.bytes();\n                    break;\n                case 3:\n                    m.keys = $root.proto.KeyList.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.duration = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return LiveHash;\n    })();\n\n    proto.CryptoAddLiveHashTransactionBody = (function() {\n\n        /**\n         * Properties of a CryptoAddLiveHashTransactionBody.\n         * @memberof proto\n         * @interface ICryptoAddLiveHashTransactionBody\n         * @property {proto.ILiveHash|null} [liveHash] CryptoAddLiveHashTransactionBody liveHash\n         */\n\n        /**\n         * Constructs a new CryptoAddLiveHashTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a CryptoAddLiveHashTransactionBody.\n         * @implements ICryptoAddLiveHashTransactionBody\n         * @constructor\n         * @param {proto.ICryptoAddLiveHashTransactionBody=} [p] Properties to set\n         */\n        function CryptoAddLiveHashTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoAddLiveHashTransactionBody liveHash.\n         * @member {proto.ILiveHash|null|undefined} liveHash\n         * @memberof proto.CryptoAddLiveHashTransactionBody\n         * @instance\n         */\n        CryptoAddLiveHashTransactionBody.prototype.liveHash = null;\n\n        /**\n         * Creates a new CryptoAddLiveHashTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoAddLiveHashTransactionBody\n         * @static\n         * @param {proto.ICryptoAddLiveHashTransactionBody=} [properties] Properties to set\n         * @returns {proto.CryptoAddLiveHashTransactionBody} CryptoAddLiveHashTransactionBody instance\n         */\n        CryptoAddLiveHashTransactionBody.create = function create(properties) {\n            return new CryptoAddLiveHashTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoAddLiveHashTransactionBody message. Does not implicitly {@link proto.CryptoAddLiveHashTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoAddLiveHashTransactionBody\n         * @static\n         * @param {proto.ICryptoAddLiveHashTransactionBody} m CryptoAddLiveHashTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoAddLiveHashTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.liveHash != null && Object.hasOwnProperty.call(m, \"liveHash\"))\n                $root.proto.LiveHash.encode(m.liveHash, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoAddLiveHashTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoAddLiveHashTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoAddLiveHashTransactionBody} CryptoAddLiveHashTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoAddLiveHashTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoAddLiveHashTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 3:\n                    m.liveHash = $root.proto.LiveHash.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoAddLiveHashTransactionBody;\n    })();\n\n    proto.CryptoCreateTransactionBody = (function() {\n\n        /**\n         * Properties of a CryptoCreateTransactionBody.\n         * @memberof proto\n         * @interface ICryptoCreateTransactionBody\n         * @property {proto.IKey|null} [key] CryptoCreateTransactionBody key\n         * @property {Long|null} [initialBalance] CryptoCreateTransactionBody initialBalance\n         * @property {proto.IAccountID|null} [proxyAccountID] CryptoCreateTransactionBody proxyAccountID\n         * @property {Long|null} [sendRecordThreshold] CryptoCreateTransactionBody sendRecordThreshold\n         * @property {Long|null} [receiveRecordThreshold] CryptoCreateTransactionBody receiveRecordThreshold\n         * @property {boolean|null} [receiverSigRequired] CryptoCreateTransactionBody receiverSigRequired\n         * @property {proto.IDuration|null} [autoRenewPeriod] CryptoCreateTransactionBody autoRenewPeriod\n         * @property {proto.IShardID|null} [shardID] CryptoCreateTransactionBody shardID\n         * @property {proto.IRealmID|null} [realmID] CryptoCreateTransactionBody realmID\n         * @property {proto.IKey|null} [newRealmAdminKey] CryptoCreateTransactionBody newRealmAdminKey\n         */\n\n        /**\n         * Constructs a new CryptoCreateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a CryptoCreateTransactionBody.\n         * @implements ICryptoCreateTransactionBody\n         * @constructor\n         * @param {proto.ICryptoCreateTransactionBody=} [p] Properties to set\n         */\n        function CryptoCreateTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoCreateTransactionBody key.\n         * @member {proto.IKey|null|undefined} key\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.key = null;\n\n        /**\n         * CryptoCreateTransactionBody initialBalance.\n         * @member {Long} initialBalance\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.initialBalance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CryptoCreateTransactionBody proxyAccountID.\n         * @member {proto.IAccountID|null|undefined} proxyAccountID\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.proxyAccountID = null;\n\n        /**\n         * CryptoCreateTransactionBody sendRecordThreshold.\n         * @member {Long} sendRecordThreshold\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.sendRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CryptoCreateTransactionBody receiveRecordThreshold.\n         * @member {Long} receiveRecordThreshold\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.receiveRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CryptoCreateTransactionBody receiverSigRequired.\n         * @member {boolean} receiverSigRequired\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.receiverSigRequired = false;\n\n        /**\n         * CryptoCreateTransactionBody autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.autoRenewPeriod = null;\n\n        /**\n         * CryptoCreateTransactionBody shardID.\n         * @member {proto.IShardID|null|undefined} shardID\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.shardID = null;\n\n        /**\n         * CryptoCreateTransactionBody realmID.\n         * @member {proto.IRealmID|null|undefined} realmID\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.realmID = null;\n\n        /**\n         * CryptoCreateTransactionBody newRealmAdminKey.\n         * @member {proto.IKey|null|undefined} newRealmAdminKey\n         * @memberof proto.CryptoCreateTransactionBody\n         * @instance\n         */\n        CryptoCreateTransactionBody.prototype.newRealmAdminKey = null;\n\n        /**\n         * Creates a new CryptoCreateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoCreateTransactionBody\n         * @static\n         * @param {proto.ICryptoCreateTransactionBody=} [properties] Properties to set\n         * @returns {proto.CryptoCreateTransactionBody} CryptoCreateTransactionBody instance\n         */\n        CryptoCreateTransactionBody.create = function create(properties) {\n            return new CryptoCreateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoCreateTransactionBody message. Does not implicitly {@link proto.CryptoCreateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoCreateTransactionBody\n         * @static\n         * @param {proto.ICryptoCreateTransactionBody} m CryptoCreateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoCreateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n                $root.proto.Key.encode(m.key, w.uint32(10).fork()).ldelim();\n            if (m.initialBalance != null && Object.hasOwnProperty.call(m, \"initialBalance\"))\n                w.uint32(16).uint64(m.initialBalance);\n            if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, \"proxyAccountID\"))\n                $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(26).fork()).ldelim();\n            if (m.sendRecordThreshold != null && Object.hasOwnProperty.call(m, \"sendRecordThreshold\"))\n                w.uint32(48).uint64(m.sendRecordThreshold);\n            if (m.receiveRecordThreshold != null && Object.hasOwnProperty.call(m, \"receiveRecordThreshold\"))\n                w.uint32(56).uint64(m.receiveRecordThreshold);\n            if (m.receiverSigRequired != null && Object.hasOwnProperty.call(m, \"receiverSigRequired\"))\n                w.uint32(64).bool(m.receiverSigRequired);\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(74).fork()).ldelim();\n            if (m.shardID != null && Object.hasOwnProperty.call(m, \"shardID\"))\n                $root.proto.ShardID.encode(m.shardID, w.uint32(82).fork()).ldelim();\n            if (m.realmID != null && Object.hasOwnProperty.call(m, \"realmID\"))\n                $root.proto.RealmID.encode(m.realmID, w.uint32(90).fork()).ldelim();\n            if (m.newRealmAdminKey != null && Object.hasOwnProperty.call(m, \"newRealmAdminKey\"))\n                $root.proto.Key.encode(m.newRealmAdminKey, w.uint32(98).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoCreateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoCreateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoCreateTransactionBody} CryptoCreateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoCreateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoCreateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.key = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.initialBalance = r.uint64();\n                    break;\n                case 3:\n                    m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.sendRecordThreshold = r.uint64();\n                    break;\n                case 7:\n                    m.receiveRecordThreshold = r.uint64();\n                    break;\n                case 8:\n                    m.receiverSigRequired = r.bool();\n                    break;\n                case 9:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.shardID = $root.proto.ShardID.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.realmID = $root.proto.RealmID.decode(r, r.uint32());\n                    break;\n                case 12:\n                    m.newRealmAdminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoCreateTransactionBody;\n    })();\n\n    proto.CryptoDeleteTransactionBody = (function() {\n\n        /**\n         * Properties of a CryptoDeleteTransactionBody.\n         * @memberof proto\n         * @interface ICryptoDeleteTransactionBody\n         * @property {proto.IAccountID|null} [transferAccountID] CryptoDeleteTransactionBody transferAccountID\n         * @property {proto.IAccountID|null} [deleteAccountID] CryptoDeleteTransactionBody deleteAccountID\n         */\n\n        /**\n         * Constructs a new CryptoDeleteTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a CryptoDeleteTransactionBody.\n         * @implements ICryptoDeleteTransactionBody\n         * @constructor\n         * @param {proto.ICryptoDeleteTransactionBody=} [p] Properties to set\n         */\n        function CryptoDeleteTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoDeleteTransactionBody transferAccountID.\n         * @member {proto.IAccountID|null|undefined} transferAccountID\n         * @memberof proto.CryptoDeleteTransactionBody\n         * @instance\n         */\n        CryptoDeleteTransactionBody.prototype.transferAccountID = null;\n\n        /**\n         * CryptoDeleteTransactionBody deleteAccountID.\n         * @member {proto.IAccountID|null|undefined} deleteAccountID\n         * @memberof proto.CryptoDeleteTransactionBody\n         * @instance\n         */\n        CryptoDeleteTransactionBody.prototype.deleteAccountID = null;\n\n        /**\n         * Creates a new CryptoDeleteTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoDeleteTransactionBody\n         * @static\n         * @param {proto.ICryptoDeleteTransactionBody=} [properties] Properties to set\n         * @returns {proto.CryptoDeleteTransactionBody} CryptoDeleteTransactionBody instance\n         */\n        CryptoDeleteTransactionBody.create = function create(properties) {\n            return new CryptoDeleteTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoDeleteTransactionBody message. Does not implicitly {@link proto.CryptoDeleteTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoDeleteTransactionBody\n         * @static\n         * @param {proto.ICryptoDeleteTransactionBody} m CryptoDeleteTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoDeleteTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.transferAccountID != null && Object.hasOwnProperty.call(m, \"transferAccountID\"))\n                $root.proto.AccountID.encode(m.transferAccountID, w.uint32(10).fork()).ldelim();\n            if (m.deleteAccountID != null && Object.hasOwnProperty.call(m, \"deleteAccountID\"))\n                $root.proto.AccountID.encode(m.deleteAccountID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoDeleteTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoDeleteTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoDeleteTransactionBody} CryptoDeleteTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoDeleteTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoDeleteTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.transferAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.deleteAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoDeleteTransactionBody;\n    })();\n\n    proto.CryptoDeleteLiveHashTransactionBody = (function() {\n\n        /**\n         * Properties of a CryptoDeleteLiveHashTransactionBody.\n         * @memberof proto\n         * @interface ICryptoDeleteLiveHashTransactionBody\n         * @property {proto.IAccountID|null} [accountOfLiveHash] CryptoDeleteLiveHashTransactionBody accountOfLiveHash\n         * @property {Uint8Array|null} [liveHashToDelete] CryptoDeleteLiveHashTransactionBody liveHashToDelete\n         */\n\n        /**\n         * Constructs a new CryptoDeleteLiveHashTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a CryptoDeleteLiveHashTransactionBody.\n         * @implements ICryptoDeleteLiveHashTransactionBody\n         * @constructor\n         * @param {proto.ICryptoDeleteLiveHashTransactionBody=} [p] Properties to set\n         */\n        function CryptoDeleteLiveHashTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoDeleteLiveHashTransactionBody accountOfLiveHash.\n         * @member {proto.IAccountID|null|undefined} accountOfLiveHash\n         * @memberof proto.CryptoDeleteLiveHashTransactionBody\n         * @instance\n         */\n        CryptoDeleteLiveHashTransactionBody.prototype.accountOfLiveHash = null;\n\n        /**\n         * CryptoDeleteLiveHashTransactionBody liveHashToDelete.\n         * @member {Uint8Array} liveHashToDelete\n         * @memberof proto.CryptoDeleteLiveHashTransactionBody\n         * @instance\n         */\n        CryptoDeleteLiveHashTransactionBody.prototype.liveHashToDelete = $util.newBuffer([]);\n\n        /**\n         * Creates a new CryptoDeleteLiveHashTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoDeleteLiveHashTransactionBody\n         * @static\n         * @param {proto.ICryptoDeleteLiveHashTransactionBody=} [properties] Properties to set\n         * @returns {proto.CryptoDeleteLiveHashTransactionBody} CryptoDeleteLiveHashTransactionBody instance\n         */\n        CryptoDeleteLiveHashTransactionBody.create = function create(properties) {\n            return new CryptoDeleteLiveHashTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoDeleteLiveHashTransactionBody message. Does not implicitly {@link proto.CryptoDeleteLiveHashTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoDeleteLiveHashTransactionBody\n         * @static\n         * @param {proto.ICryptoDeleteLiveHashTransactionBody} m CryptoDeleteLiveHashTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoDeleteLiveHashTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountOfLiveHash != null && Object.hasOwnProperty.call(m, \"accountOfLiveHash\"))\n                $root.proto.AccountID.encode(m.accountOfLiveHash, w.uint32(10).fork()).ldelim();\n            if (m.liveHashToDelete != null && Object.hasOwnProperty.call(m, \"liveHashToDelete\"))\n                w.uint32(18).bytes(m.liveHashToDelete);\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoDeleteLiveHashTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoDeleteLiveHashTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoDeleteLiveHashTransactionBody} CryptoDeleteLiveHashTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoDeleteLiveHashTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoDeleteLiveHashTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.accountOfLiveHash = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.liveHashToDelete = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoDeleteLiveHashTransactionBody;\n    })();\n\n    proto.CryptoTransferTransactionBody = (function() {\n\n        /**\n         * Properties of a CryptoTransferTransactionBody.\n         * @memberof proto\n         * @interface ICryptoTransferTransactionBody\n         * @property {proto.ITransferList|null} [transfers] CryptoTransferTransactionBody transfers\n         * @property {Array.<proto.ITokenTransferList>|null} [tokenTransfers] CryptoTransferTransactionBody tokenTransfers\n         */\n\n        /**\n         * Constructs a new CryptoTransferTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a CryptoTransferTransactionBody.\n         * @implements ICryptoTransferTransactionBody\n         * @constructor\n         * @param {proto.ICryptoTransferTransactionBody=} [p] Properties to set\n         */\n        function CryptoTransferTransactionBody(p) {\n            this.tokenTransfers = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoTransferTransactionBody transfers.\n         * @member {proto.ITransferList|null|undefined} transfers\n         * @memberof proto.CryptoTransferTransactionBody\n         * @instance\n         */\n        CryptoTransferTransactionBody.prototype.transfers = null;\n\n        /**\n         * CryptoTransferTransactionBody tokenTransfers.\n         * @member {Array.<proto.ITokenTransferList>} tokenTransfers\n         * @memberof proto.CryptoTransferTransactionBody\n         * @instance\n         */\n        CryptoTransferTransactionBody.prototype.tokenTransfers = $util.emptyArray;\n\n        /**\n         * Creates a new CryptoTransferTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoTransferTransactionBody\n         * @static\n         * @param {proto.ICryptoTransferTransactionBody=} [properties] Properties to set\n         * @returns {proto.CryptoTransferTransactionBody} CryptoTransferTransactionBody instance\n         */\n        CryptoTransferTransactionBody.create = function create(properties) {\n            return new CryptoTransferTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoTransferTransactionBody message. Does not implicitly {@link proto.CryptoTransferTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoTransferTransactionBody\n         * @static\n         * @param {proto.ICryptoTransferTransactionBody} m CryptoTransferTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoTransferTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.transfers != null && Object.hasOwnProperty.call(m, \"transfers\"))\n                $root.proto.TransferList.encode(m.transfers, w.uint32(10).fork()).ldelim();\n            if (m.tokenTransfers != null && m.tokenTransfers.length) {\n                for (var i = 0; i < m.tokenTransfers.length; ++i)\n                    $root.proto.TokenTransferList.encode(m.tokenTransfers[i], w.uint32(18).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoTransferTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoTransferTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoTransferTransactionBody} CryptoTransferTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoTransferTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoTransferTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.transfers = $root.proto.TransferList.decode(r, r.uint32());\n                    break;\n                case 2:\n                    if (!(m.tokenTransfers && m.tokenTransfers.length))\n                        m.tokenTransfers = [];\n                    m.tokenTransfers.push($root.proto.TokenTransferList.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoTransferTransactionBody;\n    })();\n\n    proto.CryptoUpdateTransactionBody = (function() {\n\n        /**\n         * Properties of a CryptoUpdateTransactionBody.\n         * @memberof proto\n         * @interface ICryptoUpdateTransactionBody\n         * @property {proto.IAccountID|null} [accountIDToUpdate] CryptoUpdateTransactionBody accountIDToUpdate\n         * @property {proto.IKey|null} [key] CryptoUpdateTransactionBody key\n         * @property {proto.IAccountID|null} [proxyAccountID] CryptoUpdateTransactionBody proxyAccountID\n         * @property {number|null} [proxyFraction] CryptoUpdateTransactionBody proxyFraction\n         * @property {Long|null} [sendRecordThreshold] CryptoUpdateTransactionBody sendRecordThreshold\n         * @property {google.protobuf.IUInt64Value|null} [sendRecordThresholdWrapper] CryptoUpdateTransactionBody sendRecordThresholdWrapper\n         * @property {Long|null} [receiveRecordThreshold] CryptoUpdateTransactionBody receiveRecordThreshold\n         * @property {google.protobuf.IUInt64Value|null} [receiveRecordThresholdWrapper] CryptoUpdateTransactionBody receiveRecordThresholdWrapper\n         * @property {proto.IDuration|null} [autoRenewPeriod] CryptoUpdateTransactionBody autoRenewPeriod\n         * @property {proto.ITimestamp|null} [expirationTime] CryptoUpdateTransactionBody expirationTime\n         * @property {boolean|null} [receiverSigRequired] CryptoUpdateTransactionBody receiverSigRequired\n         * @property {google.protobuf.IBoolValue|null} [receiverSigRequiredWrapper] CryptoUpdateTransactionBody receiverSigRequiredWrapper\n         */\n\n        /**\n         * Constructs a new CryptoUpdateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a CryptoUpdateTransactionBody.\n         * @implements ICryptoUpdateTransactionBody\n         * @constructor\n         * @param {proto.ICryptoUpdateTransactionBody=} [p] Properties to set\n         */\n        function CryptoUpdateTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoUpdateTransactionBody accountIDToUpdate.\n         * @member {proto.IAccountID|null|undefined} accountIDToUpdate\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.accountIDToUpdate = null;\n\n        /**\n         * CryptoUpdateTransactionBody key.\n         * @member {proto.IKey|null|undefined} key\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.key = null;\n\n        /**\n         * CryptoUpdateTransactionBody proxyAccountID.\n         * @member {proto.IAccountID|null|undefined} proxyAccountID\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.proxyAccountID = null;\n\n        /**\n         * CryptoUpdateTransactionBody proxyFraction.\n         * @member {number} proxyFraction\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.proxyFraction = 0;\n\n        /**\n         * CryptoUpdateTransactionBody sendRecordThreshold.\n         * @member {Long} sendRecordThreshold\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.sendRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CryptoUpdateTransactionBody sendRecordThresholdWrapper.\n         * @member {google.protobuf.IUInt64Value|null|undefined} sendRecordThresholdWrapper\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.sendRecordThresholdWrapper = null;\n\n        /**\n         * CryptoUpdateTransactionBody receiveRecordThreshold.\n         * @member {Long} receiveRecordThreshold\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.receiveRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CryptoUpdateTransactionBody receiveRecordThresholdWrapper.\n         * @member {google.protobuf.IUInt64Value|null|undefined} receiveRecordThresholdWrapper\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.receiveRecordThresholdWrapper = null;\n\n        /**\n         * CryptoUpdateTransactionBody autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.autoRenewPeriod = null;\n\n        /**\n         * CryptoUpdateTransactionBody expirationTime.\n         * @member {proto.ITimestamp|null|undefined} expirationTime\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.expirationTime = null;\n\n        /**\n         * CryptoUpdateTransactionBody receiverSigRequired.\n         * @member {boolean} receiverSigRequired\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.receiverSigRequired = false;\n\n        /**\n         * CryptoUpdateTransactionBody receiverSigRequiredWrapper.\n         * @member {google.protobuf.IBoolValue|null|undefined} receiverSigRequiredWrapper\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        CryptoUpdateTransactionBody.prototype.receiverSigRequiredWrapper = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * CryptoUpdateTransactionBody sendRecordThresholdField.\n         * @member {\"sendRecordThreshold\"|\"sendRecordThresholdWrapper\"|undefined} sendRecordThresholdField\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        Object.defineProperty(CryptoUpdateTransactionBody.prototype, \"sendRecordThresholdField\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sendRecordThreshold\", \"sendRecordThresholdWrapper\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * CryptoUpdateTransactionBody receiveRecordThresholdField.\n         * @member {\"receiveRecordThreshold\"|\"receiveRecordThresholdWrapper\"|undefined} receiveRecordThresholdField\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        Object.defineProperty(CryptoUpdateTransactionBody.prototype, \"receiveRecordThresholdField\", {\n            get: $util.oneOfGetter($oneOfFields = [\"receiveRecordThreshold\", \"receiveRecordThresholdWrapper\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * CryptoUpdateTransactionBody receiverSigRequiredField.\n         * @member {\"receiverSigRequired\"|\"receiverSigRequiredWrapper\"|undefined} receiverSigRequiredField\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @instance\n         */\n        Object.defineProperty(CryptoUpdateTransactionBody.prototype, \"receiverSigRequiredField\", {\n            get: $util.oneOfGetter($oneOfFields = [\"receiverSigRequired\", \"receiverSigRequiredWrapper\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CryptoUpdateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @static\n         * @param {proto.ICryptoUpdateTransactionBody=} [properties] Properties to set\n         * @returns {proto.CryptoUpdateTransactionBody} CryptoUpdateTransactionBody instance\n         */\n        CryptoUpdateTransactionBody.create = function create(properties) {\n            return new CryptoUpdateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoUpdateTransactionBody message. Does not implicitly {@link proto.CryptoUpdateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @static\n         * @param {proto.ICryptoUpdateTransactionBody} m CryptoUpdateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoUpdateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountIDToUpdate != null && Object.hasOwnProperty.call(m, \"accountIDToUpdate\"))\n                $root.proto.AccountID.encode(m.accountIDToUpdate, w.uint32(18).fork()).ldelim();\n            if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n                $root.proto.Key.encode(m.key, w.uint32(26).fork()).ldelim();\n            if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, \"proxyAccountID\"))\n                $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(34).fork()).ldelim();\n            if (m.proxyFraction != null && Object.hasOwnProperty.call(m, \"proxyFraction\"))\n                w.uint32(40).int32(m.proxyFraction);\n            if (m.sendRecordThreshold != null && Object.hasOwnProperty.call(m, \"sendRecordThreshold\"))\n                w.uint32(48).uint64(m.sendRecordThreshold);\n            if (m.receiveRecordThreshold != null && Object.hasOwnProperty.call(m, \"receiveRecordThreshold\"))\n                w.uint32(56).uint64(m.receiveRecordThreshold);\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(66).fork()).ldelim();\n            if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                $root.proto.Timestamp.encode(m.expirationTime, w.uint32(74).fork()).ldelim();\n            if (m.receiverSigRequired != null && Object.hasOwnProperty.call(m, \"receiverSigRequired\"))\n                w.uint32(80).bool(m.receiverSigRequired);\n            if (m.sendRecordThresholdWrapper != null && Object.hasOwnProperty.call(m, \"sendRecordThresholdWrapper\"))\n                $root.google.protobuf.UInt64Value.encode(m.sendRecordThresholdWrapper, w.uint32(90).fork()).ldelim();\n            if (m.receiveRecordThresholdWrapper != null && Object.hasOwnProperty.call(m, \"receiveRecordThresholdWrapper\"))\n                $root.google.protobuf.UInt64Value.encode(m.receiveRecordThresholdWrapper, w.uint32(98).fork()).ldelim();\n            if (m.receiverSigRequiredWrapper != null && Object.hasOwnProperty.call(m, \"receiverSigRequiredWrapper\"))\n                $root.google.protobuf.BoolValue.encode(m.receiverSigRequiredWrapper, w.uint32(106).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoUpdateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoUpdateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoUpdateTransactionBody} CryptoUpdateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoUpdateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoUpdateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 2:\n                    m.accountIDToUpdate = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.key = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.proxyFraction = r.int32();\n                    break;\n                case 6:\n                    m.sendRecordThreshold = r.uint64();\n                    break;\n                case 11:\n                    m.sendRecordThresholdWrapper = $root.google.protobuf.UInt64Value.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.receiveRecordThreshold = r.uint64();\n                    break;\n                case 12:\n                    m.receiveRecordThresholdWrapper = $root.google.protobuf.UInt64Value.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.receiverSigRequired = r.bool();\n                    break;\n                case 13:\n                    m.receiverSigRequiredWrapper = $root.google.protobuf.BoolValue.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoUpdateTransactionBody;\n    })();\n\n    proto.FileAppendTransactionBody = (function() {\n\n        /**\n         * Properties of a FileAppendTransactionBody.\n         * @memberof proto\n         * @interface IFileAppendTransactionBody\n         * @property {proto.IFileID|null} [fileID] FileAppendTransactionBody fileID\n         * @property {Uint8Array|null} [contents] FileAppendTransactionBody contents\n         */\n\n        /**\n         * Constructs a new FileAppendTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a FileAppendTransactionBody.\n         * @implements IFileAppendTransactionBody\n         * @constructor\n         * @param {proto.IFileAppendTransactionBody=} [p] Properties to set\n         */\n        function FileAppendTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileAppendTransactionBody fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.FileAppendTransactionBody\n         * @instance\n         */\n        FileAppendTransactionBody.prototype.fileID = null;\n\n        /**\n         * FileAppendTransactionBody contents.\n         * @member {Uint8Array} contents\n         * @memberof proto.FileAppendTransactionBody\n         * @instance\n         */\n        FileAppendTransactionBody.prototype.contents = $util.newBuffer([]);\n\n        /**\n         * Creates a new FileAppendTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.FileAppendTransactionBody\n         * @static\n         * @param {proto.IFileAppendTransactionBody=} [properties] Properties to set\n         * @returns {proto.FileAppendTransactionBody} FileAppendTransactionBody instance\n         */\n        FileAppendTransactionBody.create = function create(properties) {\n            return new FileAppendTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified FileAppendTransactionBody message. Does not implicitly {@link proto.FileAppendTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileAppendTransactionBody\n         * @static\n         * @param {proto.IFileAppendTransactionBody} m FileAppendTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileAppendTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(18).fork()).ldelim();\n            if (m.contents != null && Object.hasOwnProperty.call(m, \"contents\"))\n                w.uint32(34).bytes(m.contents);\n            return w;\n        };\n\n        /**\n         * Decodes a FileAppendTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileAppendTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileAppendTransactionBody} FileAppendTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileAppendTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileAppendTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 2:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.contents = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FileAppendTransactionBody;\n    })();\n\n    proto.FileCreateTransactionBody = (function() {\n\n        /**\n         * Properties of a FileCreateTransactionBody.\n         * @memberof proto\n         * @interface IFileCreateTransactionBody\n         * @property {proto.ITimestamp|null} [expirationTime] FileCreateTransactionBody expirationTime\n         * @property {proto.IKeyList|null} [keys] FileCreateTransactionBody keys\n         * @property {Uint8Array|null} [contents] FileCreateTransactionBody contents\n         * @property {proto.IShardID|null} [shardID] FileCreateTransactionBody shardID\n         * @property {proto.IRealmID|null} [realmID] FileCreateTransactionBody realmID\n         * @property {proto.IKey|null} [newRealmAdminKey] FileCreateTransactionBody newRealmAdminKey\n         */\n\n        /**\n         * Constructs a new FileCreateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a FileCreateTransactionBody.\n         * @implements IFileCreateTransactionBody\n         * @constructor\n         * @param {proto.IFileCreateTransactionBody=} [p] Properties to set\n         */\n        function FileCreateTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileCreateTransactionBody expirationTime.\n         * @member {proto.ITimestamp|null|undefined} expirationTime\n         * @memberof proto.FileCreateTransactionBody\n         * @instance\n         */\n        FileCreateTransactionBody.prototype.expirationTime = null;\n\n        /**\n         * FileCreateTransactionBody keys.\n         * @member {proto.IKeyList|null|undefined} keys\n         * @memberof proto.FileCreateTransactionBody\n         * @instance\n         */\n        FileCreateTransactionBody.prototype.keys = null;\n\n        /**\n         * FileCreateTransactionBody contents.\n         * @member {Uint8Array} contents\n         * @memberof proto.FileCreateTransactionBody\n         * @instance\n         */\n        FileCreateTransactionBody.prototype.contents = $util.newBuffer([]);\n\n        /**\n         * FileCreateTransactionBody shardID.\n         * @member {proto.IShardID|null|undefined} shardID\n         * @memberof proto.FileCreateTransactionBody\n         * @instance\n         */\n        FileCreateTransactionBody.prototype.shardID = null;\n\n        /**\n         * FileCreateTransactionBody realmID.\n         * @member {proto.IRealmID|null|undefined} realmID\n         * @memberof proto.FileCreateTransactionBody\n         * @instance\n         */\n        FileCreateTransactionBody.prototype.realmID = null;\n\n        /**\n         * FileCreateTransactionBody newRealmAdminKey.\n         * @member {proto.IKey|null|undefined} newRealmAdminKey\n         * @memberof proto.FileCreateTransactionBody\n         * @instance\n         */\n        FileCreateTransactionBody.prototype.newRealmAdminKey = null;\n\n        /**\n         * Creates a new FileCreateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.FileCreateTransactionBody\n         * @static\n         * @param {proto.IFileCreateTransactionBody=} [properties] Properties to set\n         * @returns {proto.FileCreateTransactionBody} FileCreateTransactionBody instance\n         */\n        FileCreateTransactionBody.create = function create(properties) {\n            return new FileCreateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified FileCreateTransactionBody message. Does not implicitly {@link proto.FileCreateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileCreateTransactionBody\n         * @static\n         * @param {proto.IFileCreateTransactionBody} m FileCreateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileCreateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                $root.proto.Timestamp.encode(m.expirationTime, w.uint32(18).fork()).ldelim();\n            if (m.keys != null && Object.hasOwnProperty.call(m, \"keys\"))\n                $root.proto.KeyList.encode(m.keys, w.uint32(26).fork()).ldelim();\n            if (m.contents != null && Object.hasOwnProperty.call(m, \"contents\"))\n                w.uint32(34).bytes(m.contents);\n            if (m.shardID != null && Object.hasOwnProperty.call(m, \"shardID\"))\n                $root.proto.ShardID.encode(m.shardID, w.uint32(42).fork()).ldelim();\n            if (m.realmID != null && Object.hasOwnProperty.call(m, \"realmID\"))\n                $root.proto.RealmID.encode(m.realmID, w.uint32(50).fork()).ldelim();\n            if (m.newRealmAdminKey != null && Object.hasOwnProperty.call(m, \"newRealmAdminKey\"))\n                $root.proto.Key.encode(m.newRealmAdminKey, w.uint32(58).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a FileCreateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileCreateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileCreateTransactionBody} FileCreateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileCreateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileCreateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 2:\n                    m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.keys = $root.proto.KeyList.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.contents = r.bytes();\n                    break;\n                case 5:\n                    m.shardID = $root.proto.ShardID.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.realmID = $root.proto.RealmID.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.newRealmAdminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FileCreateTransactionBody;\n    })();\n\n    proto.FileDeleteTransactionBody = (function() {\n\n        /**\n         * Properties of a FileDeleteTransactionBody.\n         * @memberof proto\n         * @interface IFileDeleteTransactionBody\n         * @property {proto.IFileID|null} [fileID] FileDeleteTransactionBody fileID\n         */\n\n        /**\n         * Constructs a new FileDeleteTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a FileDeleteTransactionBody.\n         * @implements IFileDeleteTransactionBody\n         * @constructor\n         * @param {proto.IFileDeleteTransactionBody=} [p] Properties to set\n         */\n        function FileDeleteTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileDeleteTransactionBody fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.FileDeleteTransactionBody\n         * @instance\n         */\n        FileDeleteTransactionBody.prototype.fileID = null;\n\n        /**\n         * Creates a new FileDeleteTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.FileDeleteTransactionBody\n         * @static\n         * @param {proto.IFileDeleteTransactionBody=} [properties] Properties to set\n         * @returns {proto.FileDeleteTransactionBody} FileDeleteTransactionBody instance\n         */\n        FileDeleteTransactionBody.create = function create(properties) {\n            return new FileDeleteTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified FileDeleteTransactionBody message. Does not implicitly {@link proto.FileDeleteTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileDeleteTransactionBody\n         * @static\n         * @param {proto.IFileDeleteTransactionBody} m FileDeleteTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileDeleteTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a FileDeleteTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileDeleteTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileDeleteTransactionBody} FileDeleteTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileDeleteTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileDeleteTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 2:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FileDeleteTransactionBody;\n    })();\n\n    proto.FileUpdateTransactionBody = (function() {\n\n        /**\n         * Properties of a FileUpdateTransactionBody.\n         * @memberof proto\n         * @interface IFileUpdateTransactionBody\n         * @property {proto.IFileID|null} [fileID] FileUpdateTransactionBody fileID\n         * @property {proto.ITimestamp|null} [expirationTime] FileUpdateTransactionBody expirationTime\n         * @property {proto.IKeyList|null} [keys] FileUpdateTransactionBody keys\n         * @property {Uint8Array|null} [contents] FileUpdateTransactionBody contents\n         */\n\n        /**\n         * Constructs a new FileUpdateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a FileUpdateTransactionBody.\n         * @implements IFileUpdateTransactionBody\n         * @constructor\n         * @param {proto.IFileUpdateTransactionBody=} [p] Properties to set\n         */\n        function FileUpdateTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileUpdateTransactionBody fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.FileUpdateTransactionBody\n         * @instance\n         */\n        FileUpdateTransactionBody.prototype.fileID = null;\n\n        /**\n         * FileUpdateTransactionBody expirationTime.\n         * @member {proto.ITimestamp|null|undefined} expirationTime\n         * @memberof proto.FileUpdateTransactionBody\n         * @instance\n         */\n        FileUpdateTransactionBody.prototype.expirationTime = null;\n\n        /**\n         * FileUpdateTransactionBody keys.\n         * @member {proto.IKeyList|null|undefined} keys\n         * @memberof proto.FileUpdateTransactionBody\n         * @instance\n         */\n        FileUpdateTransactionBody.prototype.keys = null;\n\n        /**\n         * FileUpdateTransactionBody contents.\n         * @member {Uint8Array} contents\n         * @memberof proto.FileUpdateTransactionBody\n         * @instance\n         */\n        FileUpdateTransactionBody.prototype.contents = $util.newBuffer([]);\n\n        /**\n         * Creates a new FileUpdateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.FileUpdateTransactionBody\n         * @static\n         * @param {proto.IFileUpdateTransactionBody=} [properties] Properties to set\n         * @returns {proto.FileUpdateTransactionBody} FileUpdateTransactionBody instance\n         */\n        FileUpdateTransactionBody.create = function create(properties) {\n            return new FileUpdateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified FileUpdateTransactionBody message. Does not implicitly {@link proto.FileUpdateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileUpdateTransactionBody\n         * @static\n         * @param {proto.IFileUpdateTransactionBody} m FileUpdateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileUpdateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();\n            if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                $root.proto.Timestamp.encode(m.expirationTime, w.uint32(18).fork()).ldelim();\n            if (m.keys != null && Object.hasOwnProperty.call(m, \"keys\"))\n                $root.proto.KeyList.encode(m.keys, w.uint32(26).fork()).ldelim();\n            if (m.contents != null && Object.hasOwnProperty.call(m, \"contents\"))\n                w.uint32(34).bytes(m.contents);\n            return w;\n        };\n\n        /**\n         * Decodes a FileUpdateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileUpdateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileUpdateTransactionBody} FileUpdateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileUpdateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileUpdateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.keys = $root.proto.KeyList.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.contents = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FileUpdateTransactionBody;\n    })();\n\n    proto.ContractDeleteTransactionBody = (function() {\n\n        /**\n         * Properties of a ContractDeleteTransactionBody.\n         * @memberof proto\n         * @interface IContractDeleteTransactionBody\n         * @property {proto.IContractID|null} [contractID] ContractDeleteTransactionBody contractID\n         * @property {proto.IAccountID|null} [transferAccountID] ContractDeleteTransactionBody transferAccountID\n         * @property {proto.IContractID|null} [transferContractID] ContractDeleteTransactionBody transferContractID\n         */\n\n        /**\n         * Constructs a new ContractDeleteTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a ContractDeleteTransactionBody.\n         * @implements IContractDeleteTransactionBody\n         * @constructor\n         * @param {proto.IContractDeleteTransactionBody=} [p] Properties to set\n         */\n        function ContractDeleteTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractDeleteTransactionBody contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractDeleteTransactionBody\n         * @instance\n         */\n        ContractDeleteTransactionBody.prototype.contractID = null;\n\n        /**\n         * ContractDeleteTransactionBody transferAccountID.\n         * @member {proto.IAccountID|null|undefined} transferAccountID\n         * @memberof proto.ContractDeleteTransactionBody\n         * @instance\n         */\n        ContractDeleteTransactionBody.prototype.transferAccountID = null;\n\n        /**\n         * ContractDeleteTransactionBody transferContractID.\n         * @member {proto.IContractID|null|undefined} transferContractID\n         * @memberof proto.ContractDeleteTransactionBody\n         * @instance\n         */\n        ContractDeleteTransactionBody.prototype.transferContractID = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ContractDeleteTransactionBody obtainers.\n         * @member {\"transferAccountID\"|\"transferContractID\"|undefined} obtainers\n         * @memberof proto.ContractDeleteTransactionBody\n         * @instance\n         */\n        Object.defineProperty(ContractDeleteTransactionBody.prototype, \"obtainers\", {\n            get: $util.oneOfGetter($oneOfFields = [\"transferAccountID\", \"transferContractID\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ContractDeleteTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractDeleteTransactionBody\n         * @static\n         * @param {proto.IContractDeleteTransactionBody=} [properties] Properties to set\n         * @returns {proto.ContractDeleteTransactionBody} ContractDeleteTransactionBody instance\n         */\n        ContractDeleteTransactionBody.create = function create(properties) {\n            return new ContractDeleteTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified ContractDeleteTransactionBody message. Does not implicitly {@link proto.ContractDeleteTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractDeleteTransactionBody\n         * @static\n         * @param {proto.IContractDeleteTransactionBody} m ContractDeleteTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractDeleteTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();\n            if (m.transferAccountID != null && Object.hasOwnProperty.call(m, \"transferAccountID\"))\n                $root.proto.AccountID.encode(m.transferAccountID, w.uint32(18).fork()).ldelim();\n            if (m.transferContractID != null && Object.hasOwnProperty.call(m, \"transferContractID\"))\n                $root.proto.ContractID.encode(m.transferContractID, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ContractDeleteTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractDeleteTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractDeleteTransactionBody} ContractDeleteTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractDeleteTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractDeleteTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.transferAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.transferContractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractDeleteTransactionBody;\n    })();\n\n    proto.ConsensusUpdateTopicTransactionBody = (function() {\n\n        /**\n         * Properties of a ConsensusUpdateTopicTransactionBody.\n         * @memberof proto\n         * @interface IConsensusUpdateTopicTransactionBody\n         * @property {proto.ITopicID|null} [topicID] ConsensusUpdateTopicTransactionBody topicID\n         * @property {google.protobuf.IStringValue|null} [memo] ConsensusUpdateTopicTransactionBody memo\n         * @property {proto.ITimestamp|null} [expirationTime] ConsensusUpdateTopicTransactionBody expirationTime\n         * @property {proto.IKey|null} [adminKey] ConsensusUpdateTopicTransactionBody adminKey\n         * @property {proto.IKey|null} [submitKey] ConsensusUpdateTopicTransactionBody submitKey\n         * @property {proto.IDuration|null} [autoRenewPeriod] ConsensusUpdateTopicTransactionBody autoRenewPeriod\n         * @property {proto.IAccountID|null} [autoRenewAccount] ConsensusUpdateTopicTransactionBody autoRenewAccount\n         */\n\n        /**\n         * Constructs a new ConsensusUpdateTopicTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a ConsensusUpdateTopicTransactionBody.\n         * @implements IConsensusUpdateTopicTransactionBody\n         * @constructor\n         * @param {proto.IConsensusUpdateTopicTransactionBody=} [p] Properties to set\n         */\n        function ConsensusUpdateTopicTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusUpdateTopicTransactionBody topicID.\n         * @member {proto.ITopicID|null|undefined} topicID\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @instance\n         */\n        ConsensusUpdateTopicTransactionBody.prototype.topicID = null;\n\n        /**\n         * ConsensusUpdateTopicTransactionBody memo.\n         * @member {google.protobuf.IStringValue|null|undefined} memo\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @instance\n         */\n        ConsensusUpdateTopicTransactionBody.prototype.memo = null;\n\n        /**\n         * ConsensusUpdateTopicTransactionBody expirationTime.\n         * @member {proto.ITimestamp|null|undefined} expirationTime\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @instance\n         */\n        ConsensusUpdateTopicTransactionBody.prototype.expirationTime = null;\n\n        /**\n         * ConsensusUpdateTopicTransactionBody adminKey.\n         * @member {proto.IKey|null|undefined} adminKey\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @instance\n         */\n        ConsensusUpdateTopicTransactionBody.prototype.adminKey = null;\n\n        /**\n         * ConsensusUpdateTopicTransactionBody submitKey.\n         * @member {proto.IKey|null|undefined} submitKey\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @instance\n         */\n        ConsensusUpdateTopicTransactionBody.prototype.submitKey = null;\n\n        /**\n         * ConsensusUpdateTopicTransactionBody autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @instance\n         */\n        ConsensusUpdateTopicTransactionBody.prototype.autoRenewPeriod = null;\n\n        /**\n         * ConsensusUpdateTopicTransactionBody autoRenewAccount.\n         * @member {proto.IAccountID|null|undefined} autoRenewAccount\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @instance\n         */\n        ConsensusUpdateTopicTransactionBody.prototype.autoRenewAccount = null;\n\n        /**\n         * Creates a new ConsensusUpdateTopicTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @static\n         * @param {proto.IConsensusUpdateTopicTransactionBody=} [properties] Properties to set\n         * @returns {proto.ConsensusUpdateTopicTransactionBody} ConsensusUpdateTopicTransactionBody instance\n         */\n        ConsensusUpdateTopicTransactionBody.create = function create(properties) {\n            return new ConsensusUpdateTopicTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusUpdateTopicTransactionBody message. Does not implicitly {@link proto.ConsensusUpdateTopicTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @static\n         * @param {proto.IConsensusUpdateTopicTransactionBody} m ConsensusUpdateTopicTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusUpdateTopicTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                $root.proto.TopicID.encode(m.topicID, w.uint32(10).fork()).ldelim();\n            if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                $root.google.protobuf.StringValue.encode(m.memo, w.uint32(18).fork()).ldelim();\n            if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                $root.proto.Timestamp.encode(m.expirationTime, w.uint32(34).fork()).ldelim();\n            if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                $root.proto.Key.encode(m.adminKey, w.uint32(50).fork()).ldelim();\n            if (m.submitKey != null && Object.hasOwnProperty.call(m, \"submitKey\"))\n                $root.proto.Key.encode(m.submitKey, w.uint32(58).fork()).ldelim();\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(66).fork()).ldelim();\n            if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, \"autoRenewAccount\"))\n                $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(74).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusUpdateTopicTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusUpdateTopicTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusUpdateTopicTransactionBody} ConsensusUpdateTopicTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusUpdateTopicTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusUpdateTopicTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.topicID = $root.proto.TopicID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.memo = $root.google.protobuf.StringValue.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.submitKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusUpdateTopicTransactionBody;\n    })();\n\n    proto.ConsensusMessageChunkInfo = (function() {\n\n        /**\n         * Properties of a ConsensusMessageChunkInfo.\n         * @memberof proto\n         * @interface IConsensusMessageChunkInfo\n         * @property {proto.ITransactionID|null} [initialTransactionID] ConsensusMessageChunkInfo initialTransactionID\n         * @property {number|null} [total] ConsensusMessageChunkInfo total\n         * @property {number|null} [number] ConsensusMessageChunkInfo number\n         */\n\n        /**\n         * Constructs a new ConsensusMessageChunkInfo.\n         * @memberof proto\n         * @classdesc Represents a ConsensusMessageChunkInfo.\n         * @implements IConsensusMessageChunkInfo\n         * @constructor\n         * @param {proto.IConsensusMessageChunkInfo=} [p] Properties to set\n         */\n        function ConsensusMessageChunkInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusMessageChunkInfo initialTransactionID.\n         * @member {proto.ITransactionID|null|undefined} initialTransactionID\n         * @memberof proto.ConsensusMessageChunkInfo\n         * @instance\n         */\n        ConsensusMessageChunkInfo.prototype.initialTransactionID = null;\n\n        /**\n         * ConsensusMessageChunkInfo total.\n         * @member {number} total\n         * @memberof proto.ConsensusMessageChunkInfo\n         * @instance\n         */\n        ConsensusMessageChunkInfo.prototype.total = 0;\n\n        /**\n         * ConsensusMessageChunkInfo number.\n         * @member {number} number\n         * @memberof proto.ConsensusMessageChunkInfo\n         * @instance\n         */\n        ConsensusMessageChunkInfo.prototype.number = 0;\n\n        /**\n         * Creates a new ConsensusMessageChunkInfo instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusMessageChunkInfo\n         * @static\n         * @param {proto.IConsensusMessageChunkInfo=} [properties] Properties to set\n         * @returns {proto.ConsensusMessageChunkInfo} ConsensusMessageChunkInfo instance\n         */\n        ConsensusMessageChunkInfo.create = function create(properties) {\n            return new ConsensusMessageChunkInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusMessageChunkInfo message. Does not implicitly {@link proto.ConsensusMessageChunkInfo.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusMessageChunkInfo\n         * @static\n         * @param {proto.IConsensusMessageChunkInfo} m ConsensusMessageChunkInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusMessageChunkInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.initialTransactionID != null && Object.hasOwnProperty.call(m, \"initialTransactionID\"))\n                $root.proto.TransactionID.encode(m.initialTransactionID, w.uint32(10).fork()).ldelim();\n            if (m.total != null && Object.hasOwnProperty.call(m, \"total\"))\n                w.uint32(16).int32(m.total);\n            if (m.number != null && Object.hasOwnProperty.call(m, \"number\"))\n                w.uint32(24).int32(m.number);\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusMessageChunkInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusMessageChunkInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusMessageChunkInfo} ConsensusMessageChunkInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusMessageChunkInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusMessageChunkInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.initialTransactionID = $root.proto.TransactionID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.total = r.int32();\n                    break;\n                case 3:\n                    m.number = r.int32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusMessageChunkInfo;\n    })();\n\n    proto.ConsensusSubmitMessageTransactionBody = (function() {\n\n        /**\n         * Properties of a ConsensusSubmitMessageTransactionBody.\n         * @memberof proto\n         * @interface IConsensusSubmitMessageTransactionBody\n         * @property {proto.ITopicID|null} [topicID] ConsensusSubmitMessageTransactionBody topicID\n         * @property {Uint8Array|null} [message] ConsensusSubmitMessageTransactionBody message\n         * @property {proto.IConsensusMessageChunkInfo|null} [chunkInfo] ConsensusSubmitMessageTransactionBody chunkInfo\n         */\n\n        /**\n         * Constructs a new ConsensusSubmitMessageTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a ConsensusSubmitMessageTransactionBody.\n         * @implements IConsensusSubmitMessageTransactionBody\n         * @constructor\n         * @param {proto.IConsensusSubmitMessageTransactionBody=} [p] Properties to set\n         */\n        function ConsensusSubmitMessageTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusSubmitMessageTransactionBody topicID.\n         * @member {proto.ITopicID|null|undefined} topicID\n         * @memberof proto.ConsensusSubmitMessageTransactionBody\n         * @instance\n         */\n        ConsensusSubmitMessageTransactionBody.prototype.topicID = null;\n\n        /**\n         * ConsensusSubmitMessageTransactionBody message.\n         * @member {Uint8Array} message\n         * @memberof proto.ConsensusSubmitMessageTransactionBody\n         * @instance\n         */\n        ConsensusSubmitMessageTransactionBody.prototype.message = $util.newBuffer([]);\n\n        /**\n         * ConsensusSubmitMessageTransactionBody chunkInfo.\n         * @member {proto.IConsensusMessageChunkInfo|null|undefined} chunkInfo\n         * @memberof proto.ConsensusSubmitMessageTransactionBody\n         * @instance\n         */\n        ConsensusSubmitMessageTransactionBody.prototype.chunkInfo = null;\n\n        /**\n         * Creates a new ConsensusSubmitMessageTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusSubmitMessageTransactionBody\n         * @static\n         * @param {proto.IConsensusSubmitMessageTransactionBody=} [properties] Properties to set\n         * @returns {proto.ConsensusSubmitMessageTransactionBody} ConsensusSubmitMessageTransactionBody instance\n         */\n        ConsensusSubmitMessageTransactionBody.create = function create(properties) {\n            return new ConsensusSubmitMessageTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusSubmitMessageTransactionBody message. Does not implicitly {@link proto.ConsensusSubmitMessageTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusSubmitMessageTransactionBody\n         * @static\n         * @param {proto.IConsensusSubmitMessageTransactionBody} m ConsensusSubmitMessageTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusSubmitMessageTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                $root.proto.TopicID.encode(m.topicID, w.uint32(10).fork()).ldelim();\n            if (m.message != null && Object.hasOwnProperty.call(m, \"message\"))\n                w.uint32(18).bytes(m.message);\n            if (m.chunkInfo != null && Object.hasOwnProperty.call(m, \"chunkInfo\"))\n                $root.proto.ConsensusMessageChunkInfo.encode(m.chunkInfo, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusSubmitMessageTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusSubmitMessageTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusSubmitMessageTransactionBody} ConsensusSubmitMessageTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusSubmitMessageTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusSubmitMessageTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.topicID = $root.proto.TopicID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.message = r.bytes();\n                    break;\n                case 3:\n                    m.chunkInfo = $root.proto.ConsensusMessageChunkInfo.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusSubmitMessageTransactionBody;\n    })();\n\n    proto.UncheckedSubmitBody = (function() {\n\n        /**\n         * Properties of an UncheckedSubmitBody.\n         * @memberof proto\n         * @interface IUncheckedSubmitBody\n         * @property {Uint8Array|null} [transactionBytes] UncheckedSubmitBody transactionBytes\n         */\n\n        /**\n         * Constructs a new UncheckedSubmitBody.\n         * @memberof proto\n         * @classdesc Represents an UncheckedSubmitBody.\n         * @implements IUncheckedSubmitBody\n         * @constructor\n         * @param {proto.IUncheckedSubmitBody=} [p] Properties to set\n         */\n        function UncheckedSubmitBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * UncheckedSubmitBody transactionBytes.\n         * @member {Uint8Array} transactionBytes\n         * @memberof proto.UncheckedSubmitBody\n         * @instance\n         */\n        UncheckedSubmitBody.prototype.transactionBytes = $util.newBuffer([]);\n\n        /**\n         * Creates a new UncheckedSubmitBody instance using the specified properties.\n         * @function create\n         * @memberof proto.UncheckedSubmitBody\n         * @static\n         * @param {proto.IUncheckedSubmitBody=} [properties] Properties to set\n         * @returns {proto.UncheckedSubmitBody} UncheckedSubmitBody instance\n         */\n        UncheckedSubmitBody.create = function create(properties) {\n            return new UncheckedSubmitBody(properties);\n        };\n\n        /**\n         * Encodes the specified UncheckedSubmitBody message. Does not implicitly {@link proto.UncheckedSubmitBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.UncheckedSubmitBody\n         * @static\n         * @param {proto.IUncheckedSubmitBody} m UncheckedSubmitBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UncheckedSubmitBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.transactionBytes != null && Object.hasOwnProperty.call(m, \"transactionBytes\"))\n                w.uint32(10).bytes(m.transactionBytes);\n            return w;\n        };\n\n        /**\n         * Decodes an UncheckedSubmitBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.UncheckedSubmitBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.UncheckedSubmitBody} UncheckedSubmitBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UncheckedSubmitBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.UncheckedSubmitBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.transactionBytes = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return UncheckedSubmitBody;\n    })();\n\n    proto.TokenCreateTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenCreateTransactionBody.\n         * @memberof proto\n         * @interface ITokenCreateTransactionBody\n         * @property {string|null} [name] TokenCreateTransactionBody name\n         * @property {string|null} [symbol] TokenCreateTransactionBody symbol\n         * @property {number|null} [decimals] TokenCreateTransactionBody decimals\n         * @property {Long|null} [initialSupply] TokenCreateTransactionBody initialSupply\n         * @property {proto.IAccountID|null} [treasury] TokenCreateTransactionBody treasury\n         * @property {proto.IKey|null} [adminKey] TokenCreateTransactionBody adminKey\n         * @property {proto.IKey|null} [kycKey] TokenCreateTransactionBody kycKey\n         * @property {proto.IKey|null} [freezeKey] TokenCreateTransactionBody freezeKey\n         * @property {proto.IKey|null} [wipeKey] TokenCreateTransactionBody wipeKey\n         * @property {proto.IKey|null} [supplyKey] TokenCreateTransactionBody supplyKey\n         * @property {boolean|null} [freezeDefault] TokenCreateTransactionBody freezeDefault\n         * @property {proto.ITimestamp|null} [expiry] TokenCreateTransactionBody expiry\n         * @property {proto.IAccountID|null} [autoRenewAccount] TokenCreateTransactionBody autoRenewAccount\n         * @property {proto.IDuration|null} [autoRenewPeriod] TokenCreateTransactionBody autoRenewPeriod\n         */\n\n        /**\n         * Constructs a new TokenCreateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenCreateTransactionBody.\n         * @implements ITokenCreateTransactionBody\n         * @constructor\n         * @param {proto.ITokenCreateTransactionBody=} [p] Properties to set\n         */\n        function TokenCreateTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenCreateTransactionBody name.\n         * @member {string} name\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.name = \"\";\n\n        /**\n         * TokenCreateTransactionBody symbol.\n         * @member {string} symbol\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.symbol = \"\";\n\n        /**\n         * TokenCreateTransactionBody decimals.\n         * @member {number} decimals\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.decimals = 0;\n\n        /**\n         * TokenCreateTransactionBody initialSupply.\n         * @member {Long} initialSupply\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.initialSupply = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TokenCreateTransactionBody treasury.\n         * @member {proto.IAccountID|null|undefined} treasury\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.treasury = null;\n\n        /**\n         * TokenCreateTransactionBody adminKey.\n         * @member {proto.IKey|null|undefined} adminKey\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.adminKey = null;\n\n        /**\n         * TokenCreateTransactionBody kycKey.\n         * @member {proto.IKey|null|undefined} kycKey\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.kycKey = null;\n\n        /**\n         * TokenCreateTransactionBody freezeKey.\n         * @member {proto.IKey|null|undefined} freezeKey\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.freezeKey = null;\n\n        /**\n         * TokenCreateTransactionBody wipeKey.\n         * @member {proto.IKey|null|undefined} wipeKey\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.wipeKey = null;\n\n        /**\n         * TokenCreateTransactionBody supplyKey.\n         * @member {proto.IKey|null|undefined} supplyKey\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.supplyKey = null;\n\n        /**\n         * TokenCreateTransactionBody freezeDefault.\n         * @member {boolean} freezeDefault\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.freezeDefault = false;\n\n        /**\n         * TokenCreateTransactionBody expiry.\n         * @member {proto.ITimestamp|null|undefined} expiry\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.expiry = null;\n\n        /**\n         * TokenCreateTransactionBody autoRenewAccount.\n         * @member {proto.IAccountID|null|undefined} autoRenewAccount\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.autoRenewAccount = null;\n\n        /**\n         * TokenCreateTransactionBody autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.TokenCreateTransactionBody\n         * @instance\n         */\n        TokenCreateTransactionBody.prototype.autoRenewPeriod = null;\n\n        /**\n         * Creates a new TokenCreateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenCreateTransactionBody\n         * @static\n         * @param {proto.ITokenCreateTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenCreateTransactionBody} TokenCreateTransactionBody instance\n         */\n        TokenCreateTransactionBody.create = function create(properties) {\n            return new TokenCreateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenCreateTransactionBody message. Does not implicitly {@link proto.TokenCreateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenCreateTransactionBody\n         * @static\n         * @param {proto.ITokenCreateTransactionBody} m TokenCreateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenCreateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.name != null && Object.hasOwnProperty.call(m, \"name\"))\n                w.uint32(10).string(m.name);\n            if (m.symbol != null && Object.hasOwnProperty.call(m, \"symbol\"))\n                w.uint32(18).string(m.symbol);\n            if (m.decimals != null && Object.hasOwnProperty.call(m, \"decimals\"))\n                w.uint32(24).uint32(m.decimals);\n            if (m.initialSupply != null && Object.hasOwnProperty.call(m, \"initialSupply\"))\n                w.uint32(32).uint64(m.initialSupply);\n            if (m.treasury != null && Object.hasOwnProperty.call(m, \"treasury\"))\n                $root.proto.AccountID.encode(m.treasury, w.uint32(42).fork()).ldelim();\n            if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                $root.proto.Key.encode(m.adminKey, w.uint32(50).fork()).ldelim();\n            if (m.kycKey != null && Object.hasOwnProperty.call(m, \"kycKey\"))\n                $root.proto.Key.encode(m.kycKey, w.uint32(58).fork()).ldelim();\n            if (m.freezeKey != null && Object.hasOwnProperty.call(m, \"freezeKey\"))\n                $root.proto.Key.encode(m.freezeKey, w.uint32(66).fork()).ldelim();\n            if (m.wipeKey != null && Object.hasOwnProperty.call(m, \"wipeKey\"))\n                $root.proto.Key.encode(m.wipeKey, w.uint32(74).fork()).ldelim();\n            if (m.supplyKey != null && Object.hasOwnProperty.call(m, \"supplyKey\"))\n                $root.proto.Key.encode(m.supplyKey, w.uint32(82).fork()).ldelim();\n            if (m.freezeDefault != null && Object.hasOwnProperty.call(m, \"freezeDefault\"))\n                w.uint32(88).bool(m.freezeDefault);\n            if (m.expiry != null && Object.hasOwnProperty.call(m, \"expiry\"))\n                $root.proto.Timestamp.encode(m.expiry, w.uint32(106).fork()).ldelim();\n            if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, \"autoRenewAccount\"))\n                $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(114).fork()).ldelim();\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(122).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenCreateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenCreateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenCreateTransactionBody} TokenCreateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenCreateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenCreateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.name = r.string();\n                    break;\n                case 2:\n                    m.symbol = r.string();\n                    break;\n                case 3:\n                    m.decimals = r.uint32();\n                    break;\n                case 4:\n                    m.initialSupply = r.uint64();\n                    break;\n                case 5:\n                    m.treasury = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.kycKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.freezeKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.wipeKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.supplyKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.freezeDefault = r.bool();\n                    break;\n                case 13:\n                    m.expiry = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 14:\n                    m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 15:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenCreateTransactionBody;\n    })();\n\n    proto.TokenFreezeAccountTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenFreezeAccountTransactionBody.\n         * @memberof proto\n         * @interface ITokenFreezeAccountTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenFreezeAccountTransactionBody token\n         * @property {proto.IAccountID|null} [account] TokenFreezeAccountTransactionBody account\n         */\n\n        /**\n         * Constructs a new TokenFreezeAccountTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenFreezeAccountTransactionBody.\n         * @implements ITokenFreezeAccountTransactionBody\n         * @constructor\n         * @param {proto.ITokenFreezeAccountTransactionBody=} [p] Properties to set\n         */\n        function TokenFreezeAccountTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenFreezeAccountTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenFreezeAccountTransactionBody\n         * @instance\n         */\n        TokenFreezeAccountTransactionBody.prototype.token = null;\n\n        /**\n         * TokenFreezeAccountTransactionBody account.\n         * @member {proto.IAccountID|null|undefined} account\n         * @memberof proto.TokenFreezeAccountTransactionBody\n         * @instance\n         */\n        TokenFreezeAccountTransactionBody.prototype.account = null;\n\n        /**\n         * Creates a new TokenFreezeAccountTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenFreezeAccountTransactionBody\n         * @static\n         * @param {proto.ITokenFreezeAccountTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenFreezeAccountTransactionBody} TokenFreezeAccountTransactionBody instance\n         */\n        TokenFreezeAccountTransactionBody.create = function create(properties) {\n            return new TokenFreezeAccountTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenFreezeAccountTransactionBody message. Does not implicitly {@link proto.TokenFreezeAccountTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenFreezeAccountTransactionBody\n         * @static\n         * @param {proto.ITokenFreezeAccountTransactionBody} m TokenFreezeAccountTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenFreezeAccountTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.account != null && Object.hasOwnProperty.call(m, \"account\"))\n                $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenFreezeAccountTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenFreezeAccountTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenFreezeAccountTransactionBody} TokenFreezeAccountTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenFreezeAccountTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenFreezeAccountTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.account = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenFreezeAccountTransactionBody;\n    })();\n\n    proto.TokenUnfreezeAccountTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenUnfreezeAccountTransactionBody.\n         * @memberof proto\n         * @interface ITokenUnfreezeAccountTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenUnfreezeAccountTransactionBody token\n         * @property {proto.IAccountID|null} [account] TokenUnfreezeAccountTransactionBody account\n         */\n\n        /**\n         * Constructs a new TokenUnfreezeAccountTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenUnfreezeAccountTransactionBody.\n         * @implements ITokenUnfreezeAccountTransactionBody\n         * @constructor\n         * @param {proto.ITokenUnfreezeAccountTransactionBody=} [p] Properties to set\n         */\n        function TokenUnfreezeAccountTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenUnfreezeAccountTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenUnfreezeAccountTransactionBody\n         * @instance\n         */\n        TokenUnfreezeAccountTransactionBody.prototype.token = null;\n\n        /**\n         * TokenUnfreezeAccountTransactionBody account.\n         * @member {proto.IAccountID|null|undefined} account\n         * @memberof proto.TokenUnfreezeAccountTransactionBody\n         * @instance\n         */\n        TokenUnfreezeAccountTransactionBody.prototype.account = null;\n\n        /**\n         * Creates a new TokenUnfreezeAccountTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenUnfreezeAccountTransactionBody\n         * @static\n         * @param {proto.ITokenUnfreezeAccountTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenUnfreezeAccountTransactionBody} TokenUnfreezeAccountTransactionBody instance\n         */\n        TokenUnfreezeAccountTransactionBody.create = function create(properties) {\n            return new TokenUnfreezeAccountTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenUnfreezeAccountTransactionBody message. Does not implicitly {@link proto.TokenUnfreezeAccountTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenUnfreezeAccountTransactionBody\n         * @static\n         * @param {proto.ITokenUnfreezeAccountTransactionBody} m TokenUnfreezeAccountTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenUnfreezeAccountTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.account != null && Object.hasOwnProperty.call(m, \"account\"))\n                $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenUnfreezeAccountTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenUnfreezeAccountTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenUnfreezeAccountTransactionBody} TokenUnfreezeAccountTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenUnfreezeAccountTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenUnfreezeAccountTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.account = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenUnfreezeAccountTransactionBody;\n    })();\n\n    proto.TokenGrantKycTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenGrantKycTransactionBody.\n         * @memberof proto\n         * @interface ITokenGrantKycTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenGrantKycTransactionBody token\n         * @property {proto.IAccountID|null} [account] TokenGrantKycTransactionBody account\n         */\n\n        /**\n         * Constructs a new TokenGrantKycTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenGrantKycTransactionBody.\n         * @implements ITokenGrantKycTransactionBody\n         * @constructor\n         * @param {proto.ITokenGrantKycTransactionBody=} [p] Properties to set\n         */\n        function TokenGrantKycTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenGrantKycTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenGrantKycTransactionBody\n         * @instance\n         */\n        TokenGrantKycTransactionBody.prototype.token = null;\n\n        /**\n         * TokenGrantKycTransactionBody account.\n         * @member {proto.IAccountID|null|undefined} account\n         * @memberof proto.TokenGrantKycTransactionBody\n         * @instance\n         */\n        TokenGrantKycTransactionBody.prototype.account = null;\n\n        /**\n         * Creates a new TokenGrantKycTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenGrantKycTransactionBody\n         * @static\n         * @param {proto.ITokenGrantKycTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenGrantKycTransactionBody} TokenGrantKycTransactionBody instance\n         */\n        TokenGrantKycTransactionBody.create = function create(properties) {\n            return new TokenGrantKycTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenGrantKycTransactionBody message. Does not implicitly {@link proto.TokenGrantKycTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenGrantKycTransactionBody\n         * @static\n         * @param {proto.ITokenGrantKycTransactionBody} m TokenGrantKycTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenGrantKycTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.account != null && Object.hasOwnProperty.call(m, \"account\"))\n                $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenGrantKycTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenGrantKycTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenGrantKycTransactionBody} TokenGrantKycTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenGrantKycTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenGrantKycTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.account = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenGrantKycTransactionBody;\n    })();\n\n    proto.TokenRevokeKycTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenRevokeKycTransactionBody.\n         * @memberof proto\n         * @interface ITokenRevokeKycTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenRevokeKycTransactionBody token\n         * @property {proto.IAccountID|null} [account] TokenRevokeKycTransactionBody account\n         */\n\n        /**\n         * Constructs a new TokenRevokeKycTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenRevokeKycTransactionBody.\n         * @implements ITokenRevokeKycTransactionBody\n         * @constructor\n         * @param {proto.ITokenRevokeKycTransactionBody=} [p] Properties to set\n         */\n        function TokenRevokeKycTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenRevokeKycTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenRevokeKycTransactionBody\n         * @instance\n         */\n        TokenRevokeKycTransactionBody.prototype.token = null;\n\n        /**\n         * TokenRevokeKycTransactionBody account.\n         * @member {proto.IAccountID|null|undefined} account\n         * @memberof proto.TokenRevokeKycTransactionBody\n         * @instance\n         */\n        TokenRevokeKycTransactionBody.prototype.account = null;\n\n        /**\n         * Creates a new TokenRevokeKycTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenRevokeKycTransactionBody\n         * @static\n         * @param {proto.ITokenRevokeKycTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenRevokeKycTransactionBody} TokenRevokeKycTransactionBody instance\n         */\n        TokenRevokeKycTransactionBody.create = function create(properties) {\n            return new TokenRevokeKycTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenRevokeKycTransactionBody message. Does not implicitly {@link proto.TokenRevokeKycTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenRevokeKycTransactionBody\n         * @static\n         * @param {proto.ITokenRevokeKycTransactionBody} m TokenRevokeKycTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenRevokeKycTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.account != null && Object.hasOwnProperty.call(m, \"account\"))\n                $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenRevokeKycTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenRevokeKycTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenRevokeKycTransactionBody} TokenRevokeKycTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenRevokeKycTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenRevokeKycTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.account = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenRevokeKycTransactionBody;\n    })();\n\n    proto.TokenDeleteTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenDeleteTransactionBody.\n         * @memberof proto\n         * @interface ITokenDeleteTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenDeleteTransactionBody token\n         */\n\n        /**\n         * Constructs a new TokenDeleteTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenDeleteTransactionBody.\n         * @implements ITokenDeleteTransactionBody\n         * @constructor\n         * @param {proto.ITokenDeleteTransactionBody=} [p] Properties to set\n         */\n        function TokenDeleteTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenDeleteTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenDeleteTransactionBody\n         * @instance\n         */\n        TokenDeleteTransactionBody.prototype.token = null;\n\n        /**\n         * Creates a new TokenDeleteTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenDeleteTransactionBody\n         * @static\n         * @param {proto.ITokenDeleteTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenDeleteTransactionBody} TokenDeleteTransactionBody instance\n         */\n        TokenDeleteTransactionBody.create = function create(properties) {\n            return new TokenDeleteTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenDeleteTransactionBody message. Does not implicitly {@link proto.TokenDeleteTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenDeleteTransactionBody\n         * @static\n         * @param {proto.ITokenDeleteTransactionBody} m TokenDeleteTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenDeleteTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenDeleteTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenDeleteTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenDeleteTransactionBody} TokenDeleteTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenDeleteTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenDeleteTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenDeleteTransactionBody;\n    })();\n\n    proto.TokenUpdateTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenUpdateTransactionBody.\n         * @memberof proto\n         * @interface ITokenUpdateTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenUpdateTransactionBody token\n         * @property {string|null} [symbol] TokenUpdateTransactionBody symbol\n         * @property {string|null} [name] TokenUpdateTransactionBody name\n         * @property {proto.IAccountID|null} [treasury] TokenUpdateTransactionBody treasury\n         * @property {proto.IKey|null} [adminKey] TokenUpdateTransactionBody adminKey\n         * @property {proto.IKey|null} [kycKey] TokenUpdateTransactionBody kycKey\n         * @property {proto.IKey|null} [freezeKey] TokenUpdateTransactionBody freezeKey\n         * @property {proto.IKey|null} [wipeKey] TokenUpdateTransactionBody wipeKey\n         * @property {proto.IKey|null} [supplyKey] TokenUpdateTransactionBody supplyKey\n         * @property {proto.IAccountID|null} [autoRenewAccount] TokenUpdateTransactionBody autoRenewAccount\n         * @property {proto.IDuration|null} [autoRenewPeriod] TokenUpdateTransactionBody autoRenewPeriod\n         * @property {proto.ITimestamp|null} [expiry] TokenUpdateTransactionBody expiry\n         */\n\n        /**\n         * Constructs a new TokenUpdateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenUpdateTransactionBody.\n         * @implements ITokenUpdateTransactionBody\n         * @constructor\n         * @param {proto.ITokenUpdateTransactionBody=} [p] Properties to set\n         */\n        function TokenUpdateTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenUpdateTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.token = null;\n\n        /**\n         * TokenUpdateTransactionBody symbol.\n         * @member {string} symbol\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.symbol = \"\";\n\n        /**\n         * TokenUpdateTransactionBody name.\n         * @member {string} name\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.name = \"\";\n\n        /**\n         * TokenUpdateTransactionBody treasury.\n         * @member {proto.IAccountID|null|undefined} treasury\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.treasury = null;\n\n        /**\n         * TokenUpdateTransactionBody adminKey.\n         * @member {proto.IKey|null|undefined} adminKey\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.adminKey = null;\n\n        /**\n         * TokenUpdateTransactionBody kycKey.\n         * @member {proto.IKey|null|undefined} kycKey\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.kycKey = null;\n\n        /**\n         * TokenUpdateTransactionBody freezeKey.\n         * @member {proto.IKey|null|undefined} freezeKey\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.freezeKey = null;\n\n        /**\n         * TokenUpdateTransactionBody wipeKey.\n         * @member {proto.IKey|null|undefined} wipeKey\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.wipeKey = null;\n\n        /**\n         * TokenUpdateTransactionBody supplyKey.\n         * @member {proto.IKey|null|undefined} supplyKey\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.supplyKey = null;\n\n        /**\n         * TokenUpdateTransactionBody autoRenewAccount.\n         * @member {proto.IAccountID|null|undefined} autoRenewAccount\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.autoRenewAccount = null;\n\n        /**\n         * TokenUpdateTransactionBody autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.autoRenewPeriod = null;\n\n        /**\n         * TokenUpdateTransactionBody expiry.\n         * @member {proto.ITimestamp|null|undefined} expiry\n         * @memberof proto.TokenUpdateTransactionBody\n         * @instance\n         */\n        TokenUpdateTransactionBody.prototype.expiry = null;\n\n        /**\n         * Creates a new TokenUpdateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenUpdateTransactionBody\n         * @static\n         * @param {proto.ITokenUpdateTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenUpdateTransactionBody} TokenUpdateTransactionBody instance\n         */\n        TokenUpdateTransactionBody.create = function create(properties) {\n            return new TokenUpdateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenUpdateTransactionBody message. Does not implicitly {@link proto.TokenUpdateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenUpdateTransactionBody\n         * @static\n         * @param {proto.ITokenUpdateTransactionBody} m TokenUpdateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenUpdateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.symbol != null && Object.hasOwnProperty.call(m, \"symbol\"))\n                w.uint32(18).string(m.symbol);\n            if (m.name != null && Object.hasOwnProperty.call(m, \"name\"))\n                w.uint32(26).string(m.name);\n            if (m.treasury != null && Object.hasOwnProperty.call(m, \"treasury\"))\n                $root.proto.AccountID.encode(m.treasury, w.uint32(34).fork()).ldelim();\n            if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                $root.proto.Key.encode(m.adminKey, w.uint32(42).fork()).ldelim();\n            if (m.kycKey != null && Object.hasOwnProperty.call(m, \"kycKey\"))\n                $root.proto.Key.encode(m.kycKey, w.uint32(50).fork()).ldelim();\n            if (m.freezeKey != null && Object.hasOwnProperty.call(m, \"freezeKey\"))\n                $root.proto.Key.encode(m.freezeKey, w.uint32(58).fork()).ldelim();\n            if (m.wipeKey != null && Object.hasOwnProperty.call(m, \"wipeKey\"))\n                $root.proto.Key.encode(m.wipeKey, w.uint32(66).fork()).ldelim();\n            if (m.supplyKey != null && Object.hasOwnProperty.call(m, \"supplyKey\"))\n                $root.proto.Key.encode(m.supplyKey, w.uint32(74).fork()).ldelim();\n            if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, \"autoRenewAccount\"))\n                $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(82).fork()).ldelim();\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(90).fork()).ldelim();\n            if (m.expiry != null && Object.hasOwnProperty.call(m, \"expiry\"))\n                $root.proto.Timestamp.encode(m.expiry, w.uint32(98).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenUpdateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenUpdateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenUpdateTransactionBody} TokenUpdateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenUpdateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenUpdateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.symbol = r.string();\n                    break;\n                case 3:\n                    m.name = r.string();\n                    break;\n                case 4:\n                    m.treasury = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.kycKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.freezeKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.wipeKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.supplyKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 12:\n                    m.expiry = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenUpdateTransactionBody;\n    })();\n\n    proto.TokenMintTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenMintTransactionBody.\n         * @memberof proto\n         * @interface ITokenMintTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenMintTransactionBody token\n         * @property {Long|null} [amount] TokenMintTransactionBody amount\n         */\n\n        /**\n         * Constructs a new TokenMintTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenMintTransactionBody.\n         * @implements ITokenMintTransactionBody\n         * @constructor\n         * @param {proto.ITokenMintTransactionBody=} [p] Properties to set\n         */\n        function TokenMintTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenMintTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenMintTransactionBody\n         * @instance\n         */\n        TokenMintTransactionBody.prototype.token = null;\n\n        /**\n         * TokenMintTransactionBody amount.\n         * @member {Long} amount\n         * @memberof proto.TokenMintTransactionBody\n         * @instance\n         */\n        TokenMintTransactionBody.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new TokenMintTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenMintTransactionBody\n         * @static\n         * @param {proto.ITokenMintTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenMintTransactionBody} TokenMintTransactionBody instance\n         */\n        TokenMintTransactionBody.create = function create(properties) {\n            return new TokenMintTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenMintTransactionBody message. Does not implicitly {@link proto.TokenMintTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenMintTransactionBody\n         * @static\n         * @param {proto.ITokenMintTransactionBody} m TokenMintTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenMintTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.amount != null && Object.hasOwnProperty.call(m, \"amount\"))\n                w.uint32(16).uint64(m.amount);\n            return w;\n        };\n\n        /**\n         * Decodes a TokenMintTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenMintTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenMintTransactionBody} TokenMintTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenMintTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenMintTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.amount = r.uint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenMintTransactionBody;\n    })();\n\n    proto.TokenBurnTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenBurnTransactionBody.\n         * @memberof proto\n         * @interface ITokenBurnTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenBurnTransactionBody token\n         * @property {Long|null} [amount] TokenBurnTransactionBody amount\n         */\n\n        /**\n         * Constructs a new TokenBurnTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenBurnTransactionBody.\n         * @implements ITokenBurnTransactionBody\n         * @constructor\n         * @param {proto.ITokenBurnTransactionBody=} [p] Properties to set\n         */\n        function TokenBurnTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenBurnTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenBurnTransactionBody\n         * @instance\n         */\n        TokenBurnTransactionBody.prototype.token = null;\n\n        /**\n         * TokenBurnTransactionBody amount.\n         * @member {Long} amount\n         * @memberof proto.TokenBurnTransactionBody\n         * @instance\n         */\n        TokenBurnTransactionBody.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new TokenBurnTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenBurnTransactionBody\n         * @static\n         * @param {proto.ITokenBurnTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenBurnTransactionBody} TokenBurnTransactionBody instance\n         */\n        TokenBurnTransactionBody.create = function create(properties) {\n            return new TokenBurnTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenBurnTransactionBody message. Does not implicitly {@link proto.TokenBurnTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenBurnTransactionBody\n         * @static\n         * @param {proto.ITokenBurnTransactionBody} m TokenBurnTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenBurnTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.amount != null && Object.hasOwnProperty.call(m, \"amount\"))\n                w.uint32(16).uint64(m.amount);\n            return w;\n        };\n\n        /**\n         * Decodes a TokenBurnTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenBurnTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenBurnTransactionBody} TokenBurnTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenBurnTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenBurnTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.amount = r.uint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenBurnTransactionBody;\n    })();\n\n    proto.TokenWipeAccountTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenWipeAccountTransactionBody.\n         * @memberof proto\n         * @interface ITokenWipeAccountTransactionBody\n         * @property {proto.ITokenID|null} [token] TokenWipeAccountTransactionBody token\n         * @property {proto.IAccountID|null} [account] TokenWipeAccountTransactionBody account\n         * @property {Long|null} [amount] TokenWipeAccountTransactionBody amount\n         */\n\n        /**\n         * Constructs a new TokenWipeAccountTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenWipeAccountTransactionBody.\n         * @implements ITokenWipeAccountTransactionBody\n         * @constructor\n         * @param {proto.ITokenWipeAccountTransactionBody=} [p] Properties to set\n         */\n        function TokenWipeAccountTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenWipeAccountTransactionBody token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenWipeAccountTransactionBody\n         * @instance\n         */\n        TokenWipeAccountTransactionBody.prototype.token = null;\n\n        /**\n         * TokenWipeAccountTransactionBody account.\n         * @member {proto.IAccountID|null|undefined} account\n         * @memberof proto.TokenWipeAccountTransactionBody\n         * @instance\n         */\n        TokenWipeAccountTransactionBody.prototype.account = null;\n\n        /**\n         * TokenWipeAccountTransactionBody amount.\n         * @member {Long} amount\n         * @memberof proto.TokenWipeAccountTransactionBody\n         * @instance\n         */\n        TokenWipeAccountTransactionBody.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new TokenWipeAccountTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenWipeAccountTransactionBody\n         * @static\n         * @param {proto.ITokenWipeAccountTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenWipeAccountTransactionBody} TokenWipeAccountTransactionBody instance\n         */\n        TokenWipeAccountTransactionBody.create = function create(properties) {\n            return new TokenWipeAccountTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenWipeAccountTransactionBody message. Does not implicitly {@link proto.TokenWipeAccountTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenWipeAccountTransactionBody\n         * @static\n         * @param {proto.ITokenWipeAccountTransactionBody} m TokenWipeAccountTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenWipeAccountTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(10).fork()).ldelim();\n            if (m.account != null && Object.hasOwnProperty.call(m, \"account\"))\n                $root.proto.AccountID.encode(m.account, w.uint32(18).fork()).ldelim();\n            if (m.amount != null && Object.hasOwnProperty.call(m, \"amount\"))\n                w.uint32(24).uint64(m.amount);\n            return w;\n        };\n\n        /**\n         * Decodes a TokenWipeAccountTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenWipeAccountTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenWipeAccountTransactionBody} TokenWipeAccountTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenWipeAccountTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenWipeAccountTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.account = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.amount = r.uint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenWipeAccountTransactionBody;\n    })();\n\n    proto.TokenAssociateTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenAssociateTransactionBody.\n         * @memberof proto\n         * @interface ITokenAssociateTransactionBody\n         * @property {proto.IAccountID|null} [account] TokenAssociateTransactionBody account\n         * @property {Array.<proto.ITokenID>|null} [tokens] TokenAssociateTransactionBody tokens\n         */\n\n        /**\n         * Constructs a new TokenAssociateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenAssociateTransactionBody.\n         * @implements ITokenAssociateTransactionBody\n         * @constructor\n         * @param {proto.ITokenAssociateTransactionBody=} [p] Properties to set\n         */\n        function TokenAssociateTransactionBody(p) {\n            this.tokens = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenAssociateTransactionBody account.\n         * @member {proto.IAccountID|null|undefined} account\n         * @memberof proto.TokenAssociateTransactionBody\n         * @instance\n         */\n        TokenAssociateTransactionBody.prototype.account = null;\n\n        /**\n         * TokenAssociateTransactionBody tokens.\n         * @member {Array.<proto.ITokenID>} tokens\n         * @memberof proto.TokenAssociateTransactionBody\n         * @instance\n         */\n        TokenAssociateTransactionBody.prototype.tokens = $util.emptyArray;\n\n        /**\n         * Creates a new TokenAssociateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenAssociateTransactionBody\n         * @static\n         * @param {proto.ITokenAssociateTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenAssociateTransactionBody} TokenAssociateTransactionBody instance\n         */\n        TokenAssociateTransactionBody.create = function create(properties) {\n            return new TokenAssociateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenAssociateTransactionBody message. Does not implicitly {@link proto.TokenAssociateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenAssociateTransactionBody\n         * @static\n         * @param {proto.ITokenAssociateTransactionBody} m TokenAssociateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenAssociateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.account != null && Object.hasOwnProperty.call(m, \"account\"))\n                $root.proto.AccountID.encode(m.account, w.uint32(10).fork()).ldelim();\n            if (m.tokens != null && m.tokens.length) {\n                for (var i = 0; i < m.tokens.length; ++i)\n                    $root.proto.TokenID.encode(m.tokens[i], w.uint32(18).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TokenAssociateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenAssociateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenAssociateTransactionBody} TokenAssociateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenAssociateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenAssociateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.account = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    if (!(m.tokens && m.tokens.length))\n                        m.tokens = [];\n                    m.tokens.push($root.proto.TokenID.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenAssociateTransactionBody;\n    })();\n\n    proto.TokenDissociateTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenDissociateTransactionBody.\n         * @memberof proto\n         * @interface ITokenDissociateTransactionBody\n         * @property {proto.IAccountID|null} [account] TokenDissociateTransactionBody account\n         * @property {Array.<proto.ITokenID>|null} [tokens] TokenDissociateTransactionBody tokens\n         */\n\n        /**\n         * Constructs a new TokenDissociateTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenDissociateTransactionBody.\n         * @implements ITokenDissociateTransactionBody\n         * @constructor\n         * @param {proto.ITokenDissociateTransactionBody=} [p] Properties to set\n         */\n        function TokenDissociateTransactionBody(p) {\n            this.tokens = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenDissociateTransactionBody account.\n         * @member {proto.IAccountID|null|undefined} account\n         * @memberof proto.TokenDissociateTransactionBody\n         * @instance\n         */\n        TokenDissociateTransactionBody.prototype.account = null;\n\n        /**\n         * TokenDissociateTransactionBody tokens.\n         * @member {Array.<proto.ITokenID>} tokens\n         * @memberof proto.TokenDissociateTransactionBody\n         * @instance\n         */\n        TokenDissociateTransactionBody.prototype.tokens = $util.emptyArray;\n\n        /**\n         * Creates a new TokenDissociateTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenDissociateTransactionBody\n         * @static\n         * @param {proto.ITokenDissociateTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenDissociateTransactionBody} TokenDissociateTransactionBody instance\n         */\n        TokenDissociateTransactionBody.create = function create(properties) {\n            return new TokenDissociateTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenDissociateTransactionBody message. Does not implicitly {@link proto.TokenDissociateTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenDissociateTransactionBody\n         * @static\n         * @param {proto.ITokenDissociateTransactionBody} m TokenDissociateTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenDissociateTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.account != null && Object.hasOwnProperty.call(m, \"account\"))\n                $root.proto.AccountID.encode(m.account, w.uint32(10).fork()).ldelim();\n            if (m.tokens != null && m.tokens.length) {\n                for (var i = 0; i < m.tokens.length; ++i)\n                    $root.proto.TokenID.encode(m.tokens[i], w.uint32(18).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TokenDissociateTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenDissociateTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenDissociateTransactionBody} TokenDissociateTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenDissociateTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenDissociateTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.account = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    if (!(m.tokens && m.tokens.length))\n                        m.tokens = [];\n                    m.tokens.push($root.proto.TokenID.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenDissociateTransactionBody;\n    })();\n\n    proto.ResponseHeader = (function() {\n\n        /**\n         * Properties of a ResponseHeader.\n         * @memberof proto\n         * @interface IResponseHeader\n         * @property {proto.ResponseCodeEnum|null} [nodeTransactionPrecheckCode] ResponseHeader nodeTransactionPrecheckCode\n         * @property {proto.ResponseType|null} [responseType] ResponseHeader responseType\n         * @property {Long|null} [cost] ResponseHeader cost\n         * @property {Uint8Array|null} [stateProof] ResponseHeader stateProof\n         */\n\n        /**\n         * Constructs a new ResponseHeader.\n         * @memberof proto\n         * @classdesc Represents a ResponseHeader.\n         * @implements IResponseHeader\n         * @constructor\n         * @param {proto.IResponseHeader=} [p] Properties to set\n         */\n        function ResponseHeader(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ResponseHeader nodeTransactionPrecheckCode.\n         * @member {proto.ResponseCodeEnum} nodeTransactionPrecheckCode\n         * @memberof proto.ResponseHeader\n         * @instance\n         */\n        ResponseHeader.prototype.nodeTransactionPrecheckCode = 0;\n\n        /**\n         * ResponseHeader responseType.\n         * @member {proto.ResponseType} responseType\n         * @memberof proto.ResponseHeader\n         * @instance\n         */\n        ResponseHeader.prototype.responseType = 0;\n\n        /**\n         * ResponseHeader cost.\n         * @member {Long} cost\n         * @memberof proto.ResponseHeader\n         * @instance\n         */\n        ResponseHeader.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * ResponseHeader stateProof.\n         * @member {Uint8Array} stateProof\n         * @memberof proto.ResponseHeader\n         * @instance\n         */\n        ResponseHeader.prototype.stateProof = $util.newBuffer([]);\n\n        /**\n         * Creates a new ResponseHeader instance using the specified properties.\n         * @function create\n         * @memberof proto.ResponseHeader\n         * @static\n         * @param {proto.IResponseHeader=} [properties] Properties to set\n         * @returns {proto.ResponseHeader} ResponseHeader instance\n         */\n        ResponseHeader.create = function create(properties) {\n            return new ResponseHeader(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseHeader message. Does not implicitly {@link proto.ResponseHeader.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ResponseHeader\n         * @static\n         * @param {proto.IResponseHeader} m ResponseHeader message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseHeader.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.nodeTransactionPrecheckCode != null && Object.hasOwnProperty.call(m, \"nodeTransactionPrecheckCode\"))\n                w.uint32(8).int32(m.nodeTransactionPrecheckCode);\n            if (m.responseType != null && Object.hasOwnProperty.call(m, \"responseType\"))\n                w.uint32(16).int32(m.responseType);\n            if (m.cost != null && Object.hasOwnProperty.call(m, \"cost\"))\n                w.uint32(24).uint64(m.cost);\n            if (m.stateProof != null && Object.hasOwnProperty.call(m, \"stateProof\"))\n                w.uint32(34).bytes(m.stateProof);\n            return w;\n        };\n\n        /**\n         * Decodes a ResponseHeader message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ResponseHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ResponseHeader} ResponseHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseHeader.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ResponseHeader();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.nodeTransactionPrecheckCode = r.int32();\n                    break;\n                case 2:\n                    m.responseType = r.int32();\n                    break;\n                case 3:\n                    m.cost = r.uint64();\n                    break;\n                case 4:\n                    m.stateProof = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ResponseHeader;\n    })();\n\n    proto.TransactionResponse = (function() {\n\n        /**\n         * Properties of a TransactionResponse.\n         * @memberof proto\n         * @interface ITransactionResponse\n         * @property {proto.ResponseCodeEnum|null} [nodeTransactionPrecheckCode] TransactionResponse nodeTransactionPrecheckCode\n         * @property {Long|null} [cost] TransactionResponse cost\n         */\n\n        /**\n         * Constructs a new TransactionResponse.\n         * @memberof proto\n         * @classdesc Represents a TransactionResponse.\n         * @implements ITransactionResponse\n         * @constructor\n         * @param {proto.ITransactionResponse=} [p] Properties to set\n         */\n        function TransactionResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionResponse nodeTransactionPrecheckCode.\n         * @member {proto.ResponseCodeEnum} nodeTransactionPrecheckCode\n         * @memberof proto.TransactionResponse\n         * @instance\n         */\n        TransactionResponse.prototype.nodeTransactionPrecheckCode = 0;\n\n        /**\n         * TransactionResponse cost.\n         * @member {Long} cost\n         * @memberof proto.TransactionResponse\n         * @instance\n         */\n        TransactionResponse.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new TransactionResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionResponse\n         * @static\n         * @param {proto.ITransactionResponse=} [properties] Properties to set\n         * @returns {proto.TransactionResponse} TransactionResponse instance\n         */\n        TransactionResponse.create = function create(properties) {\n            return new TransactionResponse(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionResponse message. Does not implicitly {@link proto.TransactionResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionResponse\n         * @static\n         * @param {proto.ITransactionResponse} m TransactionResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.nodeTransactionPrecheckCode != null && Object.hasOwnProperty.call(m, \"nodeTransactionPrecheckCode\"))\n                w.uint32(8).int32(m.nodeTransactionPrecheckCode);\n            if (m.cost != null && Object.hasOwnProperty.call(m, \"cost\"))\n                w.uint32(16).uint64(m.cost);\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionResponse} TransactionResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.nodeTransactionPrecheckCode = r.int32();\n                    break;\n                case 2:\n                    m.cost = r.uint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionResponse;\n    })();\n\n    /**\n     * ResponseCodeEnum enum.\n     * @name proto.ResponseCodeEnum\n     * @enum {number}\n     * @property {number} OK=0 OK value\n     * @property {number} INVALID_TRANSACTION=1 INVALID_TRANSACTION value\n     * @property {number} PAYER_ACCOUNT_NOT_FOUND=2 PAYER_ACCOUNT_NOT_FOUND value\n     * @property {number} INVALID_NODE_ACCOUNT=3 INVALID_NODE_ACCOUNT value\n     * @property {number} TRANSACTION_EXPIRED=4 TRANSACTION_EXPIRED value\n     * @property {number} INVALID_TRANSACTION_START=5 INVALID_TRANSACTION_START value\n     * @property {number} INVALID_TRANSACTION_DURATION=6 INVALID_TRANSACTION_DURATION value\n     * @property {number} INVALID_SIGNATURE=7 INVALID_SIGNATURE value\n     * @property {number} MEMO_TOO_LONG=8 MEMO_TOO_LONG value\n     * @property {number} INSUFFICIENT_TX_FEE=9 INSUFFICIENT_TX_FEE value\n     * @property {number} INSUFFICIENT_PAYER_BALANCE=10 INSUFFICIENT_PAYER_BALANCE value\n     * @property {number} DUPLICATE_TRANSACTION=11 DUPLICATE_TRANSACTION value\n     * @property {number} BUSY=12 BUSY value\n     * @property {number} NOT_SUPPORTED=13 NOT_SUPPORTED value\n     * @property {number} INVALID_FILE_ID=14 INVALID_FILE_ID value\n     * @property {number} INVALID_ACCOUNT_ID=15 INVALID_ACCOUNT_ID value\n     * @property {number} INVALID_CONTRACT_ID=16 INVALID_CONTRACT_ID value\n     * @property {number} INVALID_TRANSACTION_ID=17 INVALID_TRANSACTION_ID value\n     * @property {number} RECEIPT_NOT_FOUND=18 RECEIPT_NOT_FOUND value\n     * @property {number} RECORD_NOT_FOUND=19 RECORD_NOT_FOUND value\n     * @property {number} INVALID_SOLIDITY_ID=20 INVALID_SOLIDITY_ID value\n     * @property {number} UNKNOWN=21 UNKNOWN value\n     * @property {number} SUCCESS=22 SUCCESS value\n     * @property {number} FAIL_INVALID=23 FAIL_INVALID value\n     * @property {number} FAIL_FEE=24 FAIL_FEE value\n     * @property {number} FAIL_BALANCE=25 FAIL_BALANCE value\n     * @property {number} KEY_REQUIRED=26 KEY_REQUIRED value\n     * @property {number} BAD_ENCODING=27 BAD_ENCODING value\n     * @property {number} INSUFFICIENT_ACCOUNT_BALANCE=28 INSUFFICIENT_ACCOUNT_BALANCE value\n     * @property {number} INVALID_SOLIDITY_ADDRESS=29 INVALID_SOLIDITY_ADDRESS value\n     * @property {number} INSUFFICIENT_GAS=30 INSUFFICIENT_GAS value\n     * @property {number} CONTRACT_SIZE_LIMIT_EXCEEDED=31 CONTRACT_SIZE_LIMIT_EXCEEDED value\n     * @property {number} LOCAL_CALL_MODIFICATION_EXCEPTION=32 LOCAL_CALL_MODIFICATION_EXCEPTION value\n     * @property {number} CONTRACT_REVERT_EXECUTED=33 CONTRACT_REVERT_EXECUTED value\n     * @property {number} CONTRACT_EXECUTION_EXCEPTION=34 CONTRACT_EXECUTION_EXCEPTION value\n     * @property {number} INVALID_RECEIVING_NODE_ACCOUNT=35 INVALID_RECEIVING_NODE_ACCOUNT value\n     * @property {number} MISSING_QUERY_HEADER=36 MISSING_QUERY_HEADER value\n     * @property {number} ACCOUNT_UPDATE_FAILED=37 ACCOUNT_UPDATE_FAILED value\n     * @property {number} INVALID_KEY_ENCODING=38 INVALID_KEY_ENCODING value\n     * @property {number} NULL_SOLIDITY_ADDRESS=39 NULL_SOLIDITY_ADDRESS value\n     * @property {number} CONTRACT_UPDATE_FAILED=40 CONTRACT_UPDATE_FAILED value\n     * @property {number} INVALID_QUERY_HEADER=41 INVALID_QUERY_HEADER value\n     * @property {number} INVALID_FEE_SUBMITTED=42 INVALID_FEE_SUBMITTED value\n     * @property {number} INVALID_PAYER_SIGNATURE=43 INVALID_PAYER_SIGNATURE value\n     * @property {number} KEY_NOT_PROVIDED=44 KEY_NOT_PROVIDED value\n     * @property {number} INVALID_EXPIRATION_TIME=45 INVALID_EXPIRATION_TIME value\n     * @property {number} NO_WACL_KEY=46 NO_WACL_KEY value\n     * @property {number} FILE_CONTENT_EMPTY=47 FILE_CONTENT_EMPTY value\n     * @property {number} INVALID_ACCOUNT_AMOUNTS=48 INVALID_ACCOUNT_AMOUNTS value\n     * @property {number} EMPTY_TRANSACTION_BODY=49 EMPTY_TRANSACTION_BODY value\n     * @property {number} INVALID_TRANSACTION_BODY=50 INVALID_TRANSACTION_BODY value\n     * @property {number} INVALID_SIGNATURE_TYPE_MISMATCHING_KEY=51 INVALID_SIGNATURE_TYPE_MISMATCHING_KEY value\n     * @property {number} INVALID_SIGNATURE_COUNT_MISMATCHING_KEY=52 INVALID_SIGNATURE_COUNT_MISMATCHING_KEY value\n     * @property {number} EMPTY_LIVE_HASH_BODY=53 EMPTY_LIVE_HASH_BODY value\n     * @property {number} EMPTY_LIVE_HASH=54 EMPTY_LIVE_HASH value\n     * @property {number} EMPTY_LIVE_HASH_KEYS=55 EMPTY_LIVE_HASH_KEYS value\n     * @property {number} INVALID_LIVE_HASH_SIZE=56 INVALID_LIVE_HASH_SIZE value\n     * @property {number} EMPTY_QUERY_BODY=57 EMPTY_QUERY_BODY value\n     * @property {number} EMPTY_LIVE_HASH_QUERY=58 EMPTY_LIVE_HASH_QUERY value\n     * @property {number} LIVE_HASH_NOT_FOUND=59 LIVE_HASH_NOT_FOUND value\n     * @property {number} ACCOUNT_ID_DOES_NOT_EXIST=60 ACCOUNT_ID_DOES_NOT_EXIST value\n     * @property {number} LIVE_HASH_ALREADY_EXISTS=61 LIVE_HASH_ALREADY_EXISTS value\n     * @property {number} INVALID_FILE_WACL=62 INVALID_FILE_WACL value\n     * @property {number} SERIALIZATION_FAILED=63 SERIALIZATION_FAILED value\n     * @property {number} TRANSACTION_OVERSIZE=64 TRANSACTION_OVERSIZE value\n     * @property {number} TRANSACTION_TOO_MANY_LAYERS=65 TRANSACTION_TOO_MANY_LAYERS value\n     * @property {number} CONTRACT_DELETED=66 CONTRACT_DELETED value\n     * @property {number} PLATFORM_NOT_ACTIVE=67 PLATFORM_NOT_ACTIVE value\n     * @property {number} KEY_PREFIX_MISMATCH=68 KEY_PREFIX_MISMATCH value\n     * @property {number} PLATFORM_TRANSACTION_NOT_CREATED=69 PLATFORM_TRANSACTION_NOT_CREATED value\n     * @property {number} INVALID_RENEWAL_PERIOD=70 INVALID_RENEWAL_PERIOD value\n     * @property {number} INVALID_PAYER_ACCOUNT_ID=71 INVALID_PAYER_ACCOUNT_ID value\n     * @property {number} ACCOUNT_DELETED=72 ACCOUNT_DELETED value\n     * @property {number} FILE_DELETED=73 FILE_DELETED value\n     * @property {number} ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS=74 ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS value\n     * @property {number} SETTING_NEGATIVE_ACCOUNT_BALANCE=75 SETTING_NEGATIVE_ACCOUNT_BALANCE value\n     * @property {number} OBTAINER_REQUIRED=76 OBTAINER_REQUIRED value\n     * @property {number} OBTAINER_SAME_CONTRACT_ID=77 OBTAINER_SAME_CONTRACT_ID value\n     * @property {number} OBTAINER_DOES_NOT_EXIST=78 OBTAINER_DOES_NOT_EXIST value\n     * @property {number} MODIFYING_IMMUTABLE_CONTRACT=79 MODIFYING_IMMUTABLE_CONTRACT value\n     * @property {number} FILE_SYSTEM_EXCEPTION=80 FILE_SYSTEM_EXCEPTION value\n     * @property {number} AUTORENEW_DURATION_NOT_IN_RANGE=81 AUTORENEW_DURATION_NOT_IN_RANGE value\n     * @property {number} ERROR_DECODING_BYTESTRING=82 ERROR_DECODING_BYTESTRING value\n     * @property {number} CONTRACT_FILE_EMPTY=83 CONTRACT_FILE_EMPTY value\n     * @property {number} CONTRACT_BYTECODE_EMPTY=84 CONTRACT_BYTECODE_EMPTY value\n     * @property {number} INVALID_INITIAL_BALANCE=85 INVALID_INITIAL_BALANCE value\n     * @property {number} INVALID_RECEIVE_RECORD_THRESHOLD=86 INVALID_RECEIVE_RECORD_THRESHOLD value\n     * @property {number} INVALID_SEND_RECORD_THRESHOLD=87 INVALID_SEND_RECORD_THRESHOLD value\n     * @property {number} ACCOUNT_IS_NOT_GENESIS_ACCOUNT=88 ACCOUNT_IS_NOT_GENESIS_ACCOUNT value\n     * @property {number} PAYER_ACCOUNT_UNAUTHORIZED=89 PAYER_ACCOUNT_UNAUTHORIZED value\n     * @property {number} INVALID_FREEZE_TRANSACTION_BODY=90 INVALID_FREEZE_TRANSACTION_BODY value\n     * @property {number} FREEZE_TRANSACTION_BODY_NOT_FOUND=91 FREEZE_TRANSACTION_BODY_NOT_FOUND value\n     * @property {number} TRANSFER_LIST_SIZE_LIMIT_EXCEEDED=92 TRANSFER_LIST_SIZE_LIMIT_EXCEEDED value\n     * @property {number} RESULT_SIZE_LIMIT_EXCEEDED=93 RESULT_SIZE_LIMIT_EXCEEDED value\n     * @property {number} NOT_SPECIAL_ACCOUNT=94 NOT_SPECIAL_ACCOUNT value\n     * @property {number} CONTRACT_NEGATIVE_GAS=95 CONTRACT_NEGATIVE_GAS value\n     * @property {number} CONTRACT_NEGATIVE_VALUE=96 CONTRACT_NEGATIVE_VALUE value\n     * @property {number} INVALID_FEE_FILE=97 INVALID_FEE_FILE value\n     * @property {number} INVALID_EXCHANGE_RATE_FILE=98 INVALID_EXCHANGE_RATE_FILE value\n     * @property {number} INSUFFICIENT_LOCAL_CALL_GAS=99 INSUFFICIENT_LOCAL_CALL_GAS value\n     * @property {number} ENTITY_NOT_ALLOWED_TO_DELETE=100 ENTITY_NOT_ALLOWED_TO_DELETE value\n     * @property {number} AUTHORIZATION_FAILED=101 AUTHORIZATION_FAILED value\n     * @property {number} FILE_UPLOADED_PROTO_INVALID=102 FILE_UPLOADED_PROTO_INVALID value\n     * @property {number} FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK=103 FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK value\n     * @property {number} FEE_SCHEDULE_FILE_PART_UPLOADED=104 FEE_SCHEDULE_FILE_PART_UPLOADED value\n     * @property {number} EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED=105 EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED value\n     * @property {number} MAX_CONTRACT_STORAGE_EXCEEDED=106 MAX_CONTRACT_STORAGE_EXCEEDED value\n     * @property {number} TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT=107 TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT value\n     * @property {number} TOTAL_LEDGER_BALANCE_INVALID=108 TOTAL_LEDGER_BALANCE_INVALID value\n     * @property {number} EXPIRATION_REDUCTION_NOT_ALLOWED=110 EXPIRATION_REDUCTION_NOT_ALLOWED value\n     * @property {number} MAX_GAS_LIMIT_EXCEEDED=111 MAX_GAS_LIMIT_EXCEEDED value\n     * @property {number} MAX_FILE_SIZE_EXCEEDED=112 MAX_FILE_SIZE_EXCEEDED value\n     * @property {number} INVALID_TOPIC_ID=150 INVALID_TOPIC_ID value\n     * @property {number} INVALID_ADMIN_KEY=155 INVALID_ADMIN_KEY value\n     * @property {number} INVALID_SUBMIT_KEY=156 INVALID_SUBMIT_KEY value\n     * @property {number} UNAUTHORIZED=157 UNAUTHORIZED value\n     * @property {number} INVALID_TOPIC_MESSAGE=158 INVALID_TOPIC_MESSAGE value\n     * @property {number} INVALID_AUTORENEW_ACCOUNT=159 INVALID_AUTORENEW_ACCOUNT value\n     * @property {number} AUTORENEW_ACCOUNT_NOT_ALLOWED=160 AUTORENEW_ACCOUNT_NOT_ALLOWED value\n     * @property {number} TOPIC_EXPIRED=162 TOPIC_EXPIRED value\n     * @property {number} INVALID_CHUNK_NUMBER=163 INVALID_CHUNK_NUMBER value\n     * @property {number} INVALID_CHUNK_TRANSACTION_ID=164 INVALID_CHUNK_TRANSACTION_ID value\n     * @property {number} ACCOUNT_FROZEN_FOR_TOKEN=165 ACCOUNT_FROZEN_FOR_TOKEN value\n     * @property {number} TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED=166 TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED value\n     * @property {number} INVALID_TOKEN_ID=167 INVALID_TOKEN_ID value\n     * @property {number} INVALID_TOKEN_DECIMALS=168 INVALID_TOKEN_DECIMALS value\n     * @property {number} INVALID_TOKEN_INITIAL_SUPPLY=169 INVALID_TOKEN_INITIAL_SUPPLY value\n     * @property {number} INVALID_TREASURY_ACCOUNT_FOR_TOKEN=170 INVALID_TREASURY_ACCOUNT_FOR_TOKEN value\n     * @property {number} INVALID_TOKEN_SYMBOL=171 INVALID_TOKEN_SYMBOL value\n     * @property {number} TOKEN_HAS_NO_FREEZE_KEY=172 TOKEN_HAS_NO_FREEZE_KEY value\n     * @property {number} TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN=173 TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN value\n     * @property {number} MISSING_TOKEN_SYMBOL=174 MISSING_TOKEN_SYMBOL value\n     * @property {number} TOKEN_SYMBOL_TOO_LONG=175 TOKEN_SYMBOL_TOO_LONG value\n     * @property {number} ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN=176 ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN value\n     * @property {number} TOKEN_HAS_NO_KYC_KEY=177 TOKEN_HAS_NO_KYC_KEY value\n     * @property {number} INSUFFICIENT_TOKEN_BALANCE=178 INSUFFICIENT_TOKEN_BALANCE value\n     * @property {number} TOKEN_WAS_DELETED=179 TOKEN_WAS_DELETED value\n     * @property {number} TOKEN_HAS_NO_SUPPLY_KEY=180 TOKEN_HAS_NO_SUPPLY_KEY value\n     * @property {number} TOKEN_HAS_NO_WIPE_KEY=181 TOKEN_HAS_NO_WIPE_KEY value\n     * @property {number} INVALID_TOKEN_MINT_AMOUNT=182 INVALID_TOKEN_MINT_AMOUNT value\n     * @property {number} INVALID_TOKEN_BURN_AMOUNT=183 INVALID_TOKEN_BURN_AMOUNT value\n     * @property {number} TOKEN_NOT_ASSOCIATED_TO_ACCOUNT=184 TOKEN_NOT_ASSOCIATED_TO_ACCOUNT value\n     * @property {number} CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT=185 CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT value\n     * @property {number} INVALID_KYC_KEY=186 INVALID_KYC_KEY value\n     * @property {number} INVALID_WIPE_KEY=187 INVALID_WIPE_KEY value\n     * @property {number} INVALID_FREEZE_KEY=188 INVALID_FREEZE_KEY value\n     * @property {number} INVALID_SUPPLY_KEY=189 INVALID_SUPPLY_KEY value\n     * @property {number} MISSING_TOKEN_NAME=190 MISSING_TOKEN_NAME value\n     * @property {number} TOKEN_NAME_TOO_LONG=191 TOKEN_NAME_TOO_LONG value\n     * @property {number} INVALID_WIPING_AMOUNT=192 INVALID_WIPING_AMOUNT value\n     * @property {number} TOKEN_IS_IMMUTABLE=193 TOKEN_IS_IMMUTABLE value\n     * @property {number} TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT=194 TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT value\n     * @property {number} TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES=195 TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES value\n     * @property {number} ACCOUNT_IS_TREASURY=196 ACCOUNT_IS_TREASURY value\n     * @property {number} TOKEN_ID_REPEATED_IN_TOKEN_LIST=197 TOKEN_ID_REPEATED_IN_TOKEN_LIST value\n     * @property {number} TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED=198 TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED value\n     * @property {number} EMPTY_TOKEN_TRANSFER_BODY=199 EMPTY_TOKEN_TRANSFER_BODY value\n     * @property {number} EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS=200 EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS value\n     */\n    proto.ResponseCodeEnum = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"OK\"] = 0;\n        values[valuesById[1] = \"INVALID_TRANSACTION\"] = 1;\n        values[valuesById[2] = \"PAYER_ACCOUNT_NOT_FOUND\"] = 2;\n        values[valuesById[3] = \"INVALID_NODE_ACCOUNT\"] = 3;\n        values[valuesById[4] = \"TRANSACTION_EXPIRED\"] = 4;\n        values[valuesById[5] = \"INVALID_TRANSACTION_START\"] = 5;\n        values[valuesById[6] = \"INVALID_TRANSACTION_DURATION\"] = 6;\n        values[valuesById[7] = \"INVALID_SIGNATURE\"] = 7;\n        values[valuesById[8] = \"MEMO_TOO_LONG\"] = 8;\n        values[valuesById[9] = \"INSUFFICIENT_TX_FEE\"] = 9;\n        values[valuesById[10] = \"INSUFFICIENT_PAYER_BALANCE\"] = 10;\n        values[valuesById[11] = \"DUPLICATE_TRANSACTION\"] = 11;\n        values[valuesById[12] = \"BUSY\"] = 12;\n        values[valuesById[13] = \"NOT_SUPPORTED\"] = 13;\n        values[valuesById[14] = \"INVALID_FILE_ID\"] = 14;\n        values[valuesById[15] = \"INVALID_ACCOUNT_ID\"] = 15;\n        values[valuesById[16] = \"INVALID_CONTRACT_ID\"] = 16;\n        values[valuesById[17] = \"INVALID_TRANSACTION_ID\"] = 17;\n        values[valuesById[18] = \"RECEIPT_NOT_FOUND\"] = 18;\n        values[valuesById[19] = \"RECORD_NOT_FOUND\"] = 19;\n        values[valuesById[20] = \"INVALID_SOLIDITY_ID\"] = 20;\n        values[valuesById[21] = \"UNKNOWN\"] = 21;\n        values[valuesById[22] = \"SUCCESS\"] = 22;\n        values[valuesById[23] = \"FAIL_INVALID\"] = 23;\n        values[valuesById[24] = \"FAIL_FEE\"] = 24;\n        values[valuesById[25] = \"FAIL_BALANCE\"] = 25;\n        values[valuesById[26] = \"KEY_REQUIRED\"] = 26;\n        values[valuesById[27] = \"BAD_ENCODING\"] = 27;\n        values[valuesById[28] = \"INSUFFICIENT_ACCOUNT_BALANCE\"] = 28;\n        values[valuesById[29] = \"INVALID_SOLIDITY_ADDRESS\"] = 29;\n        values[valuesById[30] = \"INSUFFICIENT_GAS\"] = 30;\n        values[valuesById[31] = \"CONTRACT_SIZE_LIMIT_EXCEEDED\"] = 31;\n        values[valuesById[32] = \"LOCAL_CALL_MODIFICATION_EXCEPTION\"] = 32;\n        values[valuesById[33] = \"CONTRACT_REVERT_EXECUTED\"] = 33;\n        values[valuesById[34] = \"CONTRACT_EXECUTION_EXCEPTION\"] = 34;\n        values[valuesById[35] = \"INVALID_RECEIVING_NODE_ACCOUNT\"] = 35;\n        values[valuesById[36] = \"MISSING_QUERY_HEADER\"] = 36;\n        values[valuesById[37] = \"ACCOUNT_UPDATE_FAILED\"] = 37;\n        values[valuesById[38] = \"INVALID_KEY_ENCODING\"] = 38;\n        values[valuesById[39] = \"NULL_SOLIDITY_ADDRESS\"] = 39;\n        values[valuesById[40] = \"CONTRACT_UPDATE_FAILED\"] = 40;\n        values[valuesById[41] = \"INVALID_QUERY_HEADER\"] = 41;\n        values[valuesById[42] = \"INVALID_FEE_SUBMITTED\"] = 42;\n        values[valuesById[43] = \"INVALID_PAYER_SIGNATURE\"] = 43;\n        values[valuesById[44] = \"KEY_NOT_PROVIDED\"] = 44;\n        values[valuesById[45] = \"INVALID_EXPIRATION_TIME\"] = 45;\n        values[valuesById[46] = \"NO_WACL_KEY\"] = 46;\n        values[valuesById[47] = \"FILE_CONTENT_EMPTY\"] = 47;\n        values[valuesById[48] = \"INVALID_ACCOUNT_AMOUNTS\"] = 48;\n        values[valuesById[49] = \"EMPTY_TRANSACTION_BODY\"] = 49;\n        values[valuesById[50] = \"INVALID_TRANSACTION_BODY\"] = 50;\n        values[valuesById[51] = \"INVALID_SIGNATURE_TYPE_MISMATCHING_KEY\"] = 51;\n        values[valuesById[52] = \"INVALID_SIGNATURE_COUNT_MISMATCHING_KEY\"] = 52;\n        values[valuesById[53] = \"EMPTY_LIVE_HASH_BODY\"] = 53;\n        values[valuesById[54] = \"EMPTY_LIVE_HASH\"] = 54;\n        values[valuesById[55] = \"EMPTY_LIVE_HASH_KEYS\"] = 55;\n        values[valuesById[56] = \"INVALID_LIVE_HASH_SIZE\"] = 56;\n        values[valuesById[57] = \"EMPTY_QUERY_BODY\"] = 57;\n        values[valuesById[58] = \"EMPTY_LIVE_HASH_QUERY\"] = 58;\n        values[valuesById[59] = \"LIVE_HASH_NOT_FOUND\"] = 59;\n        values[valuesById[60] = \"ACCOUNT_ID_DOES_NOT_EXIST\"] = 60;\n        values[valuesById[61] = \"LIVE_HASH_ALREADY_EXISTS\"] = 61;\n        values[valuesById[62] = \"INVALID_FILE_WACL\"] = 62;\n        values[valuesById[63] = \"SERIALIZATION_FAILED\"] = 63;\n        values[valuesById[64] = \"TRANSACTION_OVERSIZE\"] = 64;\n        values[valuesById[65] = \"TRANSACTION_TOO_MANY_LAYERS\"] = 65;\n        values[valuesById[66] = \"CONTRACT_DELETED\"] = 66;\n        values[valuesById[67] = \"PLATFORM_NOT_ACTIVE\"] = 67;\n        values[valuesById[68] = \"KEY_PREFIX_MISMATCH\"] = 68;\n        values[valuesById[69] = \"PLATFORM_TRANSACTION_NOT_CREATED\"] = 69;\n        values[valuesById[70] = \"INVALID_RENEWAL_PERIOD\"] = 70;\n        values[valuesById[71] = \"INVALID_PAYER_ACCOUNT_ID\"] = 71;\n        values[valuesById[72] = \"ACCOUNT_DELETED\"] = 72;\n        values[valuesById[73] = \"FILE_DELETED\"] = 73;\n        values[valuesById[74] = \"ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS\"] = 74;\n        values[valuesById[75] = \"SETTING_NEGATIVE_ACCOUNT_BALANCE\"] = 75;\n        values[valuesById[76] = \"OBTAINER_REQUIRED\"] = 76;\n        values[valuesById[77] = \"OBTAINER_SAME_CONTRACT_ID\"] = 77;\n        values[valuesById[78] = \"OBTAINER_DOES_NOT_EXIST\"] = 78;\n        values[valuesById[79] = \"MODIFYING_IMMUTABLE_CONTRACT\"] = 79;\n        values[valuesById[80] = \"FILE_SYSTEM_EXCEPTION\"] = 80;\n        values[valuesById[81] = \"AUTORENEW_DURATION_NOT_IN_RANGE\"] = 81;\n        values[valuesById[82] = \"ERROR_DECODING_BYTESTRING\"] = 82;\n        values[valuesById[83] = \"CONTRACT_FILE_EMPTY\"] = 83;\n        values[valuesById[84] = \"CONTRACT_BYTECODE_EMPTY\"] = 84;\n        values[valuesById[85] = \"INVALID_INITIAL_BALANCE\"] = 85;\n        values[valuesById[86] = \"INVALID_RECEIVE_RECORD_THRESHOLD\"] = 86;\n        values[valuesById[87] = \"INVALID_SEND_RECORD_THRESHOLD\"] = 87;\n        values[valuesById[88] = \"ACCOUNT_IS_NOT_GENESIS_ACCOUNT\"] = 88;\n        values[valuesById[89] = \"PAYER_ACCOUNT_UNAUTHORIZED\"] = 89;\n        values[valuesById[90] = \"INVALID_FREEZE_TRANSACTION_BODY\"] = 90;\n        values[valuesById[91] = \"FREEZE_TRANSACTION_BODY_NOT_FOUND\"] = 91;\n        values[valuesById[92] = \"TRANSFER_LIST_SIZE_LIMIT_EXCEEDED\"] = 92;\n        values[valuesById[93] = \"RESULT_SIZE_LIMIT_EXCEEDED\"] = 93;\n        values[valuesById[94] = \"NOT_SPECIAL_ACCOUNT\"] = 94;\n        values[valuesById[95] = \"CONTRACT_NEGATIVE_GAS\"] = 95;\n        values[valuesById[96] = \"CONTRACT_NEGATIVE_VALUE\"] = 96;\n        values[valuesById[97] = \"INVALID_FEE_FILE\"] = 97;\n        values[valuesById[98] = \"INVALID_EXCHANGE_RATE_FILE\"] = 98;\n        values[valuesById[99] = \"INSUFFICIENT_LOCAL_CALL_GAS\"] = 99;\n        values[valuesById[100] = \"ENTITY_NOT_ALLOWED_TO_DELETE\"] = 100;\n        values[valuesById[101] = \"AUTHORIZATION_FAILED\"] = 101;\n        values[valuesById[102] = \"FILE_UPLOADED_PROTO_INVALID\"] = 102;\n        values[valuesById[103] = \"FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK\"] = 103;\n        values[valuesById[104] = \"FEE_SCHEDULE_FILE_PART_UPLOADED\"] = 104;\n        values[valuesById[105] = \"EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED\"] = 105;\n        values[valuesById[106] = \"MAX_CONTRACT_STORAGE_EXCEEDED\"] = 106;\n        values[valuesById[107] = \"TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT\"] = 107;\n        values[valuesById[108] = \"TOTAL_LEDGER_BALANCE_INVALID\"] = 108;\n        values[valuesById[110] = \"EXPIRATION_REDUCTION_NOT_ALLOWED\"] = 110;\n        values[valuesById[111] = \"MAX_GAS_LIMIT_EXCEEDED\"] = 111;\n        values[valuesById[112] = \"MAX_FILE_SIZE_EXCEEDED\"] = 112;\n        values[valuesById[150] = \"INVALID_TOPIC_ID\"] = 150;\n        values[valuesById[155] = \"INVALID_ADMIN_KEY\"] = 155;\n        values[valuesById[156] = \"INVALID_SUBMIT_KEY\"] = 156;\n        values[valuesById[157] = \"UNAUTHORIZED\"] = 157;\n        values[valuesById[158] = \"INVALID_TOPIC_MESSAGE\"] = 158;\n        values[valuesById[159] = \"INVALID_AUTORENEW_ACCOUNT\"] = 159;\n        values[valuesById[160] = \"AUTORENEW_ACCOUNT_NOT_ALLOWED\"] = 160;\n        values[valuesById[162] = \"TOPIC_EXPIRED\"] = 162;\n        values[valuesById[163] = \"INVALID_CHUNK_NUMBER\"] = 163;\n        values[valuesById[164] = \"INVALID_CHUNK_TRANSACTION_ID\"] = 164;\n        values[valuesById[165] = \"ACCOUNT_FROZEN_FOR_TOKEN\"] = 165;\n        values[valuesById[166] = \"TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED\"] = 166;\n        values[valuesById[167] = \"INVALID_TOKEN_ID\"] = 167;\n        values[valuesById[168] = \"INVALID_TOKEN_DECIMALS\"] = 168;\n        values[valuesById[169] = \"INVALID_TOKEN_INITIAL_SUPPLY\"] = 169;\n        values[valuesById[170] = \"INVALID_TREASURY_ACCOUNT_FOR_TOKEN\"] = 170;\n        values[valuesById[171] = \"INVALID_TOKEN_SYMBOL\"] = 171;\n        values[valuesById[172] = \"TOKEN_HAS_NO_FREEZE_KEY\"] = 172;\n        values[valuesById[173] = \"TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN\"] = 173;\n        values[valuesById[174] = \"MISSING_TOKEN_SYMBOL\"] = 174;\n        values[valuesById[175] = \"TOKEN_SYMBOL_TOO_LONG\"] = 175;\n        values[valuesById[176] = \"ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN\"] = 176;\n        values[valuesById[177] = \"TOKEN_HAS_NO_KYC_KEY\"] = 177;\n        values[valuesById[178] = \"INSUFFICIENT_TOKEN_BALANCE\"] = 178;\n        values[valuesById[179] = \"TOKEN_WAS_DELETED\"] = 179;\n        values[valuesById[180] = \"TOKEN_HAS_NO_SUPPLY_KEY\"] = 180;\n        values[valuesById[181] = \"TOKEN_HAS_NO_WIPE_KEY\"] = 181;\n        values[valuesById[182] = \"INVALID_TOKEN_MINT_AMOUNT\"] = 182;\n        values[valuesById[183] = \"INVALID_TOKEN_BURN_AMOUNT\"] = 183;\n        values[valuesById[184] = \"TOKEN_NOT_ASSOCIATED_TO_ACCOUNT\"] = 184;\n        values[valuesById[185] = \"CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT\"] = 185;\n        values[valuesById[186] = \"INVALID_KYC_KEY\"] = 186;\n        values[valuesById[187] = \"INVALID_WIPE_KEY\"] = 187;\n        values[valuesById[188] = \"INVALID_FREEZE_KEY\"] = 188;\n        values[valuesById[189] = \"INVALID_SUPPLY_KEY\"] = 189;\n        values[valuesById[190] = \"MISSING_TOKEN_NAME\"] = 190;\n        values[valuesById[191] = \"TOKEN_NAME_TOO_LONG\"] = 191;\n        values[valuesById[192] = \"INVALID_WIPING_AMOUNT\"] = 192;\n        values[valuesById[193] = \"TOKEN_IS_IMMUTABLE\"] = 193;\n        values[valuesById[194] = \"TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT\"] = 194;\n        values[valuesById[195] = \"TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES\"] = 195;\n        values[valuesById[196] = \"ACCOUNT_IS_TREASURY\"] = 196;\n        values[valuesById[197] = \"TOKEN_ID_REPEATED_IN_TOKEN_LIST\"] = 197;\n        values[valuesById[198] = \"TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED\"] = 198;\n        values[valuesById[199] = \"EMPTY_TOKEN_TRANSFER_BODY\"] = 199;\n        values[valuesById[200] = \"EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS\"] = 200;\n        return values;\n    })();\n\n    proto.ConsensusTopicInfo = (function() {\n\n        /**\n         * Properties of a ConsensusTopicInfo.\n         * @memberof proto\n         * @interface IConsensusTopicInfo\n         * @property {string|null} [memo] ConsensusTopicInfo memo\n         * @property {Uint8Array|null} [runningHash] ConsensusTopicInfo runningHash\n         * @property {Long|null} [sequenceNumber] ConsensusTopicInfo sequenceNumber\n         * @property {proto.ITimestamp|null} [expirationTime] ConsensusTopicInfo expirationTime\n         * @property {proto.IKey|null} [adminKey] ConsensusTopicInfo adminKey\n         * @property {proto.IKey|null} [submitKey] ConsensusTopicInfo submitKey\n         * @property {proto.IDuration|null} [autoRenewPeriod] ConsensusTopicInfo autoRenewPeriod\n         * @property {proto.IAccountID|null} [autoRenewAccount] ConsensusTopicInfo autoRenewAccount\n         */\n\n        /**\n         * Constructs a new ConsensusTopicInfo.\n         * @memberof proto\n         * @classdesc Represents a ConsensusTopicInfo.\n         * @implements IConsensusTopicInfo\n         * @constructor\n         * @param {proto.IConsensusTopicInfo=} [p] Properties to set\n         */\n        function ConsensusTopicInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusTopicInfo memo.\n         * @member {string} memo\n         * @memberof proto.ConsensusTopicInfo\n         * @instance\n         */\n        ConsensusTopicInfo.prototype.memo = \"\";\n\n        /**\n         * ConsensusTopicInfo runningHash.\n         * @member {Uint8Array} runningHash\n         * @memberof proto.ConsensusTopicInfo\n         * @instance\n         */\n        ConsensusTopicInfo.prototype.runningHash = $util.newBuffer([]);\n\n        /**\n         * ConsensusTopicInfo sequenceNumber.\n         * @member {Long} sequenceNumber\n         * @memberof proto.ConsensusTopicInfo\n         * @instance\n         */\n        ConsensusTopicInfo.prototype.sequenceNumber = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * ConsensusTopicInfo expirationTime.\n         * @member {proto.ITimestamp|null|undefined} expirationTime\n         * @memberof proto.ConsensusTopicInfo\n         * @instance\n         */\n        ConsensusTopicInfo.prototype.expirationTime = null;\n\n        /**\n         * ConsensusTopicInfo adminKey.\n         * @member {proto.IKey|null|undefined} adminKey\n         * @memberof proto.ConsensusTopicInfo\n         * @instance\n         */\n        ConsensusTopicInfo.prototype.adminKey = null;\n\n        /**\n         * ConsensusTopicInfo submitKey.\n         * @member {proto.IKey|null|undefined} submitKey\n         * @memberof proto.ConsensusTopicInfo\n         * @instance\n         */\n        ConsensusTopicInfo.prototype.submitKey = null;\n\n        /**\n         * ConsensusTopicInfo autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.ConsensusTopicInfo\n         * @instance\n         */\n        ConsensusTopicInfo.prototype.autoRenewPeriod = null;\n\n        /**\n         * ConsensusTopicInfo autoRenewAccount.\n         * @member {proto.IAccountID|null|undefined} autoRenewAccount\n         * @memberof proto.ConsensusTopicInfo\n         * @instance\n         */\n        ConsensusTopicInfo.prototype.autoRenewAccount = null;\n\n        /**\n         * Creates a new ConsensusTopicInfo instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusTopicInfo\n         * @static\n         * @param {proto.IConsensusTopicInfo=} [properties] Properties to set\n         * @returns {proto.ConsensusTopicInfo} ConsensusTopicInfo instance\n         */\n        ConsensusTopicInfo.create = function create(properties) {\n            return new ConsensusTopicInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusTopicInfo message. Does not implicitly {@link proto.ConsensusTopicInfo.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusTopicInfo\n         * @static\n         * @param {proto.IConsensusTopicInfo} m ConsensusTopicInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusTopicInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                w.uint32(10).string(m.memo);\n            if (m.runningHash != null && Object.hasOwnProperty.call(m, \"runningHash\"))\n                w.uint32(18).bytes(m.runningHash);\n            if (m.sequenceNumber != null && Object.hasOwnProperty.call(m, \"sequenceNumber\"))\n                w.uint32(24).uint64(m.sequenceNumber);\n            if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                $root.proto.Timestamp.encode(m.expirationTime, w.uint32(34).fork()).ldelim();\n            if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                $root.proto.Key.encode(m.adminKey, w.uint32(42).fork()).ldelim();\n            if (m.submitKey != null && Object.hasOwnProperty.call(m, \"submitKey\"))\n                $root.proto.Key.encode(m.submitKey, w.uint32(50).fork()).ldelim();\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(58).fork()).ldelim();\n            if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, \"autoRenewAccount\"))\n                $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(66).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusTopicInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusTopicInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusTopicInfo} ConsensusTopicInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusTopicInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusTopicInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.memo = r.string();\n                    break;\n                case 2:\n                    m.runningHash = r.bytes();\n                    break;\n                case 3:\n                    m.sequenceNumber = r.uint64();\n                    break;\n                case 4:\n                    m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.submitKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusTopicInfo;\n    })();\n\n    proto.ConsensusService = (function() {\n\n        /**\n         * Constructs a new ConsensusService service.\n         * @memberof proto\n         * @classdesc Represents a ConsensusService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function ConsensusService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (ConsensusService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ConsensusService;\n\n        /**\n         * Creates new ConsensusService service using the specified rpc implementation.\n         * @function create\n         * @memberof proto.ConsensusService\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {ConsensusService} RPC service. Useful where requests and/or responses are streamed.\n         */\n        ConsensusService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link proto.ConsensusService#createTopic}.\n         * @memberof proto.ConsensusService\n         * @typedef createTopicCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls createTopic.\n         * @function createTopic\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.ConsensusService.createTopicCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ConsensusService.prototype.createTopic = function createTopic(request, callback) {\n            return this.rpcCall(createTopic, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"createTopic\" });\n\n        /**\n         * Calls createTopic.\n         * @function createTopic\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.ConsensusService#updateTopic}.\n         * @memberof proto.ConsensusService\n         * @typedef updateTopicCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls updateTopic.\n         * @function updateTopic\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.ConsensusService.updateTopicCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ConsensusService.prototype.updateTopic = function updateTopic(request, callback) {\n            return this.rpcCall(updateTopic, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"updateTopic\" });\n\n        /**\n         * Calls updateTopic.\n         * @function updateTopic\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.ConsensusService#deleteTopic}.\n         * @memberof proto.ConsensusService\n         * @typedef deleteTopicCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls deleteTopic.\n         * @function deleteTopic\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.ConsensusService.deleteTopicCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ConsensusService.prototype.deleteTopic = function deleteTopic(request, callback) {\n            return this.rpcCall(deleteTopic, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"deleteTopic\" });\n\n        /**\n         * Calls deleteTopic.\n         * @function deleteTopic\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.ConsensusService#getTopicInfo}.\n         * @memberof proto.ConsensusService\n         * @typedef getTopicInfoCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getTopicInfo.\n         * @function getTopicInfo\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.ConsensusService.getTopicInfoCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ConsensusService.prototype.getTopicInfo = function getTopicInfo(request, callback) {\n            return this.rpcCall(getTopicInfo, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getTopicInfo\" });\n\n        /**\n         * Calls getTopicInfo.\n         * @function getTopicInfo\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.ConsensusService#submitMessage}.\n         * @memberof proto.ConsensusService\n         * @typedef submitMessageCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls submitMessage.\n         * @function submitMessage\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.ConsensusService.submitMessageCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ConsensusService.prototype.submitMessage = function submitMessage(request, callback) {\n            return this.rpcCall(submitMessage, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"submitMessage\" });\n\n        /**\n         * Calls submitMessage.\n         * @function submitMessage\n         * @memberof proto.ConsensusService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        return ConsensusService;\n    })();\n\n    proto.Query = (function() {\n\n        /**\n         * Properties of a Query.\n         * @memberof proto\n         * @interface IQuery\n         * @property {proto.IGetByKeyQuery|null} [getByKey] Query getByKey\n         * @property {proto.IGetBySolidityIDQuery|null} [getBySolidityID] Query getBySolidityID\n         * @property {proto.IContractCallLocalQuery|null} [contractCallLocal] Query contractCallLocal\n         * @property {proto.IContractGetInfoQuery|null} [contractGetInfo] Query contractGetInfo\n         * @property {proto.IContractGetBytecodeQuery|null} [contractGetBytecode] Query contractGetBytecode\n         * @property {proto.IContractGetRecordsQuery|null} [ContractGetRecords] Query ContractGetRecords\n         * @property {proto.ICryptoGetAccountBalanceQuery|null} [cryptogetAccountBalance] Query cryptogetAccountBalance\n         * @property {proto.ICryptoGetAccountRecordsQuery|null} [cryptoGetAccountRecords] Query cryptoGetAccountRecords\n         * @property {proto.ICryptoGetInfoQuery|null} [cryptoGetInfo] Query cryptoGetInfo\n         * @property {proto.ICryptoGetLiveHashQuery|null} [cryptoGetLiveHash] Query cryptoGetLiveHash\n         * @property {proto.ICryptoGetStakersQuery|null} [cryptoGetProxyStakers] Query cryptoGetProxyStakers\n         * @property {proto.IFileGetContentsQuery|null} [fileGetContents] Query fileGetContents\n         * @property {proto.IFileGetInfoQuery|null} [fileGetInfo] Query fileGetInfo\n         * @property {proto.ITransactionGetReceiptQuery|null} [transactionGetReceipt] Query transactionGetReceipt\n         * @property {proto.ITransactionGetRecordQuery|null} [transactionGetRecord] Query transactionGetRecord\n         * @property {proto.ITransactionGetFastRecordQuery|null} [transactionGetFastRecord] Query transactionGetFastRecord\n         * @property {proto.IConsensusGetTopicInfoQuery|null} [consensusGetTopicInfo] Query consensusGetTopicInfo\n         * @property {proto.INetworkGetVersionInfoQuery|null} [networkGetVersionInfo] Query networkGetVersionInfo\n         * @property {proto.ITokenGetInfoQuery|null} [tokenGetInfo] Query tokenGetInfo\n         */\n\n        /**\n         * Constructs a new Query.\n         * @memberof proto\n         * @classdesc Represents a Query.\n         * @implements IQuery\n         * @constructor\n         * @param {proto.IQuery=} [p] Properties to set\n         */\n        function Query(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Query getByKey.\n         * @member {proto.IGetByKeyQuery|null|undefined} getByKey\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.getByKey = null;\n\n        /**\n         * Query getBySolidityID.\n         * @member {proto.IGetBySolidityIDQuery|null|undefined} getBySolidityID\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.getBySolidityID = null;\n\n        /**\n         * Query contractCallLocal.\n         * @member {proto.IContractCallLocalQuery|null|undefined} contractCallLocal\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.contractCallLocal = null;\n\n        /**\n         * Query contractGetInfo.\n         * @member {proto.IContractGetInfoQuery|null|undefined} contractGetInfo\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.contractGetInfo = null;\n\n        /**\n         * Query contractGetBytecode.\n         * @member {proto.IContractGetBytecodeQuery|null|undefined} contractGetBytecode\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.contractGetBytecode = null;\n\n        /**\n         * Query ContractGetRecords.\n         * @member {proto.IContractGetRecordsQuery|null|undefined} ContractGetRecords\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.ContractGetRecords = null;\n\n        /**\n         * Query cryptogetAccountBalance.\n         * @member {proto.ICryptoGetAccountBalanceQuery|null|undefined} cryptogetAccountBalance\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.cryptogetAccountBalance = null;\n\n        /**\n         * Query cryptoGetAccountRecords.\n         * @member {proto.ICryptoGetAccountRecordsQuery|null|undefined} cryptoGetAccountRecords\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.cryptoGetAccountRecords = null;\n\n        /**\n         * Query cryptoGetInfo.\n         * @member {proto.ICryptoGetInfoQuery|null|undefined} cryptoGetInfo\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.cryptoGetInfo = null;\n\n        /**\n         * Query cryptoGetLiveHash.\n         * @member {proto.ICryptoGetLiveHashQuery|null|undefined} cryptoGetLiveHash\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.cryptoGetLiveHash = null;\n\n        /**\n         * Query cryptoGetProxyStakers.\n         * @member {proto.ICryptoGetStakersQuery|null|undefined} cryptoGetProxyStakers\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.cryptoGetProxyStakers = null;\n\n        /**\n         * Query fileGetContents.\n         * @member {proto.IFileGetContentsQuery|null|undefined} fileGetContents\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.fileGetContents = null;\n\n        /**\n         * Query fileGetInfo.\n         * @member {proto.IFileGetInfoQuery|null|undefined} fileGetInfo\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.fileGetInfo = null;\n\n        /**\n         * Query transactionGetReceipt.\n         * @member {proto.ITransactionGetReceiptQuery|null|undefined} transactionGetReceipt\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.transactionGetReceipt = null;\n\n        /**\n         * Query transactionGetRecord.\n         * @member {proto.ITransactionGetRecordQuery|null|undefined} transactionGetRecord\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.transactionGetRecord = null;\n\n        /**\n         * Query transactionGetFastRecord.\n         * @member {proto.ITransactionGetFastRecordQuery|null|undefined} transactionGetFastRecord\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.transactionGetFastRecord = null;\n\n        /**\n         * Query consensusGetTopicInfo.\n         * @member {proto.IConsensusGetTopicInfoQuery|null|undefined} consensusGetTopicInfo\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.consensusGetTopicInfo = null;\n\n        /**\n         * Query networkGetVersionInfo.\n         * @member {proto.INetworkGetVersionInfoQuery|null|undefined} networkGetVersionInfo\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.networkGetVersionInfo = null;\n\n        /**\n         * Query tokenGetInfo.\n         * @member {proto.ITokenGetInfoQuery|null|undefined} tokenGetInfo\n         * @memberof proto.Query\n         * @instance\n         */\n        Query.prototype.tokenGetInfo = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Query query.\n         * @member {\"getByKey\"|\"getBySolidityID\"|\"contractCallLocal\"|\"contractGetInfo\"|\"contractGetBytecode\"|\"ContractGetRecords\"|\"cryptogetAccountBalance\"|\"cryptoGetAccountRecords\"|\"cryptoGetInfo\"|\"cryptoGetLiveHash\"|\"cryptoGetProxyStakers\"|\"fileGetContents\"|\"fileGetInfo\"|\"transactionGetReceipt\"|\"transactionGetRecord\"|\"transactionGetFastRecord\"|\"consensusGetTopicInfo\"|\"networkGetVersionInfo\"|\"tokenGetInfo\"|undefined} query\n         * @memberof proto.Query\n         * @instance\n         */\n        Object.defineProperty(Query.prototype, \"query\", {\n            get: $util.oneOfGetter($oneOfFields = [\"getByKey\", \"getBySolidityID\", \"contractCallLocal\", \"contractGetInfo\", \"contractGetBytecode\", \"ContractGetRecords\", \"cryptogetAccountBalance\", \"cryptoGetAccountRecords\", \"cryptoGetInfo\", \"cryptoGetLiveHash\", \"cryptoGetProxyStakers\", \"fileGetContents\", \"fileGetInfo\", \"transactionGetReceipt\", \"transactionGetRecord\", \"transactionGetFastRecord\", \"consensusGetTopicInfo\", \"networkGetVersionInfo\", \"tokenGetInfo\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Query instance using the specified properties.\n         * @function create\n         * @memberof proto.Query\n         * @static\n         * @param {proto.IQuery=} [properties] Properties to set\n         * @returns {proto.Query} Query instance\n         */\n        Query.create = function create(properties) {\n            return new Query(properties);\n        };\n\n        /**\n         * Encodes the specified Query message. Does not implicitly {@link proto.Query.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Query\n         * @static\n         * @param {proto.IQuery} m Query message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Query.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.getByKey != null && Object.hasOwnProperty.call(m, \"getByKey\"))\n                $root.proto.GetByKeyQuery.encode(m.getByKey, w.uint32(10).fork()).ldelim();\n            if (m.getBySolidityID != null && Object.hasOwnProperty.call(m, \"getBySolidityID\"))\n                $root.proto.GetBySolidityIDQuery.encode(m.getBySolidityID, w.uint32(18).fork()).ldelim();\n            if (m.contractCallLocal != null && Object.hasOwnProperty.call(m, \"contractCallLocal\"))\n                $root.proto.ContractCallLocalQuery.encode(m.contractCallLocal, w.uint32(26).fork()).ldelim();\n            if (m.contractGetInfo != null && Object.hasOwnProperty.call(m, \"contractGetInfo\"))\n                $root.proto.ContractGetInfoQuery.encode(m.contractGetInfo, w.uint32(34).fork()).ldelim();\n            if (m.contractGetBytecode != null && Object.hasOwnProperty.call(m, \"contractGetBytecode\"))\n                $root.proto.ContractGetBytecodeQuery.encode(m.contractGetBytecode, w.uint32(42).fork()).ldelim();\n            if (m.ContractGetRecords != null && Object.hasOwnProperty.call(m, \"ContractGetRecords\"))\n                $root.proto.ContractGetRecordsQuery.encode(m.ContractGetRecords, w.uint32(50).fork()).ldelim();\n            if (m.cryptogetAccountBalance != null && Object.hasOwnProperty.call(m, \"cryptogetAccountBalance\"))\n                $root.proto.CryptoGetAccountBalanceQuery.encode(m.cryptogetAccountBalance, w.uint32(58).fork()).ldelim();\n            if (m.cryptoGetAccountRecords != null && Object.hasOwnProperty.call(m, \"cryptoGetAccountRecords\"))\n                $root.proto.CryptoGetAccountRecordsQuery.encode(m.cryptoGetAccountRecords, w.uint32(66).fork()).ldelim();\n            if (m.cryptoGetInfo != null && Object.hasOwnProperty.call(m, \"cryptoGetInfo\"))\n                $root.proto.CryptoGetInfoQuery.encode(m.cryptoGetInfo, w.uint32(74).fork()).ldelim();\n            if (m.cryptoGetLiveHash != null && Object.hasOwnProperty.call(m, \"cryptoGetLiveHash\"))\n                $root.proto.CryptoGetLiveHashQuery.encode(m.cryptoGetLiveHash, w.uint32(82).fork()).ldelim();\n            if (m.cryptoGetProxyStakers != null && Object.hasOwnProperty.call(m, \"cryptoGetProxyStakers\"))\n                $root.proto.CryptoGetStakersQuery.encode(m.cryptoGetProxyStakers, w.uint32(90).fork()).ldelim();\n            if (m.fileGetContents != null && Object.hasOwnProperty.call(m, \"fileGetContents\"))\n                $root.proto.FileGetContentsQuery.encode(m.fileGetContents, w.uint32(98).fork()).ldelim();\n            if (m.fileGetInfo != null && Object.hasOwnProperty.call(m, \"fileGetInfo\"))\n                $root.proto.FileGetInfoQuery.encode(m.fileGetInfo, w.uint32(106).fork()).ldelim();\n            if (m.transactionGetReceipt != null && Object.hasOwnProperty.call(m, \"transactionGetReceipt\"))\n                $root.proto.TransactionGetReceiptQuery.encode(m.transactionGetReceipt, w.uint32(114).fork()).ldelim();\n            if (m.transactionGetRecord != null && Object.hasOwnProperty.call(m, \"transactionGetRecord\"))\n                $root.proto.TransactionGetRecordQuery.encode(m.transactionGetRecord, w.uint32(122).fork()).ldelim();\n            if (m.transactionGetFastRecord != null && Object.hasOwnProperty.call(m, \"transactionGetFastRecord\"))\n                $root.proto.TransactionGetFastRecordQuery.encode(m.transactionGetFastRecord, w.uint32(130).fork()).ldelim();\n            if (m.consensusGetTopicInfo != null && Object.hasOwnProperty.call(m, \"consensusGetTopicInfo\"))\n                $root.proto.ConsensusGetTopicInfoQuery.encode(m.consensusGetTopicInfo, w.uint32(402).fork()).ldelim();\n            if (m.networkGetVersionInfo != null && Object.hasOwnProperty.call(m, \"networkGetVersionInfo\"))\n                $root.proto.NetworkGetVersionInfoQuery.encode(m.networkGetVersionInfo, w.uint32(410).fork()).ldelim();\n            if (m.tokenGetInfo != null && Object.hasOwnProperty.call(m, \"tokenGetInfo\"))\n                $root.proto.TokenGetInfoQuery.encode(m.tokenGetInfo, w.uint32(418).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a Query message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Query\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Query} Query\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Query.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Query();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.getByKey = $root.proto.GetByKeyQuery.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.getBySolidityID = $root.proto.GetBySolidityIDQuery.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.contractCallLocal = $root.proto.ContractCallLocalQuery.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.contractGetInfo = $root.proto.ContractGetInfoQuery.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.contractGetBytecode = $root.proto.ContractGetBytecodeQuery.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.ContractGetRecords = $root.proto.ContractGetRecordsQuery.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.cryptogetAccountBalance = $root.proto.CryptoGetAccountBalanceQuery.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.cryptoGetAccountRecords = $root.proto.CryptoGetAccountRecordsQuery.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.cryptoGetInfo = $root.proto.CryptoGetInfoQuery.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.cryptoGetLiveHash = $root.proto.CryptoGetLiveHashQuery.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.cryptoGetProxyStakers = $root.proto.CryptoGetStakersQuery.decode(r, r.uint32());\n                    break;\n                case 12:\n                    m.fileGetContents = $root.proto.FileGetContentsQuery.decode(r, r.uint32());\n                    break;\n                case 13:\n                    m.fileGetInfo = $root.proto.FileGetInfoQuery.decode(r, r.uint32());\n                    break;\n                case 14:\n                    m.transactionGetReceipt = $root.proto.TransactionGetReceiptQuery.decode(r, r.uint32());\n                    break;\n                case 15:\n                    m.transactionGetRecord = $root.proto.TransactionGetRecordQuery.decode(r, r.uint32());\n                    break;\n                case 16:\n                    m.transactionGetFastRecord = $root.proto.TransactionGetFastRecordQuery.decode(r, r.uint32());\n                    break;\n                case 50:\n                    m.consensusGetTopicInfo = $root.proto.ConsensusGetTopicInfoQuery.decode(r, r.uint32());\n                    break;\n                case 51:\n                    m.networkGetVersionInfo = $root.proto.NetworkGetVersionInfoQuery.decode(r, r.uint32());\n                    break;\n                case 52:\n                    m.tokenGetInfo = $root.proto.TokenGetInfoQuery.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Query;\n    })();\n\n    proto.GetByKeyQuery = (function() {\n\n        /**\n         * Properties of a GetByKeyQuery.\n         * @memberof proto\n         * @interface IGetByKeyQuery\n         * @property {proto.IQueryHeader|null} [header] GetByKeyQuery header\n         * @property {proto.IKey|null} [key] GetByKeyQuery key\n         */\n\n        /**\n         * Constructs a new GetByKeyQuery.\n         * @memberof proto\n         * @classdesc Represents a GetByKeyQuery.\n         * @implements IGetByKeyQuery\n         * @constructor\n         * @param {proto.IGetByKeyQuery=} [p] Properties to set\n         */\n        function GetByKeyQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * GetByKeyQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.GetByKeyQuery\n         * @instance\n         */\n        GetByKeyQuery.prototype.header = null;\n\n        /**\n         * GetByKeyQuery key.\n         * @member {proto.IKey|null|undefined} key\n         * @memberof proto.GetByKeyQuery\n         * @instance\n         */\n        GetByKeyQuery.prototype.key = null;\n\n        /**\n         * Creates a new GetByKeyQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.GetByKeyQuery\n         * @static\n         * @param {proto.IGetByKeyQuery=} [properties] Properties to set\n         * @returns {proto.GetByKeyQuery} GetByKeyQuery instance\n         */\n        GetByKeyQuery.create = function create(properties) {\n            return new GetByKeyQuery(properties);\n        };\n\n        /**\n         * Encodes the specified GetByKeyQuery message. Does not implicitly {@link proto.GetByKeyQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.GetByKeyQuery\n         * @static\n         * @param {proto.IGetByKeyQuery} m GetByKeyQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GetByKeyQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n                $root.proto.Key.encode(m.key, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a GetByKeyQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.GetByKeyQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.GetByKeyQuery} GetByKeyQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GetByKeyQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GetByKeyQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.key = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return GetByKeyQuery;\n    })();\n\n    proto.EntityID = (function() {\n\n        /**\n         * Properties of an EntityID.\n         * @memberof proto\n         * @interface IEntityID\n         * @property {proto.IAccountID|null} [accountID] EntityID accountID\n         * @property {proto.ILiveHash|null} [liveHash] EntityID liveHash\n         * @property {proto.IFileID|null} [fileID] EntityID fileID\n         * @property {proto.IContractID|null} [contractID] EntityID contractID\n         */\n\n        /**\n         * Constructs a new EntityID.\n         * @memberof proto\n         * @classdesc Represents an EntityID.\n         * @implements IEntityID\n         * @constructor\n         * @param {proto.IEntityID=} [p] Properties to set\n         */\n        function EntityID(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * EntityID accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.EntityID\n         * @instance\n         */\n        EntityID.prototype.accountID = null;\n\n        /**\n         * EntityID liveHash.\n         * @member {proto.ILiveHash|null|undefined} liveHash\n         * @memberof proto.EntityID\n         * @instance\n         */\n        EntityID.prototype.liveHash = null;\n\n        /**\n         * EntityID fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.EntityID\n         * @instance\n         */\n        EntityID.prototype.fileID = null;\n\n        /**\n         * EntityID contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.EntityID\n         * @instance\n         */\n        EntityID.prototype.contractID = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * EntityID entity.\n         * @member {\"accountID\"|\"liveHash\"|\"fileID\"|\"contractID\"|undefined} entity\n         * @memberof proto.EntityID\n         * @instance\n         */\n        Object.defineProperty(EntityID.prototype, \"entity\", {\n            get: $util.oneOfGetter($oneOfFields = [\"accountID\", \"liveHash\", \"fileID\", \"contractID\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new EntityID instance using the specified properties.\n         * @function create\n         * @memberof proto.EntityID\n         * @static\n         * @param {proto.IEntityID=} [properties] Properties to set\n         * @returns {proto.EntityID} EntityID instance\n         */\n        EntityID.create = function create(properties) {\n            return new EntityID(properties);\n        };\n\n        /**\n         * Encodes the specified EntityID message. Does not implicitly {@link proto.EntityID.verify|verify} messages.\n         * @function encode\n         * @memberof proto.EntityID\n         * @static\n         * @param {proto.IEntityID} m EntityID message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EntityID.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();\n            if (m.liveHash != null && Object.hasOwnProperty.call(m, \"liveHash\"))\n                $root.proto.LiveHash.encode(m.liveHash, w.uint32(18).fork()).ldelim();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(26).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(34).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes an EntityID message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.EntityID\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.EntityID} EntityID\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EntityID.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.EntityID();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.liveHash = $root.proto.LiveHash.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return EntityID;\n    })();\n\n    proto.GetByKeyResponse = (function() {\n\n        /**\n         * Properties of a GetByKeyResponse.\n         * @memberof proto\n         * @interface IGetByKeyResponse\n         * @property {proto.IResponseHeader|null} [header] GetByKeyResponse header\n         * @property {Array.<proto.IEntityID>|null} [entities] GetByKeyResponse entities\n         */\n\n        /**\n         * Constructs a new GetByKeyResponse.\n         * @memberof proto\n         * @classdesc Represents a GetByKeyResponse.\n         * @implements IGetByKeyResponse\n         * @constructor\n         * @param {proto.IGetByKeyResponse=} [p] Properties to set\n         */\n        function GetByKeyResponse(p) {\n            this.entities = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * GetByKeyResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.GetByKeyResponse\n         * @instance\n         */\n        GetByKeyResponse.prototype.header = null;\n\n        /**\n         * GetByKeyResponse entities.\n         * @member {Array.<proto.IEntityID>} entities\n         * @memberof proto.GetByKeyResponse\n         * @instance\n         */\n        GetByKeyResponse.prototype.entities = $util.emptyArray;\n\n        /**\n         * Creates a new GetByKeyResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.GetByKeyResponse\n         * @static\n         * @param {proto.IGetByKeyResponse=} [properties] Properties to set\n         * @returns {proto.GetByKeyResponse} GetByKeyResponse instance\n         */\n        GetByKeyResponse.create = function create(properties) {\n            return new GetByKeyResponse(properties);\n        };\n\n        /**\n         * Encodes the specified GetByKeyResponse message. Does not implicitly {@link proto.GetByKeyResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.GetByKeyResponse\n         * @static\n         * @param {proto.IGetByKeyResponse} m GetByKeyResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GetByKeyResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.entities != null && m.entities.length) {\n                for (var i = 0; i < m.entities.length; ++i)\n                    $root.proto.EntityID.encode(m.entities[i], w.uint32(18).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a GetByKeyResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.GetByKeyResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.GetByKeyResponse} GetByKeyResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GetByKeyResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GetByKeyResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    if (!(m.entities && m.entities.length))\n                        m.entities = [];\n                    m.entities.push($root.proto.EntityID.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return GetByKeyResponse;\n    })();\n\n    proto.GetBySolidityIDQuery = (function() {\n\n        /**\n         * Properties of a GetBySolidityIDQuery.\n         * @memberof proto\n         * @interface IGetBySolidityIDQuery\n         * @property {proto.IQueryHeader|null} [header] GetBySolidityIDQuery header\n         * @property {string|null} [solidityID] GetBySolidityIDQuery solidityID\n         */\n\n        /**\n         * Constructs a new GetBySolidityIDQuery.\n         * @memberof proto\n         * @classdesc Represents a GetBySolidityIDQuery.\n         * @implements IGetBySolidityIDQuery\n         * @constructor\n         * @param {proto.IGetBySolidityIDQuery=} [p] Properties to set\n         */\n        function GetBySolidityIDQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * GetBySolidityIDQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.GetBySolidityIDQuery\n         * @instance\n         */\n        GetBySolidityIDQuery.prototype.header = null;\n\n        /**\n         * GetBySolidityIDQuery solidityID.\n         * @member {string} solidityID\n         * @memberof proto.GetBySolidityIDQuery\n         * @instance\n         */\n        GetBySolidityIDQuery.prototype.solidityID = \"\";\n\n        /**\n         * Creates a new GetBySolidityIDQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.GetBySolidityIDQuery\n         * @static\n         * @param {proto.IGetBySolidityIDQuery=} [properties] Properties to set\n         * @returns {proto.GetBySolidityIDQuery} GetBySolidityIDQuery instance\n         */\n        GetBySolidityIDQuery.create = function create(properties) {\n            return new GetBySolidityIDQuery(properties);\n        };\n\n        /**\n         * Encodes the specified GetBySolidityIDQuery message. Does not implicitly {@link proto.GetBySolidityIDQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.GetBySolidityIDQuery\n         * @static\n         * @param {proto.IGetBySolidityIDQuery} m GetBySolidityIDQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GetBySolidityIDQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.solidityID != null && Object.hasOwnProperty.call(m, \"solidityID\"))\n                w.uint32(18).string(m.solidityID);\n            return w;\n        };\n\n        /**\n         * Decodes a GetBySolidityIDQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.GetBySolidityIDQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.GetBySolidityIDQuery} GetBySolidityIDQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GetBySolidityIDQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GetBySolidityIDQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.solidityID = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return GetBySolidityIDQuery;\n    })();\n\n    proto.GetBySolidityIDResponse = (function() {\n\n        /**\n         * Properties of a GetBySolidityIDResponse.\n         * @memberof proto\n         * @interface IGetBySolidityIDResponse\n         * @property {proto.IResponseHeader|null} [header] GetBySolidityIDResponse header\n         * @property {proto.IAccountID|null} [accountID] GetBySolidityIDResponse accountID\n         * @property {proto.IFileID|null} [fileID] GetBySolidityIDResponse fileID\n         * @property {proto.IContractID|null} [contractID] GetBySolidityIDResponse contractID\n         */\n\n        /**\n         * Constructs a new GetBySolidityIDResponse.\n         * @memberof proto\n         * @classdesc Represents a GetBySolidityIDResponse.\n         * @implements IGetBySolidityIDResponse\n         * @constructor\n         * @param {proto.IGetBySolidityIDResponse=} [p] Properties to set\n         */\n        function GetBySolidityIDResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * GetBySolidityIDResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.GetBySolidityIDResponse\n         * @instance\n         */\n        GetBySolidityIDResponse.prototype.header = null;\n\n        /**\n         * GetBySolidityIDResponse accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.GetBySolidityIDResponse\n         * @instance\n         */\n        GetBySolidityIDResponse.prototype.accountID = null;\n\n        /**\n         * GetBySolidityIDResponse fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.GetBySolidityIDResponse\n         * @instance\n         */\n        GetBySolidityIDResponse.prototype.fileID = null;\n\n        /**\n         * GetBySolidityIDResponse contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.GetBySolidityIDResponse\n         * @instance\n         */\n        GetBySolidityIDResponse.prototype.contractID = null;\n\n        /**\n         * Creates a new GetBySolidityIDResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.GetBySolidityIDResponse\n         * @static\n         * @param {proto.IGetBySolidityIDResponse=} [properties] Properties to set\n         * @returns {proto.GetBySolidityIDResponse} GetBySolidityIDResponse instance\n         */\n        GetBySolidityIDResponse.create = function create(properties) {\n            return new GetBySolidityIDResponse(properties);\n        };\n\n        /**\n         * Encodes the specified GetBySolidityIDResponse message. Does not implicitly {@link proto.GetBySolidityIDResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.GetBySolidityIDResponse\n         * @static\n         * @param {proto.IGetBySolidityIDResponse} m GetBySolidityIDResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GetBySolidityIDResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(26).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(34).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a GetBySolidityIDResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.GetBySolidityIDResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.GetBySolidityIDResponse} GetBySolidityIDResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GetBySolidityIDResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GetBySolidityIDResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return GetBySolidityIDResponse;\n    })();\n\n    proto.ContractLoginfo = (function() {\n\n        /**\n         * Properties of a ContractLoginfo.\n         * @memberof proto\n         * @interface IContractLoginfo\n         * @property {proto.IContractID|null} [contractID] ContractLoginfo contractID\n         * @property {Uint8Array|null} [bloom] ContractLoginfo bloom\n         * @property {Array.<Uint8Array>|null} [topic] ContractLoginfo topic\n         * @property {Uint8Array|null} [data] ContractLoginfo data\n         */\n\n        /**\n         * Constructs a new ContractLoginfo.\n         * @memberof proto\n         * @classdesc Represents a ContractLoginfo.\n         * @implements IContractLoginfo\n         * @constructor\n         * @param {proto.IContractLoginfo=} [p] Properties to set\n         */\n        function ContractLoginfo(p) {\n            this.topic = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractLoginfo contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractLoginfo\n         * @instance\n         */\n        ContractLoginfo.prototype.contractID = null;\n\n        /**\n         * ContractLoginfo bloom.\n         * @member {Uint8Array} bloom\n         * @memberof proto.ContractLoginfo\n         * @instance\n         */\n        ContractLoginfo.prototype.bloom = $util.newBuffer([]);\n\n        /**\n         * ContractLoginfo topic.\n         * @member {Array.<Uint8Array>} topic\n         * @memberof proto.ContractLoginfo\n         * @instance\n         */\n        ContractLoginfo.prototype.topic = $util.emptyArray;\n\n        /**\n         * ContractLoginfo data.\n         * @member {Uint8Array} data\n         * @memberof proto.ContractLoginfo\n         * @instance\n         */\n        ContractLoginfo.prototype.data = $util.newBuffer([]);\n\n        /**\n         * Creates a new ContractLoginfo instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractLoginfo\n         * @static\n         * @param {proto.IContractLoginfo=} [properties] Properties to set\n         * @returns {proto.ContractLoginfo} ContractLoginfo instance\n         */\n        ContractLoginfo.create = function create(properties) {\n            return new ContractLoginfo(properties);\n        };\n\n        /**\n         * Encodes the specified ContractLoginfo message. Does not implicitly {@link proto.ContractLoginfo.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractLoginfo\n         * @static\n         * @param {proto.IContractLoginfo} m ContractLoginfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractLoginfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();\n            if (m.bloom != null && Object.hasOwnProperty.call(m, \"bloom\"))\n                w.uint32(18).bytes(m.bloom);\n            if (m.topic != null && m.topic.length) {\n                for (var i = 0; i < m.topic.length; ++i)\n                    w.uint32(26).bytes(m.topic[i]);\n            }\n            if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                w.uint32(34).bytes(m.data);\n            return w;\n        };\n\n        /**\n         * Decodes a ContractLoginfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractLoginfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractLoginfo} ContractLoginfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractLoginfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractLoginfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.bloom = r.bytes();\n                    break;\n                case 3:\n                    if (!(m.topic && m.topic.length))\n                        m.topic = [];\n                    m.topic.push(r.bytes());\n                    break;\n                case 4:\n                    m.data = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractLoginfo;\n    })();\n\n    proto.ContractFunctionResult = (function() {\n\n        /**\n         * Properties of a ContractFunctionResult.\n         * @memberof proto\n         * @interface IContractFunctionResult\n         * @property {proto.IContractID|null} [contractID] ContractFunctionResult contractID\n         * @property {Uint8Array|null} [contractCallResult] ContractFunctionResult contractCallResult\n         * @property {string|null} [errorMessage] ContractFunctionResult errorMessage\n         * @property {Uint8Array|null} [bloom] ContractFunctionResult bloom\n         * @property {Long|null} [gasUsed] ContractFunctionResult gasUsed\n         * @property {Array.<proto.IContractLoginfo>|null} [logInfo] ContractFunctionResult logInfo\n         * @property {Array.<proto.IContractID>|null} [createdContractIDs] ContractFunctionResult createdContractIDs\n         */\n\n        /**\n         * Constructs a new ContractFunctionResult.\n         * @memberof proto\n         * @classdesc Represents a ContractFunctionResult.\n         * @implements IContractFunctionResult\n         * @constructor\n         * @param {proto.IContractFunctionResult=} [p] Properties to set\n         */\n        function ContractFunctionResult(p) {\n            this.logInfo = [];\n            this.createdContractIDs = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractFunctionResult contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractFunctionResult\n         * @instance\n         */\n        ContractFunctionResult.prototype.contractID = null;\n\n        /**\n         * ContractFunctionResult contractCallResult.\n         * @member {Uint8Array} contractCallResult\n         * @memberof proto.ContractFunctionResult\n         * @instance\n         */\n        ContractFunctionResult.prototype.contractCallResult = $util.newBuffer([]);\n\n        /**\n         * ContractFunctionResult errorMessage.\n         * @member {string} errorMessage\n         * @memberof proto.ContractFunctionResult\n         * @instance\n         */\n        ContractFunctionResult.prototype.errorMessage = \"\";\n\n        /**\n         * ContractFunctionResult bloom.\n         * @member {Uint8Array} bloom\n         * @memberof proto.ContractFunctionResult\n         * @instance\n         */\n        ContractFunctionResult.prototype.bloom = $util.newBuffer([]);\n\n        /**\n         * ContractFunctionResult gasUsed.\n         * @member {Long} gasUsed\n         * @memberof proto.ContractFunctionResult\n         * @instance\n         */\n        ContractFunctionResult.prototype.gasUsed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * ContractFunctionResult logInfo.\n         * @member {Array.<proto.IContractLoginfo>} logInfo\n         * @memberof proto.ContractFunctionResult\n         * @instance\n         */\n        ContractFunctionResult.prototype.logInfo = $util.emptyArray;\n\n        /**\n         * ContractFunctionResult createdContractIDs.\n         * @member {Array.<proto.IContractID>} createdContractIDs\n         * @memberof proto.ContractFunctionResult\n         * @instance\n         */\n        ContractFunctionResult.prototype.createdContractIDs = $util.emptyArray;\n\n        /**\n         * Creates a new ContractFunctionResult instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractFunctionResult\n         * @static\n         * @param {proto.IContractFunctionResult=} [properties] Properties to set\n         * @returns {proto.ContractFunctionResult} ContractFunctionResult instance\n         */\n        ContractFunctionResult.create = function create(properties) {\n            return new ContractFunctionResult(properties);\n        };\n\n        /**\n         * Encodes the specified ContractFunctionResult message. Does not implicitly {@link proto.ContractFunctionResult.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractFunctionResult\n         * @static\n         * @param {proto.IContractFunctionResult} m ContractFunctionResult message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractFunctionResult.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();\n            if (m.contractCallResult != null && Object.hasOwnProperty.call(m, \"contractCallResult\"))\n                w.uint32(18).bytes(m.contractCallResult);\n            if (m.errorMessage != null && Object.hasOwnProperty.call(m, \"errorMessage\"))\n                w.uint32(26).string(m.errorMessage);\n            if (m.bloom != null && Object.hasOwnProperty.call(m, \"bloom\"))\n                w.uint32(34).bytes(m.bloom);\n            if (m.gasUsed != null && Object.hasOwnProperty.call(m, \"gasUsed\"))\n                w.uint32(40).uint64(m.gasUsed);\n            if (m.logInfo != null && m.logInfo.length) {\n                for (var i = 0; i < m.logInfo.length; ++i)\n                    $root.proto.ContractLoginfo.encode(m.logInfo[i], w.uint32(50).fork()).ldelim();\n            }\n            if (m.createdContractIDs != null && m.createdContractIDs.length) {\n                for (var i = 0; i < m.createdContractIDs.length; ++i)\n                    $root.proto.ContractID.encode(m.createdContractIDs[i], w.uint32(58).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a ContractFunctionResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractFunctionResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractFunctionResult} ContractFunctionResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractFunctionResult.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractFunctionResult();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractCallResult = r.bytes();\n                    break;\n                case 3:\n                    m.errorMessage = r.string();\n                    break;\n                case 4:\n                    m.bloom = r.bytes();\n                    break;\n                case 5:\n                    m.gasUsed = r.uint64();\n                    break;\n                case 6:\n                    if (!(m.logInfo && m.logInfo.length))\n                        m.logInfo = [];\n                    m.logInfo.push($root.proto.ContractLoginfo.decode(r, r.uint32()));\n                    break;\n                case 7:\n                    if (!(m.createdContractIDs && m.createdContractIDs.length))\n                        m.createdContractIDs = [];\n                    m.createdContractIDs.push($root.proto.ContractID.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractFunctionResult;\n    })();\n\n    proto.ContractCallLocalQuery = (function() {\n\n        /**\n         * Properties of a ContractCallLocalQuery.\n         * @memberof proto\n         * @interface IContractCallLocalQuery\n         * @property {proto.IQueryHeader|null} [header] ContractCallLocalQuery header\n         * @property {proto.IContractID|null} [contractID] ContractCallLocalQuery contractID\n         * @property {Long|null} [gas] ContractCallLocalQuery gas\n         * @property {Uint8Array|null} [functionParameters] ContractCallLocalQuery functionParameters\n         * @property {Long|null} [maxResultSize] ContractCallLocalQuery maxResultSize\n         */\n\n        /**\n         * Constructs a new ContractCallLocalQuery.\n         * @memberof proto\n         * @classdesc Represents a ContractCallLocalQuery.\n         * @implements IContractCallLocalQuery\n         * @constructor\n         * @param {proto.IContractCallLocalQuery=} [p] Properties to set\n         */\n        function ContractCallLocalQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractCallLocalQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.ContractCallLocalQuery\n         * @instance\n         */\n        ContractCallLocalQuery.prototype.header = null;\n\n        /**\n         * ContractCallLocalQuery contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractCallLocalQuery\n         * @instance\n         */\n        ContractCallLocalQuery.prototype.contractID = null;\n\n        /**\n         * ContractCallLocalQuery gas.\n         * @member {Long} gas\n         * @memberof proto.ContractCallLocalQuery\n         * @instance\n         */\n        ContractCallLocalQuery.prototype.gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ContractCallLocalQuery functionParameters.\n         * @member {Uint8Array} functionParameters\n         * @memberof proto.ContractCallLocalQuery\n         * @instance\n         */\n        ContractCallLocalQuery.prototype.functionParameters = $util.newBuffer([]);\n\n        /**\n         * ContractCallLocalQuery maxResultSize.\n         * @member {Long} maxResultSize\n         * @memberof proto.ContractCallLocalQuery\n         * @instance\n         */\n        ContractCallLocalQuery.prototype.maxResultSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new ContractCallLocalQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractCallLocalQuery\n         * @static\n         * @param {proto.IContractCallLocalQuery=} [properties] Properties to set\n         * @returns {proto.ContractCallLocalQuery} ContractCallLocalQuery instance\n         */\n        ContractCallLocalQuery.create = function create(properties) {\n            return new ContractCallLocalQuery(properties);\n        };\n\n        /**\n         * Encodes the specified ContractCallLocalQuery message. Does not implicitly {@link proto.ContractCallLocalQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractCallLocalQuery\n         * @static\n         * @param {proto.IContractCallLocalQuery} m ContractCallLocalQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractCallLocalQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();\n            if (m.gas != null && Object.hasOwnProperty.call(m, \"gas\"))\n                w.uint32(24).int64(m.gas);\n            if (m.functionParameters != null && Object.hasOwnProperty.call(m, \"functionParameters\"))\n                w.uint32(34).bytes(m.functionParameters);\n            if (m.maxResultSize != null && Object.hasOwnProperty.call(m, \"maxResultSize\"))\n                w.uint32(40).int64(m.maxResultSize);\n            return w;\n        };\n\n        /**\n         * Decodes a ContractCallLocalQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractCallLocalQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractCallLocalQuery} ContractCallLocalQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractCallLocalQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractCallLocalQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.gas = r.int64();\n                    break;\n                case 4:\n                    m.functionParameters = r.bytes();\n                    break;\n                case 5:\n                    m.maxResultSize = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractCallLocalQuery;\n    })();\n\n    proto.ContractCallLocalResponse = (function() {\n\n        /**\n         * Properties of a ContractCallLocalResponse.\n         * @memberof proto\n         * @interface IContractCallLocalResponse\n         * @property {proto.IResponseHeader|null} [header] ContractCallLocalResponse header\n         * @property {proto.IContractFunctionResult|null} [functionResult] ContractCallLocalResponse functionResult\n         */\n\n        /**\n         * Constructs a new ContractCallLocalResponse.\n         * @memberof proto\n         * @classdesc Represents a ContractCallLocalResponse.\n         * @implements IContractCallLocalResponse\n         * @constructor\n         * @param {proto.IContractCallLocalResponse=} [p] Properties to set\n         */\n        function ContractCallLocalResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractCallLocalResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.ContractCallLocalResponse\n         * @instance\n         */\n        ContractCallLocalResponse.prototype.header = null;\n\n        /**\n         * ContractCallLocalResponse functionResult.\n         * @member {proto.IContractFunctionResult|null|undefined} functionResult\n         * @memberof proto.ContractCallLocalResponse\n         * @instance\n         */\n        ContractCallLocalResponse.prototype.functionResult = null;\n\n        /**\n         * Creates a new ContractCallLocalResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractCallLocalResponse\n         * @static\n         * @param {proto.IContractCallLocalResponse=} [properties] Properties to set\n         * @returns {proto.ContractCallLocalResponse} ContractCallLocalResponse instance\n         */\n        ContractCallLocalResponse.create = function create(properties) {\n            return new ContractCallLocalResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ContractCallLocalResponse message. Does not implicitly {@link proto.ContractCallLocalResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractCallLocalResponse\n         * @static\n         * @param {proto.IContractCallLocalResponse} m ContractCallLocalResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractCallLocalResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.functionResult != null && Object.hasOwnProperty.call(m, \"functionResult\"))\n                $root.proto.ContractFunctionResult.encode(m.functionResult, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ContractCallLocalResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractCallLocalResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractCallLocalResponse} ContractCallLocalResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractCallLocalResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractCallLocalResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.functionResult = $root.proto.ContractFunctionResult.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractCallLocalResponse;\n    })();\n\n    proto.ContractGetInfoQuery = (function() {\n\n        /**\n         * Properties of a ContractGetInfoQuery.\n         * @memberof proto\n         * @interface IContractGetInfoQuery\n         * @property {proto.IQueryHeader|null} [header] ContractGetInfoQuery header\n         * @property {proto.IContractID|null} [contractID] ContractGetInfoQuery contractID\n         */\n\n        /**\n         * Constructs a new ContractGetInfoQuery.\n         * @memberof proto\n         * @classdesc Represents a ContractGetInfoQuery.\n         * @implements IContractGetInfoQuery\n         * @constructor\n         * @param {proto.IContractGetInfoQuery=} [p] Properties to set\n         */\n        function ContractGetInfoQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractGetInfoQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.ContractGetInfoQuery\n         * @instance\n         */\n        ContractGetInfoQuery.prototype.header = null;\n\n        /**\n         * ContractGetInfoQuery contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractGetInfoQuery\n         * @instance\n         */\n        ContractGetInfoQuery.prototype.contractID = null;\n\n        /**\n         * Creates a new ContractGetInfoQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractGetInfoQuery\n         * @static\n         * @param {proto.IContractGetInfoQuery=} [properties] Properties to set\n         * @returns {proto.ContractGetInfoQuery} ContractGetInfoQuery instance\n         */\n        ContractGetInfoQuery.create = function create(properties) {\n            return new ContractGetInfoQuery(properties);\n        };\n\n        /**\n         * Encodes the specified ContractGetInfoQuery message. Does not implicitly {@link proto.ContractGetInfoQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractGetInfoQuery\n         * @static\n         * @param {proto.IContractGetInfoQuery} m ContractGetInfoQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractGetInfoQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ContractGetInfoQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractGetInfoQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractGetInfoQuery} ContractGetInfoQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractGetInfoQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetInfoQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractGetInfoQuery;\n    })();\n\n    proto.ContractGetInfoResponse = (function() {\n\n        /**\n         * Properties of a ContractGetInfoResponse.\n         * @memberof proto\n         * @interface IContractGetInfoResponse\n         * @property {proto.IResponseHeader|null} [header] ContractGetInfoResponse header\n         * @property {proto.ContractGetInfoResponse.IContractInfo|null} [contractInfo] ContractGetInfoResponse contractInfo\n         */\n\n        /**\n         * Constructs a new ContractGetInfoResponse.\n         * @memberof proto\n         * @classdesc Represents a ContractGetInfoResponse.\n         * @implements IContractGetInfoResponse\n         * @constructor\n         * @param {proto.IContractGetInfoResponse=} [p] Properties to set\n         */\n        function ContractGetInfoResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractGetInfoResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.ContractGetInfoResponse\n         * @instance\n         */\n        ContractGetInfoResponse.prototype.header = null;\n\n        /**\n         * ContractGetInfoResponse contractInfo.\n         * @member {proto.ContractGetInfoResponse.IContractInfo|null|undefined} contractInfo\n         * @memberof proto.ContractGetInfoResponse\n         * @instance\n         */\n        ContractGetInfoResponse.prototype.contractInfo = null;\n\n        /**\n         * Creates a new ContractGetInfoResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractGetInfoResponse\n         * @static\n         * @param {proto.IContractGetInfoResponse=} [properties] Properties to set\n         * @returns {proto.ContractGetInfoResponse} ContractGetInfoResponse instance\n         */\n        ContractGetInfoResponse.create = function create(properties) {\n            return new ContractGetInfoResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ContractGetInfoResponse message. Does not implicitly {@link proto.ContractGetInfoResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractGetInfoResponse\n         * @static\n         * @param {proto.IContractGetInfoResponse} m ContractGetInfoResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractGetInfoResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.contractInfo != null && Object.hasOwnProperty.call(m, \"contractInfo\"))\n                $root.proto.ContractGetInfoResponse.ContractInfo.encode(m.contractInfo, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ContractGetInfoResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractGetInfoResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractGetInfoResponse} ContractGetInfoResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractGetInfoResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetInfoResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractInfo = $root.proto.ContractGetInfoResponse.ContractInfo.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        ContractGetInfoResponse.ContractInfo = (function() {\n\n            /**\n             * Properties of a ContractInfo.\n             * @memberof proto.ContractGetInfoResponse\n             * @interface IContractInfo\n             * @property {proto.IContractID|null} [contractID] ContractInfo contractID\n             * @property {proto.IAccountID|null} [accountID] ContractInfo accountID\n             * @property {string|null} [contractAccountID] ContractInfo contractAccountID\n             * @property {proto.IKey|null} [adminKey] ContractInfo adminKey\n             * @property {proto.ITimestamp|null} [expirationTime] ContractInfo expirationTime\n             * @property {proto.IDuration|null} [autoRenewPeriod] ContractInfo autoRenewPeriod\n             * @property {Long|null} [storage] ContractInfo storage\n             * @property {string|null} [memo] ContractInfo memo\n             * @property {Long|null} [balance] ContractInfo balance\n             * @property {boolean|null} [deleted] ContractInfo deleted\n             * @property {Array.<proto.ITokenRelationship>|null} [tokenRelationships] ContractInfo tokenRelationships\n             */\n\n            /**\n             * Constructs a new ContractInfo.\n             * @memberof proto.ContractGetInfoResponse\n             * @classdesc Represents a ContractInfo.\n             * @implements IContractInfo\n             * @constructor\n             * @param {proto.ContractGetInfoResponse.IContractInfo=} [p] Properties to set\n             */\n            function ContractInfo(p) {\n                this.tokenRelationships = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ContractInfo contractID.\n             * @member {proto.IContractID|null|undefined} contractID\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.contractID = null;\n\n            /**\n             * ContractInfo accountID.\n             * @member {proto.IAccountID|null|undefined} accountID\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.accountID = null;\n\n            /**\n             * ContractInfo contractAccountID.\n             * @member {string} contractAccountID\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.contractAccountID = \"\";\n\n            /**\n             * ContractInfo adminKey.\n             * @member {proto.IKey|null|undefined} adminKey\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.adminKey = null;\n\n            /**\n             * ContractInfo expirationTime.\n             * @member {proto.ITimestamp|null|undefined} expirationTime\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.expirationTime = null;\n\n            /**\n             * ContractInfo autoRenewPeriod.\n             * @member {proto.IDuration|null|undefined} autoRenewPeriod\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.autoRenewPeriod = null;\n\n            /**\n             * ContractInfo storage.\n             * @member {Long} storage\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.storage = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * ContractInfo memo.\n             * @member {string} memo\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.memo = \"\";\n\n            /**\n             * ContractInfo balance.\n             * @member {Long} balance\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * ContractInfo deleted.\n             * @member {boolean} deleted\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.deleted = false;\n\n            /**\n             * ContractInfo tokenRelationships.\n             * @member {Array.<proto.ITokenRelationship>} tokenRelationships\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @instance\n             */\n            ContractInfo.prototype.tokenRelationships = $util.emptyArray;\n\n            /**\n             * Creates a new ContractInfo instance using the specified properties.\n             * @function create\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @static\n             * @param {proto.ContractGetInfoResponse.IContractInfo=} [properties] Properties to set\n             * @returns {proto.ContractGetInfoResponse.ContractInfo} ContractInfo instance\n             */\n            ContractInfo.create = function create(properties) {\n                return new ContractInfo(properties);\n            };\n\n            /**\n             * Encodes the specified ContractInfo message. Does not implicitly {@link proto.ContractGetInfoResponse.ContractInfo.verify|verify} messages.\n             * @function encode\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @static\n             * @param {proto.ContractGetInfoResponse.IContractInfo} m ContractInfo message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContractInfo.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                    $root.proto.ContractID.encode(m.contractID, w.uint32(10).fork()).ldelim();\n                if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                    $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n                if (m.contractAccountID != null && Object.hasOwnProperty.call(m, \"contractAccountID\"))\n                    w.uint32(26).string(m.contractAccountID);\n                if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                    $root.proto.Key.encode(m.adminKey, w.uint32(34).fork()).ldelim();\n                if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(42).fork()).ldelim();\n                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(50).fork()).ldelim();\n                if (m.storage != null && Object.hasOwnProperty.call(m, \"storage\"))\n                    w.uint32(56).int64(m.storage);\n                if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                    w.uint32(66).string(m.memo);\n                if (m.balance != null && Object.hasOwnProperty.call(m, \"balance\"))\n                    w.uint32(72).uint64(m.balance);\n                if (m.deleted != null && Object.hasOwnProperty.call(m, \"deleted\"))\n                    w.uint32(80).bool(m.deleted);\n                if (m.tokenRelationships != null && m.tokenRelationships.length) {\n                    for (var i = 0; i < m.tokenRelationships.length; ++i)\n                        $root.proto.TokenRelationship.encode(m.tokenRelationships[i], w.uint32(90).fork()).ldelim();\n                }\n                return w;\n            };\n\n            /**\n             * Decodes a ContractInfo message from the specified reader or buffer.\n             * @function decode\n             * @memberof proto.ContractGetInfoResponse.ContractInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {proto.ContractGetInfoResponse.ContractInfo} ContractInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContractInfo.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetInfoResponse.ContractInfo();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                        break;\n                    case 2:\n                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                        break;\n                    case 3:\n                        m.contractAccountID = r.string();\n                        break;\n                    case 4:\n                        m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                        break;\n                    case 5:\n                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                        break;\n                    case 6:\n                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                        break;\n                    case 7:\n                        m.storage = r.int64();\n                        break;\n                    case 8:\n                        m.memo = r.string();\n                        break;\n                    case 9:\n                        m.balance = r.uint64();\n                        break;\n                    case 10:\n                        m.deleted = r.bool();\n                        break;\n                    case 11:\n                        if (!(m.tokenRelationships && m.tokenRelationships.length))\n                            m.tokenRelationships = [];\n                        m.tokenRelationships.push($root.proto.TokenRelationship.decode(r, r.uint32()));\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return ContractInfo;\n        })();\n\n        return ContractGetInfoResponse;\n    })();\n\n    proto.ContractGetBytecodeQuery = (function() {\n\n        /**\n         * Properties of a ContractGetBytecodeQuery.\n         * @memberof proto\n         * @interface IContractGetBytecodeQuery\n         * @property {proto.IQueryHeader|null} [header] ContractGetBytecodeQuery header\n         * @property {proto.IContractID|null} [contractID] ContractGetBytecodeQuery contractID\n         */\n\n        /**\n         * Constructs a new ContractGetBytecodeQuery.\n         * @memberof proto\n         * @classdesc Represents a ContractGetBytecodeQuery.\n         * @implements IContractGetBytecodeQuery\n         * @constructor\n         * @param {proto.IContractGetBytecodeQuery=} [p] Properties to set\n         */\n        function ContractGetBytecodeQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractGetBytecodeQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.ContractGetBytecodeQuery\n         * @instance\n         */\n        ContractGetBytecodeQuery.prototype.header = null;\n\n        /**\n         * ContractGetBytecodeQuery contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractGetBytecodeQuery\n         * @instance\n         */\n        ContractGetBytecodeQuery.prototype.contractID = null;\n\n        /**\n         * Creates a new ContractGetBytecodeQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractGetBytecodeQuery\n         * @static\n         * @param {proto.IContractGetBytecodeQuery=} [properties] Properties to set\n         * @returns {proto.ContractGetBytecodeQuery} ContractGetBytecodeQuery instance\n         */\n        ContractGetBytecodeQuery.create = function create(properties) {\n            return new ContractGetBytecodeQuery(properties);\n        };\n\n        /**\n         * Encodes the specified ContractGetBytecodeQuery message. Does not implicitly {@link proto.ContractGetBytecodeQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractGetBytecodeQuery\n         * @static\n         * @param {proto.IContractGetBytecodeQuery} m ContractGetBytecodeQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractGetBytecodeQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ContractGetBytecodeQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractGetBytecodeQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractGetBytecodeQuery} ContractGetBytecodeQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractGetBytecodeQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetBytecodeQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractGetBytecodeQuery;\n    })();\n\n    proto.ContractGetBytecodeResponse = (function() {\n\n        /**\n         * Properties of a ContractGetBytecodeResponse.\n         * @memberof proto\n         * @interface IContractGetBytecodeResponse\n         * @property {proto.IResponseHeader|null} [header] ContractGetBytecodeResponse header\n         * @property {Uint8Array|null} [bytecode] ContractGetBytecodeResponse bytecode\n         */\n\n        /**\n         * Constructs a new ContractGetBytecodeResponse.\n         * @memberof proto\n         * @classdesc Represents a ContractGetBytecodeResponse.\n         * @implements IContractGetBytecodeResponse\n         * @constructor\n         * @param {proto.IContractGetBytecodeResponse=} [p] Properties to set\n         */\n        function ContractGetBytecodeResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractGetBytecodeResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.ContractGetBytecodeResponse\n         * @instance\n         */\n        ContractGetBytecodeResponse.prototype.header = null;\n\n        /**\n         * ContractGetBytecodeResponse bytecode.\n         * @member {Uint8Array} bytecode\n         * @memberof proto.ContractGetBytecodeResponse\n         * @instance\n         */\n        ContractGetBytecodeResponse.prototype.bytecode = $util.newBuffer([]);\n\n        /**\n         * Creates a new ContractGetBytecodeResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractGetBytecodeResponse\n         * @static\n         * @param {proto.IContractGetBytecodeResponse=} [properties] Properties to set\n         * @returns {proto.ContractGetBytecodeResponse} ContractGetBytecodeResponse instance\n         */\n        ContractGetBytecodeResponse.create = function create(properties) {\n            return new ContractGetBytecodeResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ContractGetBytecodeResponse message. Does not implicitly {@link proto.ContractGetBytecodeResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractGetBytecodeResponse\n         * @static\n         * @param {proto.IContractGetBytecodeResponse} m ContractGetBytecodeResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractGetBytecodeResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.bytecode != null && Object.hasOwnProperty.call(m, \"bytecode\"))\n                w.uint32(50).bytes(m.bytecode);\n            return w;\n        };\n\n        /**\n         * Decodes a ContractGetBytecodeResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractGetBytecodeResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractGetBytecodeResponse} ContractGetBytecodeResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractGetBytecodeResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetBytecodeResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.bytecode = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractGetBytecodeResponse;\n    })();\n\n    proto.ContractGetRecordsQuery = (function() {\n\n        /**\n         * Properties of a ContractGetRecordsQuery.\n         * @memberof proto\n         * @interface IContractGetRecordsQuery\n         * @property {proto.IQueryHeader|null} [header] ContractGetRecordsQuery header\n         * @property {proto.IContractID|null} [contractID] ContractGetRecordsQuery contractID\n         */\n\n        /**\n         * Constructs a new ContractGetRecordsQuery.\n         * @memberof proto\n         * @classdesc Represents a ContractGetRecordsQuery.\n         * @implements IContractGetRecordsQuery\n         * @constructor\n         * @param {proto.IContractGetRecordsQuery=} [p] Properties to set\n         */\n        function ContractGetRecordsQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractGetRecordsQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.ContractGetRecordsQuery\n         * @instance\n         */\n        ContractGetRecordsQuery.prototype.header = null;\n\n        /**\n         * ContractGetRecordsQuery contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractGetRecordsQuery\n         * @instance\n         */\n        ContractGetRecordsQuery.prototype.contractID = null;\n\n        /**\n         * Creates a new ContractGetRecordsQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractGetRecordsQuery\n         * @static\n         * @param {proto.IContractGetRecordsQuery=} [properties] Properties to set\n         * @returns {proto.ContractGetRecordsQuery} ContractGetRecordsQuery instance\n         */\n        ContractGetRecordsQuery.create = function create(properties) {\n            return new ContractGetRecordsQuery(properties);\n        };\n\n        /**\n         * Encodes the specified ContractGetRecordsQuery message. Does not implicitly {@link proto.ContractGetRecordsQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractGetRecordsQuery\n         * @static\n         * @param {proto.IContractGetRecordsQuery} m ContractGetRecordsQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractGetRecordsQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ContractGetRecordsQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractGetRecordsQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractGetRecordsQuery} ContractGetRecordsQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractGetRecordsQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetRecordsQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractGetRecordsQuery;\n    })();\n\n    proto.ContractGetRecordsResponse = (function() {\n\n        /**\n         * Properties of a ContractGetRecordsResponse.\n         * @memberof proto\n         * @interface IContractGetRecordsResponse\n         * @property {proto.IResponseHeader|null} [header] ContractGetRecordsResponse header\n         * @property {proto.IContractID|null} [contractID] ContractGetRecordsResponse contractID\n         * @property {Array.<proto.ITransactionRecord>|null} [records] ContractGetRecordsResponse records\n         */\n\n        /**\n         * Constructs a new ContractGetRecordsResponse.\n         * @memberof proto\n         * @classdesc Represents a ContractGetRecordsResponse.\n         * @implements IContractGetRecordsResponse\n         * @constructor\n         * @param {proto.IContractGetRecordsResponse=} [p] Properties to set\n         */\n        function ContractGetRecordsResponse(p) {\n            this.records = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ContractGetRecordsResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.ContractGetRecordsResponse\n         * @instance\n         */\n        ContractGetRecordsResponse.prototype.header = null;\n\n        /**\n         * ContractGetRecordsResponse contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.ContractGetRecordsResponse\n         * @instance\n         */\n        ContractGetRecordsResponse.prototype.contractID = null;\n\n        /**\n         * ContractGetRecordsResponse records.\n         * @member {Array.<proto.ITransactionRecord>} records\n         * @memberof proto.ContractGetRecordsResponse\n         * @instance\n         */\n        ContractGetRecordsResponse.prototype.records = $util.emptyArray;\n\n        /**\n         * Creates a new ContractGetRecordsResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.ContractGetRecordsResponse\n         * @static\n         * @param {proto.IContractGetRecordsResponse=} [properties] Properties to set\n         * @returns {proto.ContractGetRecordsResponse} ContractGetRecordsResponse instance\n         */\n        ContractGetRecordsResponse.create = function create(properties) {\n            return new ContractGetRecordsResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ContractGetRecordsResponse message. Does not implicitly {@link proto.ContractGetRecordsResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ContractGetRecordsResponse\n         * @static\n         * @param {proto.IContractGetRecordsResponse} m ContractGetRecordsResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContractGetRecordsResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(18).fork()).ldelim();\n            if (m.records != null && m.records.length) {\n                for (var i = 0; i < m.records.length; ++i)\n                    $root.proto.TransactionRecord.encode(m.records[i], w.uint32(26).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a ContractGetRecordsResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ContractGetRecordsResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ContractGetRecordsResponse} ContractGetRecordsResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContractGetRecordsResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ContractGetRecordsResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    if (!(m.records && m.records.length))\n                        m.records = [];\n                    m.records.push($root.proto.TransactionRecord.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ContractGetRecordsResponse;\n    })();\n\n    proto.TransactionRecord = (function() {\n\n        /**\n         * Properties of a TransactionRecord.\n         * @memberof proto\n         * @interface ITransactionRecord\n         * @property {proto.ITransactionReceipt|null} [receipt] TransactionRecord receipt\n         * @property {Uint8Array|null} [transactionHash] TransactionRecord transactionHash\n         * @property {proto.ITimestamp|null} [consensusTimestamp] TransactionRecord consensusTimestamp\n         * @property {proto.ITransactionID|null} [transactionID] TransactionRecord transactionID\n         * @property {string|null} [memo] TransactionRecord memo\n         * @property {Long|null} [transactionFee] TransactionRecord transactionFee\n         * @property {proto.IContractFunctionResult|null} [contractCallResult] TransactionRecord contractCallResult\n         * @property {proto.IContractFunctionResult|null} [contractCreateResult] TransactionRecord contractCreateResult\n         * @property {proto.ITransferList|null} [transferList] TransactionRecord transferList\n         * @property {Array.<proto.ITokenTransferList>|null} [tokenTransferLists] TransactionRecord tokenTransferLists\n         */\n\n        /**\n         * Constructs a new TransactionRecord.\n         * @memberof proto\n         * @classdesc Represents a TransactionRecord.\n         * @implements ITransactionRecord\n         * @constructor\n         * @param {proto.ITransactionRecord=} [p] Properties to set\n         */\n        function TransactionRecord(p) {\n            this.tokenTransferLists = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionRecord receipt.\n         * @member {proto.ITransactionReceipt|null|undefined} receipt\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.receipt = null;\n\n        /**\n         * TransactionRecord transactionHash.\n         * @member {Uint8Array} transactionHash\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.transactionHash = $util.newBuffer([]);\n\n        /**\n         * TransactionRecord consensusTimestamp.\n         * @member {proto.ITimestamp|null|undefined} consensusTimestamp\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.consensusTimestamp = null;\n\n        /**\n         * TransactionRecord transactionID.\n         * @member {proto.ITransactionID|null|undefined} transactionID\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.transactionID = null;\n\n        /**\n         * TransactionRecord memo.\n         * @member {string} memo\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.memo = \"\";\n\n        /**\n         * TransactionRecord transactionFee.\n         * @member {Long} transactionFee\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.transactionFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TransactionRecord contractCallResult.\n         * @member {proto.IContractFunctionResult|null|undefined} contractCallResult\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.contractCallResult = null;\n\n        /**\n         * TransactionRecord contractCreateResult.\n         * @member {proto.IContractFunctionResult|null|undefined} contractCreateResult\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.contractCreateResult = null;\n\n        /**\n         * TransactionRecord transferList.\n         * @member {proto.ITransferList|null|undefined} transferList\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.transferList = null;\n\n        /**\n         * TransactionRecord tokenTransferLists.\n         * @member {Array.<proto.ITokenTransferList>} tokenTransferLists\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        TransactionRecord.prototype.tokenTransferLists = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * TransactionRecord body.\n         * @member {\"contractCallResult\"|\"contractCreateResult\"|undefined} body\n         * @memberof proto.TransactionRecord\n         * @instance\n         */\n        Object.defineProperty(TransactionRecord.prototype, \"body\", {\n            get: $util.oneOfGetter($oneOfFields = [\"contractCallResult\", \"contractCreateResult\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TransactionRecord instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionRecord\n         * @static\n         * @param {proto.ITransactionRecord=} [properties] Properties to set\n         * @returns {proto.TransactionRecord} TransactionRecord instance\n         */\n        TransactionRecord.create = function create(properties) {\n            return new TransactionRecord(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionRecord message. Does not implicitly {@link proto.TransactionRecord.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionRecord\n         * @static\n         * @param {proto.ITransactionRecord} m TransactionRecord message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionRecord.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.receipt != null && Object.hasOwnProperty.call(m, \"receipt\"))\n                $root.proto.TransactionReceipt.encode(m.receipt, w.uint32(10).fork()).ldelim();\n            if (m.transactionHash != null && Object.hasOwnProperty.call(m, \"transactionHash\"))\n                w.uint32(18).bytes(m.transactionHash);\n            if (m.consensusTimestamp != null && Object.hasOwnProperty.call(m, \"consensusTimestamp\"))\n                $root.proto.Timestamp.encode(m.consensusTimestamp, w.uint32(26).fork()).ldelim();\n            if (m.transactionID != null && Object.hasOwnProperty.call(m, \"transactionID\"))\n                $root.proto.TransactionID.encode(m.transactionID, w.uint32(34).fork()).ldelim();\n            if (m.memo != null && Object.hasOwnProperty.call(m, \"memo\"))\n                w.uint32(42).string(m.memo);\n            if (m.transactionFee != null && Object.hasOwnProperty.call(m, \"transactionFee\"))\n                w.uint32(48).uint64(m.transactionFee);\n            if (m.contractCallResult != null && Object.hasOwnProperty.call(m, \"contractCallResult\"))\n                $root.proto.ContractFunctionResult.encode(m.contractCallResult, w.uint32(58).fork()).ldelim();\n            if (m.contractCreateResult != null && Object.hasOwnProperty.call(m, \"contractCreateResult\"))\n                $root.proto.ContractFunctionResult.encode(m.contractCreateResult, w.uint32(66).fork()).ldelim();\n            if (m.transferList != null && Object.hasOwnProperty.call(m, \"transferList\"))\n                $root.proto.TransferList.encode(m.transferList, w.uint32(82).fork()).ldelim();\n            if (m.tokenTransferLists != null && m.tokenTransferLists.length) {\n                for (var i = 0; i < m.tokenTransferLists.length; ++i)\n                    $root.proto.TokenTransferList.encode(m.tokenTransferLists[i], w.uint32(90).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionRecord message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionRecord\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionRecord} TransactionRecord\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionRecord.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionRecord();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.receipt = $root.proto.TransactionReceipt.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.transactionHash = r.bytes();\n                    break;\n                case 3:\n                    m.consensusTimestamp = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.memo = r.string();\n                    break;\n                case 6:\n                    m.transactionFee = r.uint64();\n                    break;\n                case 7:\n                    m.contractCallResult = $root.proto.ContractFunctionResult.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.contractCreateResult = $root.proto.ContractFunctionResult.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.transferList = $root.proto.TransferList.decode(r, r.uint32());\n                    break;\n                case 11:\n                    if (!(m.tokenTransferLists && m.tokenTransferLists.length))\n                        m.tokenTransferLists = [];\n                    m.tokenTransferLists.push($root.proto.TokenTransferList.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionRecord;\n    })();\n\n    proto.TransactionReceipt = (function() {\n\n        /**\n         * Properties of a TransactionReceipt.\n         * @memberof proto\n         * @interface ITransactionReceipt\n         * @property {proto.ResponseCodeEnum|null} [status] TransactionReceipt status\n         * @property {proto.IAccountID|null} [accountID] TransactionReceipt accountID\n         * @property {proto.IFileID|null} [fileID] TransactionReceipt fileID\n         * @property {proto.IContractID|null} [contractID] TransactionReceipt contractID\n         * @property {proto.IExchangeRateSet|null} [exchangeRate] TransactionReceipt exchangeRate\n         * @property {proto.ITopicID|null} [topicID] TransactionReceipt topicID\n         * @property {Long|null} [topicSequenceNumber] TransactionReceipt topicSequenceNumber\n         * @property {Uint8Array|null} [topicRunningHash] TransactionReceipt topicRunningHash\n         * @property {Long|null} [topicRunningHashVersion] TransactionReceipt topicRunningHashVersion\n         * @property {proto.ITokenID|null} [tokenID] TransactionReceipt tokenID\n         * @property {Long|null} [newTotalSupply] TransactionReceipt newTotalSupply\n         */\n\n        /**\n         * Constructs a new TransactionReceipt.\n         * @memberof proto\n         * @classdesc Represents a TransactionReceipt.\n         * @implements ITransactionReceipt\n         * @constructor\n         * @param {proto.ITransactionReceipt=} [p] Properties to set\n         */\n        function TransactionReceipt(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionReceipt status.\n         * @member {proto.ResponseCodeEnum} status\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.status = 0;\n\n        /**\n         * TransactionReceipt accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.accountID = null;\n\n        /**\n         * TransactionReceipt fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.fileID = null;\n\n        /**\n         * TransactionReceipt contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.contractID = null;\n\n        /**\n         * TransactionReceipt exchangeRate.\n         * @member {proto.IExchangeRateSet|null|undefined} exchangeRate\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.exchangeRate = null;\n\n        /**\n         * TransactionReceipt topicID.\n         * @member {proto.ITopicID|null|undefined} topicID\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.topicID = null;\n\n        /**\n         * TransactionReceipt topicSequenceNumber.\n         * @member {Long} topicSequenceNumber\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.topicSequenceNumber = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TransactionReceipt topicRunningHash.\n         * @member {Uint8Array} topicRunningHash\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.topicRunningHash = $util.newBuffer([]);\n\n        /**\n         * TransactionReceipt topicRunningHashVersion.\n         * @member {Long} topicRunningHashVersion\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.topicRunningHashVersion = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TransactionReceipt tokenID.\n         * @member {proto.ITokenID|null|undefined} tokenID\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.tokenID = null;\n\n        /**\n         * TransactionReceipt newTotalSupply.\n         * @member {Long} newTotalSupply\n         * @memberof proto.TransactionReceipt\n         * @instance\n         */\n        TransactionReceipt.prototype.newTotalSupply = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new TransactionReceipt instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionReceipt\n         * @static\n         * @param {proto.ITransactionReceipt=} [properties] Properties to set\n         * @returns {proto.TransactionReceipt} TransactionReceipt instance\n         */\n        TransactionReceipt.create = function create(properties) {\n            return new TransactionReceipt(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionReceipt message. Does not implicitly {@link proto.TransactionReceipt.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionReceipt\n         * @static\n         * @param {proto.ITransactionReceipt} m TransactionReceipt message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionReceipt.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.status != null && Object.hasOwnProperty.call(m, \"status\"))\n                w.uint32(8).int32(m.status);\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(26).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(34).fork()).ldelim();\n            if (m.exchangeRate != null && Object.hasOwnProperty.call(m, \"exchangeRate\"))\n                $root.proto.ExchangeRateSet.encode(m.exchangeRate, w.uint32(42).fork()).ldelim();\n            if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                $root.proto.TopicID.encode(m.topicID, w.uint32(50).fork()).ldelim();\n            if (m.topicSequenceNumber != null && Object.hasOwnProperty.call(m, \"topicSequenceNumber\"))\n                w.uint32(56).uint64(m.topicSequenceNumber);\n            if (m.topicRunningHash != null && Object.hasOwnProperty.call(m, \"topicRunningHash\"))\n                w.uint32(66).bytes(m.topicRunningHash);\n            if (m.topicRunningHashVersion != null && Object.hasOwnProperty.call(m, \"topicRunningHashVersion\"))\n                w.uint32(72).uint64(m.topicRunningHashVersion);\n            if (m.tokenID != null && Object.hasOwnProperty.call(m, \"tokenID\"))\n                $root.proto.TokenID.encode(m.tokenID, w.uint32(82).fork()).ldelim();\n            if (m.newTotalSupply != null && Object.hasOwnProperty.call(m, \"newTotalSupply\"))\n                w.uint32(88).uint64(m.newTotalSupply);\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionReceipt message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionReceipt\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionReceipt} TransactionReceipt\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionReceipt.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionReceipt();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.status = r.int32();\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.exchangeRate = $root.proto.ExchangeRateSet.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.topicID = $root.proto.TopicID.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.topicSequenceNumber = r.uint64();\n                    break;\n                case 8:\n                    m.topicRunningHash = r.bytes();\n                    break;\n                case 9:\n                    m.topicRunningHashVersion = r.uint64();\n                    break;\n                case 10:\n                    m.tokenID = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.newTotalSupply = r.uint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionReceipt;\n    })();\n\n    proto.ExchangeRate = (function() {\n\n        /**\n         * Properties of an ExchangeRate.\n         * @memberof proto\n         * @interface IExchangeRate\n         * @property {number|null} [hbarEquiv] ExchangeRate hbarEquiv\n         * @property {number|null} [centEquiv] ExchangeRate centEquiv\n         * @property {proto.ITimestampSeconds|null} [expirationTime] ExchangeRate expirationTime\n         */\n\n        /**\n         * Constructs a new ExchangeRate.\n         * @memberof proto\n         * @classdesc Represents an ExchangeRate.\n         * @implements IExchangeRate\n         * @constructor\n         * @param {proto.IExchangeRate=} [p] Properties to set\n         */\n        function ExchangeRate(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ExchangeRate hbarEquiv.\n         * @member {number} hbarEquiv\n         * @memberof proto.ExchangeRate\n         * @instance\n         */\n        ExchangeRate.prototype.hbarEquiv = 0;\n\n        /**\n         * ExchangeRate centEquiv.\n         * @member {number} centEquiv\n         * @memberof proto.ExchangeRate\n         * @instance\n         */\n        ExchangeRate.prototype.centEquiv = 0;\n\n        /**\n         * ExchangeRate expirationTime.\n         * @member {proto.ITimestampSeconds|null|undefined} expirationTime\n         * @memberof proto.ExchangeRate\n         * @instance\n         */\n        ExchangeRate.prototype.expirationTime = null;\n\n        /**\n         * Creates a new ExchangeRate instance using the specified properties.\n         * @function create\n         * @memberof proto.ExchangeRate\n         * @static\n         * @param {proto.IExchangeRate=} [properties] Properties to set\n         * @returns {proto.ExchangeRate} ExchangeRate instance\n         */\n        ExchangeRate.create = function create(properties) {\n            return new ExchangeRate(properties);\n        };\n\n        /**\n         * Encodes the specified ExchangeRate message. Does not implicitly {@link proto.ExchangeRate.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ExchangeRate\n         * @static\n         * @param {proto.IExchangeRate} m ExchangeRate message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExchangeRate.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.hbarEquiv != null && Object.hasOwnProperty.call(m, \"hbarEquiv\"))\n                w.uint32(8).int32(m.hbarEquiv);\n            if (m.centEquiv != null && Object.hasOwnProperty.call(m, \"centEquiv\"))\n                w.uint32(16).int32(m.centEquiv);\n            if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                $root.proto.TimestampSeconds.encode(m.expirationTime, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes an ExchangeRate message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ExchangeRate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ExchangeRate} ExchangeRate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExchangeRate.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ExchangeRate();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.hbarEquiv = r.int32();\n                    break;\n                case 2:\n                    m.centEquiv = r.int32();\n                    break;\n                case 3:\n                    m.expirationTime = $root.proto.TimestampSeconds.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ExchangeRate;\n    })();\n\n    proto.ExchangeRateSet = (function() {\n\n        /**\n         * Properties of an ExchangeRateSet.\n         * @memberof proto\n         * @interface IExchangeRateSet\n         * @property {proto.IExchangeRate|null} [currentRate] ExchangeRateSet currentRate\n         * @property {proto.IExchangeRate|null} [nextRate] ExchangeRateSet nextRate\n         */\n\n        /**\n         * Constructs a new ExchangeRateSet.\n         * @memberof proto\n         * @classdesc Represents an ExchangeRateSet.\n         * @implements IExchangeRateSet\n         * @constructor\n         * @param {proto.IExchangeRateSet=} [p] Properties to set\n         */\n        function ExchangeRateSet(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ExchangeRateSet currentRate.\n         * @member {proto.IExchangeRate|null|undefined} currentRate\n         * @memberof proto.ExchangeRateSet\n         * @instance\n         */\n        ExchangeRateSet.prototype.currentRate = null;\n\n        /**\n         * ExchangeRateSet nextRate.\n         * @member {proto.IExchangeRate|null|undefined} nextRate\n         * @memberof proto.ExchangeRateSet\n         * @instance\n         */\n        ExchangeRateSet.prototype.nextRate = null;\n\n        /**\n         * Creates a new ExchangeRateSet instance using the specified properties.\n         * @function create\n         * @memberof proto.ExchangeRateSet\n         * @static\n         * @param {proto.IExchangeRateSet=} [properties] Properties to set\n         * @returns {proto.ExchangeRateSet} ExchangeRateSet instance\n         */\n        ExchangeRateSet.create = function create(properties) {\n            return new ExchangeRateSet(properties);\n        };\n\n        /**\n         * Encodes the specified ExchangeRateSet message. Does not implicitly {@link proto.ExchangeRateSet.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ExchangeRateSet\n         * @static\n         * @param {proto.IExchangeRateSet} m ExchangeRateSet message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExchangeRateSet.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.currentRate != null && Object.hasOwnProperty.call(m, \"currentRate\"))\n                $root.proto.ExchangeRate.encode(m.currentRate, w.uint32(10).fork()).ldelim();\n            if (m.nextRate != null && Object.hasOwnProperty.call(m, \"nextRate\"))\n                $root.proto.ExchangeRate.encode(m.nextRate, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes an ExchangeRateSet message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ExchangeRateSet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ExchangeRateSet} ExchangeRateSet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExchangeRateSet.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ExchangeRateSet();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.currentRate = $root.proto.ExchangeRate.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.nextRate = $root.proto.ExchangeRate.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ExchangeRateSet;\n    })();\n\n    proto.CryptoGetAccountBalanceQuery = (function() {\n\n        /**\n         * Properties of a CryptoGetAccountBalanceQuery.\n         * @memberof proto\n         * @interface ICryptoGetAccountBalanceQuery\n         * @property {proto.IQueryHeader|null} [header] CryptoGetAccountBalanceQuery header\n         * @property {proto.IAccountID|null} [accountID] CryptoGetAccountBalanceQuery accountID\n         * @property {proto.IContractID|null} [contractID] CryptoGetAccountBalanceQuery contractID\n         */\n\n        /**\n         * Constructs a new CryptoGetAccountBalanceQuery.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetAccountBalanceQuery.\n         * @implements ICryptoGetAccountBalanceQuery\n         * @constructor\n         * @param {proto.ICryptoGetAccountBalanceQuery=} [p] Properties to set\n         */\n        function CryptoGetAccountBalanceQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetAccountBalanceQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.CryptoGetAccountBalanceQuery\n         * @instance\n         */\n        CryptoGetAccountBalanceQuery.prototype.header = null;\n\n        /**\n         * CryptoGetAccountBalanceQuery accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.CryptoGetAccountBalanceQuery\n         * @instance\n         */\n        CryptoGetAccountBalanceQuery.prototype.accountID = null;\n\n        /**\n         * CryptoGetAccountBalanceQuery contractID.\n         * @member {proto.IContractID|null|undefined} contractID\n         * @memberof proto.CryptoGetAccountBalanceQuery\n         * @instance\n         */\n        CryptoGetAccountBalanceQuery.prototype.contractID = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * CryptoGetAccountBalanceQuery balanceSource.\n         * @member {\"accountID\"|\"contractID\"|undefined} balanceSource\n         * @memberof proto.CryptoGetAccountBalanceQuery\n         * @instance\n         */\n        Object.defineProperty(CryptoGetAccountBalanceQuery.prototype, \"balanceSource\", {\n            get: $util.oneOfGetter($oneOfFields = [\"accountID\", \"contractID\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CryptoGetAccountBalanceQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetAccountBalanceQuery\n         * @static\n         * @param {proto.ICryptoGetAccountBalanceQuery=} [properties] Properties to set\n         * @returns {proto.CryptoGetAccountBalanceQuery} CryptoGetAccountBalanceQuery instance\n         */\n        CryptoGetAccountBalanceQuery.create = function create(properties) {\n            return new CryptoGetAccountBalanceQuery(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetAccountBalanceQuery message. Does not implicitly {@link proto.CryptoGetAccountBalanceQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetAccountBalanceQuery\n         * @static\n         * @param {proto.ICryptoGetAccountBalanceQuery} m CryptoGetAccountBalanceQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetAccountBalanceQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            if (m.contractID != null && Object.hasOwnProperty.call(m, \"contractID\"))\n                $root.proto.ContractID.encode(m.contractID, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetAccountBalanceQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetAccountBalanceQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetAccountBalanceQuery} CryptoGetAccountBalanceQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetAccountBalanceQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetAccountBalanceQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.contractID = $root.proto.ContractID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetAccountBalanceQuery;\n    })();\n\n    proto.TokenBalance = (function() {\n\n        /**\n         * Properties of a TokenBalance.\n         * @memberof proto\n         * @interface ITokenBalance\n         * @property {proto.ITokenID|null} [tokenId] TokenBalance tokenId\n         * @property {Long|null} [balance] TokenBalance balance\n         */\n\n        /**\n         * Constructs a new TokenBalance.\n         * @memberof proto\n         * @classdesc Represents a TokenBalance.\n         * @implements ITokenBalance\n         * @constructor\n         * @param {proto.ITokenBalance=} [p] Properties to set\n         */\n        function TokenBalance(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenBalance tokenId.\n         * @member {proto.ITokenID|null|undefined} tokenId\n         * @memberof proto.TokenBalance\n         * @instance\n         */\n        TokenBalance.prototype.tokenId = null;\n\n        /**\n         * TokenBalance balance.\n         * @member {Long} balance\n         * @memberof proto.TokenBalance\n         * @instance\n         */\n        TokenBalance.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new TokenBalance instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenBalance\n         * @static\n         * @param {proto.ITokenBalance=} [properties] Properties to set\n         * @returns {proto.TokenBalance} TokenBalance instance\n         */\n        TokenBalance.create = function create(properties) {\n            return new TokenBalance(properties);\n        };\n\n        /**\n         * Encodes the specified TokenBalance message. Does not implicitly {@link proto.TokenBalance.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenBalance\n         * @static\n         * @param {proto.ITokenBalance} m TokenBalance message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenBalance.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.tokenId != null && Object.hasOwnProperty.call(m, \"tokenId\"))\n                $root.proto.TokenID.encode(m.tokenId, w.uint32(10).fork()).ldelim();\n            if (m.balance != null && Object.hasOwnProperty.call(m, \"balance\"))\n                w.uint32(16).uint64(m.balance);\n            return w;\n        };\n\n        /**\n         * Decodes a TokenBalance message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenBalance\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenBalance} TokenBalance\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenBalance.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenBalance();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.tokenId = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.balance = r.uint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenBalance;\n    })();\n\n    proto.TokenBalances = (function() {\n\n        /**\n         * Properties of a TokenBalances.\n         * @memberof proto\n         * @interface ITokenBalances\n         * @property {Array.<proto.ITokenBalance>|null} [tokenBalances] TokenBalances tokenBalances\n         */\n\n        /**\n         * Constructs a new TokenBalances.\n         * @memberof proto\n         * @classdesc Represents a TokenBalances.\n         * @implements ITokenBalances\n         * @constructor\n         * @param {proto.ITokenBalances=} [p] Properties to set\n         */\n        function TokenBalances(p) {\n            this.tokenBalances = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenBalances tokenBalances.\n         * @member {Array.<proto.ITokenBalance>} tokenBalances\n         * @memberof proto.TokenBalances\n         * @instance\n         */\n        TokenBalances.prototype.tokenBalances = $util.emptyArray;\n\n        /**\n         * Creates a new TokenBalances instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenBalances\n         * @static\n         * @param {proto.ITokenBalances=} [properties] Properties to set\n         * @returns {proto.TokenBalances} TokenBalances instance\n         */\n        TokenBalances.create = function create(properties) {\n            return new TokenBalances(properties);\n        };\n\n        /**\n         * Encodes the specified TokenBalances message. Does not implicitly {@link proto.TokenBalances.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenBalances\n         * @static\n         * @param {proto.ITokenBalances} m TokenBalances message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenBalances.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.tokenBalances != null && m.tokenBalances.length) {\n                for (var i = 0; i < m.tokenBalances.length; ++i)\n                    $root.proto.TokenBalance.encode(m.tokenBalances[i], w.uint32(10).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TokenBalances message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenBalances\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenBalances} TokenBalances\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenBalances.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenBalances();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.tokenBalances && m.tokenBalances.length))\n                        m.tokenBalances = [];\n                    m.tokenBalances.push($root.proto.TokenBalance.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenBalances;\n    })();\n\n    proto.CryptoGetAccountBalanceResponse = (function() {\n\n        /**\n         * Properties of a CryptoGetAccountBalanceResponse.\n         * @memberof proto\n         * @interface ICryptoGetAccountBalanceResponse\n         * @property {proto.IResponseHeader|null} [header] CryptoGetAccountBalanceResponse header\n         * @property {proto.IAccountID|null} [accountID] CryptoGetAccountBalanceResponse accountID\n         * @property {Long|null} [balance] CryptoGetAccountBalanceResponse balance\n         * @property {Array.<proto.ITokenBalance>|null} [tokenBalances] CryptoGetAccountBalanceResponse tokenBalances\n         */\n\n        /**\n         * Constructs a new CryptoGetAccountBalanceResponse.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetAccountBalanceResponse.\n         * @implements ICryptoGetAccountBalanceResponse\n         * @constructor\n         * @param {proto.ICryptoGetAccountBalanceResponse=} [p] Properties to set\n         */\n        function CryptoGetAccountBalanceResponse(p) {\n            this.tokenBalances = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetAccountBalanceResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.CryptoGetAccountBalanceResponse\n         * @instance\n         */\n        CryptoGetAccountBalanceResponse.prototype.header = null;\n\n        /**\n         * CryptoGetAccountBalanceResponse accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.CryptoGetAccountBalanceResponse\n         * @instance\n         */\n        CryptoGetAccountBalanceResponse.prototype.accountID = null;\n\n        /**\n         * CryptoGetAccountBalanceResponse balance.\n         * @member {Long} balance\n         * @memberof proto.CryptoGetAccountBalanceResponse\n         * @instance\n         */\n        CryptoGetAccountBalanceResponse.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CryptoGetAccountBalanceResponse tokenBalances.\n         * @member {Array.<proto.ITokenBalance>} tokenBalances\n         * @memberof proto.CryptoGetAccountBalanceResponse\n         * @instance\n         */\n        CryptoGetAccountBalanceResponse.prototype.tokenBalances = $util.emptyArray;\n\n        /**\n         * Creates a new CryptoGetAccountBalanceResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetAccountBalanceResponse\n         * @static\n         * @param {proto.ICryptoGetAccountBalanceResponse=} [properties] Properties to set\n         * @returns {proto.CryptoGetAccountBalanceResponse} CryptoGetAccountBalanceResponse instance\n         */\n        CryptoGetAccountBalanceResponse.create = function create(properties) {\n            return new CryptoGetAccountBalanceResponse(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetAccountBalanceResponse message. Does not implicitly {@link proto.CryptoGetAccountBalanceResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetAccountBalanceResponse\n         * @static\n         * @param {proto.ICryptoGetAccountBalanceResponse} m CryptoGetAccountBalanceResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetAccountBalanceResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            if (m.balance != null && Object.hasOwnProperty.call(m, \"balance\"))\n                w.uint32(24).uint64(m.balance);\n            if (m.tokenBalances != null && m.tokenBalances.length) {\n                for (var i = 0; i < m.tokenBalances.length; ++i)\n                    $root.proto.TokenBalance.encode(m.tokenBalances[i], w.uint32(34).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetAccountBalanceResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetAccountBalanceResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetAccountBalanceResponse} CryptoGetAccountBalanceResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetAccountBalanceResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetAccountBalanceResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.balance = r.uint64();\n                    break;\n                case 4:\n                    if (!(m.tokenBalances && m.tokenBalances.length))\n                        m.tokenBalances = [];\n                    m.tokenBalances.push($root.proto.TokenBalance.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetAccountBalanceResponse;\n    })();\n\n    proto.CryptoGetAccountRecordsQuery = (function() {\n\n        /**\n         * Properties of a CryptoGetAccountRecordsQuery.\n         * @memberof proto\n         * @interface ICryptoGetAccountRecordsQuery\n         * @property {proto.IQueryHeader|null} [header] CryptoGetAccountRecordsQuery header\n         * @property {proto.IAccountID|null} [accountID] CryptoGetAccountRecordsQuery accountID\n         */\n\n        /**\n         * Constructs a new CryptoGetAccountRecordsQuery.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetAccountRecordsQuery.\n         * @implements ICryptoGetAccountRecordsQuery\n         * @constructor\n         * @param {proto.ICryptoGetAccountRecordsQuery=} [p] Properties to set\n         */\n        function CryptoGetAccountRecordsQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetAccountRecordsQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.CryptoGetAccountRecordsQuery\n         * @instance\n         */\n        CryptoGetAccountRecordsQuery.prototype.header = null;\n\n        /**\n         * CryptoGetAccountRecordsQuery accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.CryptoGetAccountRecordsQuery\n         * @instance\n         */\n        CryptoGetAccountRecordsQuery.prototype.accountID = null;\n\n        /**\n         * Creates a new CryptoGetAccountRecordsQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetAccountRecordsQuery\n         * @static\n         * @param {proto.ICryptoGetAccountRecordsQuery=} [properties] Properties to set\n         * @returns {proto.CryptoGetAccountRecordsQuery} CryptoGetAccountRecordsQuery instance\n         */\n        CryptoGetAccountRecordsQuery.create = function create(properties) {\n            return new CryptoGetAccountRecordsQuery(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetAccountRecordsQuery message. Does not implicitly {@link proto.CryptoGetAccountRecordsQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetAccountRecordsQuery\n         * @static\n         * @param {proto.ICryptoGetAccountRecordsQuery} m CryptoGetAccountRecordsQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetAccountRecordsQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetAccountRecordsQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetAccountRecordsQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetAccountRecordsQuery} CryptoGetAccountRecordsQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetAccountRecordsQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetAccountRecordsQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetAccountRecordsQuery;\n    })();\n\n    proto.CryptoGetAccountRecordsResponse = (function() {\n\n        /**\n         * Properties of a CryptoGetAccountRecordsResponse.\n         * @memberof proto\n         * @interface ICryptoGetAccountRecordsResponse\n         * @property {proto.IResponseHeader|null} [header] CryptoGetAccountRecordsResponse header\n         * @property {proto.IAccountID|null} [accountID] CryptoGetAccountRecordsResponse accountID\n         * @property {Array.<proto.ITransactionRecord>|null} [records] CryptoGetAccountRecordsResponse records\n         */\n\n        /**\n         * Constructs a new CryptoGetAccountRecordsResponse.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetAccountRecordsResponse.\n         * @implements ICryptoGetAccountRecordsResponse\n         * @constructor\n         * @param {proto.ICryptoGetAccountRecordsResponse=} [p] Properties to set\n         */\n        function CryptoGetAccountRecordsResponse(p) {\n            this.records = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetAccountRecordsResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.CryptoGetAccountRecordsResponse\n         * @instance\n         */\n        CryptoGetAccountRecordsResponse.prototype.header = null;\n\n        /**\n         * CryptoGetAccountRecordsResponse accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.CryptoGetAccountRecordsResponse\n         * @instance\n         */\n        CryptoGetAccountRecordsResponse.prototype.accountID = null;\n\n        /**\n         * CryptoGetAccountRecordsResponse records.\n         * @member {Array.<proto.ITransactionRecord>} records\n         * @memberof proto.CryptoGetAccountRecordsResponse\n         * @instance\n         */\n        CryptoGetAccountRecordsResponse.prototype.records = $util.emptyArray;\n\n        /**\n         * Creates a new CryptoGetAccountRecordsResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetAccountRecordsResponse\n         * @static\n         * @param {proto.ICryptoGetAccountRecordsResponse=} [properties] Properties to set\n         * @returns {proto.CryptoGetAccountRecordsResponse} CryptoGetAccountRecordsResponse instance\n         */\n        CryptoGetAccountRecordsResponse.create = function create(properties) {\n            return new CryptoGetAccountRecordsResponse(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetAccountRecordsResponse message. Does not implicitly {@link proto.CryptoGetAccountRecordsResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetAccountRecordsResponse\n         * @static\n         * @param {proto.ICryptoGetAccountRecordsResponse} m CryptoGetAccountRecordsResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetAccountRecordsResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            if (m.records != null && m.records.length) {\n                for (var i = 0; i < m.records.length; ++i)\n                    $root.proto.TransactionRecord.encode(m.records[i], w.uint32(26).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetAccountRecordsResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetAccountRecordsResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetAccountRecordsResponse} CryptoGetAccountRecordsResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetAccountRecordsResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetAccountRecordsResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    if (!(m.records && m.records.length))\n                        m.records = [];\n                    m.records.push($root.proto.TransactionRecord.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetAccountRecordsResponse;\n    })();\n\n    proto.CryptoGetInfoQuery = (function() {\n\n        /**\n         * Properties of a CryptoGetInfoQuery.\n         * @memberof proto\n         * @interface ICryptoGetInfoQuery\n         * @property {proto.IQueryHeader|null} [header] CryptoGetInfoQuery header\n         * @property {proto.IAccountID|null} [accountID] CryptoGetInfoQuery accountID\n         */\n\n        /**\n         * Constructs a new CryptoGetInfoQuery.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetInfoQuery.\n         * @implements ICryptoGetInfoQuery\n         * @constructor\n         * @param {proto.ICryptoGetInfoQuery=} [p] Properties to set\n         */\n        function CryptoGetInfoQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetInfoQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.CryptoGetInfoQuery\n         * @instance\n         */\n        CryptoGetInfoQuery.prototype.header = null;\n\n        /**\n         * CryptoGetInfoQuery accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.CryptoGetInfoQuery\n         * @instance\n         */\n        CryptoGetInfoQuery.prototype.accountID = null;\n\n        /**\n         * Creates a new CryptoGetInfoQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetInfoQuery\n         * @static\n         * @param {proto.ICryptoGetInfoQuery=} [properties] Properties to set\n         * @returns {proto.CryptoGetInfoQuery} CryptoGetInfoQuery instance\n         */\n        CryptoGetInfoQuery.create = function create(properties) {\n            return new CryptoGetInfoQuery(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetInfoQuery message. Does not implicitly {@link proto.CryptoGetInfoQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetInfoQuery\n         * @static\n         * @param {proto.ICryptoGetInfoQuery} m CryptoGetInfoQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetInfoQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetInfoQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetInfoQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetInfoQuery} CryptoGetInfoQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetInfoQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetInfoQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetInfoQuery;\n    })();\n\n    proto.CryptoGetInfoResponse = (function() {\n\n        /**\n         * Properties of a CryptoGetInfoResponse.\n         * @memberof proto\n         * @interface ICryptoGetInfoResponse\n         * @property {proto.IResponseHeader|null} [header] CryptoGetInfoResponse header\n         * @property {proto.CryptoGetInfoResponse.IAccountInfo|null} [accountInfo] CryptoGetInfoResponse accountInfo\n         */\n\n        /**\n         * Constructs a new CryptoGetInfoResponse.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetInfoResponse.\n         * @implements ICryptoGetInfoResponse\n         * @constructor\n         * @param {proto.ICryptoGetInfoResponse=} [p] Properties to set\n         */\n        function CryptoGetInfoResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetInfoResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.CryptoGetInfoResponse\n         * @instance\n         */\n        CryptoGetInfoResponse.prototype.header = null;\n\n        /**\n         * CryptoGetInfoResponse accountInfo.\n         * @member {proto.CryptoGetInfoResponse.IAccountInfo|null|undefined} accountInfo\n         * @memberof proto.CryptoGetInfoResponse\n         * @instance\n         */\n        CryptoGetInfoResponse.prototype.accountInfo = null;\n\n        /**\n         * Creates a new CryptoGetInfoResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetInfoResponse\n         * @static\n         * @param {proto.ICryptoGetInfoResponse=} [properties] Properties to set\n         * @returns {proto.CryptoGetInfoResponse} CryptoGetInfoResponse instance\n         */\n        CryptoGetInfoResponse.create = function create(properties) {\n            return new CryptoGetInfoResponse(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetInfoResponse message. Does not implicitly {@link proto.CryptoGetInfoResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetInfoResponse\n         * @static\n         * @param {proto.ICryptoGetInfoResponse} m CryptoGetInfoResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetInfoResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountInfo != null && Object.hasOwnProperty.call(m, \"accountInfo\"))\n                $root.proto.CryptoGetInfoResponse.AccountInfo.encode(m.accountInfo, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetInfoResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetInfoResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetInfoResponse} CryptoGetInfoResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetInfoResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetInfoResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountInfo = $root.proto.CryptoGetInfoResponse.AccountInfo.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        CryptoGetInfoResponse.AccountInfo = (function() {\n\n            /**\n             * Properties of an AccountInfo.\n             * @memberof proto.CryptoGetInfoResponse\n             * @interface IAccountInfo\n             * @property {proto.IAccountID|null} [accountID] AccountInfo accountID\n             * @property {string|null} [contractAccountID] AccountInfo contractAccountID\n             * @property {boolean|null} [deleted] AccountInfo deleted\n             * @property {proto.IAccountID|null} [proxyAccountID] AccountInfo proxyAccountID\n             * @property {Long|null} [proxyReceived] AccountInfo proxyReceived\n             * @property {proto.IKey|null} [key] AccountInfo key\n             * @property {Long|null} [balance] AccountInfo balance\n             * @property {Long|null} [generateSendRecordThreshold] AccountInfo generateSendRecordThreshold\n             * @property {Long|null} [generateReceiveRecordThreshold] AccountInfo generateReceiveRecordThreshold\n             * @property {boolean|null} [receiverSigRequired] AccountInfo receiverSigRequired\n             * @property {proto.ITimestamp|null} [expirationTime] AccountInfo expirationTime\n             * @property {proto.IDuration|null} [autoRenewPeriod] AccountInfo autoRenewPeriod\n             * @property {Array.<proto.ILiveHash>|null} [liveHashes] AccountInfo liveHashes\n             * @property {Array.<proto.ITokenRelationship>|null} [tokenRelationships] AccountInfo tokenRelationships\n             */\n\n            /**\n             * Constructs a new AccountInfo.\n             * @memberof proto.CryptoGetInfoResponse\n             * @classdesc Represents an AccountInfo.\n             * @implements IAccountInfo\n             * @constructor\n             * @param {proto.CryptoGetInfoResponse.IAccountInfo=} [p] Properties to set\n             */\n            function AccountInfo(p) {\n                this.liveHashes = [];\n                this.tokenRelationships = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * AccountInfo accountID.\n             * @member {proto.IAccountID|null|undefined} accountID\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.accountID = null;\n\n            /**\n             * AccountInfo contractAccountID.\n             * @member {string} contractAccountID\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.contractAccountID = \"\";\n\n            /**\n             * AccountInfo deleted.\n             * @member {boolean} deleted\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.deleted = false;\n\n            /**\n             * AccountInfo proxyAccountID.\n             * @member {proto.IAccountID|null|undefined} proxyAccountID\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.proxyAccountID = null;\n\n            /**\n             * AccountInfo proxyReceived.\n             * @member {Long} proxyReceived\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.proxyReceived = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * AccountInfo key.\n             * @member {proto.IKey|null|undefined} key\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.key = null;\n\n            /**\n             * AccountInfo balance.\n             * @member {Long} balance\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * AccountInfo generateSendRecordThreshold.\n             * @member {Long} generateSendRecordThreshold\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.generateSendRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * AccountInfo generateReceiveRecordThreshold.\n             * @member {Long} generateReceiveRecordThreshold\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.generateReceiveRecordThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * AccountInfo receiverSigRequired.\n             * @member {boolean} receiverSigRequired\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.receiverSigRequired = false;\n\n            /**\n             * AccountInfo expirationTime.\n             * @member {proto.ITimestamp|null|undefined} expirationTime\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.expirationTime = null;\n\n            /**\n             * AccountInfo autoRenewPeriod.\n             * @member {proto.IDuration|null|undefined} autoRenewPeriod\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.autoRenewPeriod = null;\n\n            /**\n             * AccountInfo liveHashes.\n             * @member {Array.<proto.ILiveHash>} liveHashes\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.liveHashes = $util.emptyArray;\n\n            /**\n             * AccountInfo tokenRelationships.\n             * @member {Array.<proto.ITokenRelationship>} tokenRelationships\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @instance\n             */\n            AccountInfo.prototype.tokenRelationships = $util.emptyArray;\n\n            /**\n             * Creates a new AccountInfo instance using the specified properties.\n             * @function create\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @static\n             * @param {proto.CryptoGetInfoResponse.IAccountInfo=} [properties] Properties to set\n             * @returns {proto.CryptoGetInfoResponse.AccountInfo} AccountInfo instance\n             */\n            AccountInfo.create = function create(properties) {\n                return new AccountInfo(properties);\n            };\n\n            /**\n             * Encodes the specified AccountInfo message. Does not implicitly {@link proto.CryptoGetInfoResponse.AccountInfo.verify|verify} messages.\n             * @function encode\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @static\n             * @param {proto.CryptoGetInfoResponse.IAccountInfo} m AccountInfo message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AccountInfo.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                    $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();\n                if (m.contractAccountID != null && Object.hasOwnProperty.call(m, \"contractAccountID\"))\n                    w.uint32(18).string(m.contractAccountID);\n                if (m.deleted != null && Object.hasOwnProperty.call(m, \"deleted\"))\n                    w.uint32(24).bool(m.deleted);\n                if (m.proxyAccountID != null && Object.hasOwnProperty.call(m, \"proxyAccountID\"))\n                    $root.proto.AccountID.encode(m.proxyAccountID, w.uint32(34).fork()).ldelim();\n                if (m.proxyReceived != null && Object.hasOwnProperty.call(m, \"proxyReceived\"))\n                    w.uint32(48).int64(m.proxyReceived);\n                if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n                    $root.proto.Key.encode(m.key, w.uint32(58).fork()).ldelim();\n                if (m.balance != null && Object.hasOwnProperty.call(m, \"balance\"))\n                    w.uint32(64).uint64(m.balance);\n                if (m.generateSendRecordThreshold != null && Object.hasOwnProperty.call(m, \"generateSendRecordThreshold\"))\n                    w.uint32(72).uint64(m.generateSendRecordThreshold);\n                if (m.generateReceiveRecordThreshold != null && Object.hasOwnProperty.call(m, \"generateReceiveRecordThreshold\"))\n                    w.uint32(80).uint64(m.generateReceiveRecordThreshold);\n                if (m.receiverSigRequired != null && Object.hasOwnProperty.call(m, \"receiverSigRequired\"))\n                    w.uint32(88).bool(m.receiverSigRequired);\n                if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(98).fork()).ldelim();\n                if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                    $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(106).fork()).ldelim();\n                if (m.liveHashes != null && m.liveHashes.length) {\n                    for (var i = 0; i < m.liveHashes.length; ++i)\n                        $root.proto.LiveHash.encode(m.liveHashes[i], w.uint32(114).fork()).ldelim();\n                }\n                if (m.tokenRelationships != null && m.tokenRelationships.length) {\n                    for (var i = 0; i < m.tokenRelationships.length; ++i)\n                        $root.proto.TokenRelationship.encode(m.tokenRelationships[i], w.uint32(122).fork()).ldelim();\n                }\n                return w;\n            };\n\n            /**\n             * Decodes an AccountInfo message from the specified reader or buffer.\n             * @function decode\n             * @memberof proto.CryptoGetInfoResponse.AccountInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {proto.CryptoGetInfoResponse.AccountInfo} AccountInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AccountInfo.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetInfoResponse.AccountInfo();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                        break;\n                    case 2:\n                        m.contractAccountID = r.string();\n                        break;\n                    case 3:\n                        m.deleted = r.bool();\n                        break;\n                    case 4:\n                        m.proxyAccountID = $root.proto.AccountID.decode(r, r.uint32());\n                        break;\n                    case 6:\n                        m.proxyReceived = r.int64();\n                        break;\n                    case 7:\n                        m.key = $root.proto.Key.decode(r, r.uint32());\n                        break;\n                    case 8:\n                        m.balance = r.uint64();\n                        break;\n                    case 9:\n                        m.generateSendRecordThreshold = r.uint64();\n                        break;\n                    case 10:\n                        m.generateReceiveRecordThreshold = r.uint64();\n                        break;\n                    case 11:\n                        m.receiverSigRequired = r.bool();\n                        break;\n                    case 12:\n                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                        break;\n                    case 13:\n                        m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                        break;\n                    case 14:\n                        if (!(m.liveHashes && m.liveHashes.length))\n                            m.liveHashes = [];\n                        m.liveHashes.push($root.proto.LiveHash.decode(r, r.uint32()));\n                        break;\n                    case 15:\n                        if (!(m.tokenRelationships && m.tokenRelationships.length))\n                            m.tokenRelationships = [];\n                        m.tokenRelationships.push($root.proto.TokenRelationship.decode(r, r.uint32()));\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return AccountInfo;\n        })();\n\n        return CryptoGetInfoResponse;\n    })();\n\n    proto.CryptoGetLiveHashQuery = (function() {\n\n        /**\n         * Properties of a CryptoGetLiveHashQuery.\n         * @memberof proto\n         * @interface ICryptoGetLiveHashQuery\n         * @property {proto.IQueryHeader|null} [header] CryptoGetLiveHashQuery header\n         * @property {proto.IAccountID|null} [accountID] CryptoGetLiveHashQuery accountID\n         * @property {Uint8Array|null} [hash] CryptoGetLiveHashQuery hash\n         */\n\n        /**\n         * Constructs a new CryptoGetLiveHashQuery.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetLiveHashQuery.\n         * @implements ICryptoGetLiveHashQuery\n         * @constructor\n         * @param {proto.ICryptoGetLiveHashQuery=} [p] Properties to set\n         */\n        function CryptoGetLiveHashQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetLiveHashQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.CryptoGetLiveHashQuery\n         * @instance\n         */\n        CryptoGetLiveHashQuery.prototype.header = null;\n\n        /**\n         * CryptoGetLiveHashQuery accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.CryptoGetLiveHashQuery\n         * @instance\n         */\n        CryptoGetLiveHashQuery.prototype.accountID = null;\n\n        /**\n         * CryptoGetLiveHashQuery hash.\n         * @member {Uint8Array} hash\n         * @memberof proto.CryptoGetLiveHashQuery\n         * @instance\n         */\n        CryptoGetLiveHashQuery.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new CryptoGetLiveHashQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetLiveHashQuery\n         * @static\n         * @param {proto.ICryptoGetLiveHashQuery=} [properties] Properties to set\n         * @returns {proto.CryptoGetLiveHashQuery} CryptoGetLiveHashQuery instance\n         */\n        CryptoGetLiveHashQuery.create = function create(properties) {\n            return new CryptoGetLiveHashQuery(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetLiveHashQuery message. Does not implicitly {@link proto.CryptoGetLiveHashQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetLiveHashQuery\n         * @static\n         * @param {proto.ICryptoGetLiveHashQuery} m CryptoGetLiveHashQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetLiveHashQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            if (m.hash != null && Object.hasOwnProperty.call(m, \"hash\"))\n                w.uint32(26).bytes(m.hash);\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetLiveHashQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetLiveHashQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetLiveHashQuery} CryptoGetLiveHashQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetLiveHashQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetLiveHashQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.hash = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetLiveHashQuery;\n    })();\n\n    proto.CryptoGetLiveHashResponse = (function() {\n\n        /**\n         * Properties of a CryptoGetLiveHashResponse.\n         * @memberof proto\n         * @interface ICryptoGetLiveHashResponse\n         * @property {proto.IResponseHeader|null} [header] CryptoGetLiveHashResponse header\n         * @property {proto.ILiveHash|null} [liveHash] CryptoGetLiveHashResponse liveHash\n         */\n\n        /**\n         * Constructs a new CryptoGetLiveHashResponse.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetLiveHashResponse.\n         * @implements ICryptoGetLiveHashResponse\n         * @constructor\n         * @param {proto.ICryptoGetLiveHashResponse=} [p] Properties to set\n         */\n        function CryptoGetLiveHashResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetLiveHashResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.CryptoGetLiveHashResponse\n         * @instance\n         */\n        CryptoGetLiveHashResponse.prototype.header = null;\n\n        /**\n         * CryptoGetLiveHashResponse liveHash.\n         * @member {proto.ILiveHash|null|undefined} liveHash\n         * @memberof proto.CryptoGetLiveHashResponse\n         * @instance\n         */\n        CryptoGetLiveHashResponse.prototype.liveHash = null;\n\n        /**\n         * Creates a new CryptoGetLiveHashResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetLiveHashResponse\n         * @static\n         * @param {proto.ICryptoGetLiveHashResponse=} [properties] Properties to set\n         * @returns {proto.CryptoGetLiveHashResponse} CryptoGetLiveHashResponse instance\n         */\n        CryptoGetLiveHashResponse.create = function create(properties) {\n            return new CryptoGetLiveHashResponse(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetLiveHashResponse message. Does not implicitly {@link proto.CryptoGetLiveHashResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetLiveHashResponse\n         * @static\n         * @param {proto.ICryptoGetLiveHashResponse} m CryptoGetLiveHashResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetLiveHashResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.liveHash != null && Object.hasOwnProperty.call(m, \"liveHash\"))\n                $root.proto.LiveHash.encode(m.liveHash, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetLiveHashResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetLiveHashResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetLiveHashResponse} CryptoGetLiveHashResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetLiveHashResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetLiveHashResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.liveHash = $root.proto.LiveHash.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetLiveHashResponse;\n    })();\n\n    proto.CryptoGetStakersQuery = (function() {\n\n        /**\n         * Properties of a CryptoGetStakersQuery.\n         * @memberof proto\n         * @interface ICryptoGetStakersQuery\n         * @property {proto.IQueryHeader|null} [header] CryptoGetStakersQuery header\n         * @property {proto.IAccountID|null} [accountID] CryptoGetStakersQuery accountID\n         */\n\n        /**\n         * Constructs a new CryptoGetStakersQuery.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetStakersQuery.\n         * @implements ICryptoGetStakersQuery\n         * @constructor\n         * @param {proto.ICryptoGetStakersQuery=} [p] Properties to set\n         */\n        function CryptoGetStakersQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetStakersQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.CryptoGetStakersQuery\n         * @instance\n         */\n        CryptoGetStakersQuery.prototype.header = null;\n\n        /**\n         * CryptoGetStakersQuery accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.CryptoGetStakersQuery\n         * @instance\n         */\n        CryptoGetStakersQuery.prototype.accountID = null;\n\n        /**\n         * Creates a new CryptoGetStakersQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetStakersQuery\n         * @static\n         * @param {proto.ICryptoGetStakersQuery=} [properties] Properties to set\n         * @returns {proto.CryptoGetStakersQuery} CryptoGetStakersQuery instance\n         */\n        CryptoGetStakersQuery.create = function create(properties) {\n            return new CryptoGetStakersQuery(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetStakersQuery message. Does not implicitly {@link proto.CryptoGetStakersQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetStakersQuery\n         * @static\n         * @param {proto.ICryptoGetStakersQuery} m CryptoGetStakersQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetStakersQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetStakersQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetStakersQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetStakersQuery} CryptoGetStakersQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetStakersQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetStakersQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetStakersQuery;\n    })();\n\n    proto.ProxyStaker = (function() {\n\n        /**\n         * Properties of a ProxyStaker.\n         * @memberof proto\n         * @interface IProxyStaker\n         * @property {proto.IAccountID|null} [accountID] ProxyStaker accountID\n         * @property {Long|null} [amount] ProxyStaker amount\n         */\n\n        /**\n         * Constructs a new ProxyStaker.\n         * @memberof proto\n         * @classdesc Represents a ProxyStaker.\n         * @implements IProxyStaker\n         * @constructor\n         * @param {proto.IProxyStaker=} [p] Properties to set\n         */\n        function ProxyStaker(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ProxyStaker accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.ProxyStaker\n         * @instance\n         */\n        ProxyStaker.prototype.accountID = null;\n\n        /**\n         * ProxyStaker amount.\n         * @member {Long} amount\n         * @memberof proto.ProxyStaker\n         * @instance\n         */\n        ProxyStaker.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new ProxyStaker instance using the specified properties.\n         * @function create\n         * @memberof proto.ProxyStaker\n         * @static\n         * @param {proto.IProxyStaker=} [properties] Properties to set\n         * @returns {proto.ProxyStaker} ProxyStaker instance\n         */\n        ProxyStaker.create = function create(properties) {\n            return new ProxyStaker(properties);\n        };\n\n        /**\n         * Encodes the specified ProxyStaker message. Does not implicitly {@link proto.ProxyStaker.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ProxyStaker\n         * @static\n         * @param {proto.IProxyStaker} m ProxyStaker message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProxyStaker.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();\n            if (m.amount != null && Object.hasOwnProperty.call(m, \"amount\"))\n                w.uint32(16).int64(m.amount);\n            return w;\n        };\n\n        /**\n         * Decodes a ProxyStaker message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ProxyStaker\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ProxyStaker} ProxyStaker\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProxyStaker.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ProxyStaker();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.amount = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ProxyStaker;\n    })();\n\n    proto.AllProxyStakers = (function() {\n\n        /**\n         * Properties of an AllProxyStakers.\n         * @memberof proto\n         * @interface IAllProxyStakers\n         * @property {proto.IAccountID|null} [accountID] AllProxyStakers accountID\n         * @property {Array.<proto.IProxyStaker>|null} [proxyStaker] AllProxyStakers proxyStaker\n         */\n\n        /**\n         * Constructs a new AllProxyStakers.\n         * @memberof proto\n         * @classdesc Represents an AllProxyStakers.\n         * @implements IAllProxyStakers\n         * @constructor\n         * @param {proto.IAllProxyStakers=} [p] Properties to set\n         */\n        function AllProxyStakers(p) {\n            this.proxyStaker = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AllProxyStakers accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.AllProxyStakers\n         * @instance\n         */\n        AllProxyStakers.prototype.accountID = null;\n\n        /**\n         * AllProxyStakers proxyStaker.\n         * @member {Array.<proto.IProxyStaker>} proxyStaker\n         * @memberof proto.AllProxyStakers\n         * @instance\n         */\n        AllProxyStakers.prototype.proxyStaker = $util.emptyArray;\n\n        /**\n         * Creates a new AllProxyStakers instance using the specified properties.\n         * @function create\n         * @memberof proto.AllProxyStakers\n         * @static\n         * @param {proto.IAllProxyStakers=} [properties] Properties to set\n         * @returns {proto.AllProxyStakers} AllProxyStakers instance\n         */\n        AllProxyStakers.create = function create(properties) {\n            return new AllProxyStakers(properties);\n        };\n\n        /**\n         * Encodes the specified AllProxyStakers message. Does not implicitly {@link proto.AllProxyStakers.verify|verify} messages.\n         * @function encode\n         * @memberof proto.AllProxyStakers\n         * @static\n         * @param {proto.IAllProxyStakers} m AllProxyStakers message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AllProxyStakers.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();\n            if (m.proxyStaker != null && m.proxyStaker.length) {\n                for (var i = 0; i < m.proxyStaker.length; ++i)\n                    $root.proto.ProxyStaker.encode(m.proxyStaker[i], w.uint32(18).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes an AllProxyStakers message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.AllProxyStakers\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.AllProxyStakers} AllProxyStakers\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AllProxyStakers.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllProxyStakers();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    if (!(m.proxyStaker && m.proxyStaker.length))\n                        m.proxyStaker = [];\n                    m.proxyStaker.push($root.proto.ProxyStaker.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return AllProxyStakers;\n    })();\n\n    proto.CryptoGetStakersResponse = (function() {\n\n        /**\n         * Properties of a CryptoGetStakersResponse.\n         * @memberof proto\n         * @interface ICryptoGetStakersResponse\n         * @property {proto.IResponseHeader|null} [header] CryptoGetStakersResponse header\n         * @property {proto.IAllProxyStakers|null} [stakers] CryptoGetStakersResponse stakers\n         */\n\n        /**\n         * Constructs a new CryptoGetStakersResponse.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetStakersResponse.\n         * @implements ICryptoGetStakersResponse\n         * @constructor\n         * @param {proto.ICryptoGetStakersResponse=} [p] Properties to set\n         */\n        function CryptoGetStakersResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetStakersResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.CryptoGetStakersResponse\n         * @instance\n         */\n        CryptoGetStakersResponse.prototype.header = null;\n\n        /**\n         * CryptoGetStakersResponse stakers.\n         * @member {proto.IAllProxyStakers|null|undefined} stakers\n         * @memberof proto.CryptoGetStakersResponse\n         * @instance\n         */\n        CryptoGetStakersResponse.prototype.stakers = null;\n\n        /**\n         * Creates a new CryptoGetStakersResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetStakersResponse\n         * @static\n         * @param {proto.ICryptoGetStakersResponse=} [properties] Properties to set\n         * @returns {proto.CryptoGetStakersResponse} CryptoGetStakersResponse instance\n         */\n        CryptoGetStakersResponse.create = function create(properties) {\n            return new CryptoGetStakersResponse(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetStakersResponse message. Does not implicitly {@link proto.CryptoGetStakersResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetStakersResponse\n         * @static\n         * @param {proto.ICryptoGetStakersResponse} m CryptoGetStakersResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetStakersResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.stakers != null && Object.hasOwnProperty.call(m, \"stakers\"))\n                $root.proto.AllProxyStakers.encode(m.stakers, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetStakersResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetStakersResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetStakersResponse} CryptoGetStakersResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetStakersResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetStakersResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.stakers = $root.proto.AllProxyStakers.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetStakersResponse;\n    })();\n\n    proto.FileGetContentsQuery = (function() {\n\n        /**\n         * Properties of a FileGetContentsQuery.\n         * @memberof proto\n         * @interface IFileGetContentsQuery\n         * @property {proto.IQueryHeader|null} [header] FileGetContentsQuery header\n         * @property {proto.IFileID|null} [fileID] FileGetContentsQuery fileID\n         */\n\n        /**\n         * Constructs a new FileGetContentsQuery.\n         * @memberof proto\n         * @classdesc Represents a FileGetContentsQuery.\n         * @implements IFileGetContentsQuery\n         * @constructor\n         * @param {proto.IFileGetContentsQuery=} [p] Properties to set\n         */\n        function FileGetContentsQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileGetContentsQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.FileGetContentsQuery\n         * @instance\n         */\n        FileGetContentsQuery.prototype.header = null;\n\n        /**\n         * FileGetContentsQuery fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.FileGetContentsQuery\n         * @instance\n         */\n        FileGetContentsQuery.prototype.fileID = null;\n\n        /**\n         * Creates a new FileGetContentsQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.FileGetContentsQuery\n         * @static\n         * @param {proto.IFileGetContentsQuery=} [properties] Properties to set\n         * @returns {proto.FileGetContentsQuery} FileGetContentsQuery instance\n         */\n        FileGetContentsQuery.create = function create(properties) {\n            return new FileGetContentsQuery(properties);\n        };\n\n        /**\n         * Encodes the specified FileGetContentsQuery message. Does not implicitly {@link proto.FileGetContentsQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileGetContentsQuery\n         * @static\n         * @param {proto.IFileGetContentsQuery} m FileGetContentsQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileGetContentsQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a FileGetContentsQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileGetContentsQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileGetContentsQuery} FileGetContentsQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileGetContentsQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetContentsQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FileGetContentsQuery;\n    })();\n\n    proto.FileGetContentsResponse = (function() {\n\n        /**\n         * Properties of a FileGetContentsResponse.\n         * @memberof proto\n         * @interface IFileGetContentsResponse\n         * @property {proto.IResponseHeader|null} [header] FileGetContentsResponse header\n         * @property {proto.FileGetContentsResponse.IFileContents|null} [fileContents] FileGetContentsResponse fileContents\n         */\n\n        /**\n         * Constructs a new FileGetContentsResponse.\n         * @memberof proto\n         * @classdesc Represents a FileGetContentsResponse.\n         * @implements IFileGetContentsResponse\n         * @constructor\n         * @param {proto.IFileGetContentsResponse=} [p] Properties to set\n         */\n        function FileGetContentsResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileGetContentsResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.FileGetContentsResponse\n         * @instance\n         */\n        FileGetContentsResponse.prototype.header = null;\n\n        /**\n         * FileGetContentsResponse fileContents.\n         * @member {proto.FileGetContentsResponse.IFileContents|null|undefined} fileContents\n         * @memberof proto.FileGetContentsResponse\n         * @instance\n         */\n        FileGetContentsResponse.prototype.fileContents = null;\n\n        /**\n         * Creates a new FileGetContentsResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.FileGetContentsResponse\n         * @static\n         * @param {proto.IFileGetContentsResponse=} [properties] Properties to set\n         * @returns {proto.FileGetContentsResponse} FileGetContentsResponse instance\n         */\n        FileGetContentsResponse.create = function create(properties) {\n            return new FileGetContentsResponse(properties);\n        };\n\n        /**\n         * Encodes the specified FileGetContentsResponse message. Does not implicitly {@link proto.FileGetContentsResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileGetContentsResponse\n         * @static\n         * @param {proto.IFileGetContentsResponse} m FileGetContentsResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileGetContentsResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.fileContents != null && Object.hasOwnProperty.call(m, \"fileContents\"))\n                $root.proto.FileGetContentsResponse.FileContents.encode(m.fileContents, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a FileGetContentsResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileGetContentsResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileGetContentsResponse} FileGetContentsResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileGetContentsResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetContentsResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.fileContents = $root.proto.FileGetContentsResponse.FileContents.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        FileGetContentsResponse.FileContents = (function() {\n\n            /**\n             * Properties of a FileContents.\n             * @memberof proto.FileGetContentsResponse\n             * @interface IFileContents\n             * @property {proto.IFileID|null} [fileID] FileContents fileID\n             * @property {Uint8Array|null} [contents] FileContents contents\n             */\n\n            /**\n             * Constructs a new FileContents.\n             * @memberof proto.FileGetContentsResponse\n             * @classdesc Represents a FileContents.\n             * @implements IFileContents\n             * @constructor\n             * @param {proto.FileGetContentsResponse.IFileContents=} [p] Properties to set\n             */\n            function FileContents(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * FileContents fileID.\n             * @member {proto.IFileID|null|undefined} fileID\n             * @memberof proto.FileGetContentsResponse.FileContents\n             * @instance\n             */\n            FileContents.prototype.fileID = null;\n\n            /**\n             * FileContents contents.\n             * @member {Uint8Array} contents\n             * @memberof proto.FileGetContentsResponse.FileContents\n             * @instance\n             */\n            FileContents.prototype.contents = $util.newBuffer([]);\n\n            /**\n             * Creates a new FileContents instance using the specified properties.\n             * @function create\n             * @memberof proto.FileGetContentsResponse.FileContents\n             * @static\n             * @param {proto.FileGetContentsResponse.IFileContents=} [properties] Properties to set\n             * @returns {proto.FileGetContentsResponse.FileContents} FileContents instance\n             */\n            FileContents.create = function create(properties) {\n                return new FileContents(properties);\n            };\n\n            /**\n             * Encodes the specified FileContents message. Does not implicitly {@link proto.FileGetContentsResponse.FileContents.verify|verify} messages.\n             * @function encode\n             * @memberof proto.FileGetContentsResponse.FileContents\n             * @static\n             * @param {proto.FileGetContentsResponse.IFileContents} m FileContents message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FileContents.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                    $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();\n                if (m.contents != null && Object.hasOwnProperty.call(m, \"contents\"))\n                    w.uint32(18).bytes(m.contents);\n                return w;\n            };\n\n            /**\n             * Decodes a FileContents message from the specified reader or buffer.\n             * @function decode\n             * @memberof proto.FileGetContentsResponse.FileContents\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {proto.FileGetContentsResponse.FileContents} FileContents\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FileContents.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetContentsResponse.FileContents();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                        break;\n                    case 2:\n                        m.contents = r.bytes();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return FileContents;\n        })();\n\n        return FileGetContentsResponse;\n    })();\n\n    proto.FileGetInfoQuery = (function() {\n\n        /**\n         * Properties of a FileGetInfoQuery.\n         * @memberof proto\n         * @interface IFileGetInfoQuery\n         * @property {proto.IQueryHeader|null} [header] FileGetInfoQuery header\n         * @property {proto.IFileID|null} [fileID] FileGetInfoQuery fileID\n         */\n\n        /**\n         * Constructs a new FileGetInfoQuery.\n         * @memberof proto\n         * @classdesc Represents a FileGetInfoQuery.\n         * @implements IFileGetInfoQuery\n         * @constructor\n         * @param {proto.IFileGetInfoQuery=} [p] Properties to set\n         */\n        function FileGetInfoQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileGetInfoQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.FileGetInfoQuery\n         * @instance\n         */\n        FileGetInfoQuery.prototype.header = null;\n\n        /**\n         * FileGetInfoQuery fileID.\n         * @member {proto.IFileID|null|undefined} fileID\n         * @memberof proto.FileGetInfoQuery\n         * @instance\n         */\n        FileGetInfoQuery.prototype.fileID = null;\n\n        /**\n         * Creates a new FileGetInfoQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.FileGetInfoQuery\n         * @static\n         * @param {proto.IFileGetInfoQuery=} [properties] Properties to set\n         * @returns {proto.FileGetInfoQuery} FileGetInfoQuery instance\n         */\n        FileGetInfoQuery.create = function create(properties) {\n            return new FileGetInfoQuery(properties);\n        };\n\n        /**\n         * Encodes the specified FileGetInfoQuery message. Does not implicitly {@link proto.FileGetInfoQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileGetInfoQuery\n         * @static\n         * @param {proto.IFileGetInfoQuery} m FileGetInfoQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileGetInfoQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                $root.proto.FileID.encode(m.fileID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a FileGetInfoQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileGetInfoQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileGetInfoQuery} FileGetInfoQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileGetInfoQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetInfoQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FileGetInfoQuery;\n    })();\n\n    proto.FileGetInfoResponse = (function() {\n\n        /**\n         * Properties of a FileGetInfoResponse.\n         * @memberof proto\n         * @interface IFileGetInfoResponse\n         * @property {proto.IResponseHeader|null} [header] FileGetInfoResponse header\n         * @property {proto.FileGetInfoResponse.IFileInfo|null} [fileInfo] FileGetInfoResponse fileInfo\n         */\n\n        /**\n         * Constructs a new FileGetInfoResponse.\n         * @memberof proto\n         * @classdesc Represents a FileGetInfoResponse.\n         * @implements IFileGetInfoResponse\n         * @constructor\n         * @param {proto.IFileGetInfoResponse=} [p] Properties to set\n         */\n        function FileGetInfoResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FileGetInfoResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.FileGetInfoResponse\n         * @instance\n         */\n        FileGetInfoResponse.prototype.header = null;\n\n        /**\n         * FileGetInfoResponse fileInfo.\n         * @member {proto.FileGetInfoResponse.IFileInfo|null|undefined} fileInfo\n         * @memberof proto.FileGetInfoResponse\n         * @instance\n         */\n        FileGetInfoResponse.prototype.fileInfo = null;\n\n        /**\n         * Creates a new FileGetInfoResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.FileGetInfoResponse\n         * @static\n         * @param {proto.IFileGetInfoResponse=} [properties] Properties to set\n         * @returns {proto.FileGetInfoResponse} FileGetInfoResponse instance\n         */\n        FileGetInfoResponse.create = function create(properties) {\n            return new FileGetInfoResponse(properties);\n        };\n\n        /**\n         * Encodes the specified FileGetInfoResponse message. Does not implicitly {@link proto.FileGetInfoResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FileGetInfoResponse\n         * @static\n         * @param {proto.IFileGetInfoResponse} m FileGetInfoResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FileGetInfoResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.fileInfo != null && Object.hasOwnProperty.call(m, \"fileInfo\"))\n                $root.proto.FileGetInfoResponse.FileInfo.encode(m.fileInfo, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a FileGetInfoResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FileGetInfoResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FileGetInfoResponse} FileGetInfoResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FileGetInfoResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetInfoResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.fileInfo = $root.proto.FileGetInfoResponse.FileInfo.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        FileGetInfoResponse.FileInfo = (function() {\n\n            /**\n             * Properties of a FileInfo.\n             * @memberof proto.FileGetInfoResponse\n             * @interface IFileInfo\n             * @property {proto.IFileID|null} [fileID] FileInfo fileID\n             * @property {Long|null} [size] FileInfo size\n             * @property {proto.ITimestamp|null} [expirationTime] FileInfo expirationTime\n             * @property {boolean|null} [deleted] FileInfo deleted\n             * @property {proto.IKeyList|null} [keys] FileInfo keys\n             */\n\n            /**\n             * Constructs a new FileInfo.\n             * @memberof proto.FileGetInfoResponse\n             * @classdesc Represents a FileInfo.\n             * @implements IFileInfo\n             * @constructor\n             * @param {proto.FileGetInfoResponse.IFileInfo=} [p] Properties to set\n             */\n            function FileInfo(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * FileInfo fileID.\n             * @member {proto.IFileID|null|undefined} fileID\n             * @memberof proto.FileGetInfoResponse.FileInfo\n             * @instance\n             */\n            FileInfo.prototype.fileID = null;\n\n            /**\n             * FileInfo size.\n             * @member {Long} size\n             * @memberof proto.FileGetInfoResponse.FileInfo\n             * @instance\n             */\n            FileInfo.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * FileInfo expirationTime.\n             * @member {proto.ITimestamp|null|undefined} expirationTime\n             * @memberof proto.FileGetInfoResponse.FileInfo\n             * @instance\n             */\n            FileInfo.prototype.expirationTime = null;\n\n            /**\n             * FileInfo deleted.\n             * @member {boolean} deleted\n             * @memberof proto.FileGetInfoResponse.FileInfo\n             * @instance\n             */\n            FileInfo.prototype.deleted = false;\n\n            /**\n             * FileInfo keys.\n             * @member {proto.IKeyList|null|undefined} keys\n             * @memberof proto.FileGetInfoResponse.FileInfo\n             * @instance\n             */\n            FileInfo.prototype.keys = null;\n\n            /**\n             * Creates a new FileInfo instance using the specified properties.\n             * @function create\n             * @memberof proto.FileGetInfoResponse.FileInfo\n             * @static\n             * @param {proto.FileGetInfoResponse.IFileInfo=} [properties] Properties to set\n             * @returns {proto.FileGetInfoResponse.FileInfo} FileInfo instance\n             */\n            FileInfo.create = function create(properties) {\n                return new FileInfo(properties);\n            };\n\n            /**\n             * Encodes the specified FileInfo message. Does not implicitly {@link proto.FileGetInfoResponse.FileInfo.verify|verify} messages.\n             * @function encode\n             * @memberof proto.FileGetInfoResponse.FileInfo\n             * @static\n             * @param {proto.FileGetInfoResponse.IFileInfo} m FileInfo message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FileInfo.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.fileID != null && Object.hasOwnProperty.call(m, \"fileID\"))\n                    $root.proto.FileID.encode(m.fileID, w.uint32(10).fork()).ldelim();\n                if (m.size != null && Object.hasOwnProperty.call(m, \"size\"))\n                    w.uint32(16).int64(m.size);\n                if (m.expirationTime != null && Object.hasOwnProperty.call(m, \"expirationTime\"))\n                    $root.proto.Timestamp.encode(m.expirationTime, w.uint32(26).fork()).ldelim();\n                if (m.deleted != null && Object.hasOwnProperty.call(m, \"deleted\"))\n                    w.uint32(32).bool(m.deleted);\n                if (m.keys != null && Object.hasOwnProperty.call(m, \"keys\"))\n                    $root.proto.KeyList.encode(m.keys, w.uint32(42).fork()).ldelim();\n                return w;\n            };\n\n            /**\n             * Decodes a FileInfo message from the specified reader or buffer.\n             * @function decode\n             * @memberof proto.FileGetInfoResponse.FileInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {proto.FileGetInfoResponse.FileInfo} FileInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FileInfo.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FileGetInfoResponse.FileInfo();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.fileID = $root.proto.FileID.decode(r, r.uint32());\n                        break;\n                    case 2:\n                        m.size = r.int64();\n                        break;\n                    case 3:\n                        m.expirationTime = $root.proto.Timestamp.decode(r, r.uint32());\n                        break;\n                    case 4:\n                        m.deleted = r.bool();\n                        break;\n                    case 5:\n                        m.keys = $root.proto.KeyList.decode(r, r.uint32());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return FileInfo;\n        })();\n\n        return FileGetInfoResponse;\n    })();\n\n    proto.TransactionGetReceiptQuery = (function() {\n\n        /**\n         * Properties of a TransactionGetReceiptQuery.\n         * @memberof proto\n         * @interface ITransactionGetReceiptQuery\n         * @property {proto.IQueryHeader|null} [header] TransactionGetReceiptQuery header\n         * @property {proto.ITransactionID|null} [transactionID] TransactionGetReceiptQuery transactionID\n         * @property {boolean|null} [includeDuplicates] TransactionGetReceiptQuery includeDuplicates\n         */\n\n        /**\n         * Constructs a new TransactionGetReceiptQuery.\n         * @memberof proto\n         * @classdesc Represents a TransactionGetReceiptQuery.\n         * @implements ITransactionGetReceiptQuery\n         * @constructor\n         * @param {proto.ITransactionGetReceiptQuery=} [p] Properties to set\n         */\n        function TransactionGetReceiptQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionGetReceiptQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.TransactionGetReceiptQuery\n         * @instance\n         */\n        TransactionGetReceiptQuery.prototype.header = null;\n\n        /**\n         * TransactionGetReceiptQuery transactionID.\n         * @member {proto.ITransactionID|null|undefined} transactionID\n         * @memberof proto.TransactionGetReceiptQuery\n         * @instance\n         */\n        TransactionGetReceiptQuery.prototype.transactionID = null;\n\n        /**\n         * TransactionGetReceiptQuery includeDuplicates.\n         * @member {boolean} includeDuplicates\n         * @memberof proto.TransactionGetReceiptQuery\n         * @instance\n         */\n        TransactionGetReceiptQuery.prototype.includeDuplicates = false;\n\n        /**\n         * Creates a new TransactionGetReceiptQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionGetReceiptQuery\n         * @static\n         * @param {proto.ITransactionGetReceiptQuery=} [properties] Properties to set\n         * @returns {proto.TransactionGetReceiptQuery} TransactionGetReceiptQuery instance\n         */\n        TransactionGetReceiptQuery.create = function create(properties) {\n            return new TransactionGetReceiptQuery(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionGetReceiptQuery message. Does not implicitly {@link proto.TransactionGetReceiptQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionGetReceiptQuery\n         * @static\n         * @param {proto.ITransactionGetReceiptQuery} m TransactionGetReceiptQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionGetReceiptQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.transactionID != null && Object.hasOwnProperty.call(m, \"transactionID\"))\n                $root.proto.TransactionID.encode(m.transactionID, w.uint32(18).fork()).ldelim();\n            if (m.includeDuplicates != null && Object.hasOwnProperty.call(m, \"includeDuplicates\"))\n                w.uint32(24).bool(m.includeDuplicates);\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionGetReceiptQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionGetReceiptQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionGetReceiptQuery} TransactionGetReceiptQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionGetReceiptQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetReceiptQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.includeDuplicates = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionGetReceiptQuery;\n    })();\n\n    proto.TransactionGetReceiptResponse = (function() {\n\n        /**\n         * Properties of a TransactionGetReceiptResponse.\n         * @memberof proto\n         * @interface ITransactionGetReceiptResponse\n         * @property {proto.IResponseHeader|null} [header] TransactionGetReceiptResponse header\n         * @property {proto.ITransactionReceipt|null} [receipt] TransactionGetReceiptResponse receipt\n         * @property {Array.<proto.ITransactionReceipt>|null} [duplicateTransactionReceipts] TransactionGetReceiptResponse duplicateTransactionReceipts\n         */\n\n        /**\n         * Constructs a new TransactionGetReceiptResponse.\n         * @memberof proto\n         * @classdesc Represents a TransactionGetReceiptResponse.\n         * @implements ITransactionGetReceiptResponse\n         * @constructor\n         * @param {proto.ITransactionGetReceiptResponse=} [p] Properties to set\n         */\n        function TransactionGetReceiptResponse(p) {\n            this.duplicateTransactionReceipts = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionGetReceiptResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.TransactionGetReceiptResponse\n         * @instance\n         */\n        TransactionGetReceiptResponse.prototype.header = null;\n\n        /**\n         * TransactionGetReceiptResponse receipt.\n         * @member {proto.ITransactionReceipt|null|undefined} receipt\n         * @memberof proto.TransactionGetReceiptResponse\n         * @instance\n         */\n        TransactionGetReceiptResponse.prototype.receipt = null;\n\n        /**\n         * TransactionGetReceiptResponse duplicateTransactionReceipts.\n         * @member {Array.<proto.ITransactionReceipt>} duplicateTransactionReceipts\n         * @memberof proto.TransactionGetReceiptResponse\n         * @instance\n         */\n        TransactionGetReceiptResponse.prototype.duplicateTransactionReceipts = $util.emptyArray;\n\n        /**\n         * Creates a new TransactionGetReceiptResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionGetReceiptResponse\n         * @static\n         * @param {proto.ITransactionGetReceiptResponse=} [properties] Properties to set\n         * @returns {proto.TransactionGetReceiptResponse} TransactionGetReceiptResponse instance\n         */\n        TransactionGetReceiptResponse.create = function create(properties) {\n            return new TransactionGetReceiptResponse(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionGetReceiptResponse message. Does not implicitly {@link proto.TransactionGetReceiptResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionGetReceiptResponse\n         * @static\n         * @param {proto.ITransactionGetReceiptResponse} m TransactionGetReceiptResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionGetReceiptResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.receipt != null && Object.hasOwnProperty.call(m, \"receipt\"))\n                $root.proto.TransactionReceipt.encode(m.receipt, w.uint32(18).fork()).ldelim();\n            if (m.duplicateTransactionReceipts != null && m.duplicateTransactionReceipts.length) {\n                for (var i = 0; i < m.duplicateTransactionReceipts.length; ++i)\n                    $root.proto.TransactionReceipt.encode(m.duplicateTransactionReceipts[i], w.uint32(34).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionGetReceiptResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionGetReceiptResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionGetReceiptResponse} TransactionGetReceiptResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionGetReceiptResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetReceiptResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.receipt = $root.proto.TransactionReceipt.decode(r, r.uint32());\n                    break;\n                case 4:\n                    if (!(m.duplicateTransactionReceipts && m.duplicateTransactionReceipts.length))\n                        m.duplicateTransactionReceipts = [];\n                    m.duplicateTransactionReceipts.push($root.proto.TransactionReceipt.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionGetReceiptResponse;\n    })();\n\n    proto.TransactionGetRecordQuery = (function() {\n\n        /**\n         * Properties of a TransactionGetRecordQuery.\n         * @memberof proto\n         * @interface ITransactionGetRecordQuery\n         * @property {proto.IQueryHeader|null} [header] TransactionGetRecordQuery header\n         * @property {proto.ITransactionID|null} [transactionID] TransactionGetRecordQuery transactionID\n         * @property {boolean|null} [includeDuplicates] TransactionGetRecordQuery includeDuplicates\n         */\n\n        /**\n         * Constructs a new TransactionGetRecordQuery.\n         * @memberof proto\n         * @classdesc Represents a TransactionGetRecordQuery.\n         * @implements ITransactionGetRecordQuery\n         * @constructor\n         * @param {proto.ITransactionGetRecordQuery=} [p] Properties to set\n         */\n        function TransactionGetRecordQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionGetRecordQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.TransactionGetRecordQuery\n         * @instance\n         */\n        TransactionGetRecordQuery.prototype.header = null;\n\n        /**\n         * TransactionGetRecordQuery transactionID.\n         * @member {proto.ITransactionID|null|undefined} transactionID\n         * @memberof proto.TransactionGetRecordQuery\n         * @instance\n         */\n        TransactionGetRecordQuery.prototype.transactionID = null;\n\n        /**\n         * TransactionGetRecordQuery includeDuplicates.\n         * @member {boolean} includeDuplicates\n         * @memberof proto.TransactionGetRecordQuery\n         * @instance\n         */\n        TransactionGetRecordQuery.prototype.includeDuplicates = false;\n\n        /**\n         * Creates a new TransactionGetRecordQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionGetRecordQuery\n         * @static\n         * @param {proto.ITransactionGetRecordQuery=} [properties] Properties to set\n         * @returns {proto.TransactionGetRecordQuery} TransactionGetRecordQuery instance\n         */\n        TransactionGetRecordQuery.create = function create(properties) {\n            return new TransactionGetRecordQuery(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionGetRecordQuery message. Does not implicitly {@link proto.TransactionGetRecordQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionGetRecordQuery\n         * @static\n         * @param {proto.ITransactionGetRecordQuery} m TransactionGetRecordQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionGetRecordQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.transactionID != null && Object.hasOwnProperty.call(m, \"transactionID\"))\n                $root.proto.TransactionID.encode(m.transactionID, w.uint32(18).fork()).ldelim();\n            if (m.includeDuplicates != null && Object.hasOwnProperty.call(m, \"includeDuplicates\"))\n                w.uint32(24).bool(m.includeDuplicates);\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionGetRecordQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionGetRecordQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionGetRecordQuery} TransactionGetRecordQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionGetRecordQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetRecordQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.includeDuplicates = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionGetRecordQuery;\n    })();\n\n    proto.TransactionGetRecordResponse = (function() {\n\n        /**\n         * Properties of a TransactionGetRecordResponse.\n         * @memberof proto\n         * @interface ITransactionGetRecordResponse\n         * @property {proto.IResponseHeader|null} [header] TransactionGetRecordResponse header\n         * @property {proto.ITransactionRecord|null} [transactionRecord] TransactionGetRecordResponse transactionRecord\n         * @property {Array.<proto.ITransactionRecord>|null} [duplicateTransactionRecords] TransactionGetRecordResponse duplicateTransactionRecords\n         */\n\n        /**\n         * Constructs a new TransactionGetRecordResponse.\n         * @memberof proto\n         * @classdesc Represents a TransactionGetRecordResponse.\n         * @implements ITransactionGetRecordResponse\n         * @constructor\n         * @param {proto.ITransactionGetRecordResponse=} [p] Properties to set\n         */\n        function TransactionGetRecordResponse(p) {\n            this.duplicateTransactionRecords = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionGetRecordResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.TransactionGetRecordResponse\n         * @instance\n         */\n        TransactionGetRecordResponse.prototype.header = null;\n\n        /**\n         * TransactionGetRecordResponse transactionRecord.\n         * @member {proto.ITransactionRecord|null|undefined} transactionRecord\n         * @memberof proto.TransactionGetRecordResponse\n         * @instance\n         */\n        TransactionGetRecordResponse.prototype.transactionRecord = null;\n\n        /**\n         * TransactionGetRecordResponse duplicateTransactionRecords.\n         * @member {Array.<proto.ITransactionRecord>} duplicateTransactionRecords\n         * @memberof proto.TransactionGetRecordResponse\n         * @instance\n         */\n        TransactionGetRecordResponse.prototype.duplicateTransactionRecords = $util.emptyArray;\n\n        /**\n         * Creates a new TransactionGetRecordResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionGetRecordResponse\n         * @static\n         * @param {proto.ITransactionGetRecordResponse=} [properties] Properties to set\n         * @returns {proto.TransactionGetRecordResponse} TransactionGetRecordResponse instance\n         */\n        TransactionGetRecordResponse.create = function create(properties) {\n            return new TransactionGetRecordResponse(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionGetRecordResponse message. Does not implicitly {@link proto.TransactionGetRecordResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionGetRecordResponse\n         * @static\n         * @param {proto.ITransactionGetRecordResponse} m TransactionGetRecordResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionGetRecordResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.transactionRecord != null && Object.hasOwnProperty.call(m, \"transactionRecord\"))\n                $root.proto.TransactionRecord.encode(m.transactionRecord, w.uint32(26).fork()).ldelim();\n            if (m.duplicateTransactionRecords != null && m.duplicateTransactionRecords.length) {\n                for (var i = 0; i < m.duplicateTransactionRecords.length; ++i)\n                    $root.proto.TransactionRecord.encode(m.duplicateTransactionRecords[i], w.uint32(34).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionGetRecordResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionGetRecordResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionGetRecordResponse} TransactionGetRecordResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionGetRecordResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetRecordResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.transactionRecord = $root.proto.TransactionRecord.decode(r, r.uint32());\n                    break;\n                case 4:\n                    if (!(m.duplicateTransactionRecords && m.duplicateTransactionRecords.length))\n                        m.duplicateTransactionRecords = [];\n                    m.duplicateTransactionRecords.push($root.proto.TransactionRecord.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionGetRecordResponse;\n    })();\n\n    proto.TransactionGetFastRecordQuery = (function() {\n\n        /**\n         * Properties of a TransactionGetFastRecordQuery.\n         * @memberof proto\n         * @interface ITransactionGetFastRecordQuery\n         * @property {proto.IQueryHeader|null} [header] TransactionGetFastRecordQuery header\n         * @property {proto.ITransactionID|null} [transactionID] TransactionGetFastRecordQuery transactionID\n         */\n\n        /**\n         * Constructs a new TransactionGetFastRecordQuery.\n         * @memberof proto\n         * @classdesc Represents a TransactionGetFastRecordQuery.\n         * @implements ITransactionGetFastRecordQuery\n         * @constructor\n         * @param {proto.ITransactionGetFastRecordQuery=} [p] Properties to set\n         */\n        function TransactionGetFastRecordQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionGetFastRecordQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.TransactionGetFastRecordQuery\n         * @instance\n         */\n        TransactionGetFastRecordQuery.prototype.header = null;\n\n        /**\n         * TransactionGetFastRecordQuery transactionID.\n         * @member {proto.ITransactionID|null|undefined} transactionID\n         * @memberof proto.TransactionGetFastRecordQuery\n         * @instance\n         */\n        TransactionGetFastRecordQuery.prototype.transactionID = null;\n\n        /**\n         * Creates a new TransactionGetFastRecordQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionGetFastRecordQuery\n         * @static\n         * @param {proto.ITransactionGetFastRecordQuery=} [properties] Properties to set\n         * @returns {proto.TransactionGetFastRecordQuery} TransactionGetFastRecordQuery instance\n         */\n        TransactionGetFastRecordQuery.create = function create(properties) {\n            return new TransactionGetFastRecordQuery(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionGetFastRecordQuery message. Does not implicitly {@link proto.TransactionGetFastRecordQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionGetFastRecordQuery\n         * @static\n         * @param {proto.ITransactionGetFastRecordQuery} m TransactionGetFastRecordQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionGetFastRecordQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.transactionID != null && Object.hasOwnProperty.call(m, \"transactionID\"))\n                $root.proto.TransactionID.encode(m.transactionID, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionGetFastRecordQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionGetFastRecordQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionGetFastRecordQuery} TransactionGetFastRecordQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionGetFastRecordQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetFastRecordQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.transactionID = $root.proto.TransactionID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionGetFastRecordQuery;\n    })();\n\n    proto.TransactionGetFastRecordResponse = (function() {\n\n        /**\n         * Properties of a TransactionGetFastRecordResponse.\n         * @memberof proto\n         * @interface ITransactionGetFastRecordResponse\n         * @property {proto.IResponseHeader|null} [header] TransactionGetFastRecordResponse header\n         * @property {proto.ITransactionRecord|null} [transactionRecord] TransactionGetFastRecordResponse transactionRecord\n         */\n\n        /**\n         * Constructs a new TransactionGetFastRecordResponse.\n         * @memberof proto\n         * @classdesc Represents a TransactionGetFastRecordResponse.\n         * @implements ITransactionGetFastRecordResponse\n         * @constructor\n         * @param {proto.ITransactionGetFastRecordResponse=} [p] Properties to set\n         */\n        function TransactionGetFastRecordResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionGetFastRecordResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.TransactionGetFastRecordResponse\n         * @instance\n         */\n        TransactionGetFastRecordResponse.prototype.header = null;\n\n        /**\n         * TransactionGetFastRecordResponse transactionRecord.\n         * @member {proto.ITransactionRecord|null|undefined} transactionRecord\n         * @memberof proto.TransactionGetFastRecordResponse\n         * @instance\n         */\n        TransactionGetFastRecordResponse.prototype.transactionRecord = null;\n\n        /**\n         * Creates a new TransactionGetFastRecordResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionGetFastRecordResponse\n         * @static\n         * @param {proto.ITransactionGetFastRecordResponse=} [properties] Properties to set\n         * @returns {proto.TransactionGetFastRecordResponse} TransactionGetFastRecordResponse instance\n         */\n        TransactionGetFastRecordResponse.create = function create(properties) {\n            return new TransactionGetFastRecordResponse(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionGetFastRecordResponse message. Does not implicitly {@link proto.TransactionGetFastRecordResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionGetFastRecordResponse\n         * @static\n         * @param {proto.ITransactionGetFastRecordResponse} m TransactionGetFastRecordResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionGetFastRecordResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.transactionRecord != null && Object.hasOwnProperty.call(m, \"transactionRecord\"))\n                $root.proto.TransactionRecord.encode(m.transactionRecord, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionGetFastRecordResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionGetFastRecordResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionGetFastRecordResponse} TransactionGetFastRecordResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionGetFastRecordResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionGetFastRecordResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.transactionRecord = $root.proto.TransactionRecord.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionGetFastRecordResponse;\n    })();\n\n    proto.NetworkGetVersionInfoQuery = (function() {\n\n        /**\n         * Properties of a NetworkGetVersionInfoQuery.\n         * @memberof proto\n         * @interface INetworkGetVersionInfoQuery\n         * @property {proto.IQueryHeader|null} [header] NetworkGetVersionInfoQuery header\n         */\n\n        /**\n         * Constructs a new NetworkGetVersionInfoQuery.\n         * @memberof proto\n         * @classdesc Represents a NetworkGetVersionInfoQuery.\n         * @implements INetworkGetVersionInfoQuery\n         * @constructor\n         * @param {proto.INetworkGetVersionInfoQuery=} [p] Properties to set\n         */\n        function NetworkGetVersionInfoQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * NetworkGetVersionInfoQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.NetworkGetVersionInfoQuery\n         * @instance\n         */\n        NetworkGetVersionInfoQuery.prototype.header = null;\n\n        /**\n         * Creates a new NetworkGetVersionInfoQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.NetworkGetVersionInfoQuery\n         * @static\n         * @param {proto.INetworkGetVersionInfoQuery=} [properties] Properties to set\n         * @returns {proto.NetworkGetVersionInfoQuery} NetworkGetVersionInfoQuery instance\n         */\n        NetworkGetVersionInfoQuery.create = function create(properties) {\n            return new NetworkGetVersionInfoQuery(properties);\n        };\n\n        /**\n         * Encodes the specified NetworkGetVersionInfoQuery message. Does not implicitly {@link proto.NetworkGetVersionInfoQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.NetworkGetVersionInfoQuery\n         * @static\n         * @param {proto.INetworkGetVersionInfoQuery} m NetworkGetVersionInfoQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NetworkGetVersionInfoQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a NetworkGetVersionInfoQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.NetworkGetVersionInfoQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.NetworkGetVersionInfoQuery} NetworkGetVersionInfoQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NetworkGetVersionInfoQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NetworkGetVersionInfoQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return NetworkGetVersionInfoQuery;\n    })();\n\n    proto.NetworkGetVersionInfoResponse = (function() {\n\n        /**\n         * Properties of a NetworkGetVersionInfoResponse.\n         * @memberof proto\n         * @interface INetworkGetVersionInfoResponse\n         * @property {proto.IResponseHeader|null} [header] NetworkGetVersionInfoResponse header\n         * @property {proto.ISemanticVersion|null} [hapiProtoVersion] NetworkGetVersionInfoResponse hapiProtoVersion\n         * @property {proto.ISemanticVersion|null} [hederaServicesVersion] NetworkGetVersionInfoResponse hederaServicesVersion\n         */\n\n        /**\n         * Constructs a new NetworkGetVersionInfoResponse.\n         * @memberof proto\n         * @classdesc Represents a NetworkGetVersionInfoResponse.\n         * @implements INetworkGetVersionInfoResponse\n         * @constructor\n         * @param {proto.INetworkGetVersionInfoResponse=} [p] Properties to set\n         */\n        function NetworkGetVersionInfoResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * NetworkGetVersionInfoResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.NetworkGetVersionInfoResponse\n         * @instance\n         */\n        NetworkGetVersionInfoResponse.prototype.header = null;\n\n        /**\n         * NetworkGetVersionInfoResponse hapiProtoVersion.\n         * @member {proto.ISemanticVersion|null|undefined} hapiProtoVersion\n         * @memberof proto.NetworkGetVersionInfoResponse\n         * @instance\n         */\n        NetworkGetVersionInfoResponse.prototype.hapiProtoVersion = null;\n\n        /**\n         * NetworkGetVersionInfoResponse hederaServicesVersion.\n         * @member {proto.ISemanticVersion|null|undefined} hederaServicesVersion\n         * @memberof proto.NetworkGetVersionInfoResponse\n         * @instance\n         */\n        NetworkGetVersionInfoResponse.prototype.hederaServicesVersion = null;\n\n        /**\n         * Creates a new NetworkGetVersionInfoResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.NetworkGetVersionInfoResponse\n         * @static\n         * @param {proto.INetworkGetVersionInfoResponse=} [properties] Properties to set\n         * @returns {proto.NetworkGetVersionInfoResponse} NetworkGetVersionInfoResponse instance\n         */\n        NetworkGetVersionInfoResponse.create = function create(properties) {\n            return new NetworkGetVersionInfoResponse(properties);\n        };\n\n        /**\n         * Encodes the specified NetworkGetVersionInfoResponse message. Does not implicitly {@link proto.NetworkGetVersionInfoResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.NetworkGetVersionInfoResponse\n         * @static\n         * @param {proto.INetworkGetVersionInfoResponse} m NetworkGetVersionInfoResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NetworkGetVersionInfoResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.hapiProtoVersion != null && Object.hasOwnProperty.call(m, \"hapiProtoVersion\"))\n                $root.proto.SemanticVersion.encode(m.hapiProtoVersion, w.uint32(18).fork()).ldelim();\n            if (m.hederaServicesVersion != null && Object.hasOwnProperty.call(m, \"hederaServicesVersion\"))\n                $root.proto.SemanticVersion.encode(m.hederaServicesVersion, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a NetworkGetVersionInfoResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.NetworkGetVersionInfoResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.NetworkGetVersionInfoResponse} NetworkGetVersionInfoResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NetworkGetVersionInfoResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NetworkGetVersionInfoResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.hapiProtoVersion = $root.proto.SemanticVersion.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.hederaServicesVersion = $root.proto.SemanticVersion.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return NetworkGetVersionInfoResponse;\n    })();\n\n    proto.TokenGetInfoQuery = (function() {\n\n        /**\n         * Properties of a TokenGetInfoQuery.\n         * @memberof proto\n         * @interface ITokenGetInfoQuery\n         * @property {proto.IQueryHeader|null} [header] TokenGetInfoQuery header\n         * @property {proto.ITokenID|null} [token] TokenGetInfoQuery token\n         */\n\n        /**\n         * Constructs a new TokenGetInfoQuery.\n         * @memberof proto\n         * @classdesc Represents a TokenGetInfoQuery.\n         * @implements ITokenGetInfoQuery\n         * @constructor\n         * @param {proto.ITokenGetInfoQuery=} [p] Properties to set\n         */\n        function TokenGetInfoQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenGetInfoQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.TokenGetInfoQuery\n         * @instance\n         */\n        TokenGetInfoQuery.prototype.header = null;\n\n        /**\n         * TokenGetInfoQuery token.\n         * @member {proto.ITokenID|null|undefined} token\n         * @memberof proto.TokenGetInfoQuery\n         * @instance\n         */\n        TokenGetInfoQuery.prototype.token = null;\n\n        /**\n         * Creates a new TokenGetInfoQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenGetInfoQuery\n         * @static\n         * @param {proto.ITokenGetInfoQuery=} [properties] Properties to set\n         * @returns {proto.TokenGetInfoQuery} TokenGetInfoQuery instance\n         */\n        TokenGetInfoQuery.create = function create(properties) {\n            return new TokenGetInfoQuery(properties);\n        };\n\n        /**\n         * Encodes the specified TokenGetInfoQuery message. Does not implicitly {@link proto.TokenGetInfoQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenGetInfoQuery\n         * @static\n         * @param {proto.ITokenGetInfoQuery} m TokenGetInfoQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenGetInfoQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.token != null && Object.hasOwnProperty.call(m, \"token\"))\n                $root.proto.TokenID.encode(m.token, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenGetInfoQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenGetInfoQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenGetInfoQuery} TokenGetInfoQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenGetInfoQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenGetInfoQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.token = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenGetInfoQuery;\n    })();\n\n    proto.TokenInfo = (function() {\n\n        /**\n         * Properties of a TokenInfo.\n         * @memberof proto\n         * @interface ITokenInfo\n         * @property {proto.ITokenID|null} [tokenId] TokenInfo tokenId\n         * @property {string|null} [name] TokenInfo name\n         * @property {string|null} [symbol] TokenInfo symbol\n         * @property {number|null} [decimals] TokenInfo decimals\n         * @property {Long|null} [totalSupply] TokenInfo totalSupply\n         * @property {proto.IAccountID|null} [treasury] TokenInfo treasury\n         * @property {proto.IKey|null} [adminKey] TokenInfo adminKey\n         * @property {proto.IKey|null} [kycKey] TokenInfo kycKey\n         * @property {proto.IKey|null} [freezeKey] TokenInfo freezeKey\n         * @property {proto.IKey|null} [wipeKey] TokenInfo wipeKey\n         * @property {proto.IKey|null} [supplyKey] TokenInfo supplyKey\n         * @property {proto.TokenFreezeStatus|null} [defaultFreezeStatus] TokenInfo defaultFreezeStatus\n         * @property {proto.TokenKycStatus|null} [defaultKycStatus] TokenInfo defaultKycStatus\n         * @property {boolean|null} [deleted] TokenInfo deleted\n         * @property {proto.IAccountID|null} [autoRenewAccount] TokenInfo autoRenewAccount\n         * @property {proto.IDuration|null} [autoRenewPeriod] TokenInfo autoRenewPeriod\n         * @property {proto.ITimestamp|null} [expiry] TokenInfo expiry\n         */\n\n        /**\n         * Constructs a new TokenInfo.\n         * @memberof proto\n         * @classdesc Represents a TokenInfo.\n         * @implements ITokenInfo\n         * @constructor\n         * @param {proto.ITokenInfo=} [p] Properties to set\n         */\n        function TokenInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenInfo tokenId.\n         * @member {proto.ITokenID|null|undefined} tokenId\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.tokenId = null;\n\n        /**\n         * TokenInfo name.\n         * @member {string} name\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.name = \"\";\n\n        /**\n         * TokenInfo symbol.\n         * @member {string} symbol\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.symbol = \"\";\n\n        /**\n         * TokenInfo decimals.\n         * @member {number} decimals\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.decimals = 0;\n\n        /**\n         * TokenInfo totalSupply.\n         * @member {Long} totalSupply\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.totalSupply = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TokenInfo treasury.\n         * @member {proto.IAccountID|null|undefined} treasury\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.treasury = null;\n\n        /**\n         * TokenInfo adminKey.\n         * @member {proto.IKey|null|undefined} adminKey\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.adminKey = null;\n\n        /**\n         * TokenInfo kycKey.\n         * @member {proto.IKey|null|undefined} kycKey\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.kycKey = null;\n\n        /**\n         * TokenInfo freezeKey.\n         * @member {proto.IKey|null|undefined} freezeKey\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.freezeKey = null;\n\n        /**\n         * TokenInfo wipeKey.\n         * @member {proto.IKey|null|undefined} wipeKey\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.wipeKey = null;\n\n        /**\n         * TokenInfo supplyKey.\n         * @member {proto.IKey|null|undefined} supplyKey\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.supplyKey = null;\n\n        /**\n         * TokenInfo defaultFreezeStatus.\n         * @member {proto.TokenFreezeStatus} defaultFreezeStatus\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.defaultFreezeStatus = 0;\n\n        /**\n         * TokenInfo defaultKycStatus.\n         * @member {proto.TokenKycStatus} defaultKycStatus\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.defaultKycStatus = 0;\n\n        /**\n         * TokenInfo deleted.\n         * @member {boolean} deleted\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.deleted = false;\n\n        /**\n         * TokenInfo autoRenewAccount.\n         * @member {proto.IAccountID|null|undefined} autoRenewAccount\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.autoRenewAccount = null;\n\n        /**\n         * TokenInfo autoRenewPeriod.\n         * @member {proto.IDuration|null|undefined} autoRenewPeriod\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.autoRenewPeriod = null;\n\n        /**\n         * TokenInfo expiry.\n         * @member {proto.ITimestamp|null|undefined} expiry\n         * @memberof proto.TokenInfo\n         * @instance\n         */\n        TokenInfo.prototype.expiry = null;\n\n        /**\n         * Creates a new TokenInfo instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenInfo\n         * @static\n         * @param {proto.ITokenInfo=} [properties] Properties to set\n         * @returns {proto.TokenInfo} TokenInfo instance\n         */\n        TokenInfo.create = function create(properties) {\n            return new TokenInfo(properties);\n        };\n\n        /**\n         * Encodes the specified TokenInfo message. Does not implicitly {@link proto.TokenInfo.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenInfo\n         * @static\n         * @param {proto.ITokenInfo} m TokenInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.tokenId != null && Object.hasOwnProperty.call(m, \"tokenId\"))\n                $root.proto.TokenID.encode(m.tokenId, w.uint32(10).fork()).ldelim();\n            if (m.name != null && Object.hasOwnProperty.call(m, \"name\"))\n                w.uint32(18).string(m.name);\n            if (m.symbol != null && Object.hasOwnProperty.call(m, \"symbol\"))\n                w.uint32(26).string(m.symbol);\n            if (m.decimals != null && Object.hasOwnProperty.call(m, \"decimals\"))\n                w.uint32(32).uint32(m.decimals);\n            if (m.totalSupply != null && Object.hasOwnProperty.call(m, \"totalSupply\"))\n                w.uint32(40).uint64(m.totalSupply);\n            if (m.treasury != null && Object.hasOwnProperty.call(m, \"treasury\"))\n                $root.proto.AccountID.encode(m.treasury, w.uint32(50).fork()).ldelim();\n            if (m.adminKey != null && Object.hasOwnProperty.call(m, \"adminKey\"))\n                $root.proto.Key.encode(m.adminKey, w.uint32(58).fork()).ldelim();\n            if (m.kycKey != null && Object.hasOwnProperty.call(m, \"kycKey\"))\n                $root.proto.Key.encode(m.kycKey, w.uint32(66).fork()).ldelim();\n            if (m.freezeKey != null && Object.hasOwnProperty.call(m, \"freezeKey\"))\n                $root.proto.Key.encode(m.freezeKey, w.uint32(74).fork()).ldelim();\n            if (m.wipeKey != null && Object.hasOwnProperty.call(m, \"wipeKey\"))\n                $root.proto.Key.encode(m.wipeKey, w.uint32(82).fork()).ldelim();\n            if (m.supplyKey != null && Object.hasOwnProperty.call(m, \"supplyKey\"))\n                $root.proto.Key.encode(m.supplyKey, w.uint32(90).fork()).ldelim();\n            if (m.defaultFreezeStatus != null && Object.hasOwnProperty.call(m, \"defaultFreezeStatus\"))\n                w.uint32(96).int32(m.defaultFreezeStatus);\n            if (m.defaultKycStatus != null && Object.hasOwnProperty.call(m, \"defaultKycStatus\"))\n                w.uint32(104).int32(m.defaultKycStatus);\n            if (m.deleted != null && Object.hasOwnProperty.call(m, \"deleted\"))\n                w.uint32(112).bool(m.deleted);\n            if (m.autoRenewAccount != null && Object.hasOwnProperty.call(m, \"autoRenewAccount\"))\n                $root.proto.AccountID.encode(m.autoRenewAccount, w.uint32(122).fork()).ldelim();\n            if (m.autoRenewPeriod != null && Object.hasOwnProperty.call(m, \"autoRenewPeriod\"))\n                $root.proto.Duration.encode(m.autoRenewPeriod, w.uint32(130).fork()).ldelim();\n            if (m.expiry != null && Object.hasOwnProperty.call(m, \"expiry\"))\n                $root.proto.Timestamp.encode(m.expiry, w.uint32(138).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenInfo} TokenInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.tokenId = $root.proto.TokenID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.name = r.string();\n                    break;\n                case 3:\n                    m.symbol = r.string();\n                    break;\n                case 4:\n                    m.decimals = r.uint32();\n                    break;\n                case 5:\n                    m.totalSupply = r.uint64();\n                    break;\n                case 6:\n                    m.treasury = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.adminKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.kycKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.freezeKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.wipeKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.supplyKey = $root.proto.Key.decode(r, r.uint32());\n                    break;\n                case 12:\n                    m.defaultFreezeStatus = r.int32();\n                    break;\n                case 13:\n                    m.defaultKycStatus = r.int32();\n                    break;\n                case 14:\n                    m.deleted = r.bool();\n                    break;\n                case 15:\n                    m.autoRenewAccount = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 16:\n                    m.autoRenewPeriod = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                case 17:\n                    m.expiry = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenInfo;\n    })();\n\n    proto.TokenGetInfoResponse = (function() {\n\n        /**\n         * Properties of a TokenGetInfoResponse.\n         * @memberof proto\n         * @interface ITokenGetInfoResponse\n         * @property {proto.IResponseHeader|null} [header] TokenGetInfoResponse header\n         * @property {proto.ITokenInfo|null} [tokenInfo] TokenGetInfoResponse tokenInfo\n         */\n\n        /**\n         * Constructs a new TokenGetInfoResponse.\n         * @memberof proto\n         * @classdesc Represents a TokenGetInfoResponse.\n         * @implements ITokenGetInfoResponse\n         * @constructor\n         * @param {proto.ITokenGetInfoResponse=} [p] Properties to set\n         */\n        function TokenGetInfoResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenGetInfoResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.TokenGetInfoResponse\n         * @instance\n         */\n        TokenGetInfoResponse.prototype.header = null;\n\n        /**\n         * TokenGetInfoResponse tokenInfo.\n         * @member {proto.ITokenInfo|null|undefined} tokenInfo\n         * @memberof proto.TokenGetInfoResponse\n         * @instance\n         */\n        TokenGetInfoResponse.prototype.tokenInfo = null;\n\n        /**\n         * Creates a new TokenGetInfoResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenGetInfoResponse\n         * @static\n         * @param {proto.ITokenGetInfoResponse=} [properties] Properties to set\n         * @returns {proto.TokenGetInfoResponse} TokenGetInfoResponse instance\n         */\n        TokenGetInfoResponse.create = function create(properties) {\n            return new TokenGetInfoResponse(properties);\n        };\n\n        /**\n         * Encodes the specified TokenGetInfoResponse message. Does not implicitly {@link proto.TokenGetInfoResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenGetInfoResponse\n         * @static\n         * @param {proto.ITokenGetInfoResponse} m TokenGetInfoResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenGetInfoResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.tokenInfo != null && Object.hasOwnProperty.call(m, \"tokenInfo\"))\n                $root.proto.TokenInfo.encode(m.tokenInfo, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a TokenGetInfoResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenGetInfoResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenGetInfoResponse} TokenGetInfoResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenGetInfoResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenGetInfoResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.tokenInfo = $root.proto.TokenInfo.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenGetInfoResponse;\n    })();\n\n    proto.Response = (function() {\n\n        /**\n         * Properties of a Response.\n         * @memberof proto\n         * @interface IResponse\n         * @property {proto.IGetByKeyResponse|null} [getByKey] Response getByKey\n         * @property {proto.IGetBySolidityIDResponse|null} [getBySolidityID] Response getBySolidityID\n         * @property {proto.IContractCallLocalResponse|null} [contractCallLocal] Response contractCallLocal\n         * @property {proto.IContractGetBytecodeResponse|null} [contractGetBytecodeResponse] Response contractGetBytecodeResponse\n         * @property {proto.IContractGetInfoResponse|null} [contractGetInfo] Response contractGetInfo\n         * @property {proto.IContractGetRecordsResponse|null} [contractGetRecordsResponse] Response contractGetRecordsResponse\n         * @property {proto.ICryptoGetAccountBalanceResponse|null} [cryptogetAccountBalance] Response cryptogetAccountBalance\n         * @property {proto.ICryptoGetAccountRecordsResponse|null} [cryptoGetAccountRecords] Response cryptoGetAccountRecords\n         * @property {proto.ICryptoGetInfoResponse|null} [cryptoGetInfo] Response cryptoGetInfo\n         * @property {proto.ICryptoGetLiveHashResponse|null} [cryptoGetLiveHash] Response cryptoGetLiveHash\n         * @property {proto.ICryptoGetStakersResponse|null} [cryptoGetProxyStakers] Response cryptoGetProxyStakers\n         * @property {proto.IFileGetContentsResponse|null} [fileGetContents] Response fileGetContents\n         * @property {proto.IFileGetInfoResponse|null} [fileGetInfo] Response fileGetInfo\n         * @property {proto.ITransactionGetReceiptResponse|null} [transactionGetReceipt] Response transactionGetReceipt\n         * @property {proto.ITransactionGetRecordResponse|null} [transactionGetRecord] Response transactionGetRecord\n         * @property {proto.ITransactionGetFastRecordResponse|null} [transactionGetFastRecord] Response transactionGetFastRecord\n         * @property {proto.IConsensusGetTopicInfoResponse|null} [consensusGetTopicInfo] Response consensusGetTopicInfo\n         * @property {proto.INetworkGetVersionInfoResponse|null} [networkGetVersionInfo] Response networkGetVersionInfo\n         * @property {proto.ITokenGetInfoResponse|null} [tokenGetInfo] Response tokenGetInfo\n         */\n\n        /**\n         * Constructs a new Response.\n         * @memberof proto\n         * @classdesc Represents a Response.\n         * @implements IResponse\n         * @constructor\n         * @param {proto.IResponse=} [p] Properties to set\n         */\n        function Response(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Response getByKey.\n         * @member {proto.IGetByKeyResponse|null|undefined} getByKey\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.getByKey = null;\n\n        /**\n         * Response getBySolidityID.\n         * @member {proto.IGetBySolidityIDResponse|null|undefined} getBySolidityID\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.getBySolidityID = null;\n\n        /**\n         * Response contractCallLocal.\n         * @member {proto.IContractCallLocalResponse|null|undefined} contractCallLocal\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.contractCallLocal = null;\n\n        /**\n         * Response contractGetBytecodeResponse.\n         * @member {proto.IContractGetBytecodeResponse|null|undefined} contractGetBytecodeResponse\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.contractGetBytecodeResponse = null;\n\n        /**\n         * Response contractGetInfo.\n         * @member {proto.IContractGetInfoResponse|null|undefined} contractGetInfo\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.contractGetInfo = null;\n\n        /**\n         * Response contractGetRecordsResponse.\n         * @member {proto.IContractGetRecordsResponse|null|undefined} contractGetRecordsResponse\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.contractGetRecordsResponse = null;\n\n        /**\n         * Response cryptogetAccountBalance.\n         * @member {proto.ICryptoGetAccountBalanceResponse|null|undefined} cryptogetAccountBalance\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.cryptogetAccountBalance = null;\n\n        /**\n         * Response cryptoGetAccountRecords.\n         * @member {proto.ICryptoGetAccountRecordsResponse|null|undefined} cryptoGetAccountRecords\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.cryptoGetAccountRecords = null;\n\n        /**\n         * Response cryptoGetInfo.\n         * @member {proto.ICryptoGetInfoResponse|null|undefined} cryptoGetInfo\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.cryptoGetInfo = null;\n\n        /**\n         * Response cryptoGetLiveHash.\n         * @member {proto.ICryptoGetLiveHashResponse|null|undefined} cryptoGetLiveHash\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.cryptoGetLiveHash = null;\n\n        /**\n         * Response cryptoGetProxyStakers.\n         * @member {proto.ICryptoGetStakersResponse|null|undefined} cryptoGetProxyStakers\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.cryptoGetProxyStakers = null;\n\n        /**\n         * Response fileGetContents.\n         * @member {proto.IFileGetContentsResponse|null|undefined} fileGetContents\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.fileGetContents = null;\n\n        /**\n         * Response fileGetInfo.\n         * @member {proto.IFileGetInfoResponse|null|undefined} fileGetInfo\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.fileGetInfo = null;\n\n        /**\n         * Response transactionGetReceipt.\n         * @member {proto.ITransactionGetReceiptResponse|null|undefined} transactionGetReceipt\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.transactionGetReceipt = null;\n\n        /**\n         * Response transactionGetRecord.\n         * @member {proto.ITransactionGetRecordResponse|null|undefined} transactionGetRecord\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.transactionGetRecord = null;\n\n        /**\n         * Response transactionGetFastRecord.\n         * @member {proto.ITransactionGetFastRecordResponse|null|undefined} transactionGetFastRecord\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.transactionGetFastRecord = null;\n\n        /**\n         * Response consensusGetTopicInfo.\n         * @member {proto.IConsensusGetTopicInfoResponse|null|undefined} consensusGetTopicInfo\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.consensusGetTopicInfo = null;\n\n        /**\n         * Response networkGetVersionInfo.\n         * @member {proto.INetworkGetVersionInfoResponse|null|undefined} networkGetVersionInfo\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.networkGetVersionInfo = null;\n\n        /**\n         * Response tokenGetInfo.\n         * @member {proto.ITokenGetInfoResponse|null|undefined} tokenGetInfo\n         * @memberof proto.Response\n         * @instance\n         */\n        Response.prototype.tokenGetInfo = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Response response.\n         * @member {\"getByKey\"|\"getBySolidityID\"|\"contractCallLocal\"|\"contractGetBytecodeResponse\"|\"contractGetInfo\"|\"contractGetRecordsResponse\"|\"cryptogetAccountBalance\"|\"cryptoGetAccountRecords\"|\"cryptoGetInfo\"|\"cryptoGetLiveHash\"|\"cryptoGetProxyStakers\"|\"fileGetContents\"|\"fileGetInfo\"|\"transactionGetReceipt\"|\"transactionGetRecord\"|\"transactionGetFastRecord\"|\"consensusGetTopicInfo\"|\"networkGetVersionInfo\"|\"tokenGetInfo\"|undefined} response\n         * @memberof proto.Response\n         * @instance\n         */\n        Object.defineProperty(Response.prototype, \"response\", {\n            get: $util.oneOfGetter($oneOfFields = [\"getByKey\", \"getBySolidityID\", \"contractCallLocal\", \"contractGetBytecodeResponse\", \"contractGetInfo\", \"contractGetRecordsResponse\", \"cryptogetAccountBalance\", \"cryptoGetAccountRecords\", \"cryptoGetInfo\", \"cryptoGetLiveHash\", \"cryptoGetProxyStakers\", \"fileGetContents\", \"fileGetInfo\", \"transactionGetReceipt\", \"transactionGetRecord\", \"transactionGetFastRecord\", \"consensusGetTopicInfo\", \"networkGetVersionInfo\", \"tokenGetInfo\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Response instance using the specified properties.\n         * @function create\n         * @memberof proto.Response\n         * @static\n         * @param {proto.IResponse=} [properties] Properties to set\n         * @returns {proto.Response} Response instance\n         */\n        Response.create = function create(properties) {\n            return new Response(properties);\n        };\n\n        /**\n         * Encodes the specified Response message. Does not implicitly {@link proto.Response.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Response\n         * @static\n         * @param {proto.IResponse} m Response message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Response.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.getByKey != null && Object.hasOwnProperty.call(m, \"getByKey\"))\n                $root.proto.GetByKeyResponse.encode(m.getByKey, w.uint32(10).fork()).ldelim();\n            if (m.getBySolidityID != null && Object.hasOwnProperty.call(m, \"getBySolidityID\"))\n                $root.proto.GetBySolidityIDResponse.encode(m.getBySolidityID, w.uint32(18).fork()).ldelim();\n            if (m.contractCallLocal != null && Object.hasOwnProperty.call(m, \"contractCallLocal\"))\n                $root.proto.ContractCallLocalResponse.encode(m.contractCallLocal, w.uint32(26).fork()).ldelim();\n            if (m.contractGetInfo != null && Object.hasOwnProperty.call(m, \"contractGetInfo\"))\n                $root.proto.ContractGetInfoResponse.encode(m.contractGetInfo, w.uint32(34).fork()).ldelim();\n            if (m.contractGetBytecodeResponse != null && Object.hasOwnProperty.call(m, \"contractGetBytecodeResponse\"))\n                $root.proto.ContractGetBytecodeResponse.encode(m.contractGetBytecodeResponse, w.uint32(42).fork()).ldelim();\n            if (m.contractGetRecordsResponse != null && Object.hasOwnProperty.call(m, \"contractGetRecordsResponse\"))\n                $root.proto.ContractGetRecordsResponse.encode(m.contractGetRecordsResponse, w.uint32(50).fork()).ldelim();\n            if (m.cryptogetAccountBalance != null && Object.hasOwnProperty.call(m, \"cryptogetAccountBalance\"))\n                $root.proto.CryptoGetAccountBalanceResponse.encode(m.cryptogetAccountBalance, w.uint32(58).fork()).ldelim();\n            if (m.cryptoGetAccountRecords != null && Object.hasOwnProperty.call(m, \"cryptoGetAccountRecords\"))\n                $root.proto.CryptoGetAccountRecordsResponse.encode(m.cryptoGetAccountRecords, w.uint32(66).fork()).ldelim();\n            if (m.cryptoGetInfo != null && Object.hasOwnProperty.call(m, \"cryptoGetInfo\"))\n                $root.proto.CryptoGetInfoResponse.encode(m.cryptoGetInfo, w.uint32(74).fork()).ldelim();\n            if (m.cryptoGetLiveHash != null && Object.hasOwnProperty.call(m, \"cryptoGetLiveHash\"))\n                $root.proto.CryptoGetLiveHashResponse.encode(m.cryptoGetLiveHash, w.uint32(82).fork()).ldelim();\n            if (m.cryptoGetProxyStakers != null && Object.hasOwnProperty.call(m, \"cryptoGetProxyStakers\"))\n                $root.proto.CryptoGetStakersResponse.encode(m.cryptoGetProxyStakers, w.uint32(90).fork()).ldelim();\n            if (m.fileGetContents != null && Object.hasOwnProperty.call(m, \"fileGetContents\"))\n                $root.proto.FileGetContentsResponse.encode(m.fileGetContents, w.uint32(98).fork()).ldelim();\n            if (m.fileGetInfo != null && Object.hasOwnProperty.call(m, \"fileGetInfo\"))\n                $root.proto.FileGetInfoResponse.encode(m.fileGetInfo, w.uint32(106).fork()).ldelim();\n            if (m.transactionGetReceipt != null && Object.hasOwnProperty.call(m, \"transactionGetReceipt\"))\n                $root.proto.TransactionGetReceiptResponse.encode(m.transactionGetReceipt, w.uint32(114).fork()).ldelim();\n            if (m.transactionGetRecord != null && Object.hasOwnProperty.call(m, \"transactionGetRecord\"))\n                $root.proto.TransactionGetRecordResponse.encode(m.transactionGetRecord, w.uint32(122).fork()).ldelim();\n            if (m.transactionGetFastRecord != null && Object.hasOwnProperty.call(m, \"transactionGetFastRecord\"))\n                $root.proto.TransactionGetFastRecordResponse.encode(m.transactionGetFastRecord, w.uint32(130).fork()).ldelim();\n            if (m.consensusGetTopicInfo != null && Object.hasOwnProperty.call(m, \"consensusGetTopicInfo\"))\n                $root.proto.ConsensusGetTopicInfoResponse.encode(m.consensusGetTopicInfo, w.uint32(1202).fork()).ldelim();\n            if (m.networkGetVersionInfo != null && Object.hasOwnProperty.call(m, \"networkGetVersionInfo\"))\n                $root.proto.NetworkGetVersionInfoResponse.encode(m.networkGetVersionInfo, w.uint32(1210).fork()).ldelim();\n            if (m.tokenGetInfo != null && Object.hasOwnProperty.call(m, \"tokenGetInfo\"))\n                $root.proto.TokenGetInfoResponse.encode(m.tokenGetInfo, w.uint32(1218).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a Response message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Response\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Response} Response\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Response.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Response();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.getByKey = $root.proto.GetByKeyResponse.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.getBySolidityID = $root.proto.GetBySolidityIDResponse.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.contractCallLocal = $root.proto.ContractCallLocalResponse.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.contractGetBytecodeResponse = $root.proto.ContractGetBytecodeResponse.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.contractGetInfo = $root.proto.ContractGetInfoResponse.decode(r, r.uint32());\n                    break;\n                case 6:\n                    m.contractGetRecordsResponse = $root.proto.ContractGetRecordsResponse.decode(r, r.uint32());\n                    break;\n                case 7:\n                    m.cryptogetAccountBalance = $root.proto.CryptoGetAccountBalanceResponse.decode(r, r.uint32());\n                    break;\n                case 8:\n                    m.cryptoGetAccountRecords = $root.proto.CryptoGetAccountRecordsResponse.decode(r, r.uint32());\n                    break;\n                case 9:\n                    m.cryptoGetInfo = $root.proto.CryptoGetInfoResponse.decode(r, r.uint32());\n                    break;\n                case 10:\n                    m.cryptoGetLiveHash = $root.proto.CryptoGetLiveHashResponse.decode(r, r.uint32());\n                    break;\n                case 11:\n                    m.cryptoGetProxyStakers = $root.proto.CryptoGetStakersResponse.decode(r, r.uint32());\n                    break;\n                case 12:\n                    m.fileGetContents = $root.proto.FileGetContentsResponse.decode(r, r.uint32());\n                    break;\n                case 13:\n                    m.fileGetInfo = $root.proto.FileGetInfoResponse.decode(r, r.uint32());\n                    break;\n                case 14:\n                    m.transactionGetReceipt = $root.proto.TransactionGetReceiptResponse.decode(r, r.uint32());\n                    break;\n                case 15:\n                    m.transactionGetRecord = $root.proto.TransactionGetRecordResponse.decode(r, r.uint32());\n                    break;\n                case 16:\n                    m.transactionGetFastRecord = $root.proto.TransactionGetFastRecordResponse.decode(r, r.uint32());\n                    break;\n                case 150:\n                    m.consensusGetTopicInfo = $root.proto.ConsensusGetTopicInfoResponse.decode(r, r.uint32());\n                    break;\n                case 151:\n                    m.networkGetVersionInfo = $root.proto.NetworkGetVersionInfoResponse.decode(r, r.uint32());\n                    break;\n                case 152:\n                    m.tokenGetInfo = $root.proto.TokenGetInfoResponse.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Response;\n    })();\n\n    proto.Claim = (function() {\n\n        /**\n         * Properties of a Claim.\n         * @memberof proto\n         * @interface IClaim\n         * @property {proto.IAccountID|null} [accountID] Claim accountID\n         * @property {Uint8Array|null} [hash] Claim hash\n         * @property {proto.IKeyList|null} [keys] Claim keys\n         * @property {proto.IDuration|null} [claimDuration] Claim claimDuration\n         */\n\n        /**\n         * Constructs a new Claim.\n         * @memberof proto\n         * @classdesc Represents a Claim.\n         * @implements IClaim\n         * @constructor\n         * @param {proto.IClaim=} [p] Properties to set\n         */\n        function Claim(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Claim accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.Claim\n         * @instance\n         */\n        Claim.prototype.accountID = null;\n\n        /**\n         * Claim hash.\n         * @member {Uint8Array} hash\n         * @memberof proto.Claim\n         * @instance\n         */\n        Claim.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Claim keys.\n         * @member {proto.IKeyList|null|undefined} keys\n         * @memberof proto.Claim\n         * @instance\n         */\n        Claim.prototype.keys = null;\n\n        /**\n         * Claim claimDuration.\n         * @member {proto.IDuration|null|undefined} claimDuration\n         * @memberof proto.Claim\n         * @instance\n         */\n        Claim.prototype.claimDuration = null;\n\n        /**\n         * Creates a new Claim instance using the specified properties.\n         * @function create\n         * @memberof proto.Claim\n         * @static\n         * @param {proto.IClaim=} [properties] Properties to set\n         * @returns {proto.Claim} Claim instance\n         */\n        Claim.create = function create(properties) {\n            return new Claim(properties);\n        };\n\n        /**\n         * Encodes the specified Claim message. Does not implicitly {@link proto.Claim.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Claim\n         * @static\n         * @param {proto.IClaim} m Claim message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Claim.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(10).fork()).ldelim();\n            if (m.hash != null && Object.hasOwnProperty.call(m, \"hash\"))\n                w.uint32(18).bytes(m.hash);\n            if (m.keys != null && Object.hasOwnProperty.call(m, \"keys\"))\n                $root.proto.KeyList.encode(m.keys, w.uint32(26).fork()).ldelim();\n            if (m.claimDuration != null && Object.hasOwnProperty.call(m, \"claimDuration\"))\n                $root.proto.Duration.encode(m.claimDuration, w.uint32(42).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a Claim message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Claim\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Claim} Claim\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Claim.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Claim();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.hash = r.bytes();\n                    break;\n                case 3:\n                    m.keys = $root.proto.KeyList.decode(r, r.uint32());\n                    break;\n                case 5:\n                    m.claimDuration = $root.proto.Duration.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Claim;\n    })();\n\n    proto.CryptoAddClaimTransactionBody = (function() {\n\n        /**\n         * Properties of a CryptoAddClaimTransactionBody.\n         * @memberof proto\n         * @interface ICryptoAddClaimTransactionBody\n         * @property {proto.IClaim|null} [claim] CryptoAddClaimTransactionBody claim\n         */\n\n        /**\n         * Constructs a new CryptoAddClaimTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a CryptoAddClaimTransactionBody.\n         * @implements ICryptoAddClaimTransactionBody\n         * @constructor\n         * @param {proto.ICryptoAddClaimTransactionBody=} [p] Properties to set\n         */\n        function CryptoAddClaimTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoAddClaimTransactionBody claim.\n         * @member {proto.IClaim|null|undefined} claim\n         * @memberof proto.CryptoAddClaimTransactionBody\n         * @instance\n         */\n        CryptoAddClaimTransactionBody.prototype.claim = null;\n\n        /**\n         * Creates a new CryptoAddClaimTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoAddClaimTransactionBody\n         * @static\n         * @param {proto.ICryptoAddClaimTransactionBody=} [properties] Properties to set\n         * @returns {proto.CryptoAddClaimTransactionBody} CryptoAddClaimTransactionBody instance\n         */\n        CryptoAddClaimTransactionBody.create = function create(properties) {\n            return new CryptoAddClaimTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoAddClaimTransactionBody message. Does not implicitly {@link proto.CryptoAddClaimTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoAddClaimTransactionBody\n         * @static\n         * @param {proto.ICryptoAddClaimTransactionBody} m CryptoAddClaimTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoAddClaimTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.claim != null && Object.hasOwnProperty.call(m, \"claim\"))\n                $root.proto.Claim.encode(m.claim, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoAddClaimTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoAddClaimTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoAddClaimTransactionBody} CryptoAddClaimTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoAddClaimTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoAddClaimTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 3:\n                    m.claim = $root.proto.Claim.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoAddClaimTransactionBody;\n    })();\n\n    proto.CryptoDeleteClaimTransactionBody = (function() {\n\n        /**\n         * Properties of a CryptoDeleteClaimTransactionBody.\n         * @memberof proto\n         * @interface ICryptoDeleteClaimTransactionBody\n         * @property {proto.IAccountID|null} [accountIDToDeleteFrom] CryptoDeleteClaimTransactionBody accountIDToDeleteFrom\n         * @property {Uint8Array|null} [hashToDelete] CryptoDeleteClaimTransactionBody hashToDelete\n         */\n\n        /**\n         * Constructs a new CryptoDeleteClaimTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a CryptoDeleteClaimTransactionBody.\n         * @implements ICryptoDeleteClaimTransactionBody\n         * @constructor\n         * @param {proto.ICryptoDeleteClaimTransactionBody=} [p] Properties to set\n         */\n        function CryptoDeleteClaimTransactionBody(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoDeleteClaimTransactionBody accountIDToDeleteFrom.\n         * @member {proto.IAccountID|null|undefined} accountIDToDeleteFrom\n         * @memberof proto.CryptoDeleteClaimTransactionBody\n         * @instance\n         */\n        CryptoDeleteClaimTransactionBody.prototype.accountIDToDeleteFrom = null;\n\n        /**\n         * CryptoDeleteClaimTransactionBody hashToDelete.\n         * @member {Uint8Array} hashToDelete\n         * @memberof proto.CryptoDeleteClaimTransactionBody\n         * @instance\n         */\n        CryptoDeleteClaimTransactionBody.prototype.hashToDelete = $util.newBuffer([]);\n\n        /**\n         * Creates a new CryptoDeleteClaimTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoDeleteClaimTransactionBody\n         * @static\n         * @param {proto.ICryptoDeleteClaimTransactionBody=} [properties] Properties to set\n         * @returns {proto.CryptoDeleteClaimTransactionBody} CryptoDeleteClaimTransactionBody instance\n         */\n        CryptoDeleteClaimTransactionBody.create = function create(properties) {\n            return new CryptoDeleteClaimTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoDeleteClaimTransactionBody message. Does not implicitly {@link proto.CryptoDeleteClaimTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoDeleteClaimTransactionBody\n         * @static\n         * @param {proto.ICryptoDeleteClaimTransactionBody} m CryptoDeleteClaimTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoDeleteClaimTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.accountIDToDeleteFrom != null && Object.hasOwnProperty.call(m, \"accountIDToDeleteFrom\"))\n                $root.proto.AccountID.encode(m.accountIDToDeleteFrom, w.uint32(10).fork()).ldelim();\n            if (m.hashToDelete != null && Object.hasOwnProperty.call(m, \"hashToDelete\"))\n                w.uint32(18).bytes(m.hashToDelete);\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoDeleteClaimTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoDeleteClaimTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoDeleteClaimTransactionBody} CryptoDeleteClaimTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoDeleteClaimTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoDeleteClaimTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.accountIDToDeleteFrom = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.hashToDelete = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoDeleteClaimTransactionBody;\n    })();\n\n    proto.CryptoGetClaimQuery = (function() {\n\n        /**\n         * Properties of a CryptoGetClaimQuery.\n         * @memberof proto\n         * @interface ICryptoGetClaimQuery\n         * @property {proto.IQueryHeader|null} [header] CryptoGetClaimQuery header\n         * @property {proto.IAccountID|null} [accountID] CryptoGetClaimQuery accountID\n         * @property {Uint8Array|null} [hash] CryptoGetClaimQuery hash\n         */\n\n        /**\n         * Constructs a new CryptoGetClaimQuery.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetClaimQuery.\n         * @implements ICryptoGetClaimQuery\n         * @constructor\n         * @param {proto.ICryptoGetClaimQuery=} [p] Properties to set\n         */\n        function CryptoGetClaimQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetClaimQuery header.\n         * @member {proto.IQueryHeader|null|undefined} header\n         * @memberof proto.CryptoGetClaimQuery\n         * @instance\n         */\n        CryptoGetClaimQuery.prototype.header = null;\n\n        /**\n         * CryptoGetClaimQuery accountID.\n         * @member {proto.IAccountID|null|undefined} accountID\n         * @memberof proto.CryptoGetClaimQuery\n         * @instance\n         */\n        CryptoGetClaimQuery.prototype.accountID = null;\n\n        /**\n         * CryptoGetClaimQuery hash.\n         * @member {Uint8Array} hash\n         * @memberof proto.CryptoGetClaimQuery\n         * @instance\n         */\n        CryptoGetClaimQuery.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new CryptoGetClaimQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetClaimQuery\n         * @static\n         * @param {proto.ICryptoGetClaimQuery=} [properties] Properties to set\n         * @returns {proto.CryptoGetClaimQuery} CryptoGetClaimQuery instance\n         */\n        CryptoGetClaimQuery.create = function create(properties) {\n            return new CryptoGetClaimQuery(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetClaimQuery message. Does not implicitly {@link proto.CryptoGetClaimQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetClaimQuery\n         * @static\n         * @param {proto.ICryptoGetClaimQuery} m CryptoGetClaimQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetClaimQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.QueryHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.accountID != null && Object.hasOwnProperty.call(m, \"accountID\"))\n                $root.proto.AccountID.encode(m.accountID, w.uint32(18).fork()).ldelim();\n            if (m.hash != null && Object.hasOwnProperty.call(m, \"hash\"))\n                w.uint32(26).bytes(m.hash);\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetClaimQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetClaimQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetClaimQuery} CryptoGetClaimQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetClaimQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetClaimQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.QueryHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.accountID = $root.proto.AccountID.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.hash = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetClaimQuery;\n    })();\n\n    proto.CryptoGetClaimResponse = (function() {\n\n        /**\n         * Properties of a CryptoGetClaimResponse.\n         * @memberof proto\n         * @interface ICryptoGetClaimResponse\n         * @property {proto.IResponseHeader|null} [header] CryptoGetClaimResponse header\n         * @property {proto.IClaim|null} [claim] CryptoGetClaimResponse claim\n         */\n\n        /**\n         * Constructs a new CryptoGetClaimResponse.\n         * @memberof proto\n         * @classdesc Represents a CryptoGetClaimResponse.\n         * @implements ICryptoGetClaimResponse\n         * @constructor\n         * @param {proto.ICryptoGetClaimResponse=} [p] Properties to set\n         */\n        function CryptoGetClaimResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CryptoGetClaimResponse header.\n         * @member {proto.IResponseHeader|null|undefined} header\n         * @memberof proto.CryptoGetClaimResponse\n         * @instance\n         */\n        CryptoGetClaimResponse.prototype.header = null;\n\n        /**\n         * CryptoGetClaimResponse claim.\n         * @member {proto.IClaim|null|undefined} claim\n         * @memberof proto.CryptoGetClaimResponse\n         * @instance\n         */\n        CryptoGetClaimResponse.prototype.claim = null;\n\n        /**\n         * Creates a new CryptoGetClaimResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.CryptoGetClaimResponse\n         * @static\n         * @param {proto.ICryptoGetClaimResponse=} [properties] Properties to set\n         * @returns {proto.CryptoGetClaimResponse} CryptoGetClaimResponse instance\n         */\n        CryptoGetClaimResponse.create = function create(properties) {\n            return new CryptoGetClaimResponse(properties);\n        };\n\n        /**\n         * Encodes the specified CryptoGetClaimResponse message. Does not implicitly {@link proto.CryptoGetClaimResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.CryptoGetClaimResponse\n         * @static\n         * @param {proto.ICryptoGetClaimResponse} m CryptoGetClaimResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CryptoGetClaimResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.header != null && Object.hasOwnProperty.call(m, \"header\"))\n                $root.proto.ResponseHeader.encode(m.header, w.uint32(10).fork()).ldelim();\n            if (m.claim != null && Object.hasOwnProperty.call(m, \"claim\"))\n                $root.proto.Claim.encode(m.claim, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a CryptoGetClaimResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.CryptoGetClaimResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.CryptoGetClaimResponse} CryptoGetClaimResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CryptoGetClaimResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CryptoGetClaimResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.header = $root.proto.ResponseHeader.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.claim = $root.proto.Claim.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return CryptoGetClaimResponse;\n    })();\n\n    proto.CryptoService = (function() {\n\n        /**\n         * Constructs a new CryptoService service.\n         * @memberof proto\n         * @classdesc Represents a CryptoService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function CryptoService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (CryptoService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = CryptoService;\n\n        /**\n         * Creates new CryptoService service using the specified rpc implementation.\n         * @function create\n         * @memberof proto.CryptoService\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {CryptoService} RPC service. Useful where requests and/or responses are streamed.\n         */\n        CryptoService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link proto.CryptoService#createAccount}.\n         * @memberof proto.CryptoService\n         * @typedef createAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls createAccount.\n         * @function createAccount\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.CryptoService.createAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.createAccount = function createAccount(request, callback) {\n            return this.rpcCall(createAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"createAccount\" });\n\n        /**\n         * Calls createAccount.\n         * @function createAccount\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#updateAccount}.\n         * @memberof proto.CryptoService\n         * @typedef updateAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls updateAccount.\n         * @function updateAccount\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.CryptoService.updateAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.updateAccount = function updateAccount(request, callback) {\n            return this.rpcCall(updateAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"updateAccount\" });\n\n        /**\n         * Calls updateAccount.\n         * @function updateAccount\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#cryptoTransfer}.\n         * @memberof proto.CryptoService\n         * @typedef cryptoTransferCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls cryptoTransfer.\n         * @function cryptoTransfer\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.CryptoService.cryptoTransferCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.cryptoTransfer = function cryptoTransfer(request, callback) {\n            return this.rpcCall(cryptoTransfer, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"cryptoTransfer\" });\n\n        /**\n         * Calls cryptoTransfer.\n         * @function cryptoTransfer\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#cryptoDelete}.\n         * @memberof proto.CryptoService\n         * @typedef cryptoDeleteCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls cryptoDelete.\n         * @function cryptoDelete\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.CryptoService.cryptoDeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.cryptoDelete = function cryptoDelete(request, callback) {\n            return this.rpcCall(cryptoDelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"cryptoDelete\" });\n\n        /**\n         * Calls cryptoDelete.\n         * @function cryptoDelete\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#addLiveHash}.\n         * @memberof proto.CryptoService\n         * @typedef addLiveHashCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls addLiveHash.\n         * @function addLiveHash\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.CryptoService.addLiveHashCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.addLiveHash = function addLiveHash(request, callback) {\n            return this.rpcCall(addLiveHash, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"addLiveHash\" });\n\n        /**\n         * Calls addLiveHash.\n         * @function addLiveHash\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#deleteLiveHash}.\n         * @memberof proto.CryptoService\n         * @typedef deleteLiveHashCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls deleteLiveHash.\n         * @function deleteLiveHash\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.CryptoService.deleteLiveHashCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.deleteLiveHash = function deleteLiveHash(request, callback) {\n            return this.rpcCall(deleteLiveHash, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"deleteLiveHash\" });\n\n        /**\n         * Calls deleteLiveHash.\n         * @function deleteLiveHash\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#getLiveHash}.\n         * @memberof proto.CryptoService\n         * @typedef getLiveHashCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getLiveHash.\n         * @function getLiveHash\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.CryptoService.getLiveHashCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.getLiveHash = function getLiveHash(request, callback) {\n            return this.rpcCall(getLiveHash, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getLiveHash\" });\n\n        /**\n         * Calls getLiveHash.\n         * @function getLiveHash\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#getAccountRecords}.\n         * @memberof proto.CryptoService\n         * @typedef getAccountRecordsCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getAccountRecords.\n         * @function getAccountRecords\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.CryptoService.getAccountRecordsCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.getAccountRecords = function getAccountRecords(request, callback) {\n            return this.rpcCall(getAccountRecords, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getAccountRecords\" });\n\n        /**\n         * Calls getAccountRecords.\n         * @function getAccountRecords\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#cryptoGetBalance}.\n         * @memberof proto.CryptoService\n         * @typedef cryptoGetBalanceCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls cryptoGetBalance.\n         * @function cryptoGetBalance\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.CryptoService.cryptoGetBalanceCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.cryptoGetBalance = function cryptoGetBalance(request, callback) {\n            return this.rpcCall(cryptoGetBalance, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"cryptoGetBalance\" });\n\n        /**\n         * Calls cryptoGetBalance.\n         * @function cryptoGetBalance\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#getAccountInfo}.\n         * @memberof proto.CryptoService\n         * @typedef getAccountInfoCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getAccountInfo.\n         * @function getAccountInfo\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.CryptoService.getAccountInfoCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.getAccountInfo = function getAccountInfo(request, callback) {\n            return this.rpcCall(getAccountInfo, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getAccountInfo\" });\n\n        /**\n         * Calls getAccountInfo.\n         * @function getAccountInfo\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#getTransactionReceipts}.\n         * @memberof proto.CryptoService\n         * @typedef getTransactionReceiptsCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getTransactionReceipts.\n         * @function getTransactionReceipts\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.CryptoService.getTransactionReceiptsCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.getTransactionReceipts = function getTransactionReceipts(request, callback) {\n            return this.rpcCall(getTransactionReceipts, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getTransactionReceipts\" });\n\n        /**\n         * Calls getTransactionReceipts.\n         * @function getTransactionReceipts\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#getFastTransactionRecord}.\n         * @memberof proto.CryptoService\n         * @typedef getFastTransactionRecordCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getFastTransactionRecord.\n         * @function getFastTransactionRecord\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.CryptoService.getFastTransactionRecordCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.getFastTransactionRecord = function getFastTransactionRecord(request, callback) {\n            return this.rpcCall(getFastTransactionRecord, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getFastTransactionRecord\" });\n\n        /**\n         * Calls getFastTransactionRecord.\n         * @function getFastTransactionRecord\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#getTxRecordByTxID}.\n         * @memberof proto.CryptoService\n         * @typedef getTxRecordByTxIDCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getTxRecordByTxID.\n         * @function getTxRecordByTxID\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.CryptoService.getTxRecordByTxIDCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.getTxRecordByTxID = function getTxRecordByTxID(request, callback) {\n            return this.rpcCall(getTxRecordByTxID, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getTxRecordByTxID\" });\n\n        /**\n         * Calls getTxRecordByTxID.\n         * @function getTxRecordByTxID\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.CryptoService#getStakersByAccountID}.\n         * @memberof proto.CryptoService\n         * @typedef getStakersByAccountIDCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getStakersByAccountID.\n         * @function getStakersByAccountID\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.CryptoService.getStakersByAccountIDCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(CryptoService.prototype.getStakersByAccountID = function getStakersByAccountID(request, callback) {\n            return this.rpcCall(getStakersByAccountID, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getStakersByAccountID\" });\n\n        /**\n         * Calls getStakersByAccountID.\n         * @function getStakersByAccountID\n         * @memberof proto.CryptoService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        return CryptoService;\n    })();\n\n    proto.FileService = (function() {\n\n        /**\n         * Constructs a new FileService service.\n         * @memberof proto\n         * @classdesc Represents a FileService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function FileService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (FileService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = FileService;\n\n        /**\n         * Creates new FileService service using the specified rpc implementation.\n         * @function create\n         * @memberof proto.FileService\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {FileService} RPC service. Useful where requests and/or responses are streamed.\n         */\n        FileService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link proto.FileService#createFile}.\n         * @memberof proto.FileService\n         * @typedef createFileCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls createFile.\n         * @function createFile\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.FileService.createFileCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FileService.prototype.createFile = function createFile(request, callback) {\n            return this.rpcCall(createFile, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"createFile\" });\n\n        /**\n         * Calls createFile.\n         * @function createFile\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.FileService#updateFile}.\n         * @memberof proto.FileService\n         * @typedef updateFileCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls updateFile.\n         * @function updateFile\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.FileService.updateFileCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FileService.prototype.updateFile = function updateFile(request, callback) {\n            return this.rpcCall(updateFile, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"updateFile\" });\n\n        /**\n         * Calls updateFile.\n         * @function updateFile\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.FileService#deleteFile}.\n         * @memberof proto.FileService\n         * @typedef deleteFileCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls deleteFile.\n         * @function deleteFile\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.FileService.deleteFileCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FileService.prototype.deleteFile = function deleteFile(request, callback) {\n            return this.rpcCall(deleteFile, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"deleteFile\" });\n\n        /**\n         * Calls deleteFile.\n         * @function deleteFile\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.FileService#appendContent}.\n         * @memberof proto.FileService\n         * @typedef appendContentCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls appendContent.\n         * @function appendContent\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.FileService.appendContentCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FileService.prototype.appendContent = function appendContent(request, callback) {\n            return this.rpcCall(appendContent, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"appendContent\" });\n\n        /**\n         * Calls appendContent.\n         * @function appendContent\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.FileService#getFileContent}.\n         * @memberof proto.FileService\n         * @typedef getFileContentCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getFileContent.\n         * @function getFileContent\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.FileService.getFileContentCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FileService.prototype.getFileContent = function getFileContent(request, callback) {\n            return this.rpcCall(getFileContent, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getFileContent\" });\n\n        /**\n         * Calls getFileContent.\n         * @function getFileContent\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.FileService#getFileInfo}.\n         * @memberof proto.FileService\n         * @typedef getFileInfoCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getFileInfo.\n         * @function getFileInfo\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.FileService.getFileInfoCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FileService.prototype.getFileInfo = function getFileInfo(request, callback) {\n            return this.rpcCall(getFileInfo, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getFileInfo\" });\n\n        /**\n         * Calls getFileInfo.\n         * @function getFileInfo\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.FileService#systemDelete}.\n         * @memberof proto.FileService\n         * @typedef systemDeleteCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls systemDelete.\n         * @function systemDelete\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.FileService.systemDeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FileService.prototype.systemDelete = function systemDelete(request, callback) {\n            return this.rpcCall(systemDelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"systemDelete\" });\n\n        /**\n         * Calls systemDelete.\n         * @function systemDelete\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.FileService#systemUndelete}.\n         * @memberof proto.FileService\n         * @typedef systemUndeleteCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls systemUndelete.\n         * @function systemUndelete\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.FileService.systemUndeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FileService.prototype.systemUndelete = function systemUndelete(request, callback) {\n            return this.rpcCall(systemUndelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"systemUndelete\" });\n\n        /**\n         * Calls systemUndelete.\n         * @function systemUndelete\n         * @memberof proto.FileService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        return FileService;\n    })();\n\n    proto.FreezeService = (function() {\n\n        /**\n         * Constructs a new FreezeService service.\n         * @memberof proto\n         * @classdesc Represents a FreezeService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function FreezeService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (FreezeService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = FreezeService;\n\n        /**\n         * Creates new FreezeService service using the specified rpc implementation.\n         * @function create\n         * @memberof proto.FreezeService\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {FreezeService} RPC service. Useful where requests and/or responses are streamed.\n         */\n        FreezeService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link proto.FreezeService#freeze}.\n         * @memberof proto.FreezeService\n         * @typedef freezeCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls freeze.\n         * @function freeze\n         * @memberof proto.FreezeService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.FreezeService.freezeCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(FreezeService.prototype.freeze = function freeze(request, callback) {\n            return this.rpcCall(freeze, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"freeze\" });\n\n        /**\n         * Calls freeze.\n         * @function freeze\n         * @memberof proto.FreezeService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        return FreezeService;\n    })();\n\n    proto.ConsensusTopicQuery = (function() {\n\n        /**\n         * Properties of a ConsensusTopicQuery.\n         * @memberof proto\n         * @interface IConsensusTopicQuery\n         * @property {proto.ITopicID|null} [topicID] ConsensusTopicQuery topicID\n         * @property {proto.ITimestamp|null} [consensusStartTime] ConsensusTopicQuery consensusStartTime\n         * @property {proto.ITimestamp|null} [consensusEndTime] ConsensusTopicQuery consensusEndTime\n         * @property {Long|null} [limit] ConsensusTopicQuery limit\n         */\n\n        /**\n         * Constructs a new ConsensusTopicQuery.\n         * @memberof proto\n         * @classdesc Represents a ConsensusTopicQuery.\n         * @implements IConsensusTopicQuery\n         * @constructor\n         * @param {proto.IConsensusTopicQuery=} [p] Properties to set\n         */\n        function ConsensusTopicQuery(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusTopicQuery topicID.\n         * @member {proto.ITopicID|null|undefined} topicID\n         * @memberof proto.ConsensusTopicQuery\n         * @instance\n         */\n        ConsensusTopicQuery.prototype.topicID = null;\n\n        /**\n         * ConsensusTopicQuery consensusStartTime.\n         * @member {proto.ITimestamp|null|undefined} consensusStartTime\n         * @memberof proto.ConsensusTopicQuery\n         * @instance\n         */\n        ConsensusTopicQuery.prototype.consensusStartTime = null;\n\n        /**\n         * ConsensusTopicQuery consensusEndTime.\n         * @member {proto.ITimestamp|null|undefined} consensusEndTime\n         * @memberof proto.ConsensusTopicQuery\n         * @instance\n         */\n        ConsensusTopicQuery.prototype.consensusEndTime = null;\n\n        /**\n         * ConsensusTopicQuery limit.\n         * @member {Long} limit\n         * @memberof proto.ConsensusTopicQuery\n         * @instance\n         */\n        ConsensusTopicQuery.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new ConsensusTopicQuery instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusTopicQuery\n         * @static\n         * @param {proto.IConsensusTopicQuery=} [properties] Properties to set\n         * @returns {proto.ConsensusTopicQuery} ConsensusTopicQuery instance\n         */\n        ConsensusTopicQuery.create = function create(properties) {\n            return new ConsensusTopicQuery(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusTopicQuery message. Does not implicitly {@link proto.ConsensusTopicQuery.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusTopicQuery\n         * @static\n         * @param {proto.IConsensusTopicQuery} m ConsensusTopicQuery message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusTopicQuery.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                $root.proto.TopicID.encode(m.topicID, w.uint32(10).fork()).ldelim();\n            if (m.consensusStartTime != null && Object.hasOwnProperty.call(m, \"consensusStartTime\"))\n                $root.proto.Timestamp.encode(m.consensusStartTime, w.uint32(18).fork()).ldelim();\n            if (m.consensusEndTime != null && Object.hasOwnProperty.call(m, \"consensusEndTime\"))\n                $root.proto.Timestamp.encode(m.consensusEndTime, w.uint32(26).fork()).ldelim();\n            if (m.limit != null && Object.hasOwnProperty.call(m, \"limit\"))\n                w.uint32(32).uint64(m.limit);\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusTopicQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusTopicQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusTopicQuery} ConsensusTopicQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusTopicQuery.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusTopicQuery();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.topicID = $root.proto.TopicID.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.consensusStartTime = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 3:\n                    m.consensusEndTime = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 4:\n                    m.limit = r.uint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusTopicQuery;\n    })();\n\n    proto.ConsensusTopicResponse = (function() {\n\n        /**\n         * Properties of a ConsensusTopicResponse.\n         * @memberof proto\n         * @interface IConsensusTopicResponse\n         * @property {proto.ITimestamp|null} [consensusTimestamp] ConsensusTopicResponse consensusTimestamp\n         * @property {Uint8Array|null} [message] ConsensusTopicResponse message\n         * @property {Uint8Array|null} [runningHash] ConsensusTopicResponse runningHash\n         * @property {Long|null} [sequenceNumber] ConsensusTopicResponse sequenceNumber\n         * @property {Long|null} [runningHashVersion] ConsensusTopicResponse runningHashVersion\n         * @property {proto.IConsensusMessageChunkInfo|null} [chunkInfo] ConsensusTopicResponse chunkInfo\n         */\n\n        /**\n         * Constructs a new ConsensusTopicResponse.\n         * @memberof proto\n         * @classdesc Represents a ConsensusTopicResponse.\n         * @implements IConsensusTopicResponse\n         * @constructor\n         * @param {proto.IConsensusTopicResponse=} [p] Properties to set\n         */\n        function ConsensusTopicResponse(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * ConsensusTopicResponse consensusTimestamp.\n         * @member {proto.ITimestamp|null|undefined} consensusTimestamp\n         * @memberof proto.ConsensusTopicResponse\n         * @instance\n         */\n        ConsensusTopicResponse.prototype.consensusTimestamp = null;\n\n        /**\n         * ConsensusTopicResponse message.\n         * @member {Uint8Array} message\n         * @memberof proto.ConsensusTopicResponse\n         * @instance\n         */\n        ConsensusTopicResponse.prototype.message = $util.newBuffer([]);\n\n        /**\n         * ConsensusTopicResponse runningHash.\n         * @member {Uint8Array} runningHash\n         * @memberof proto.ConsensusTopicResponse\n         * @instance\n         */\n        ConsensusTopicResponse.prototype.runningHash = $util.newBuffer([]);\n\n        /**\n         * ConsensusTopicResponse sequenceNumber.\n         * @member {Long} sequenceNumber\n         * @memberof proto.ConsensusTopicResponse\n         * @instance\n         */\n        ConsensusTopicResponse.prototype.sequenceNumber = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * ConsensusTopicResponse runningHashVersion.\n         * @member {Long} runningHashVersion\n         * @memberof proto.ConsensusTopicResponse\n         * @instance\n         */\n        ConsensusTopicResponse.prototype.runningHashVersion = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * ConsensusTopicResponse chunkInfo.\n         * @member {proto.IConsensusMessageChunkInfo|null|undefined} chunkInfo\n         * @memberof proto.ConsensusTopicResponse\n         * @instance\n         */\n        ConsensusTopicResponse.prototype.chunkInfo = null;\n\n        /**\n         * Creates a new ConsensusTopicResponse instance using the specified properties.\n         * @function create\n         * @memberof proto.ConsensusTopicResponse\n         * @static\n         * @param {proto.IConsensusTopicResponse=} [properties] Properties to set\n         * @returns {proto.ConsensusTopicResponse} ConsensusTopicResponse instance\n         */\n        ConsensusTopicResponse.create = function create(properties) {\n            return new ConsensusTopicResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ConsensusTopicResponse message. Does not implicitly {@link proto.ConsensusTopicResponse.verify|verify} messages.\n         * @function encode\n         * @memberof proto.ConsensusTopicResponse\n         * @static\n         * @param {proto.IConsensusTopicResponse} m ConsensusTopicResponse message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsensusTopicResponse.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.consensusTimestamp != null && Object.hasOwnProperty.call(m, \"consensusTimestamp\"))\n                $root.proto.Timestamp.encode(m.consensusTimestamp, w.uint32(10).fork()).ldelim();\n            if (m.message != null && Object.hasOwnProperty.call(m, \"message\"))\n                w.uint32(18).bytes(m.message);\n            if (m.runningHash != null && Object.hasOwnProperty.call(m, \"runningHash\"))\n                w.uint32(26).bytes(m.runningHash);\n            if (m.sequenceNumber != null && Object.hasOwnProperty.call(m, \"sequenceNumber\"))\n                w.uint32(32).uint64(m.sequenceNumber);\n            if (m.runningHashVersion != null && Object.hasOwnProperty.call(m, \"runningHashVersion\"))\n                w.uint32(40).uint64(m.runningHashVersion);\n            if (m.chunkInfo != null && Object.hasOwnProperty.call(m, \"chunkInfo\"))\n                $root.proto.ConsensusMessageChunkInfo.encode(m.chunkInfo, w.uint32(50).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a ConsensusTopicResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.ConsensusTopicResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.ConsensusTopicResponse} ConsensusTopicResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsensusTopicResponse.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ConsensusTopicResponse();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.consensusTimestamp = $root.proto.Timestamp.decode(r, r.uint32());\n                    break;\n                case 2:\n                    m.message = r.bytes();\n                    break;\n                case 3:\n                    m.runningHash = r.bytes();\n                    break;\n                case 4:\n                    m.sequenceNumber = r.uint64();\n                    break;\n                case 5:\n                    m.runningHashVersion = r.uint64();\n                    break;\n                case 6:\n                    m.chunkInfo = $root.proto.ConsensusMessageChunkInfo.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return ConsensusTopicResponse;\n    })();\n\n    proto.MirrorConsensusService = (function() {\n\n        /**\n         * Constructs a new MirrorConsensusService service.\n         * @memberof proto\n         * @classdesc Represents a MirrorConsensusService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function MirrorConsensusService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (MirrorConsensusService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = MirrorConsensusService;\n\n        /**\n         * Creates new MirrorConsensusService service using the specified rpc implementation.\n         * @function create\n         * @memberof proto.MirrorConsensusService\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {MirrorConsensusService} RPC service. Useful where requests and/or responses are streamed.\n         */\n        MirrorConsensusService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link proto.MirrorConsensusService#subscribeTopic}.\n         * @memberof proto.MirrorConsensusService\n         * @typedef subscribeTopicCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.ConsensusTopicResponse} [response] ConsensusTopicResponse\n         */\n\n        /**\n         * Calls subscribeTopic.\n         * @function subscribeTopic\n         * @memberof proto.MirrorConsensusService\n         * @instance\n         * @param {proto.IConsensusTopicQuery} request ConsensusTopicQuery message or plain object\n         * @param {proto.MirrorConsensusService.subscribeTopicCallback} callback Node-style callback called with the error, if any, and ConsensusTopicResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(MirrorConsensusService.prototype.subscribeTopic = function subscribeTopic(request, callback) {\n            return this.rpcCall(subscribeTopic, $root.proto.ConsensusTopicQuery, $root.proto.ConsensusTopicResponse, request, callback);\n        }, \"name\", { value: \"subscribeTopic\" });\n\n        /**\n         * Calls subscribeTopic.\n         * @function subscribeTopic\n         * @memberof proto.MirrorConsensusService\n         * @instance\n         * @param {proto.IConsensusTopicQuery} request ConsensusTopicQuery message or plain object\n         * @returns {Promise<proto.ConsensusTopicResponse>} Promise\n         * @variation 2\n         */\n\n        return MirrorConsensusService;\n    })();\n\n    proto.NetworkService = (function() {\n\n        /**\n         * Constructs a new NetworkService service.\n         * @memberof proto\n         * @classdesc Represents a NetworkService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function NetworkService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (NetworkService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = NetworkService;\n\n        /**\n         * Creates new NetworkService service using the specified rpc implementation.\n         * @function create\n         * @memberof proto.NetworkService\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {NetworkService} RPC service. Useful where requests and/or responses are streamed.\n         */\n        NetworkService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link proto.NetworkService#getVersionInfo}.\n         * @memberof proto.NetworkService\n         * @typedef getVersionInfoCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getVersionInfo.\n         * @function getVersionInfo\n         * @memberof proto.NetworkService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.NetworkService.getVersionInfoCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(NetworkService.prototype.getVersionInfo = function getVersionInfo(request, callback) {\n            return this.rpcCall(getVersionInfo, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getVersionInfo\" });\n\n        /**\n         * Calls getVersionInfo.\n         * @function getVersionInfo\n         * @memberof proto.NetworkService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.NetworkService#uncheckedSubmit}.\n         * @memberof proto.NetworkService\n         * @typedef uncheckedSubmitCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls uncheckedSubmit.\n         * @function uncheckedSubmit\n         * @memberof proto.NetworkService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.NetworkService.uncheckedSubmitCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(NetworkService.prototype.uncheckedSubmit = function uncheckedSubmit(request, callback) {\n            return this.rpcCall(uncheckedSubmit, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"uncheckedSubmit\" });\n\n        /**\n         * Calls uncheckedSubmit.\n         * @function uncheckedSubmit\n         * @memberof proto.NetworkService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        return NetworkService;\n    })();\n\n    proto.SmartContractService = (function() {\n\n        /**\n         * Constructs a new SmartContractService service.\n         * @memberof proto\n         * @classdesc Represents a SmartContractService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function SmartContractService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (SmartContractService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = SmartContractService;\n\n        /**\n         * Creates new SmartContractService service using the specified rpc implementation.\n         * @function create\n         * @memberof proto.SmartContractService\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {SmartContractService} RPC service. Useful where requests and/or responses are streamed.\n         */\n        SmartContractService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#createContract}.\n         * @memberof proto.SmartContractService\n         * @typedef createContractCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls createContract.\n         * @function createContract\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.SmartContractService.createContractCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.createContract = function createContract(request, callback) {\n            return this.rpcCall(createContract, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"createContract\" });\n\n        /**\n         * Calls createContract.\n         * @function createContract\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#updateContract}.\n         * @memberof proto.SmartContractService\n         * @typedef updateContractCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls updateContract.\n         * @function updateContract\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.SmartContractService.updateContractCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.updateContract = function updateContract(request, callback) {\n            return this.rpcCall(updateContract, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"updateContract\" });\n\n        /**\n         * Calls updateContract.\n         * @function updateContract\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#contractCallMethod}.\n         * @memberof proto.SmartContractService\n         * @typedef contractCallMethodCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls contractCallMethod.\n         * @function contractCallMethod\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.SmartContractService.contractCallMethodCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.contractCallMethod = function contractCallMethod(request, callback) {\n            return this.rpcCall(contractCallMethod, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"contractCallMethod\" });\n\n        /**\n         * Calls contractCallMethod.\n         * @function contractCallMethod\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#getContractInfo}.\n         * @memberof proto.SmartContractService\n         * @typedef getContractInfoCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getContractInfo.\n         * @function getContractInfo\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.SmartContractService.getContractInfoCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.getContractInfo = function getContractInfo(request, callback) {\n            return this.rpcCall(getContractInfo, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getContractInfo\" });\n\n        /**\n         * Calls getContractInfo.\n         * @function getContractInfo\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#contractCallLocalMethod}.\n         * @memberof proto.SmartContractService\n         * @typedef contractCallLocalMethodCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls contractCallLocalMethod.\n         * @function contractCallLocalMethod\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.SmartContractService.contractCallLocalMethodCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.contractCallLocalMethod = function contractCallLocalMethod(request, callback) {\n            return this.rpcCall(contractCallLocalMethod, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"contractCallLocalMethod\" });\n\n        /**\n         * Calls contractCallLocalMethod.\n         * @function contractCallLocalMethod\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#contractGetBytecode}.\n         * @memberof proto.SmartContractService\n         * @typedef ContractGetBytecodeCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls ContractGetBytecode.\n         * @function contractGetBytecode\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.SmartContractService.ContractGetBytecodeCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.contractGetBytecode = function contractGetBytecode(request, callback) {\n            return this.rpcCall(contractGetBytecode, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"ContractGetBytecode\" });\n\n        /**\n         * Calls ContractGetBytecode.\n         * @function contractGetBytecode\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#getBySolidityID}.\n         * @memberof proto.SmartContractService\n         * @typedef getBySolidityIDCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getBySolidityID.\n         * @function getBySolidityID\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.SmartContractService.getBySolidityIDCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.getBySolidityID = function getBySolidityID(request, callback) {\n            return this.rpcCall(getBySolidityID, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getBySolidityID\" });\n\n        /**\n         * Calls getBySolidityID.\n         * @function getBySolidityID\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#getTxRecordByContractID}.\n         * @memberof proto.SmartContractService\n         * @typedef getTxRecordByContractIDCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getTxRecordByContractID.\n         * @function getTxRecordByContractID\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.SmartContractService.getTxRecordByContractIDCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.getTxRecordByContractID = function getTxRecordByContractID(request, callback) {\n            return this.rpcCall(getTxRecordByContractID, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getTxRecordByContractID\" });\n\n        /**\n         * Calls getTxRecordByContractID.\n         * @function getTxRecordByContractID\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#deleteContract}.\n         * @memberof proto.SmartContractService\n         * @typedef deleteContractCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls deleteContract.\n         * @function deleteContract\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.SmartContractService.deleteContractCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.deleteContract = function deleteContract(request, callback) {\n            return this.rpcCall(deleteContract, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"deleteContract\" });\n\n        /**\n         * Calls deleteContract.\n         * @function deleteContract\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#systemDelete}.\n         * @memberof proto.SmartContractService\n         * @typedef systemDeleteCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls systemDelete.\n         * @function systemDelete\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.SmartContractService.systemDeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.systemDelete = function systemDelete(request, callback) {\n            return this.rpcCall(systemDelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"systemDelete\" });\n\n        /**\n         * Calls systemDelete.\n         * @function systemDelete\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.SmartContractService#systemUndelete}.\n         * @memberof proto.SmartContractService\n         * @typedef systemUndeleteCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls systemUndelete.\n         * @function systemUndelete\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.SmartContractService.systemUndeleteCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(SmartContractService.prototype.systemUndelete = function systemUndelete(request, callback) {\n            return this.rpcCall(systemUndelete, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"systemUndelete\" });\n\n        /**\n         * Calls systemUndelete.\n         * @function systemUndelete\n         * @memberof proto.SmartContractService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        return SmartContractService;\n    })();\n\n    proto.TokenService = (function() {\n\n        /**\n         * Constructs a new TokenService service.\n         * @memberof proto\n         * @classdesc Represents a TokenService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function TokenService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (TokenService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TokenService;\n\n        /**\n         * Creates new TokenService service using the specified rpc implementation.\n         * @function create\n         * @memberof proto.TokenService\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {TokenService} RPC service. Useful where requests and/or responses are streamed.\n         */\n        TokenService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link proto.TokenService#createToken}.\n         * @memberof proto.TokenService\n         * @typedef createTokenCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls createToken.\n         * @function createToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.createTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.createToken = function createToken(request, callback) {\n            return this.rpcCall(createToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"createToken\" });\n\n        /**\n         * Calls createToken.\n         * @function createToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#updateToken}.\n         * @memberof proto.TokenService\n         * @typedef updateTokenCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls updateToken.\n         * @function updateToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.updateTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.updateToken = function updateToken(request, callback) {\n            return this.rpcCall(updateToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"updateToken\" });\n\n        /**\n         * Calls updateToken.\n         * @function updateToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#mintToken}.\n         * @memberof proto.TokenService\n         * @typedef mintTokenCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls mintToken.\n         * @function mintToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.mintTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.mintToken = function mintToken(request, callback) {\n            return this.rpcCall(mintToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"mintToken\" });\n\n        /**\n         * Calls mintToken.\n         * @function mintToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#burnToken}.\n         * @memberof proto.TokenService\n         * @typedef burnTokenCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls burnToken.\n         * @function burnToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.burnTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.burnToken = function burnToken(request, callback) {\n            return this.rpcCall(burnToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"burnToken\" });\n\n        /**\n         * Calls burnToken.\n         * @function burnToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#deleteToken}.\n         * @memberof proto.TokenService\n         * @typedef deleteTokenCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls deleteToken.\n         * @function deleteToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.deleteTokenCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.deleteToken = function deleteToken(request, callback) {\n            return this.rpcCall(deleteToken, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"deleteToken\" });\n\n        /**\n         * Calls deleteToken.\n         * @function deleteToken\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#wipeTokenAccount}.\n         * @memberof proto.TokenService\n         * @typedef wipeTokenAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls wipeTokenAccount.\n         * @function wipeTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.wipeTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.wipeTokenAccount = function wipeTokenAccount(request, callback) {\n            return this.rpcCall(wipeTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"wipeTokenAccount\" });\n\n        /**\n         * Calls wipeTokenAccount.\n         * @function wipeTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#freezeTokenAccount}.\n         * @memberof proto.TokenService\n         * @typedef freezeTokenAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls freezeTokenAccount.\n         * @function freezeTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.freezeTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.freezeTokenAccount = function freezeTokenAccount(request, callback) {\n            return this.rpcCall(freezeTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"freezeTokenAccount\" });\n\n        /**\n         * Calls freezeTokenAccount.\n         * @function freezeTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#unfreezeTokenAccount}.\n         * @memberof proto.TokenService\n         * @typedef unfreezeTokenAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls unfreezeTokenAccount.\n         * @function unfreezeTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.unfreezeTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.unfreezeTokenAccount = function unfreezeTokenAccount(request, callback) {\n            return this.rpcCall(unfreezeTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"unfreezeTokenAccount\" });\n\n        /**\n         * Calls unfreezeTokenAccount.\n         * @function unfreezeTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#grantKycToTokenAccount}.\n         * @memberof proto.TokenService\n         * @typedef grantKycToTokenAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls grantKycToTokenAccount.\n         * @function grantKycToTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.grantKycToTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.grantKycToTokenAccount = function grantKycToTokenAccount(request, callback) {\n            return this.rpcCall(grantKycToTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"grantKycToTokenAccount\" });\n\n        /**\n         * Calls grantKycToTokenAccount.\n         * @function grantKycToTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#revokeKycFromTokenAccount}.\n         * @memberof proto.TokenService\n         * @typedef revokeKycFromTokenAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls revokeKycFromTokenAccount.\n         * @function revokeKycFromTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.revokeKycFromTokenAccountCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.revokeKycFromTokenAccount = function revokeKycFromTokenAccount(request, callback) {\n            return this.rpcCall(revokeKycFromTokenAccount, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"revokeKycFromTokenAccount\" });\n\n        /**\n         * Calls revokeKycFromTokenAccount.\n         * @function revokeKycFromTokenAccount\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#associateTokens}.\n         * @memberof proto.TokenService\n         * @typedef associateTokensCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls associateTokens.\n         * @function associateTokens\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.associateTokensCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.associateTokens = function associateTokens(request, callback) {\n            return this.rpcCall(associateTokens, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"associateTokens\" });\n\n        /**\n         * Calls associateTokens.\n         * @function associateTokens\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#dissociateTokens}.\n         * @memberof proto.TokenService\n         * @typedef dissociateTokensCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.TransactionResponse} [response] TransactionResponse\n         */\n\n        /**\n         * Calls dissociateTokens.\n         * @function dissociateTokens\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @param {proto.TokenService.dissociateTokensCallback} callback Node-style callback called with the error, if any, and TransactionResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.dissociateTokens = function dissociateTokens(request, callback) {\n            return this.rpcCall(dissociateTokens, $root.proto.Transaction, $root.proto.TransactionResponse, request, callback);\n        }, \"name\", { value: \"dissociateTokens\" });\n\n        /**\n         * Calls dissociateTokens.\n         * @function dissociateTokens\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.ITransaction} request Transaction message or plain object\n         * @returns {Promise<proto.TransactionResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link proto.TokenService#getTokenInfo}.\n         * @memberof proto.TokenService\n         * @typedef getTokenInfoCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {proto.Response} [response] Response\n         */\n\n        /**\n         * Calls getTokenInfo.\n         * @function getTokenInfo\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @param {proto.TokenService.getTokenInfoCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TokenService.prototype.getTokenInfo = function getTokenInfo(request, callback) {\n            return this.rpcCall(getTokenInfo, $root.proto.Query, $root.proto.Response, request, callback);\n        }, \"name\", { value: \"getTokenInfo\" });\n\n        /**\n         * Calls getTokenInfo.\n         * @function getTokenInfo\n         * @memberof proto.TokenService\n         * @instance\n         * @param {proto.IQuery} request Query message or plain object\n         * @returns {Promise<proto.Response>} Promise\n         * @variation 2\n         */\n\n        return TokenService;\n    })();\n\n    proto.TokenTransfersTransactionBody = (function() {\n\n        /**\n         * Properties of a TokenTransfersTransactionBody.\n         * @memberof proto\n         * @interface ITokenTransfersTransactionBody\n         * @property {Array.<proto.ITokenTransferList>|null} [tokenTransfers] TokenTransfersTransactionBody tokenTransfers\n         */\n\n        /**\n         * Constructs a new TokenTransfersTransactionBody.\n         * @memberof proto\n         * @classdesc Represents a TokenTransfersTransactionBody.\n         * @implements ITokenTransfersTransactionBody\n         * @constructor\n         * @param {proto.ITokenTransfersTransactionBody=} [p] Properties to set\n         */\n        function TokenTransfersTransactionBody(p) {\n            this.tokenTransfers = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TokenTransfersTransactionBody tokenTransfers.\n         * @member {Array.<proto.ITokenTransferList>} tokenTransfers\n         * @memberof proto.TokenTransfersTransactionBody\n         * @instance\n         */\n        TokenTransfersTransactionBody.prototype.tokenTransfers = $util.emptyArray;\n\n        /**\n         * Creates a new TokenTransfersTransactionBody instance using the specified properties.\n         * @function create\n         * @memberof proto.TokenTransfersTransactionBody\n         * @static\n         * @param {proto.ITokenTransfersTransactionBody=} [properties] Properties to set\n         * @returns {proto.TokenTransfersTransactionBody} TokenTransfersTransactionBody instance\n         */\n        TokenTransfersTransactionBody.create = function create(properties) {\n            return new TokenTransfersTransactionBody(properties);\n        };\n\n        /**\n         * Encodes the specified TokenTransfersTransactionBody message. Does not implicitly {@link proto.TokenTransfersTransactionBody.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TokenTransfersTransactionBody\n         * @static\n         * @param {proto.ITokenTransfersTransactionBody} m TokenTransfersTransactionBody message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TokenTransfersTransactionBody.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.tokenTransfers != null && m.tokenTransfers.length) {\n                for (var i = 0; i < m.tokenTransfers.length; ++i)\n                    $root.proto.TokenTransferList.encode(m.tokenTransfers[i], w.uint32(10).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TokenTransfersTransactionBody message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TokenTransfersTransactionBody\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TokenTransfersTransactionBody} TokenTransfersTransactionBody\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TokenTransfersTransactionBody.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TokenTransfersTransactionBody();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.tokenTransfers && m.tokenTransfers.length))\n                        m.tokenTransfers = [];\n                    m.tokenTransfers.push($root.proto.TokenTransferList.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TokenTransfersTransactionBody;\n    })();\n\n    proto.SignedTransaction = (function() {\n\n        /**\n         * Properties of a SignedTransaction.\n         * @memberof proto\n         * @interface ISignedTransaction\n         * @property {Uint8Array|null} [bodyBytes] SignedTransaction bodyBytes\n         * @property {proto.ISignatureMap|null} [sigMap] SignedTransaction sigMap\n         */\n\n        /**\n         * Constructs a new SignedTransaction.\n         * @memberof proto\n         * @classdesc Represents a SignedTransaction.\n         * @implements ISignedTransaction\n         * @constructor\n         * @param {proto.ISignedTransaction=} [p] Properties to set\n         */\n        function SignedTransaction(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * SignedTransaction bodyBytes.\n         * @member {Uint8Array} bodyBytes\n         * @memberof proto.SignedTransaction\n         * @instance\n         */\n        SignedTransaction.prototype.bodyBytes = $util.newBuffer([]);\n\n        /**\n         * SignedTransaction sigMap.\n         * @member {proto.ISignatureMap|null|undefined} sigMap\n         * @memberof proto.SignedTransaction\n         * @instance\n         */\n        SignedTransaction.prototype.sigMap = null;\n\n        /**\n         * Creates a new SignedTransaction instance using the specified properties.\n         * @function create\n         * @memberof proto.SignedTransaction\n         * @static\n         * @param {proto.ISignedTransaction=} [properties] Properties to set\n         * @returns {proto.SignedTransaction} SignedTransaction instance\n         */\n        SignedTransaction.create = function create(properties) {\n            return new SignedTransaction(properties);\n        };\n\n        /**\n         * Encodes the specified SignedTransaction message. Does not implicitly {@link proto.SignedTransaction.verify|verify} messages.\n         * @function encode\n         * @memberof proto.SignedTransaction\n         * @static\n         * @param {proto.ISignedTransaction} m SignedTransaction message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SignedTransaction.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.bodyBytes != null && Object.hasOwnProperty.call(m, \"bodyBytes\"))\n                w.uint32(10).bytes(m.bodyBytes);\n            if (m.sigMap != null && Object.hasOwnProperty.call(m, \"sigMap\"))\n                $root.proto.SignatureMap.encode(m.sigMap, w.uint32(18).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a SignedTransaction message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.SignedTransaction\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.SignedTransaction} SignedTransaction\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SignedTransaction.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SignedTransaction();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.bodyBytes = r.bytes();\n                    break;\n                case 2:\n                    m.sigMap = $root.proto.SignatureMap.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return SignedTransaction;\n    })();\n\n    proto.TransactionList = (function() {\n\n        /**\n         * Properties of a TransactionList.\n         * @memberof proto\n         * @interface ITransactionList\n         * @property {Array.<proto.ITransaction>|null} [transactionList] TransactionList transactionList\n         */\n\n        /**\n         * Constructs a new TransactionList.\n         * @memberof proto\n         * @classdesc Represents a TransactionList.\n         * @implements ITransactionList\n         * @constructor\n         * @param {proto.ITransactionList=} [p] Properties to set\n         */\n        function TransactionList(p) {\n            this.transactionList = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * TransactionList transactionList.\n         * @member {Array.<proto.ITransaction>} transactionList\n         * @memberof proto.TransactionList\n         * @instance\n         */\n        TransactionList.prototype.transactionList = $util.emptyArray;\n\n        /**\n         * Creates a new TransactionList instance using the specified properties.\n         * @function create\n         * @memberof proto.TransactionList\n         * @static\n         * @param {proto.ITransactionList=} [properties] Properties to set\n         * @returns {proto.TransactionList} TransactionList instance\n         */\n        TransactionList.create = function create(properties) {\n            return new TransactionList(properties);\n        };\n\n        /**\n         * Encodes the specified TransactionList message. Does not implicitly {@link proto.TransactionList.verify|verify} messages.\n         * @function encode\n         * @memberof proto.TransactionList\n         * @static\n         * @param {proto.ITransactionList} m TransactionList message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TransactionList.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.transactionList != null && m.transactionList.length) {\n                for (var i = 0; i < m.transactionList.length; ++i)\n                    $root.proto.Transaction.encode(m.transactionList[i], w.uint32(10).fork()).ldelim();\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a TransactionList message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.TransactionList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.TransactionList} TransactionList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TransactionList.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TransactionList();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.transactionList && m.transactionList.length))\n                        m.transactionList = [];\n                    m.transactionList.push($root.proto.Transaction.decode(r, r.uint32()));\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return TransactionList;\n    })();\n\n    proto.DoubleValue = (function() {\n\n        /**\n         * Properties of a DoubleValue.\n         * @memberof proto\n         * @interface IDoubleValue\n         * @property {number|null} [value] DoubleValue value\n         */\n\n        /**\n         * Constructs a new DoubleValue.\n         * @memberof proto\n         * @classdesc Represents a DoubleValue.\n         * @implements IDoubleValue\n         * @constructor\n         * @param {proto.IDoubleValue=} [p] Properties to set\n         */\n        function DoubleValue(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * DoubleValue value.\n         * @member {number} value\n         * @memberof proto.DoubleValue\n         * @instance\n         */\n        DoubleValue.prototype.value = 0;\n\n        /**\n         * Creates a new DoubleValue instance using the specified properties.\n         * @function create\n         * @memberof proto.DoubleValue\n         * @static\n         * @param {proto.IDoubleValue=} [properties] Properties to set\n         * @returns {proto.DoubleValue} DoubleValue instance\n         */\n        DoubleValue.create = function create(properties) {\n            return new DoubleValue(properties);\n        };\n\n        /**\n         * Encodes the specified DoubleValue message. Does not implicitly {@link proto.DoubleValue.verify|verify} messages.\n         * @function encode\n         * @memberof proto.DoubleValue\n         * @static\n         * @param {proto.IDoubleValue} m DoubleValue message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DoubleValue.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(9).double(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes a DoubleValue message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.DoubleValue\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.DoubleValue} DoubleValue\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DoubleValue.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.DoubleValue();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.double();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return DoubleValue;\n    })();\n\n    proto.FloatValue = (function() {\n\n        /**\n         * Properties of a FloatValue.\n         * @memberof proto\n         * @interface IFloatValue\n         * @property {number|null} [value] FloatValue value\n         */\n\n        /**\n         * Constructs a new FloatValue.\n         * @memberof proto\n         * @classdesc Represents a FloatValue.\n         * @implements IFloatValue\n         * @constructor\n         * @param {proto.IFloatValue=} [p] Properties to set\n         */\n        function FloatValue(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * FloatValue value.\n         * @member {number} value\n         * @memberof proto.FloatValue\n         * @instance\n         */\n        FloatValue.prototype.value = 0;\n\n        /**\n         * Creates a new FloatValue instance using the specified properties.\n         * @function create\n         * @memberof proto.FloatValue\n         * @static\n         * @param {proto.IFloatValue=} [properties] Properties to set\n         * @returns {proto.FloatValue} FloatValue instance\n         */\n        FloatValue.create = function create(properties) {\n            return new FloatValue(properties);\n        };\n\n        /**\n         * Encodes the specified FloatValue message. Does not implicitly {@link proto.FloatValue.verify|verify} messages.\n         * @function encode\n         * @memberof proto.FloatValue\n         * @static\n         * @param {proto.IFloatValue} m FloatValue message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FloatValue.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(13).float(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes a FloatValue message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.FloatValue\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.FloatValue} FloatValue\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FloatValue.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FloatValue();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.float();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return FloatValue;\n    })();\n\n    proto.Int64Value = (function() {\n\n        /**\n         * Properties of an Int64Value.\n         * @memberof proto\n         * @interface IInt64Value\n         * @property {Long|null} [value] Int64Value value\n         */\n\n        /**\n         * Constructs a new Int64Value.\n         * @memberof proto\n         * @classdesc Represents an Int64Value.\n         * @implements IInt64Value\n         * @constructor\n         * @param {proto.IInt64Value=} [p] Properties to set\n         */\n        function Int64Value(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Int64Value value.\n         * @member {Long} value\n         * @memberof proto.Int64Value\n         * @instance\n         */\n        Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new Int64Value instance using the specified properties.\n         * @function create\n         * @memberof proto.Int64Value\n         * @static\n         * @param {proto.IInt64Value=} [properties] Properties to set\n         * @returns {proto.Int64Value} Int64Value instance\n         */\n        Int64Value.create = function create(properties) {\n            return new Int64Value(properties);\n        };\n\n        /**\n         * Encodes the specified Int64Value message. Does not implicitly {@link proto.Int64Value.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Int64Value\n         * @static\n         * @param {proto.IInt64Value} m Int64Value message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Int64Value.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(8).int64(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes an Int64Value message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Int64Value\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Int64Value} Int64Value\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Int64Value.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Int64Value();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.int64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Int64Value;\n    })();\n\n    proto.UInt64Value = (function() {\n\n        /**\n         * Properties of a UInt64Value.\n         * @memberof proto\n         * @interface IUInt64Value\n         * @property {Long|null} [value] UInt64Value value\n         */\n\n        /**\n         * Constructs a new UInt64Value.\n         * @memberof proto\n         * @classdesc Represents a UInt64Value.\n         * @implements IUInt64Value\n         * @constructor\n         * @param {proto.IUInt64Value=} [p] Properties to set\n         */\n        function UInt64Value(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * UInt64Value value.\n         * @member {Long} value\n         * @memberof proto.UInt64Value\n         * @instance\n         */\n        UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new UInt64Value instance using the specified properties.\n         * @function create\n         * @memberof proto.UInt64Value\n         * @static\n         * @param {proto.IUInt64Value=} [properties] Properties to set\n         * @returns {proto.UInt64Value} UInt64Value instance\n         */\n        UInt64Value.create = function create(properties) {\n            return new UInt64Value(properties);\n        };\n\n        /**\n         * Encodes the specified UInt64Value message. Does not implicitly {@link proto.UInt64Value.verify|verify} messages.\n         * @function encode\n         * @memberof proto.UInt64Value\n         * @static\n         * @param {proto.IUInt64Value} m UInt64Value message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UInt64Value.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(8).uint64(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes a UInt64Value message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.UInt64Value\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.UInt64Value} UInt64Value\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UInt64Value.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.UInt64Value();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.uint64();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return UInt64Value;\n    })();\n\n    proto.Int32Value = (function() {\n\n        /**\n         * Properties of an Int32Value.\n         * @memberof proto\n         * @interface IInt32Value\n         * @property {number|null} [value] Int32Value value\n         */\n\n        /**\n         * Constructs a new Int32Value.\n         * @memberof proto\n         * @classdesc Represents an Int32Value.\n         * @implements IInt32Value\n         * @constructor\n         * @param {proto.IInt32Value=} [p] Properties to set\n         */\n        function Int32Value(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Int32Value value.\n         * @member {number} value\n         * @memberof proto.Int32Value\n         * @instance\n         */\n        Int32Value.prototype.value = 0;\n\n        /**\n         * Creates a new Int32Value instance using the specified properties.\n         * @function create\n         * @memberof proto.Int32Value\n         * @static\n         * @param {proto.IInt32Value=} [properties] Properties to set\n         * @returns {proto.Int32Value} Int32Value instance\n         */\n        Int32Value.create = function create(properties) {\n            return new Int32Value(properties);\n        };\n\n        /**\n         * Encodes the specified Int32Value message. Does not implicitly {@link proto.Int32Value.verify|verify} messages.\n         * @function encode\n         * @memberof proto.Int32Value\n         * @static\n         * @param {proto.IInt32Value} m Int32Value message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Int32Value.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(8).int32(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes an Int32Value message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.Int32Value\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.Int32Value} Int32Value\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Int32Value.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Int32Value();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.int32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return Int32Value;\n    })();\n\n    proto.UInt32Value = (function() {\n\n        /**\n         * Properties of a UInt32Value.\n         * @memberof proto\n         * @interface IUInt32Value\n         * @property {number|null} [value] UInt32Value value\n         */\n\n        /**\n         * Constructs a new UInt32Value.\n         * @memberof proto\n         * @classdesc Represents a UInt32Value.\n         * @implements IUInt32Value\n         * @constructor\n         * @param {proto.IUInt32Value=} [p] Properties to set\n         */\n        function UInt32Value(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * UInt32Value value.\n         * @member {number} value\n         * @memberof proto.UInt32Value\n         * @instance\n         */\n        UInt32Value.prototype.value = 0;\n\n        /**\n         * Creates a new UInt32Value instance using the specified properties.\n         * @function create\n         * @memberof proto.UInt32Value\n         * @static\n         * @param {proto.IUInt32Value=} [properties] Properties to set\n         * @returns {proto.UInt32Value} UInt32Value instance\n         */\n        UInt32Value.create = function create(properties) {\n            return new UInt32Value(properties);\n        };\n\n        /**\n         * Encodes the specified UInt32Value message. Does not implicitly {@link proto.UInt32Value.verify|verify} messages.\n         * @function encode\n         * @memberof proto.UInt32Value\n         * @static\n         * @param {proto.IUInt32Value} m UInt32Value message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UInt32Value.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(8).uint32(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes a UInt32Value message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.UInt32Value\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.UInt32Value} UInt32Value\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UInt32Value.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.UInt32Value();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.uint32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return UInt32Value;\n    })();\n\n    proto.BoolValue = (function() {\n\n        /**\n         * Properties of a BoolValue.\n         * @memberof proto\n         * @interface IBoolValue\n         * @property {boolean|null} [value] BoolValue value\n         */\n\n        /**\n         * Constructs a new BoolValue.\n         * @memberof proto\n         * @classdesc Represents a BoolValue.\n         * @implements IBoolValue\n         * @constructor\n         * @param {proto.IBoolValue=} [p] Properties to set\n         */\n        function BoolValue(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * BoolValue value.\n         * @member {boolean} value\n         * @memberof proto.BoolValue\n         * @instance\n         */\n        BoolValue.prototype.value = false;\n\n        /**\n         * Creates a new BoolValue instance using the specified properties.\n         * @function create\n         * @memberof proto.BoolValue\n         * @static\n         * @param {proto.IBoolValue=} [properties] Properties to set\n         * @returns {proto.BoolValue} BoolValue instance\n         */\n        BoolValue.create = function create(properties) {\n            return new BoolValue(properties);\n        };\n\n        /**\n         * Encodes the specified BoolValue message. Does not implicitly {@link proto.BoolValue.verify|verify} messages.\n         * @function encode\n         * @memberof proto.BoolValue\n         * @static\n         * @param {proto.IBoolValue} m BoolValue message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BoolValue.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(8).bool(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes a BoolValue message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.BoolValue\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.BoolValue} BoolValue\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BoolValue.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.BoolValue();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return BoolValue;\n    })();\n\n    proto.StringValue = (function() {\n\n        /**\n         * Properties of a StringValue.\n         * @memberof proto\n         * @interface IStringValue\n         * @property {string|null} [value] StringValue value\n         */\n\n        /**\n         * Constructs a new StringValue.\n         * @memberof proto\n         * @classdesc Represents a StringValue.\n         * @implements IStringValue\n         * @constructor\n         * @param {proto.IStringValue=} [p] Properties to set\n         */\n        function StringValue(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * StringValue value.\n         * @member {string} value\n         * @memberof proto.StringValue\n         * @instance\n         */\n        StringValue.prototype.value = \"\";\n\n        /**\n         * Creates a new StringValue instance using the specified properties.\n         * @function create\n         * @memberof proto.StringValue\n         * @static\n         * @param {proto.IStringValue=} [properties] Properties to set\n         * @returns {proto.StringValue} StringValue instance\n         */\n        StringValue.create = function create(properties) {\n            return new StringValue(properties);\n        };\n\n        /**\n         * Encodes the specified StringValue message. Does not implicitly {@link proto.StringValue.verify|verify} messages.\n         * @function encode\n         * @memberof proto.StringValue\n         * @static\n         * @param {proto.IStringValue} m StringValue message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringValue.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(10).string(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes a StringValue message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.StringValue\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.StringValue} StringValue\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringValue.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.StringValue();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return StringValue;\n    })();\n\n    proto.BytesValue = (function() {\n\n        /**\n         * Properties of a BytesValue.\n         * @memberof proto\n         * @interface IBytesValue\n         * @property {Uint8Array|null} [value] BytesValue value\n         */\n\n        /**\n         * Constructs a new BytesValue.\n         * @memberof proto\n         * @classdesc Represents a BytesValue.\n         * @implements IBytesValue\n         * @constructor\n         * @param {proto.IBytesValue=} [p] Properties to set\n         */\n        function BytesValue(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * BytesValue value.\n         * @member {Uint8Array} value\n         * @memberof proto.BytesValue\n         * @instance\n         */\n        BytesValue.prototype.value = $util.newBuffer([]);\n\n        /**\n         * Creates a new BytesValue instance using the specified properties.\n         * @function create\n         * @memberof proto.BytesValue\n         * @static\n         * @param {proto.IBytesValue=} [properties] Properties to set\n         * @returns {proto.BytesValue} BytesValue instance\n         */\n        BytesValue.create = function create(properties) {\n            return new BytesValue(properties);\n        };\n\n        /**\n         * Encodes the specified BytesValue message. Does not implicitly {@link proto.BytesValue.verify|verify} messages.\n         * @function encode\n         * @memberof proto.BytesValue\n         * @static\n         * @param {proto.IBytesValue} m BytesValue message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BytesValue.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                w.uint32(10).bytes(m.value);\n            return w;\n        };\n\n        /**\n         * Decodes a BytesValue message from the specified reader or buffer.\n         * @function decode\n         * @memberof proto.BytesValue\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {proto.BytesValue} BytesValue\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BytesValue.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.BytesValue();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.value = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        return BytesValue;\n    })();\n\n    return proto;\n})();\n\nexport const google = $root.google = (() => {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    const google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        const protobuf = {};\n\n        protobuf.DoubleValue = (function() {\n\n            /**\n             * Properties of a DoubleValue.\n             * @memberof google.protobuf\n             * @interface IDoubleValue\n             * @property {number|null} [value] DoubleValue value\n             */\n\n            /**\n             * Constructs a new DoubleValue.\n             * @memberof google.protobuf\n             * @classdesc Represents a DoubleValue.\n             * @implements IDoubleValue\n             * @constructor\n             * @param {google.protobuf.IDoubleValue=} [p] Properties to set\n             */\n            function DoubleValue(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * DoubleValue value.\n             * @member {number} value\n             * @memberof google.protobuf.DoubleValue\n             * @instance\n             */\n            DoubleValue.prototype.value = 0;\n\n            /**\n             * Creates a new DoubleValue instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.DoubleValue\n             * @static\n             * @param {google.protobuf.IDoubleValue=} [properties] Properties to set\n             * @returns {google.protobuf.DoubleValue} DoubleValue instance\n             */\n            DoubleValue.create = function create(properties) {\n                return new DoubleValue(properties);\n            };\n\n            /**\n             * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.DoubleValue\n             * @static\n             * @param {google.protobuf.IDoubleValue} m DoubleValue message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DoubleValue.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(9).double(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes a DoubleValue message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.DoubleValue\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.DoubleValue} DoubleValue\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DoubleValue.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DoubleValue();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.double();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return DoubleValue;\n        })();\n\n        protobuf.FloatValue = (function() {\n\n            /**\n             * Properties of a FloatValue.\n             * @memberof google.protobuf\n             * @interface IFloatValue\n             * @property {number|null} [value] FloatValue value\n             */\n\n            /**\n             * Constructs a new FloatValue.\n             * @memberof google.protobuf\n             * @classdesc Represents a FloatValue.\n             * @implements IFloatValue\n             * @constructor\n             * @param {google.protobuf.IFloatValue=} [p] Properties to set\n             */\n            function FloatValue(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * FloatValue value.\n             * @member {number} value\n             * @memberof google.protobuf.FloatValue\n             * @instance\n             */\n            FloatValue.prototype.value = 0;\n\n            /**\n             * Creates a new FloatValue instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.FloatValue\n             * @static\n             * @param {google.protobuf.IFloatValue=} [properties] Properties to set\n             * @returns {google.protobuf.FloatValue} FloatValue instance\n             */\n            FloatValue.create = function create(properties) {\n                return new FloatValue(properties);\n            };\n\n            /**\n             * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.FloatValue\n             * @static\n             * @param {google.protobuf.IFloatValue} m FloatValue message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FloatValue.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(13).float(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes a FloatValue message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.FloatValue\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.FloatValue} FloatValue\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FloatValue.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FloatValue();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.float();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return FloatValue;\n        })();\n\n        protobuf.Int64Value = (function() {\n\n            /**\n             * Properties of an Int64Value.\n             * @memberof google.protobuf\n             * @interface IInt64Value\n             * @property {Long|null} [value] Int64Value value\n             */\n\n            /**\n             * Constructs a new Int64Value.\n             * @memberof google.protobuf\n             * @classdesc Represents an Int64Value.\n             * @implements IInt64Value\n             * @constructor\n             * @param {google.protobuf.IInt64Value=} [p] Properties to set\n             */\n            function Int64Value(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Int64Value value.\n             * @member {Long} value\n             * @memberof google.protobuf.Int64Value\n             * @instance\n             */\n            Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Int64Value instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Int64Value\n             * @static\n             * @param {google.protobuf.IInt64Value=} [properties] Properties to set\n             * @returns {google.protobuf.Int64Value} Int64Value instance\n             */\n            Int64Value.create = function create(properties) {\n                return new Int64Value(properties);\n            };\n\n            /**\n             * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Int64Value\n             * @static\n             * @param {google.protobuf.IInt64Value} m Int64Value message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Int64Value.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(8).int64(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes an Int64Value message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Int64Value\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.Int64Value} Int64Value\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Int64Value.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Int64Value();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.int64();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return Int64Value;\n        })();\n\n        protobuf.UInt64Value = (function() {\n\n            /**\n             * Properties of a UInt64Value.\n             * @memberof google.protobuf\n             * @interface IUInt64Value\n             * @property {Long|null} [value] UInt64Value value\n             */\n\n            /**\n             * Constructs a new UInt64Value.\n             * @memberof google.protobuf\n             * @classdesc Represents a UInt64Value.\n             * @implements IUInt64Value\n             * @constructor\n             * @param {google.protobuf.IUInt64Value=} [p] Properties to set\n             */\n            function UInt64Value(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * UInt64Value value.\n             * @member {Long} value\n             * @memberof google.protobuf.UInt64Value\n             * @instance\n             */\n            UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * Creates a new UInt64Value instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.UInt64Value\n             * @static\n             * @param {google.protobuf.IUInt64Value=} [properties] Properties to set\n             * @returns {google.protobuf.UInt64Value} UInt64Value instance\n             */\n            UInt64Value.create = function create(properties) {\n                return new UInt64Value(properties);\n            };\n\n            /**\n             * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.UInt64Value\n             * @static\n             * @param {google.protobuf.IUInt64Value} m UInt64Value message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            UInt64Value.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(8).uint64(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes a UInt64Value message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.UInt64Value\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.UInt64Value} UInt64Value\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            UInt64Value.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UInt64Value();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.uint64();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return UInt64Value;\n        })();\n\n        protobuf.Int32Value = (function() {\n\n            /**\n             * Properties of an Int32Value.\n             * @memberof google.protobuf\n             * @interface IInt32Value\n             * @property {number|null} [value] Int32Value value\n             */\n\n            /**\n             * Constructs a new Int32Value.\n             * @memberof google.protobuf\n             * @classdesc Represents an Int32Value.\n             * @implements IInt32Value\n             * @constructor\n             * @param {google.protobuf.IInt32Value=} [p] Properties to set\n             */\n            function Int32Value(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Int32Value value.\n             * @member {number} value\n             * @memberof google.protobuf.Int32Value\n             * @instance\n             */\n            Int32Value.prototype.value = 0;\n\n            /**\n             * Creates a new Int32Value instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Int32Value\n             * @static\n             * @param {google.protobuf.IInt32Value=} [properties] Properties to set\n             * @returns {google.protobuf.Int32Value} Int32Value instance\n             */\n            Int32Value.create = function create(properties) {\n                return new Int32Value(properties);\n            };\n\n            /**\n             * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Int32Value\n             * @static\n             * @param {google.protobuf.IInt32Value} m Int32Value message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Int32Value.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(8).int32(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes an Int32Value message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Int32Value\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.Int32Value} Int32Value\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Int32Value.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Int32Value();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.int32();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return Int32Value;\n        })();\n\n        protobuf.UInt32Value = (function() {\n\n            /**\n             * Properties of a UInt32Value.\n             * @memberof google.protobuf\n             * @interface IUInt32Value\n             * @property {number|null} [value] UInt32Value value\n             */\n\n            /**\n             * Constructs a new UInt32Value.\n             * @memberof google.protobuf\n             * @classdesc Represents a UInt32Value.\n             * @implements IUInt32Value\n             * @constructor\n             * @param {google.protobuf.IUInt32Value=} [p] Properties to set\n             */\n            function UInt32Value(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * UInt32Value value.\n             * @member {number} value\n             * @memberof google.protobuf.UInt32Value\n             * @instance\n             */\n            UInt32Value.prototype.value = 0;\n\n            /**\n             * Creates a new UInt32Value instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.UInt32Value\n             * @static\n             * @param {google.protobuf.IUInt32Value=} [properties] Properties to set\n             * @returns {google.protobuf.UInt32Value} UInt32Value instance\n             */\n            UInt32Value.create = function create(properties) {\n                return new UInt32Value(properties);\n            };\n\n            /**\n             * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.UInt32Value\n             * @static\n             * @param {google.protobuf.IUInt32Value} m UInt32Value message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            UInt32Value.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(8).uint32(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes a UInt32Value message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.UInt32Value\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.UInt32Value} UInt32Value\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            UInt32Value.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UInt32Value();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.uint32();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return UInt32Value;\n        })();\n\n        protobuf.BoolValue = (function() {\n\n            /**\n             * Properties of a BoolValue.\n             * @memberof google.protobuf\n             * @interface IBoolValue\n             * @property {boolean|null} [value] BoolValue value\n             */\n\n            /**\n             * Constructs a new BoolValue.\n             * @memberof google.protobuf\n             * @classdesc Represents a BoolValue.\n             * @implements IBoolValue\n             * @constructor\n             * @param {google.protobuf.IBoolValue=} [p] Properties to set\n             */\n            function BoolValue(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * BoolValue value.\n             * @member {boolean} value\n             * @memberof google.protobuf.BoolValue\n             * @instance\n             */\n            BoolValue.prototype.value = false;\n\n            /**\n             * Creates a new BoolValue instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.BoolValue\n             * @static\n             * @param {google.protobuf.IBoolValue=} [properties] Properties to set\n             * @returns {google.protobuf.BoolValue} BoolValue instance\n             */\n            BoolValue.create = function create(properties) {\n                return new BoolValue(properties);\n            };\n\n            /**\n             * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.BoolValue\n             * @static\n             * @param {google.protobuf.IBoolValue} m BoolValue message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BoolValue.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(8).bool(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes a BoolValue message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.BoolValue\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.BoolValue} BoolValue\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BoolValue.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.BoolValue();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.bool();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return BoolValue;\n        })();\n\n        protobuf.StringValue = (function() {\n\n            /**\n             * Properties of a StringValue.\n             * @memberof google.protobuf\n             * @interface IStringValue\n             * @property {string|null} [value] StringValue value\n             */\n\n            /**\n             * Constructs a new StringValue.\n             * @memberof google.protobuf\n             * @classdesc Represents a StringValue.\n             * @implements IStringValue\n             * @constructor\n             * @param {google.protobuf.IStringValue=} [p] Properties to set\n             */\n            function StringValue(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * StringValue value.\n             * @member {string} value\n             * @memberof google.protobuf.StringValue\n             * @instance\n             */\n            StringValue.prototype.value = \"\";\n\n            /**\n             * Creates a new StringValue instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.StringValue\n             * @static\n             * @param {google.protobuf.IStringValue=} [properties] Properties to set\n             * @returns {google.protobuf.StringValue} StringValue instance\n             */\n            StringValue.create = function create(properties) {\n                return new StringValue(properties);\n            };\n\n            /**\n             * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.StringValue\n             * @static\n             * @param {google.protobuf.IStringValue} m StringValue message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            StringValue.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(10).string(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes a StringValue message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.StringValue\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.StringValue} StringValue\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            StringValue.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.StringValue();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return StringValue;\n        })();\n\n        protobuf.BytesValue = (function() {\n\n            /**\n             * Properties of a BytesValue.\n             * @memberof google.protobuf\n             * @interface IBytesValue\n             * @property {Uint8Array|null} [value] BytesValue value\n             */\n\n            /**\n             * Constructs a new BytesValue.\n             * @memberof google.protobuf\n             * @classdesc Represents a BytesValue.\n             * @implements IBytesValue\n             * @constructor\n             * @param {google.protobuf.IBytesValue=} [p] Properties to set\n             */\n            function BytesValue(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * BytesValue value.\n             * @member {Uint8Array} value\n             * @memberof google.protobuf.BytesValue\n             * @instance\n             */\n            BytesValue.prototype.value = $util.newBuffer([]);\n\n            /**\n             * Creates a new BytesValue instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.BytesValue\n             * @static\n             * @param {google.protobuf.IBytesValue=} [properties] Properties to set\n             * @returns {google.protobuf.BytesValue} BytesValue instance\n             */\n            BytesValue.create = function create(properties) {\n                return new BytesValue(properties);\n            };\n\n            /**\n             * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.BytesValue\n             * @static\n             * @param {google.protobuf.IBytesValue} m BytesValue message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BytesValue.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n                    w.uint32(10).bytes(m.value);\n                return w;\n            };\n\n            /**\n             * Decodes a BytesValue message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.BytesValue\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {google.protobuf.BytesValue} BytesValue\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BytesValue.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.BytesValue();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.value = r.bytes();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            return BytesValue;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nexport { $root as default };\n","import * as $protobuf from \"@hashgraph/protobufjs/minimal.js\";\nimport { proto } from \"./proto.js\";\n\n// re-export protobuf reader for usage by @hashgraph/sdk\nexport const Reader = $protobuf.Reader;\nexport const Writer = $protobuf.Writer;\n\nexport const ConsensusService = proto.ConsensusService;\nexport const CryptoService = proto.CryptoService;\nexport const FileService = proto.FileService;\nexport const FreezeService = proto.FreezeService;\nexport const MirrorConsensusService = proto.MirrorConsensusService;\nexport const NetworkService = proto.NetworkService;\nexport const SmartContractService = proto.SmartContractService;\nexport const TokenService = proto.TokenService;\n\nexport const AccountID = proto.AccountID;\nexport const ContractGetInfoResponse = proto.ContractGetInfoResponse;\nexport const ContractID = proto.ContractID;\nexport const CryptoGetInfoResponse = proto.CryptoGetInfoResponse;\nexport const FileGetInfoResponse = proto.FileGetInfoResponse;\nexport const FileID = proto.FileID;\nexport const NetworkGetVersionInfoResponse = proto.NetworkGetVersionInfoResponse;\nexport const Query = proto.Query;\nexport const ResponseCodeEnum = proto.ResponseCodeEnum;\nexport const ResponseType = proto.ResponseType;\nexport const SemanticVersion = proto.SemanticVersion;\nexport const TokenID = proto.TokenID;\nexport const TopicID = proto.TopicID;\nexport const Transaction = proto.Transaction;\nexport const SignedTransaction = proto.SignedTransaction;\nexport const TransactionList = proto.TransactionList;\nexport const TransactionBody = proto.TransactionBody;\nexport const TransactionID = proto.TransactionID;\nexport const TransactionReceipt = proto.TransactionReceipt;\nexport const TransactionRecord = proto.TransactionRecord;\nexport const ConsensusTopicResponse = proto.ConsensusTopicResponse;\nexport const ConsensusTopicQuery = proto.ConsensusTopicQuery;\n","import * as entity_id from \"../EntityIdHelper.js\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * The ID for a crypto-currency account on Hedera.\n */\nexport default class AccountId {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     */\n    constructor(props, realm, num) {\n        const [shard_num, realm_num, account_num] = entity_id.constructor(\n            props,\n            realm,\n            num\n        );\n\n        this.shard = shard_num;\n        this.realm = realm_num;\n        this.num = account_num;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {AccountId}\n     */\n    static fromString(text) {\n        return new AccountId(...entity_id.fromString(text));\n    }\n\n    /**\n     * @internal\n     * @param {proto.IAccountID} id\n     * @returns {AccountId}\n     */\n    static _fromProtobuf(id) {\n        return new AccountId({\n            shard: id.shardNum != null ? id.shardNum : 0,\n            realm: id.realmNum != null ? id.realmNum : 0,\n            num: id.accountNum != null ? id.accountNum : 0,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AccountId}\n     */\n    static fromBytes(bytes) {\n        return AccountId._fromProtobuf(proto.AccountID.decode(bytes));\n    }\n\n    /**\n     * @param {string} address\n     * @returns {AccountId}\n     */\n    static fromSolidityAddress(address) {\n        return new AccountId(...entity_id.fromSolidityAddress(address));\n    }\n\n    /**\n     * @internal\n     * @override\n     * @returns {proto.IAccountID}\n     */\n    _toProtobuf() {\n        return {\n            accountNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.AccountID.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * @override\n     * @returns {string}\n     */\n    toString() {\n        return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n\n    /**\n     * @param {this} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        return (\n            this.shard.eq(other.shard) &&\n            this.realm.eq(other.realm) &&\n            this.num.eq(other.num)\n        );\n    }\n}\n","import BigNumber from \"bignumber.js\";\nimport Long from \"long\";\n\n/**\n * @typedef {{low: number, high: number, unsigned: boolean}} LongObject\n */\n\n/**\n * @param {Long | number | string | LongObject | BigNumber} value\n * @returns {Long}\n */\nexport function valueToLong(value) {\n    if (BigNumber.isBigNumber(value)) {\n        return Long.fromString(value.toString());\n    } else if (value instanceof Long) {\n        return value;\n    } else {\n        return Long.fromValue(value);\n    }\n}\n","import BigNumber from \"bignumber.js\";\n\nexport default class HbarUnit {\n    /**\n     * @internal\n     * @param {string} name\n     * @param {string} symbol\n     * @param {BigNumber} tinybar\n     */\n    constructor(name, symbol, tinybar) {\n        /**\n         * @internal\n         * @readonly\n         */\n        this._name = name;\n\n        /**\n         * @internal\n         * @readonly\n         */\n        this._symbol = symbol;\n\n        /**\n         * @internal\n         * @readonly\n         */\n        this._tinybar = tinybar;\n\n        Object.freeze(this);\n    }\n}\n\nHbarUnit.Tinybar = new HbarUnit(\"tinybar\", \"tℏ\", new BigNumber(1));\n\nHbarUnit.Microbar = new HbarUnit(\"microbar\", \"μℏ\", new BigNumber(100));\n\nHbarUnit.Millibar = new HbarUnit(\"millibar\", \"mℏ\", new BigNumber(100000));\n\nHbarUnit.Hbar = new HbarUnit(\"hbar\", \"ℏ\", new BigNumber(\"100000000\"));\n\nHbarUnit.Kilobar = new HbarUnit(\n    \"kilobar\",\n    \"kℏ\",\n    new BigNumber(1000).multipliedBy(new BigNumber(\"100000000\"))\n);\n\nHbarUnit.Megabar = new HbarUnit(\n    \"megabar\",\n    \"Mℏ\",\n    new BigNumber(1000000).multipliedBy(new BigNumber(\"100000000\"))\n);\n\nHbarUnit.Gigabar = new HbarUnit(\n    \"gigabar\",\n    \"Gℏ\",\n    new BigNumber(\"1000000000\").multipliedBy(new BigNumber(\"100000000\"))\n);\n","import BigNumber from \"bignumber.js\";\nimport Long from \"long\";\nimport { valueToLong } from \"./long.js\";\nimport HbarUnit from \"./HbarUnit.js\";\n\n/**\n * @typedef {import(\"./long.js\").LongObject} LongObject\n */\n\nexport default class Hbar {\n    /**\n     * @param {number | string | Long | LongObject | BigNumber} amount\n     * @param {HbarUnit=} unit\n     */\n    constructor(amount, unit = HbarUnit.Hbar) {\n        if (unit === HbarUnit.Tinybar) {\n            this._valueInTinybar = valueToLong(amount);\n        } else {\n            /** @type {BigNumber} */\n            let bigAmount;\n\n            if (amount instanceof Long) {\n                bigAmount = new BigNumber(amount.toString(10));\n            } else if (Long.isLong(amount)) {\n                bigAmount = new BigNumber(Long.fromValue(amount).toString(10));\n            } else if (\n                BigNumber.isBigNumber(amount) ||\n                typeof amount === \"string\" ||\n                typeof amount === \"number\"\n            ) {\n                bigAmount = new BigNumber(amount);\n            } else {\n                bigAmount = new BigNumber(0);\n            }\n\n            /**\n             * @type {Long}\n             */\n            this._valueInTinybar = Long.fromString(\n                bigAmount.multipliedBy(unit._tinybar).toFixed()\n            );\n        }\n    }\n\n    /**\n     * @param {number | Long | BigNumber} amount\n     * @param {HbarUnit} unit\n     * @returns {Hbar}\n     */\n    static from(amount, unit) {\n        return new Hbar(amount, unit);\n    }\n\n    /**\n     * @param {number | Long} amount\n     * @returns {Hbar}\n     */\n    static fromTinybars(amount) {\n        return new Hbar(amount, HbarUnit.Tinybar);\n    }\n\n    /**\n     * @param {string} str\n     * @param {HbarUnit=} unit\n     * @returns {Hbar}\n     */\n    static fromString(str, unit = HbarUnit.Hbar) {\n        return new Hbar(new BigNumber(str), unit);\n    }\n\n    /**\n     * @param {HbarUnit} unit\n     * @returns {BigNumber}\n     */\n    to(unit) {\n        return new BigNumber(this._valueInTinybar.toString()).dividedBy(\n            unit._tinybar\n        );\n    }\n\n    /**\n     * @returns {Long}\n     */\n    toTinybars() {\n        return this._valueInTinybar;\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    negated() {\n        return Hbar.fromTinybars(this._valueInTinybar.negate());\n    }\n\n    /**\n     * @override\n     * @returns {string}\n     */\n    toString() {\n        if (\n            this._valueInTinybar.lessThan(10000) &&\n            this._valueInTinybar.greaterThan(-10000)\n        ) {\n            return `${this._valueInTinybar.toString()} ${\n                HbarUnit.Tinybar._symbol\n            }`;\n        }\n\n        return `${this.to(HbarUnit.Hbar).toString()} ${HbarUnit.Hbar._symbol}`;\n    }\n}\n","/**\n * @typedef {import(\"./Status.js\").default} Status\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class StatusError extends Error {\n    /**\n     * @param {object} props\n     * @param {Status} props.status\n     * @param {TransactionId} props.transactionId\n     * @param {string} message\n     */\n    constructor(props, message) {\n        super(message);\n\n        this.name = \"StatusError\";\n\n        if (typeof Error.captureStackTrace !== \"undefined\") {\n            Error.captureStackTrace(this, StatusError);\n        }\n    }\n}\n","import StatusError from \"./StatusError.js\";\n\n/**\n * @typedef {import(\"./Status.js\").default} Status\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class PrecheckStatusError extends StatusError {\n    /**\n     * @param {object} props\n     * @param {Status} props.status\n     * @param {TransactionId} props.transactionId\n     */\n    constructor(props) {\n        super(\n            props,\n            `transaction ${props.transactionId.toString()} failed precheck with status ${props.status.toString()}`\n        );\n    }\n}\n","/**\n * @typedef {import(\"./GrpcStatus.js\").default} GrpcStatus\n */\n\n/**\n * Describes how the gRPC request failed.\n *\n * Exists in order for the Hedera JavaScript SDK to produce the same error type for gRPC errors regardless of\n * operating in node or the browser.\n *\n * Definition taken from <https://grpc.github.io/grpc/node/grpc.html#~ServiceError>.\n */\nexport default class GrpcServiceError extends Error {\n    /**\n     * @param {GrpcStatus} status\n     */\n    constructor(status) {\n        super(`gRPC service failed with status: ${status.toString()}`);\n\n        /**\n         * @readonly\n         */\n        this.status = status;\n\n        this.name = \"GrpcServiceError\";\n\n        if (typeof Error.captureStackTrace !== \"undefined\") {\n            Error.captureStackTrace(this, GrpcServiceError);\n        }\n    }\n}\n","export default class GrpcStatus {\n    /**\n     * @hideconstructor\n     * @internal\n     * @param {number} code\n     */\n    constructor(code) {\n        /** @readonly */\n        this._code = code;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {number} code\n     * @returns {GrpcStatus}\n     */\n    static _fromValue(code) {\n        switch (code) {\n            case 0:\n                return GrpcStatus.Ok;\n            case 1:\n                return GrpcStatus.Cancelled;\n            case 2:\n                return GrpcStatus.Unknown;\n            case 3:\n                return GrpcStatus.InvalidArgument;\n            case 4:\n                return GrpcStatus.DeadlineExceeded;\n            case 5:\n                return GrpcStatus.NotFound;\n            case 6:\n                return GrpcStatus.AlreadyExists;\n            case 7:\n                return GrpcStatus.PermissionDenied;\n            case 16:\n                return GrpcStatus.Unauthenticated;\n            case 8:\n                return GrpcStatus.ResourceExhausted;\n            case 9:\n                return GrpcStatus.FailedPrecondition;\n            case 10:\n                return GrpcStatus.Aborted;\n            case 11:\n                return GrpcStatus.OutOfRange;\n            case 12:\n                return GrpcStatus.Unimplemented;\n            case 13:\n                return GrpcStatus.Internal;\n            case 14:\n                return GrpcStatus.Unavailable;\n            case 15:\n                return GrpcStatus.DataLoss;\n            default:\n                throw new Error(\n                    \"(BUG) non-exhaustive GrpcStatus switch statement\"\n                );\n        }\n    }\n\n    /**\n     * @override\n     * @returns {string}\n     */\n    toString() {\n        switch (this) {\n            case GrpcStatus.Ok:\n                return \"OK\";\n            case GrpcStatus.Cancelled:\n                return \"CANCELLED\";\n            case GrpcStatus.Unknown:\n                return \"UNKNOWN\";\n            case GrpcStatus.InvalidArgument:\n                return \"INVALID_ARGUMENT\";\n            case GrpcStatus.DeadlineExceeded:\n                return \"DEADLINE_EXCEEDED\";\n            case GrpcStatus.NotFound:\n                return \"NOT_FOUND\";\n            case GrpcStatus.AlreadyExists:\n                return \"ALREADY_EXISTS\";\n            case GrpcStatus.PermissionDenied:\n                return \"PERMISSION_DENIED\";\n            case GrpcStatus.Unauthenticated:\n                return \"UNAUTHENTICATED\";\n            case GrpcStatus.ResourceExhausted:\n                return \"RESOURCE_EXHAUSTED\";\n            case GrpcStatus.FailedPrecondition:\n                return \"FAILED_PRECONDITION\";\n            case GrpcStatus.Aborted:\n                return \"ABORTED\";\n            case GrpcStatus.OutOfRange:\n                return \"OUT_OF_RANGE\";\n            case GrpcStatus.Unimplemented:\n                return \"UNIMPLEMENTED\";\n            case GrpcStatus.Internal:\n                return \"INTERNAL\";\n            case GrpcStatus.Unavailable:\n                return \"UNAVAILABLE\";\n            case GrpcStatus.DataLoss:\n                return \"DATA_LOSS\";\n\n            default:\n                return `UNKNOWN (${this._code})`;\n        }\n    }\n\n    /**\n     * @returns {number}\n     */\n    valueOf() {\n        return this._code;\n    }\n}\n\nGrpcStatus.Ok = new GrpcStatus(0);\nGrpcStatus.Cancelled = new GrpcStatus(1);\nGrpcStatus.Unknown = new GrpcStatus(2);\nGrpcStatus.InvalidArgument = new GrpcStatus(3);\nGrpcStatus.DeadlineExceeded = new GrpcStatus(4);\nGrpcStatus.NotFound = new GrpcStatus(5);\nGrpcStatus.AlreadyExists = new GrpcStatus(6);\nGrpcStatus.PermissionDenied = new GrpcStatus(7);\nGrpcStatus.Unauthenticated = new GrpcStatus(16);\nGrpcStatus.ResourceExhausted = new GrpcStatus(8);\nGrpcStatus.FailedPrecondition = new GrpcStatus(9);\nGrpcStatus.Aborted = new GrpcStatus(10);\nGrpcStatus.OutOfRange = new GrpcStatus(11);\nGrpcStatus.Unimplemented = new GrpcStatus(12);\nGrpcStatus.Internal = new GrpcStatus(13);\nGrpcStatus.Unavailable = new GrpcStatus(14);\nGrpcStatus.DataLoss = new GrpcStatus(15);\n","import PrecheckStatusError from \"./PrecheckStatusError.js\";\nimport GrpcServiceError from \"./grpc/GrpcServiceError.js\";\nimport GrpcStatus from \"./grpc/GrpcStatus.js\";\nimport Status from \"./Status.js\";\n\n/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @abstract\n * @internal\n * @template RequestT\n * @template ResponseT\n * @template OutputT\n */\nexport default class Executable {\n    constructor() {\n        /**\n         * The number of times we can retry the grpc call\n         *\n         * @private\n         * @type {number}\n         */\n        this._maxRetries = 10;\n\n        /**\n         * The index of the next transaction to be executed.\n         *\n         * @protected\n         * @type {number}\n         */\n        this._nextNodeIndex = 0;\n\n        /**\n         * List of node account IDs for each transaction that has been\n         * built.\n         *\n         * @internal\n         * @type {AccountId[]}\n         */\n        this._nodeIds = [];\n    }\n\n    /**\n     * @returns {AccountId[]}\n     */\n    get nodeAccountIds() {\n        return this._nodeIds;\n    }\n\n    /**\n     * @param {AccountId[]} nodeIds\n     * @returns {this}\n     */\n    setNodeAccountIds(nodeIds) {\n        this._nodeIds = nodeIds;\n\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxRetries() {\n        return this._maxRetries;\n    }\n\n    /**\n     * @param {number} maxRetries\n     * @returns {this}\n     */\n    setMaxRetries(maxRetries) {\n        this._maxRetries = maxRetries;\n\n        return this;\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @param {import(\"./client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<void>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _beforeExecute(client) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @returns {RequestT}\n     */\n    _makeRequest() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {ResponseT} response\n     * @returns {Status}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponseStatus(response) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @param {ResponseT} response\n     * @param {AccountId} nodeAccountId\n     * @param {RequestT} request\n     * @returns {Promise<OutputT>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {Channel} channel\n     * @param {RequestT} request\n     * @returns {Promise<ResponseT>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _execute(channel, request) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @returns {AccountId}\n     */\n    _getNodeAccountId() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @returns {TransactionId}\n     */\n    _getTransactionId() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @protected\n     * @returns {void}\n     */\n    _advanceRequest() {\n        // each time we move our cursor to the next transaction\n        // wrapping around to ensure we are cycling\n        this._nextNodeIndex = (this._nextNodeIndex + 1) % this._nodeIds.length;\n    }\n\n    /**\n     * @protected\n     * @param {Status} responseStatus\n     * @param {ResponseT} response\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _shouldRetry(responseStatus, response) {\n        return (\n            responseStatus === Status.Busy ||\n            responseStatus === Status.PlatformTransactionNotCreated\n        );\n    }\n\n    /**\n     * @protected\n     * @param {GrpcServiceError} error\n     * @returns {boolean}\n     */\n    _shouldRetryExceptionally(error) {\n        return (\n            error.status === GrpcStatus.Unavailable ||\n            error.status === GrpcStatus.ResourceExhausted\n        );\n    }\n\n    /**\n     * @template {Channel} ChannelT\n     * @template MirrorChannelT\n     * @param {import(\"./client/Client.js\").default<ChannelT, MirrorChannelT>} client\n     * @returns {Promise<OutputT>}\n     */\n    async execute(client) {\n        await this._beforeExecute(client);\n\n        for (let attempt = 1 /* loop forever */; ; attempt += 1) {\n            const nodeAccountId = this._getNodeAccountId();\n            const node = client._network.networkNodes.get(\n                nodeAccountId.toString()\n            );\n\n            if (node == null) {\n                throw new Error(\n                    `NodeAccountId not recognized: ${nodeAccountId.toString()}`\n                );\n            }\n\n            node.inUse();\n\n            const channel = node.channel;\n            const request = this._makeRequest();\n\n            // advance the internal index\n            // non-free queries and transactions map to more than 1 actual transaction and this will cause\n            // the next invocation of makeRequest to return the _next_ transaction\n            this._advanceRequest();\n\n            let response;\n\n            if (!node.isHealthy()) {\n                await node.wait();\n            }\n\n            try {\n                response = await this._execute(channel, request);\n            } catch (err) {\n                if (\n                    err instanceof GrpcServiceError &&\n                    this._shouldRetryExceptionally(err) &&\n                    attempt <= this._maxRetries\n                ) {\n                    node.increaseDelay();\n                    continue;\n                }\n\n                throw err;\n            }\n\n            node.decreaseDelay();\n\n            const responseStatus = this._mapResponseStatus(response);\n\n            if (\n                this._shouldRetry(responseStatus, response) &&\n                attempt <= this._maxRetries\n            ) {\n                await delayForAttempt(attempt);\n                continue;\n            }\n\n            if (responseStatus !== Status.Ok) {\n                throw new PrecheckStatusError({\n                    status: responseStatus,\n                    transactionId: this._getTransactionId(),\n                });\n            }\n\n            return this._mapResponse(response, nodeAccountId, request);\n        }\n    }\n}\n\n/**\n * @param {number} attempt\n * @returns {Promise<void>}\n */\nfunction delayForAttempt(attempt) {\n    // 0.1s, 0.2s, 0.4s, 0.8s, ...\n    const ms = Math.floor(50 * Math.pow(2, attempt));\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n */\n\nexport default class Timestamp {\n    /**\n     * @param {Long | number} seconds\n     * @param {Long | number} nanos\n     */\n    constructor(seconds, nanos) {\n        /**\n         * @readonly\n         * @type {Long}\n         */\n        this.seconds =\n            seconds instanceof Long ? seconds : Long.fromNumber(seconds);\n\n        /**\n         * @readonly\n         * @type {Long}\n         */\n        this.nanos = nanos instanceof Long ? nanos : Long.fromNumber(nanos);\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @returns {Timestamp}\n     */\n    static generate() {\n        const jitter = Math.floor(Math.random() * 5000) + 8000;\n        const now = Date.now() - jitter;\n        const seconds = Math.floor(now / 1000);\n        const nanos =\n            Math.floor(now % 1000) * 1000000 +\n            Math.floor(Math.random() * 1000000);\n\n        return new Timestamp(seconds, nanos);\n    }\n\n    /**\n     * @param {string | number | Date} date\n     * @returns {Timestamp}\n     */\n    static fromDate(date) {\n        let ms;\n\n        if (typeof date === \"number\") {\n            ms = date;\n        } else if (typeof date === \"string\") {\n            ms = Date.parse(date);\n        } else if (date instanceof Date) {\n            ms = date.getTime();\n        } else {\n            throw new TypeError(\n                `invalid type '${typeof date}' for 'data', expected 'Date'`\n            );\n        }\n\n        const seconds = Math.floor(ms / 1000);\n        const nanos = Math.floor(ms % 1000) * 1000000;\n\n        return new Timestamp(seconds, nanos);\n    }\n\n    /**\n     * @returns {Date}\n     */\n    toDate() {\n        return new Date(\n            this.seconds.toInt() * 1000 +\n                Math.floor(this.nanos.toInt() / 1000000)\n        );\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ITimestamp}\n     */\n    _toProtobuf() {\n        return {\n            seconds: this.seconds,\n            nanos: this.nanos.toInt(),\n        };\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITimestamp} timestamp\n     * @returns {Timestamp}\n     */\n    static _fromProtobuf(timestamp) {\n        return new Timestamp(\n            timestamp.seconds instanceof Long\n                ? timestamp.seconds.toInt()\n                : timestamp.seconds != null\n                ? timestamp.seconds\n                : 0,\n\n            timestamp.nanos != null ? timestamp.nanos : 0\n        );\n    }\n}\n","import AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * The client-generated ID for a transaction.\n *\n * This is used for retrieving receipts and records for a transaction, for appending to a file\n * right after creating it, for instantiating a smart contract with bytecode in a file just created,\n * and internally by the network for detecting when duplicate transactions are submitted.\n */\nexport default class TransactionId {\n    /**\n     * @param {AccountId} accountId\n     * @param {Timestamp} validStart\n     */\n    constructor(accountId, validStart) {\n        /**\n         * The Account ID that paid for this transaction.\n         *\n         * @readonly\n         */\n        this.accountId = accountId;\n\n        /**\n         * The time from when this transaction is valid.\n         *\n         * When a transaction is submitted there is additionally a validDuration (defaults to 120s)\n         * and together they define a time window that a transaction may be processed in.\n         *\n         * @readonly\n         */\n        this.validStart = validStart;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * Generates a new transaction ID for the given account ID.\n     *\n     * Note that transaction IDs are made of the valid start of the transaction and the account\n     * that will be charged the transaction fees for the transaction.\n     *\n     * @param {AccountId | string} id\n     * @returns {TransactionId}\n     */\n    static generate(id) {\n        return new TransactionId(\n            typeof id === \"string\" ? AccountId.fromString(id) : id,\n            Timestamp.generate()\n        );\n    }\n\n    /**\n     * @param {string} id\n     * @returns {TransactionId}\n     */\n    static fromString(id) {\n        const [account, time] = id.split(\"@\");\n        const [seconds, nanos] = time.split(\".\").map(Number);\n\n        return new TransactionId(\n            AccountId.fromString(account),\n            new Timestamp(seconds, nanos)\n        );\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.accountId.toString()}@${this.validStart.seconds.toInt()}.${this.validStart.nanos.toInt()}`;\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransactionID} id\n     * @returns {TransactionId}\n     */\n    static _fromProtobuf(id) {\n        return new TransactionId(\n            AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (id.accountID)\n            ),\n            Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */ (id.transactionValidStart)\n            )\n        );\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ITransactionID}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            transactionValidStart: this.validStart._toProtobuf(),\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionId}\n     */\n    static fromBytes(bytes) {\n        return TransactionId._fromProtobuf(proto.TransactionID.decode(bytes));\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.TransactionID.encode(this._toProtobuf()).finish();\n    }\n}\n","/**\n * @typedef {import(\"./Hbar.js\").default} Hbar\n */\n\nexport default class MaxQueryPaymentExceeded extends Error {\n    /**\n     * @param {Hbar} queryCost\n     * @param {Hbar} maxQueryPayment\n     */\n    constructor(queryCost, maxQueryPayment) {\n        super();\n\n        this.message = `query cost of ${queryCost.toString()} HBAR exceeds max set on client: ${maxQueryPayment.toString()} HBAR`;\n        this.name = \"MaxQueryPaymentExceededError\";\n        this.queryCost = queryCost;\n        this.maxQueryPayment = maxQueryPayment;\n    }\n}\n","import Status from \"../Status.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Hbar from \"../Hbar.js\";\nimport Executable from \"../Executable.js\";\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport {\n    Query as ProtoQuery,\n    TransactionBody as ProtoTransactionBody,\n    SignedTransaction as ProtoSignedTransaction,\n    ResponseType as ProtoResponseType,\n    ResponseCodeEnum,\n} from \"@hashgraph/proto\";\nimport MaxQueryPaymentExceeded from \"../MaxQueryPaymentExceeded.js\";\nimport Long from \"long\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ResponseCodeEnum} proto.ResponseCodeEnum\n */\n\n/**\n * @typedef {import(\"../client/Client.js\").ClientOperator} ClientOperator\n */\n\n/**\n * @type {Map<ProtoQuery[\"query\"], (query: proto.IQuery) => Query<*>>}\n */\nexport const QUERY_REGISTRY = new Map();\n\n/**\n * Base class for all queries that can be submitted to Hedera.\n *\n * @abstract\n * @template OutputT\n * @augments {Executable<proto.IQuery, proto.IResponse, OutputT>}\n */\nexport default class Query extends Executable {\n    constructor() {\n        super();\n\n        /** @type {?TransactionId} */\n        this._paymentTransactionId = null;\n\n        /** @type {proto.ITransaction[]} */\n        this._paymentTransactions = [];\n\n        /** @type {?Hbar} */\n        this._queryPayment = null;\n\n        /** @type {?Hbar} */\n        this._maxQueryPayment = null;\n    }\n\n    /**\n     * @template T\n     * @param {Uint8Array} bytes\n     * @returns {Query<T>}\n     */\n    static fromBytes(bytes) {\n        const query = ProtoQuery.decode(bytes);\n\n        if (query.query == null) {\n            throw new Error(\"(BUG) query.query was not set in the protobuf\");\n        }\n\n        const fromProtobuf = /** @type {(query: proto.IQuery) => Query<T>} */ (QUERY_REGISTRY.get(\n            query.query\n        ));\n\n        if (fromProtobuf == null) {\n            throw new Error(\n                `(BUG) Query.fromBytes() not implemented for type ${query.query}`\n            );\n        }\n\n        return fromProtobuf(query);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return ProtoQuery.encode(this._makeRequest()).finish();\n    }\n\n    /**\n     * Set an explicit payment amount for this query.\n     *\n     * The client will submit exactly this amount for the payment of this query. Hedera\n     * will not return any remainder.\n     *\n     * @param {Hbar} queryPayment\n     * @returns {this}\n     */\n    setQueryPayment(queryPayment) {\n        this._queryPayment = queryPayment;\n\n        return this;\n    }\n\n    /**\n     * Set the maximum payment allowable for this query.\n     *\n     * @param {Hbar} maxQueryPayment\n     * @returns {this}\n     */\n    setMaxQueryPayment(maxQueryPayment) {\n        this._maxQueryPayment = maxQueryPayment;\n\n        return this;\n    }\n\n    /**\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    getCost(client) {\n        if (COST_QUERY.length != 1) {\n            throw new Error(\"CostQuery has not been loaded yet\");\n        }\n\n        return COST_QUERY[0](this).execute(client);\n    }\n\n    /**\n     * @param {TransactionId} paymentTransactionId\n     * @returns {this}\n     */\n    setPaymentTransactionId(paymentTransactionId) {\n        this._paymentTransactionId = paymentTransactionId;\n        return this;\n    }\n\n    /**\n     * @returns {?TransactionId}\n     */\n    get paymentTransactionId() {\n        return this._paymentTransactionId;\n    }\n\n    /**\n     * @returns {TransactionId}\n     */\n    _getTransactionId() {\n        if (this._paymentTransactionId == null) {\n            throw new Error(\n                \"Query.PaymentTransactionId was not set duration execution\"\n            );\n        }\n\n        return this._paymentTransactionId;\n    }\n\n    /**\n     * @protected\n     * @returns {boolean}\n     */\n    _isPaymentRequired() {\n        return true;\n    }\n\n    /**\n     * @template MirrorChannelT\n     * @param {import(\"../client/Client.js\").default<Channel, MirrorChannelT>} client\n     * @returns {Promise<void>}\n     */\n    async _beforeExecute(client) {\n        if (this._paymentTransactions.length > 0) {\n            return;\n        }\n\n        if (this._nodeIds.length == 0) {\n            this._nodeIds = client._network.getNodeAccountIdsForExecute();\n        }\n\n        const operator = client._operator;\n\n        if (this._paymentTransactionId == null) {\n            if (this._isPaymentRequired()) {\n                if (operator != null) {\n                    this._paymentTransactionId = TransactionId.generate(\n                        operator.accountId\n                    );\n                } else {\n                    throw new Error(\n                        \"`client` must have an `operator` or an explicit payment transaction must be provided\"\n                    );\n                }\n            } else {\n                this._paymentTransactionId = TransactionId.generate(\n                    new AccountId(0)\n                );\n            }\n        }\n\n        let cost =\n            this._queryPayment != null\n                ? this._queryPayment\n                : client.maxQueryPayment;\n\n        if (\n            this._paymentTransactions.length !== 0 ||\n            !this._isPaymentRequired()\n        ) {\n            cost = new Hbar(0);\n        } else {\n            if (this._queryPayment == null) {\n                const actualCost = await this.getCost(client);\n\n                if (\n                    cost.toTinybars().toInt() < actualCost.toTinybars().toInt()\n                ) {\n                    throw new MaxQueryPaymentExceeded(cost, actualCost);\n                }\n\n                cost = actualCost;\n            }\n        }\n\n        for (const node of this._nodeIds) {\n            this._paymentTransactions.push(\n                await _makePaymentTransaction(\n                    /** @type {import(\"../transaction/TransactionId.js\").default} */ (this\n                        ._paymentTransactionId),\n                    node,\n                    operator,\n                    /** @type {Hbar} */ (cost)\n                )\n            );\n        }\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponseHeader(response) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @protected\n     * @returns {proto.IQueryHeader}\n     */\n    _makeRequestHeader() {\n        /** @type {proto.IQueryHeader} */\n        let header = {};\n\n        if (this._isPaymentRequired() && this._paymentTransactions.length > 0) {\n            header = {\n                responseType: ProtoResponseType.ANSWER_ONLY,\n                payment: this._paymentTransactions[this._nextNodeIndex],\n            };\n        }\n\n        return header;\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onMakeRequest(header) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @override\n     * @internal\n     * @returns {proto.IQuery}\n     */\n    _makeRequest() {\n        /** @type {proto.IQueryHeader} */\n        let header = {};\n\n        if (this._isPaymentRequired() && this._paymentTransactions != null) {\n            header = {\n                payment: this._paymentTransactions[this._nextNodeIndex],\n                responseType: ProtoResponseType.ANSWER_ONLY,\n            };\n        }\n\n        return this._onMakeRequest(header);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {Status}\n     */\n    _mapResponseStatus(response) {\n        const { nodeTransactionPrecheckCode } = this._mapResponseHeader(\n            response\n        );\n\n        return Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : ResponseCodeEnum.OK\n        );\n    }\n\n    /**\n     * @returns {AccountId}\n     */\n    _getNodeAccountId() {\n        if (this._nodeIds.length > 0) {\n            // if there are payment transactions,\n            // we need to use the node of the current payment transaction\n            return this._nodeIds[this._nextNodeIndex];\n        } else {\n            throw new Error(\n                \"(BUG) nodeAccountIds were not set for query before executing\"\n            );\n        }\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {void}\n     */\n    _advanceRequest() {\n        if (this._isPaymentRequired() && this._paymentTransactions.length > 0) {\n            // each time we move our cursor to the next transaction\n            // wrapping around to ensure we are cycling\n            super._nextNodeIndex =\n                (this._nextNodeIndex + 1) % this._paymentTransactions.length;\n        }\n    }\n}\n\n/**\n * @param {TransactionId} paymentTransactionId\n * @param {AccountId} nodeId\n * @param {?ClientOperator} operator\n * @param {Hbar} paymentAmount\n * @returns {Promise<proto.ITransaction>}\n */\nexport async function _makePaymentTransaction(\n    paymentTransactionId,\n    nodeId,\n    operator,\n    paymentAmount\n) {\n    const accountAmounts = [];\n\n    if (operator != null) {\n        accountAmounts.push({\n            accountID: operator.accountId._toProtobuf(),\n            amount: paymentAmount.negated().toTinybars(),\n        });\n        accountAmounts.push({\n            accountID: nodeId._toProtobuf(),\n            amount: paymentAmount.toTinybars(),\n        });\n    } else {\n        accountAmounts.push({\n            accountID: new AccountId(0)._toProtobuf(),\n            amount: paymentAmount.negated().toTinybars(),\n        });\n        accountAmounts.push({\n            accountID: nodeId._toProtobuf(),\n            amount: paymentAmount.toTinybars(),\n        });\n    }\n    /**\n     * @type {proto.ITransactionBody}\n     */\n    const body = {\n        transactionID: paymentTransactionId._toProtobuf(),\n        nodeAccountID: nodeId._toProtobuf(),\n        transactionFee: new Hbar(1).toTinybars(),\n        transactionValidDuration: {\n            seconds: Long.fromNumber(120),\n        },\n        cryptoTransfer: {\n            transfers: {\n                accountAmounts,\n            },\n        },\n    };\n\n    /** @type {proto.ISignedTransaction} */\n    const signedTransaction = {\n        bodyBytes: ProtoTransactionBody.encode(body).finish(),\n    };\n\n    if (operator != null) {\n        const signature = await operator.transactionSigner(\n            /** @type {Uint8Array} */ (signedTransaction.bodyBytes)\n        );\n\n        signedTransaction.sigMap = {\n            sigPair: [\n                {\n                    pubKeyPrefix: operator.publicKey.toBytes(),\n                    ed25519: signature,\n                },\n            ],\n        };\n    }\n\n    return {\n        signedTransactionBytes: ProtoSignedTransaction.encode(\n            signedTransaction\n        ).finish(),\n    };\n}\n\n/**\n * @type {((query: Query<*>) => import(\"./CostQuery.js\").default<*>)[]}\n */\nexport const COST_QUERY = [];\n","import * as entity_id from \"../EntityIdHelper.js\";\nimport { Key } from \"@hashgraph/cryptography\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * The ID for a crypto-currency contract on Hedera.\n */\nexport default class ContractId extends Key {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     */\n    constructor(props, realm, num) {\n        super();\n\n        const [shard_num, realm_num, contract_num] = entity_id.constructor(\n            props,\n            realm,\n            num\n        );\n\n        this.shard = shard_num;\n        this.realm = realm_num;\n        this.num = contract_num;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {ContractId}\n     */\n    static fromString(text) {\n        return new ContractId(...entity_id.fromString(text));\n    }\n\n    /**\n     * @internal\n     * @param {proto.IContractID} id\n     * @returns {ContractId}\n     */\n    static _fromProtobuf(id) {\n        return new ContractId({\n            shard: id.shardNum != null ? id.shardNum : 0,\n            realm: id.realmNum != null ? id.realmNum : 0,\n            num: id.contractNum != null ? id.contractNum : 0,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ContractId}\n     */\n    static fromBytes(bytes) {\n        return ContractId._fromProtobuf(proto.ContractID.decode(bytes));\n    }\n\n    /**\n     * @param {string} address\n     * @returns {ContractId}\n     */\n    static fromSolidityAddress(address) {\n        const [shard, realm, contract] = entity_id.fromSolidityAddress(address);\n        return new ContractId(shard, realm, contract);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @returns {proto.IContractID}\n     */\n    _toProtobuf() {\n        return {\n            contractNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @override\n     * @returns {string}\n     */\n    toString() {\n        return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.ContractID.encode(this._toProtobuf()).finish();\n    }\n}\n","import * as entity_id from \"../EntityIdHelper.js\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * The ID for a crypto-currency token on Hedera.\n *\n * @augments {EntityId<proto.ITokenID>}\n */\nexport default class TokenId {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper.js\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     */\n    constructor(props, realm, num) {\n        const [shard_num, realm_num, token_num] = entity_id.constructor(\n            props,\n            realm,\n            num\n        );\n\n        this.shard = shard_num;\n        this.realm = realm_num;\n        this.num = token_num;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {TokenId}\n     */\n    static fromString(text) {\n        return new TokenId(...entity_id.fromString(text));\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITokenID} id\n     * @returns {TokenId}\n     */\n    static _fromProtobuf(id) {\n        return new TokenId({\n            shard: id.shardNum != null ? id.shardNum : 0,\n            realm: id.realmNum != null ? id.realmNum : 0,\n            num: id.tokenNum != null ? id.tokenNum : 0,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TokenId}\n     */\n    static fromBytes(bytes) {\n        return TokenId._fromProtobuf(proto.TokenID.decode(bytes));\n    }\n\n    /**\n     * @param {string} address\n     * @returns {TokenId}\n     */\n    static fromSolidityAddress(address) {\n        return new TokenId(...entity_id.fromSolidityAddress(address));\n    }\n\n    /**\n     * @internal\n     * @override\n     * @returns {proto.ITokenID}\n     */\n    _toProtobuf() {\n        return {\n            tokenNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @override\n     * @returns {string}\n     */\n    toString() {\n        return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.TokenID.encode(this._toProtobuf()).finish();\n    }\n}\n","/**\n * @abstract\n * @template {{ toString(): string }} KeyT\n * @template {{ toString(): string }} ValueT\n */\nexport default class ObjectMap {\n    /**\n     * @param {(s: string) => KeyT} fromString\n     */\n    constructor(fromString) {\n        /** @type {Map<string, ValueT>} */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this._map = new Map();\n\n        /** @type {Map<KeyT, ValueT>} */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.__map = new Map();\n\n        this._fromString = fromString;\n    }\n\n    /**\n     * @param {KeyT | string} key\n     * @returns {?ValueT}\n     */\n    get(key) {\n        const k = typeof key === \"string\" ? key : key.toString();\n\n        const value = this._map.get(k);\n        return value != null ? value : null;\n    }\n\n    /**\n     * @internal\n     * @param {KeyT} key\n     * @param {ValueT} value\n     */\n    _set(key, value) {\n        const k = typeof key === \"string\" ? key : key.toString();\n\n        this._map.set(k, value);\n        this.__map.set(typeof k === \"string\" ? this._fromString(k) : k, value);\n    }\n\n    /**\n     * @returns {IterableIterator<ValueT>}\n     */\n    values() {\n        return this._map.values();\n    }\n\n    /**\n     * @returns {IterableIterator<KeyT>}\n     */\n    keys() {\n        return this.__map.keys();\n    }\n\n    /**\n     * @returns {IterableIterator<[KeyT, ValueT]>}\n     */\n    [Symbol.iterator]() {\n        return this.__map[Symbol.iterator]();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        /** @type {Object.<string, string>} */\n        const map = {};\n\n        for (const [key, value] of this._map) {\n            map[key] = value.toString();\n        }\n\n        return JSON.stringify(map);\n    }\n}\n","import TokenId from \"../token/TokenId.js\";\nimport Long from \"long\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITokenBalance} proto.ITokenBalance\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @augments {ObjectMap<TokenId, Long>}\n */\nexport default class TokenBalanceMap extends ObjectMap {\n    constructor() {\n        super((s) => TokenId.fromString(s));\n    }\n\n    /**\n     * @param {proto.ITokenBalance[]} balances\n     * @returns {TokenBalanceMap}\n     */\n    static _fromProtobuf(balances) {\n        const tokenBalances = new TokenBalanceMap();\n\n        for (const balance of balances) {\n            const tokenId = TokenId._fromProtobuf(\n                /** @type {proto.ITokenID} */ (balance.tokenId)\n            );\n\n            tokenBalances._set(\n                tokenId,\n                Long.fromValue(/** @type {Long} */ (balance.balance))\n            );\n        }\n\n        return tokenBalances;\n    }\n}\n","import Hbar from \"../Hbar.js\";\nimport TokenBalanceMap from \"./TokenBalanceMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceResponse} proto.ICryptoGetAccountBalanceResponse\n * @typedef {import(\"@hashgraph/proto\").IKey} proto.IKey\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"long\")} Long\n */\n\nexport default class AccountBalance {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Hbar} props.hbars\n     * @param {?TokenBalanceMap} props.tokens\n     */\n    constructor(props) {\n        /**\n         * The account ID for which this balancermation applies.\n         *\n         * @readonly\n         */\n        this.hbars = props.hbars;\n\n        /** @readonly */\n        this.tokens = props.tokens;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.ICryptoGetAccountBalanceResponse} balance\n     * @returns {AccountBalance}\n     */\n    static _fromProtobuf(balance) {\n        return new AccountBalance({\n            hbars: Hbar.fromTinybars(/** @type {Long} */ (balance.balance)),\n            tokens: TokenBalanceMap._fromProtobuf(\n                balance.tokenBalances != null ? balance.tokenBalances : []\n            ),\n        });\n    }\n\n    /**\n     * @returns {proto.ICryptoGetAccountBalanceResponse}\n     */\n    _toProtobuf() {\n        const list = [];\n        for (const [key, value] of this.tokens != null ? this.tokens : []) {\n            list.push({\n                token: key._toProtobuf(),\n                balance: value,\n            });\n        }\n\n        return {\n            balance: this.hbars.toTinybars(),\n            tokenBalances: list,\n        };\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport AccountBalance from \"./AccountBalance.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceQuery} proto.ICryptoGetAccountBalanceQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceResponse} proto.ICryptoGetAccountBalanceResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * Get the balance of a Hedera™ crypto-currency account.\n *\n * This returns only the balance, so its a smaller and faster reply\n * than AccountInfoQuery.\n *\n * This query is free.\n *\n * @augments {Query<AccountBalance>}\n */\nexport default class AccountBalanceQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {AccountBalanceQuery}\n     */\n    static _fromProtobuf(query) {\n        const balance = /** @type {proto.ICryptoGetAccountBalanceQuery} */ (query.cryptogetAccountBalance);\n\n        return new AccountBalanceQuery({\n            accountId:\n                balance.accountID != null\n                    ? AccountId._fromProtobuf(balance.accountID)\n                    : undefined,\n            contractId:\n                balance.contractID != null\n                    ? ContractId._fromProtobuf(balance.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the balance is being requested.\n     *\n     * This is mutually exclusive with `setContractId`.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the balance is being requested.\n     *\n     * This is mutually exclusive with `setAccountId`.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {this}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @protected\n     * @override\n     * @returns {boolean}\n     */\n    _isPaymentRequired() {\n        return false;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoGetBalance(request);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptogetAccountBalance = /** @type {proto.ICryptoGetAccountBalanceResponse} */ (response.cryptogetAccountBalance);\n        return /** @type {proto.IResponseHeader} */ (cryptogetAccountBalance.header);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {Promise<AccountBalance>}\n     */\n    _mapResponse(response) {\n        const cryptogetAccountBalance = /** @type {proto.ICryptoGetAccountBalanceResponse} */ (response.cryptogetAccountBalance);\n        return Promise.resolve(\n            AccountBalance._fromProtobuf(cryptogetAccountBalance)\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptogetAccountBalance: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"cryptogetAccountBalance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountBalanceQuery._fromProtobuf\n);\n","import StatusError from \"./StatusError.js\";\n\n/**\n * @typedef {import(\"./Status.js\").default} Status\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./transaction/TransactionReceipt.js\").default} TransactionReceipt\n */\n\nexport default class ReceiptStatusError extends StatusError {\n    /**\n     * @param {object} props\n     * @param {TransactionReceipt} props.transactionReceipt\n     * @param {Status} props.status\n     * @param {TransactionId} props.transactionId\n     */\n    constructor(props) {\n        super(\n            props,\n            `receipt for transaction ${props.transactionId.toString()} contained error status ${props.status.toString()}`\n        );\n\n        /**\n         * @type {TransactionReceipt}\n         * @readonly\n         */\n        this.transactionReceipt = props.transactionReceipt;\n    }\n}\n","import * as entity_id from \"../EntityIdHelper.js\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * The ID for a crypto-currency file on Hedera.\n */\nexport default class FileId {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     */\n    constructor(props, realm, num) {\n        const [shard_num, realm_num, file_num] = entity_id.constructor(\n            props,\n            realm,\n            num\n        );\n\n        this.shard = shard_num;\n        this.realm = realm_num;\n        this.num = file_num;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {FileId}\n     */\n    static fromString(text) {\n        return new FileId(...entity_id.fromString(text));\n    }\n\n    /**\n     * @internal\n     * @param {proto.IFileID} id\n     * @returns {FileId}\n     */\n    static _fromProtobuf(id) {\n        return new FileId({\n            shard: id.shardNum != null ? id.shardNum : 0,\n            realm: id.realmNum != null ? id.realmNum : 0,\n            num: id.fileNum != null ? id.fileNum : 0,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FileId}\n     */\n    static fromBytes(bytes) {\n        return FileId._fromProtobuf(proto.FileID.decode(bytes));\n    }\n\n    /**\n     * @override\n     * @internal\n     * @returns {proto.IFileID}\n     */\n    _toProtobuf() {\n        return {\n            fileNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @override\n     * @returns {string}\n     */\n    toString() {\n        return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.FileID.encode(this._toProtobuf()).finish();\n    }\n}\n","import * as entity_id from \"../EntityIdHelper.js\";\nimport { TopicID as ProtoTopicID } from \"@hashgraph/proto\";\n\n/**\n * @typedef {import(\"long\").Long} Long\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITopicID} proto.ITopicID\n */\n\n/**\n * Unique identifier for a topic (used by the consensus service).\n */\nexport default class TopicId {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper.js\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     */\n    constructor(props, realm, num) {\n        const [shard_num, realm_num, topic_num] = entity_id.constructor(\n            props,\n            realm,\n            num\n        );\n\n        this.shard = shard_num;\n        this.realm = realm_num;\n        this.num = topic_num;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {TopicId}\n     */\n    static fromString(text) {\n        return new TopicId(...entity_id.fromString(text));\n    }\n\n    /**\n     * @param {proto.ITopicID} id\n     * @returns {TopicId}\n     */\n    static _fromProtobuf(id) {\n        return new TopicId({\n            shard: id.shardNum != null ? id.shardNum : 0,\n            realm: id.realmNum != null ? id.realmNum : 0,\n            num: id.topicNum != null ? id.topicNum : 0,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TopicId}\n     */\n    static fromBytes(bytes) {\n        return TopicId._fromProtobuf(ProtoTopicID.decode(bytes));\n    }\n\n    /**\n     * @override\n     * @returns {proto.ITopicID}\n     */\n    _toProtobuf() {\n        return {\n            topicNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @override\n     * @returns {string}\n     */\n    toString() {\n        return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return ProtoTopicID.encode(this._toProtobuf()).finish();\n    }\n}\n","import Long from \"long\";\n\nexport default class ExchangeRate {\n    /**\n     * @private\n     * @param {object} props\n     * @param {number} props.hbars\n     * @param {number} props.cents\n     * @param {Date} props.expirationTime\n     */\n    constructor(props) {\n        /**\n         * Denotes Hbar equivalent to cents (USD)\n         *\n         * @readonly\n         * @type {number}\n         */\n        this.hbars = props.hbars;\n\n        /**\n         * Denotes cents (USD) equivalent to Hbar\n         *\n         * @readonly\n         * @type {number}\n         */\n        this.cents = props.cents;\n\n        /**\n         * Expiration time of this exchange rate\n         *\n         * @readonly\n         * @type {Date}\n         */\n        this.expirationTime = props.expirationTime;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {import(\"@hashgraph/proto\").IExchangeRate} rate\n     * @returns {ExchangeRate}\n     */\n    static _fromProtobuf(rate) {\n        return new ExchangeRate({\n            hbars: /** @type {number} */ (rate.hbarEquiv),\n            cents: /** @type {number} */ (rate.centEquiv),\n            expirationTime: new Date(\n                rate.expirationTime != null\n                    ? rate.expirationTime.seconds != null\n                        ? rate.expirationTime.seconds instanceof Long\n                            ? rate.expirationTime.seconds.toInt()\n                            : rate.expirationTime.seconds\n                        : 0 * 1000\n                    : 0 * 1000\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {import(\"@hashgraph/proto\").IExchangeRate}\n     */\n    _toProtobuf() {\n        return {\n            hbarEquiv: this.hbars,\n            centEquiv: this.cents,\n            expirationTime: {\n                seconds: Long.fromNumber(this.expirationTime.getSeconds()),\n            },\n        };\n    }\n}\n","import AccountId from \"../account/AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport FileId from \"../file/FileId.js\";\nimport TopicId from \"../topic/TopicId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport ExchangeRate from \"../ExchangeRate.js\";\nimport Status from \"../Status.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * The consensus result for a transaction, which might not be currently known,\n * or may succeed or fail.\n */\nexport default class TransactionReceipt {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Status} props.status\n     * @param {?AccountId} props.accountId\n     * @param {?FileId} props.fileId\n     * @param {?ContractId} props.contractId\n     * @param {?TopicId} props.topicId\n     * @param {?TokenId} props.tokenId\n     * @param {?ExchangeRate} props.exchangeRate\n     * @param {?Long} props.topicSequenceNumber\n     * @param {?Uint8Array} props.topicRunningHash\n     * @param {?Long} props.totalSupply\n     */\n    constructor(props) {\n        /**\n         * Whether the transaction succeeded or failed (or is unknown).\n         *\n         * @readonly\n         */\n        this.status = props.status;\n\n        /**\n         * The account ID, if a new account was created.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * The file ID, if a new file was created.\n         *\n         * @readonly\n         */\n        this.fileId = props.fileId;\n\n        /**\n         * The contract ID, if a new contract was created.\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * The topic ID, if a new topic was created.\n         *\n         * @readonly\n         */\n        this.topicId = props.topicId;\n\n        /**\n         * The token ID, if a new token was created.\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The exchange rate of Hbars to cents (USD).\n         *\n         * @readonly\n         */\n        this.exchangeRate = props.exchangeRate;\n\n        /**\n         * Updated sequence number for a consensus service topic.\n         *\n         * @readonly\n         */\n        this.topicSequenceNumber = props.topicSequenceNumber;\n\n        /**\n         * Updated running hash for a consensus service topic.\n         *\n         * @readonly\n         */\n        this.topicRunningHash = props.topicRunningHash;\n\n        /**\n         * Updated total supply for a token\n         *\n         * @readonly\n         */\n        this.totalSupply = props.totalSupply;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ITransactionReceipt}\n     */\n    _toProtobuf() {\n        return {\n            status: this.status.valueOf(),\n\n            accountID:\n                this.accountId != null ? this.accountId._toProtobuf() : null,\n            fileID: this.fileId != null ? this.fileId._toProtobuf() : null,\n            contractID:\n                this.contractId != null ? this.contractId._toProtobuf() : null,\n            topicID: this.topicId != null ? this.topicId._toProtobuf() : null,\n            tokenID: this.topicId != null ? this.topicId._toProtobuf() : null,\n\n            topicRunningHash:\n                this.topicRunningHash == null ? null : this.topicRunningHash,\n\n            topicSequenceNumber: this.topicSequenceNumber,\n\n            exchangeRate: {\n                nextRate: null,\n                currentRate:\n                    this.exchangeRate != null\n                        ? this.exchangeRate._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransactionReceipt} receipt\n     * @returns {TransactionReceipt}\n     */\n    static _fromProtobuf(receipt) {\n        const exchangeRateSet = /** @type {proto.IExchangeRateSet} */ (receipt.exchangeRate);\n\n        return new TransactionReceipt({\n            status: Status._fromCode(\n                receipt.status != null ? receipt.status : 0\n            ),\n\n            accountId:\n                receipt.accountID != null\n                    ? AccountId._fromProtobuf(receipt.accountID)\n                    : null,\n\n            fileId:\n                receipt.fileID != null\n                    ? FileId._fromProtobuf(receipt.fileID)\n                    : null,\n\n            contractId:\n                receipt.contractID != null\n                    ? ContractId._fromProtobuf(receipt.contractID)\n                    : null,\n\n            topicId:\n                receipt.topicID != null\n                    ? TopicId._fromProtobuf(receipt.topicID)\n                    : null,\n\n            tokenId:\n                receipt.tokenID != null\n                    ? TokenId._fromProtobuf(receipt.tokenID)\n                    : null,\n\n            exchangeRate:\n                receipt.exchangeRate != null\n                    ? ExchangeRate._fromProtobuf(\n                          /** @type {proto.IExchangeRate} */\n                          (exchangeRateSet.currentRate)\n                      )\n                    : null,\n\n            topicSequenceNumber:\n                receipt.topicSequenceNumber == null\n                    ? null\n                    : Long.fromValue(receipt.topicSequenceNumber),\n\n            topicRunningHash:\n                receipt.topicRunningHash != null\n                    ? receipt.topicRunningHash\n                    : null,\n\n            totalSupply:\n                receipt.newTotalSupply != null ? receipt.newTotalSupply : null,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionReceipt}\n     */\n    static fromBytes(bytes) {\n        return TransactionReceipt._fromProtobuf(\n            proto.TransactionReceipt.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.TransactionReceipt.encode(this._toProtobuf()).finish();\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ITransactionReceipt} proto.ITransactionReceipt\n * @typedef {import(\"@hashgraph/proto\").ITransactionGetReceiptQuery} proto.ITransactionGetReceiptQuery\n * @typedef {import(\"@hashgraph/proto\").ITransactionGetReceiptResponse} proto.ITransactionGetReceiptResponse\n * @typedef {import(\"@hashgraph/proto\").ResponseCodeEnum} proto.ResponseCodeEnum\n */\n\n/**\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<TransactionReceipt>}\n */\nexport default class TransactionReceiptQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {TransactionId | string} [props.transactionId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TransactionId}\n         */\n        this._transactionId = null;\n\n        if (props.transactionId != null) {\n            this.setTransactionId(props.transactionId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {TransactionReceiptQuery}\n     */\n    static _fromProtobuf(query) {\n        const receipt = /** @type {proto.ITransactionGetReceiptQuery} */ (query.transactionGetReceipt);\n\n        return new TransactionReceiptQuery({\n            transactionId: receipt.transactionID\n                ? TransactionId._fromProtobuf(receipt.transactionID)\n                : undefined,\n        });\n    }\n\n    /**\n     * @returns {?TransactionId}\n     */\n    get transactionId() {\n        return this._transactionId;\n    }\n\n    /**\n     * Set the transaction ID for which the receipt is being requested.\n     *\n     * @param {TransactionId | string} transactionId\n     * @returns {this}\n     */\n    setTransactionId(transactionId) {\n        this._transactionId =\n            transactionId instanceof TransactionId\n                ? transactionId\n                : TransactionId.fromString(transactionId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {boolean}\n     */\n    _isPaymentRequired() {\n        return false;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @param {Status} responseStatus\n     * @param {proto.IResponse} response\n     * @returns {boolean}\n     */\n    _shouldRetry(responseStatus, response) {\n        switch (responseStatus) {\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n                return true;\n\n            default:\n            // continue to checking receipt status\n        }\n\n        const transactionGetReceipt = /** @type {proto.ITransactionGetReceiptResponse} */ (response.transactionGetReceipt);\n        const receipt = /** @type {proto.ITransactionReceipt} */ (transactionGetReceipt.receipt);\n        const receiptStatusCode = /** @type {proto.ResponseCodeEnum} */ (receipt.status);\n        const receiptStatus = Status._fromCode(receiptStatusCode);\n\n        switch (receiptStatus) {\n            case Status.Ok:\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n                return true;\n\n            default:\n            // looks like its either success or some other error\n        }\n\n        return false;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getTransactionReceipts(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const transactionGetReceipt = /** @type {proto.ITransactionGetReceiptResponse} */ (response.transactionGetReceipt);\n        return /** @type {proto.IResponseHeader} */ (transactionGetReceipt.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {proto.IQuery} request\n     * @returns {Promise<TransactionReceipt>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const transactionGetReceipt = /** @type {proto.ITransactionGetReceiptResponse} */ (response.transactionGetReceipt);\n        const receipt = /** @type {proto.ITransactionReceipt} */ (transactionGetReceipt.receipt);\n\n        return Promise.resolve(TransactionReceipt._fromProtobuf(receipt));\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            transactionGetReceipt: {\n                header,\n                transactionID:\n                    this._transactionId != null\n                        ? this._transactionId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"transactionGetReceipt\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransactionReceiptQuery._fromProtobuf\n);\n","import AccountId from \"./account/AccountId.js\";\nimport Hbar from \"./Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency transfer.\n */\nexport default class Transfer {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {AccountId | string} props.accountId\n     * @param {number | string | Long | BigNumber | Hbar} props.amount\n     */\n    constructor(props) {\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         *\n         * @readonly\n         */\n        this.accountId =\n            props.accountId instanceof AccountId\n                ? props.accountId\n                : AccountId.fromString(props.accountId);\n\n        /**\n         * The amount of tinybars that the account sends(negative) or receives(positive).\n         *\n         * @readonly\n         */\n        this.amount =\n            props.amount instanceof Hbar\n                ? props.amount\n                : new Hbar(props.amount);\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IAccountAmount} transfer\n     * @returns {Transfer}\n     */\n    static _fromProtobuf(transfer) {\n        return new Transfer({\n            accountId: AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (transfer.accountID)\n            ),\n            amount: Hbar.fromTinybars(\n                transfer.amount != null ? transfer.amount : 0\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IAccountAmount}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            amount: this.amount.toTinybars(),\n        };\n    }\n}\n","import ContractId from \"./ContractId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IContractLoginfo} proto.IContractLoginfo\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n */\n\n/**\n * The log information for an event returned by a smart contract function call. One function call\n * may return several such events.\n */\nexport default class ContractLogInfo {\n    /**\n     * @param {object} props\n     * @param {ContractId} props.contractId\n     * @param {Uint8Array} props.bloom\n     * @param {Uint8Array[]} props.topics\n     * @param {Uint8Array} props.data\n     */\n    constructor(props) {\n        /**\n         * Address of a contract that emitted the event.\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * Bloom filter for a particular log.\n         *\n         * @readonly\n         */\n        this.bloom = props.bloom;\n\n        /**\n         * Topics of a particular event.\n         *\n         * @readonly\n         */\n        this.topics = props.topics;\n\n        /**\n         * Event data.\n         *\n         * @readonly\n         */\n        this.data = props.data;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IContractLoginfo} info\n     * @returns {ContractLogInfo}\n     */\n    static _fromProtobuf(info) {\n        return new ContractLogInfo({\n            contractId: ContractId._fromProtobuf(\n                /** @type {proto.IContractID} */ (info.contractID)\n            ),\n            bloom: info.bloom != null ? info.bloom : new Uint8Array(),\n            topics: info.topic != null ? info.topic : [],\n            data: info.data != null ? info.data : new Uint8Array(),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IContractLoginfo}\n     */\n    _toProtobuf() {\n        return {\n            contractID: this.contractId._toProtobuf(),\n            bloom: this.bloom,\n            topic: this.topics,\n            data: this.data,\n        };\n    }\n}\n","/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nexport function decode(data) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    return new TextDecoder().decode(data);\n}\n\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nexport function encode(text) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    return new TextEncoder().encode(text);\n}\n","import ContractLogInfo from \"./ContractLogInfo.js\";\nimport ContractId from \"./ContractId.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IContractFunctionResult} proto.IContractFunctionResult\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n */\n/**\n * The result returned by a call to a smart contract function. This is part of the response to\n * a ContractCallLocal query, and is in the record for a ContractCall or ContractCreateInstance\n * transaction. The ContractCreateInstance transaction record has the results of the call to\n * the constructor.\n */\nexport default class ContractFunctionResult {\n    /**\n     * Constructor isn't part of the stable API\n     *\n     * @param {object} result\n     * @param {?ContractId} result.contractId\n     * @param {?string} result.errorMessage\n     * @param {Uint8Array} result.bloom\n     * @param {Long} result.gasUsed\n     * @param {ContractLogInfo[]} result.logs\n     * @param {Uint8Array} result.bytes\n     */\n    constructor(result) {\n        /**\n         * The smart contract instance whose function was called.\n         */\n        this.contractId = result.contractId;\n\n        this.bytes = result.bytes;\n\n        /**\n         * Message In case there was an error during smart contract execution.\n         */\n        this.errorMessage = result.errorMessage;\n\n        /**\n         * Bloom filter for record\n         */\n        this.bloom = result.bloom;\n\n        /**\n         * Units of gas used  to execute contract.\n         */\n        this.gasUsed = result.gasUsed;\n\n        /**\n         * The log info for events returned by the function.\n         */\n        this.logs = result.logs;\n    }\n\n    /**\n     * @param {proto.IContractFunctionResult} result\n     * @returns {ContractFunctionResult}\n     */\n    static _fromProtobuf(result) {\n        const contractId = /** @type {proto.IContractID | null} */ (result.contractID);\n        const gas = /** @type {Long | number} */ (result.gasUsed);\n\n        return new ContractFunctionResult({\n            bytes: /** @type {Uint8Array} */ (result.contractCallResult),\n            contractId:\n                contractId != null\n                    ? ContractId._fromProtobuf(contractId)\n                    : null,\n            errorMessage:\n                result.errorMessage != null ? result.errorMessage : null,\n            bloom: /** @type {Uint8Array} */ (result.bloom),\n            gasUsed: gas instanceof Long ? gas : Long.fromValue(gas),\n            logs: (result.logInfo != null ? result.logInfo : []).map((info) =>\n                ContractLogInfo._fromProtobuf(info)\n            ),\n        });\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    asBytes() {\n        return this.bytes;\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {string}\n     */\n    getString(index) {\n        return utf8.decode(this.getBytes(index));\n    }\n\n    /**\n     * @private\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    getBytes(index) {\n        // Len should never be larger than Number.MAX\n        // index * 32 is the position of the lenth\n        // (index + 1) * 32 onward to (index + 1) * 32 + len will be the elements of the array\n        // Arrays in solidity cannot be longer than 1024:\n        // https://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html\n        const offset = this.getInt32(index);\n        const len = new DataView(\n            this.bytes.buffer,\n            this.bytes.byteOffset + offset + 28,\n            4\n        ).getInt32(0);\n\n        return this.bytes.subarray(offset + 32, offset + 32 + len);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    getBytes32(index) {\n        return this.bytes.subarray(\n            (index != null ? index : 0) * 32,\n            (index != null ? index : 0) * 32 + 32\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {boolean}\n     */\n    getBool(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31] !== 0;\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt8(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31];\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt32(index) {\n        // .getInt32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        return new DataView(\n            this.bytes.buffer,\n            this.bytes.byteOffset + (index != null ? index : 0) * 32 + 28,\n            4\n        ).getInt32(0);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt64(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(24, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt256(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index != null ? index : 0)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint8(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31];\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint32(index) {\n        // .getUint32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        return new DataView(\n            this.bytes.buffer,\n            this.bytes.byteOffset + (index != null ? index : 0) * 32 + 28,\n            4\n        ).getUint32(0);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint64(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(24, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint256(index) {\n        return new BigNumber(hex.encode(this._getBytes32(index)), 16);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {string}\n     */\n    getAddress(index) {\n        return hex.encode(\n            this.bytes.subarray(\n                (index != null ? index : 0) * 32 + 12,\n                (index != null ? index : 0) * 32 + 32\n            )\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    _getBytes32(index) {\n        return this.bytes.subarray(\n            (index != null ? index : 0) * 32,\n            (index != null ? index : 0) * 32 + 32\n        );\n    }\n}\n","import AccountId from \"../account/AccountId.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @augments {ObjectMap<AccountId, Long>}\n */\nexport default class TokenTransferAccountMap extends ObjectMap {\n    constructor() {\n        super((s) => AccountId.fromString(s));\n    }\n}\n","import TokenId from \"../token/TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenTransferAccountMap from \"./TokenTransferAccountMap.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITokenTransferList} proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @augments {ObjectMap<TokenId, TokenTransferAccountMap>}\n */\nexport default class TokenTransferMap extends ObjectMap {\n    constructor() {\n        super((s) => TokenId.fromString(s));\n    }\n\n    /**\n     * @internal\n     * @param {TokenId} tokenId\n     * @param {AccountId} accountId\n     * @param {Long} amount\n     */\n    __set(tokenId, accountId, amount) {\n        const token = tokenId.toString();\n\n        let _map = this._map.get(token);\n        if (_map == null) {\n            _map = new TokenTransferAccountMap();\n            this._map.set(token, _map);\n            this.__map.set(tokenId, _map);\n        }\n\n        _map._set(accountId, amount);\n    }\n\n    /**\n     * @param {proto.ITokenTransferList[]} transfers\n     * @returns {TokenTransferMap}\n     */\n    static _fromProtobuf(transfers) {\n        const tokenTransfersMap = new TokenTransferMap();\n\n        for (const transfer of transfers) {\n            const token = TokenId._fromProtobuf(\n                /** @type {proto.ITokenID} */ (transfer.token)\n            );\n\n            for (const aa of transfer.transfers != null\n                ? transfer.transfers\n                : []) {\n                const account = AccountId._fromProtobuf(\n                    /** @type {proto.IAccountID} */ (aa.accountID)\n                );\n\n                tokenTransfersMap.__set(\n                    token,\n                    account,\n                    /** @type {Long} */ (aa.amount)\n                );\n            }\n        }\n\n        return tokenTransfersMap;\n    }\n\n    /**\n     * @returns {proto.ITokenTransferList[]}\n     */\n    _toProtobuf() {\n        /** @type {proto.ITokenTransferList[]} */\n        const tokenTransferList = [];\n\n        for (const [tokenId, value] of this) {\n            /** @type {proto.IAccountAmount[]} */\n            const transfers = [];\n\n            for (const [accountId, amount] of value) {\n                transfers.push({\n                    accountID: accountId._toProtobuf(),\n                    amount: amount,\n                });\n            }\n\n            tokenTransferList.push({\n                token: tokenId._toProtobuf(),\n                transfers: transfers,\n            });\n        }\n\n        return tokenTransferList;\n    }\n}\n","import TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Hbar from \"../Hbar.js\";\nimport Transfer from \"../Transfer.js\";\nimport ContractFunctionResult from \"../contract/ContractFunctionResult.js\";\nimport TokenTransferMap from \"../account/TokenTransferMap.js\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * Response when the client sends the node TransactionGetRecordResponse.\n */\nexport default class TransactionRecord {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ContractFunctionResult} [props.contractFunctionResult]\n     * @param {TransactionReceipt} props.receipt\n     * @param {Uint8Array} props.transactionHash\n     * @param {Timestamp} props.consensusTimestampstamp\n     * @param {TransactionId} props.transactionId\n     * @param {string} props.transactionMemo\n     * @param {Hbar} props.transactionFee\n     * @param {Transfer[]} props.transfers\n     * @param {TokenTransferMap} props.tokenTransfers\n     */\n    constructor(props) {\n        /**\n         * The status (reach consensus, or failed, or is unknown) and the ID of\n         * any new account/file/instance created.\n         *\n         * @readonly\n         */\n        this.receipt = props.receipt;\n\n        /**\n         * The hash of the Transaction that executed (not the hash of any Transaction that failed\n         * for having a duplicate TransactionID).\n         *\n         * @readonly\n         */\n        this.transactionHash = props.transactionHash;\n\n        /**\n         * The consensus timestamp (or null if didn't reach consensus yet).\n         *\n         * @readonly\n         */\n        this.consensusTimestampstamp = props.consensusTimestampstamp;\n\n        /**\n         * The ID of the transaction this record represents.\n         *\n         * @readonly\n         */\n        this.transactionId = props.transactionId;\n\n        /**\n         * The memo that was submitted as part of the transaction (max 100 bytes).\n         *\n         * @readonly\n         */\n        this.transactionMemo = props.transactionMemo;\n\n        /**\n         * The actual transaction fee charged,\n         * not the original transactionFee value from TransactionBody.\n         *\n         * @readonly\n         */\n        this.transactionFee = props.transactionFee;\n\n        /**\n         * All hbar transfers as a result of this transaction, such as fees, or transfers performed\n         * by the transaction, or by a smart contract it calls, or by the creation of threshold\n         * records that it triggers.\n         *\n         * @readonly\n         */\n        this.transfers = props.transfers;\n\n        /**\n         * Record of the value returned by the smart contract function or constructor.\n         *\n         * @readonly\n         */\n        this.contractFunctionResult =\n            props.contractFunctionResult != null\n                ? props.contractFunctionResult\n                : null;\n\n        /**\n         * All the token transfers from this account\n         *\n         * @readonly\n         */\n        this.tokenTransfers = props.tokenTransfers;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ITransactionRecord}\n     */\n    _toProtobuf() {\n        return {\n            receipt: this.receipt._toProtobuf(),\n\n            transactionHash:\n                this.transactionHash != null ? this.transactionHash : null,\n            consensusTimestamp:\n                this.consensusTimestampstamp != null\n                    ? this.consensusTimestampstamp._toProtobuf()\n                    : null,\n            transactionID:\n                this.transactionId != null\n                    ? this.transactionId._toProtobuf()\n                    : null,\n            memo: this.transactionMemo != null ? this.transactionMemo : null,\n\n            transactionFee:\n                this.transactionFee != null\n                    ? this.transactionFee.toTinybars()\n                    : null,\n\n            contractCallResult:\n                this.contractFunctionResult != null\n                    ? this.contractFunctionResult\n                    : null,\n\n            contractCreateResult:\n                this.contractFunctionResult != null\n                    ? this.contractFunctionResult\n                    : null,\n\n            transferList:\n                this.transfers != null\n                    ? {\n                          accountAmounts: this.transfers.map((transfer) =>\n                              transfer._toProtobuf()\n                          ),\n                      }\n                    : null,\n            tokenTransferLists: this.tokenTransfers._toProtobuf(),\n        };\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransactionRecord} record\n     * @returns {TransactionRecord}\n     */\n    static _fromProtobuf(record) {\n        const contractFunctionResult =\n            record.contractCallResult != null\n                ? ContractFunctionResult._fromProtobuf(\n                      record.contractCallResult\n                  )\n                : record.contractCreateResult != null\n                ? ContractFunctionResult._fromProtobuf(\n                      record.contractCreateResult\n                  )\n                : undefined;\n\n        return new TransactionRecord({\n            receipt: TransactionReceipt._fromProtobuf(\n                /** @type {proto.ITransactionReceipt} */ (record.receipt)\n            ),\n            transactionHash:\n                record.transactionHash != null\n                    ? record.transactionHash\n                    : new Uint8Array(),\n            consensusTimestampstamp: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */\n                (record.consensusTimestamp)\n            ),\n            transactionId: TransactionId._fromProtobuf(\n                /** @type {proto.ITransactionID} */ (record.transactionID)\n            ),\n            transactionMemo: record.memo != null ? record.memo : \"\",\n            transactionFee: Hbar.fromTinybars(\n                record.transactionFee != null ? record.transactionFee : 0\n            ),\n            transfers: (record.transferList != null\n                ? record.transferList.accountAmounts != null\n                    ? record.transferList.accountAmounts\n                    : []\n                : []\n            ).map((aa) => Transfer._fromProtobuf(aa)),\n            contractFunctionResult,\n            tokenTransfers: TokenTransferMap._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : []\n            ),\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionRecord}\n     */\n    static fromBytes(bytes) {\n        return TransactionRecord._fromProtobuf(\n            proto.TransactionRecord.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.TransactionRecord.encode(this._toProtobuf()).finish();\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TransactionRecord from \"./TransactionRecord.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Status from \"../Status.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").ITransactionRecord} proto.ITransactionRecord\n * @typedef {import(\"@hashgraph/proto\").ITransactionReceipt} proto.ITransactionReceipt\n * @typedef {import(\"@hashgraph/proto\").ITransactionGetRecordResponse} proto.ITransactionGetRecordResponse\n * @typedef {import(\"@hashgraph/proto\").ITransactionGetRecordQuery} proto.ITransactionGetRecordQuery\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ResponseCodeEnum} proto.ResponseCodeEnum\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<TransactionRecord>}\n */\nexport default class TransactionRecordQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {TransactionId} [props.transactionId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TransactionId}\n         */\n        this._transactionId = null;\n\n        if (props.transactionId != null) {\n            this.setTransactionId(props.transactionId);\n        }\n    }\n\n    /**\n     * @returns {?TransactionId}\n     */\n    get transactionId() {\n        return this._transactionId;\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {TransactionRecordQuery}\n     */\n    static _fromProtobuf(query) {\n        const record = /** @type {proto.ITransactionGetRecordQuery} */ (query.transactionGetRecord);\n\n        return new TransactionRecordQuery({\n            transactionId: record.transactionID\n                ? TransactionId._fromProtobuf(record.transactionID)\n                : undefined,\n        });\n    }\n\n    /**\n     * Set the transaction ID for which the record is being requested.\n     *\n     * @param {TransactionId} transactionId\n     * @returns {TransactionRecordQuery}\n     */\n    setTransactionId(transactionId) {\n        this._transactionId = transactionId;\n        return this;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @param {Status} responseStatus\n     * @param {proto.IResponse} response\n     * @returns {boolean}\n     */\n    _shouldRetry(responseStatus, response) {\n        switch (responseStatus) {\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n            case Status.RecordNotFound:\n                return true;\n\n            default:\n            // continue to checking receipt status\n        }\n\n        const transactionGetRecord = /** @type {proto.ITransactionGetRecordResponse} */ (response.transactionGetRecord);\n        const record = /** @type {proto.ITransactionRecord} */ (transactionGetRecord.transactionRecord);\n        const receipt = /** @type {proto.ITransactionReceipt} */ (record.receipt);\n        const receiptStatusCode = /** @type {proto.ResponseCodeEnum} */ (receipt.status);\n        const receiptStatus = Status._fromCode(receiptStatusCode);\n\n        switch (receiptStatus) {\n            case Status.Ok:\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n            case Status.RecordNotFound:\n                return true;\n\n            default:\n            // looks like its either success or some other error\n        }\n\n        return false;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getTxRecordByTxID(request);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const transactionGetRecord = /** @type {proto.ITransactionGetRecordResponse} */ (response.transactionGetRecord);\n        return /** @type {proto.IResponseHeader} */ (transactionGetRecord.header);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {Promise<TransactionRecord>}\n     */\n    _mapResponse(response) {\n        const record = /** @type {proto.ITransactionGetRecordResponse} */ (response.transactionGetRecord);\n\n        return Promise.resolve(\n            TransactionRecord._fromProtobuf(\n                /** @type {proto.ITransactionRecord} */ (record.transactionRecord)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            transactionGetRecord: {\n                header,\n                transactionID:\n                    this._transactionId != null\n                        ? this._transactionId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"transactionGetRecord\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransactionRecordQuery._fromProtobuf\n);\n","import ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceiptQuery from \"./TransactionReceiptQuery.js\";\nimport TransactionRecordQuery from \"./TransactionRecordQuery.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"./TransactionId.js\").default} TransactionId\n * @typedef {import(\"./TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./TransactionRecord.js\").default} TransactionRecord\n */\n\nexport default class TransactionResponse {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {AccountId} props.nodeId\n     * @param {Uint8Array} props.transactionHash\n     * @param {TransactionId} props.transactionId\n     */\n    constructor(props) {\n        /** @readonly */\n        this.nodeId = props.nodeId;\n\n        /** @readonly */\n        this.transactionHash = props.transactionHash;\n\n        /** @readonly */\n        this.transactionId = props.transactionId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {Promise<TransactionReceipt>}\n     */\n    async getReceipt(client) {\n        const receipt = await new TransactionReceiptQuery()\n            .setTransactionId(this.transactionId)\n            .setNodeAccountIds([this.nodeId])\n            .execute(client);\n\n        if (receipt.status !== Status.Success) {\n            throw new ReceiptStatusError({\n                transactionReceipt: receipt,\n                status: receipt.status,\n                transactionId: this.transactionId,\n            });\n        }\n\n        return receipt;\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {Promise<TransactionRecord>}\n     */\n    async getRecord(client) {\n        await this.getReceipt(client);\n\n        return new TransactionRecordQuery()\n            .setTransactionId(this.transactionId)\n            .setNodeAccountIds([this.nodeId])\n            .execute(client);\n    }\n}\n","/**\n * @param {Uint8Array} data\n * @returns {Promise<Uint8Array>}\n */\nexport async function digest(data) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\n    return new Uint8Array(await crypto.subtle.digest(\"SHA-384\", data));\n}\n","import AccountId from \"../account/AccountId.js\";\nimport * as sha384 from \"../cryptography/sha384.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @augments {ObjectMap<AccountId, Uint8Array>}\n */\nexport default class TransactionHashMap extends ObjectMap {\n    constructor() {\n        super((s) => AccountId.fromString(s));\n    }\n\n    /**\n     * @param {import(\"./Transaction.js\").default} transaction\n     * @returns {Promise<TransactionHashMap>}\n     */\n    static async _fromTransaction(transaction) {\n        const hashes = new TransactionHashMap();\n\n        for (let i = 0; i < transaction._nodeIds.length; i++) {\n            const nodeAccountId = transaction._nodeIds[i];\n            const tx = transaction._transactions[i];\n            const hash = await sha384.digest(\n                /** @type {Uint8Array} */ (tx.signedTransactionBytes)\n            );\n\n            hashes._set(nodeAccountId, hash);\n        }\n\n        return hashes;\n    }\n}\n","import { PublicKey } from \"@hashgraph/cryptography\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @augments {ObjectMap<PublicKey, Uint8Array>}\n */\nexport default class NodeAccountIdSignatureMap extends ObjectMap {\n    constructor() {\n        super((s) => PublicKey.fromString(s));\n    }\n\n    /**\n     * @param {import(\"@hashgraph/proto\").ISignatureMap} sigMap\n     * @returns {NodeAccountIdSignatureMap}\n     */\n    static _fromTransactionSigMap(sigMap) {\n        const signatures = new NodeAccountIdSignatureMap();\n\n        const sigPairs = sigMap.sigPair != null ? sigMap.sigPair : [];\n\n        for (const sigPair of sigPairs) {\n            if (sigPair.pubKeyPrefix != null && sigPair.ed25519 != null) {\n                signatures._set(\n                    PublicKey.fromBytes(sigPair.pubKeyPrefix),\n                    sigPair.ed25519\n                );\n            }\n        }\n\n        return signatures;\n    }\n}\n","import NodeAccountIdSignatureMap from \"./NodeAccountIdSignatureMap.js\";\nimport ObjectMap from \"../ObjectMap.js\";\nimport AccountId from \"../account/AccountId.js\";\n\n/**\n * @augments {ObjectMap<AccountId, NodeAccountIdSignatureMap>}\n */\nexport default class SignatureMap extends ObjectMap {\n    constructor() {\n        super((s) => AccountId.fromString(s));\n    }\n\n    /**\n     * @param {import(\"./Transaction.js\").default} transaction\n     * @returns {SignatureMap}\n     */\n    static _fromTransaction(transaction) {\n        const signatures = new SignatureMap();\n\n        if (transaction._nodeIds.length == 0) {\n            return signatures;\n        }\n\n        for (let i = 0; i < transaction._nodeIds.length; i++) {\n            const sigMap = transaction._transactions[i].sigMap;\n            if (sigMap != null) {\n                signatures._set(\n                    transaction._nodeIds[i],\n                    NodeAccountIdSignatureMap._fromTransactionSigMap(sigMap)\n                );\n            }\n        }\n\n        return signatures;\n    }\n}\n","import Hbar from \"../Hbar.js\";\nimport TransactionResponse from \"./TransactionResponse.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport TransactionHashMap from \"./TransactionHashMap.js\";\nimport SignatureMap from \"./SignatureMap.js\";\nimport Executable from \"../Executable.js\";\nimport Status from \"../Status.js\";\nimport Long from \"long\";\nimport * as sha384 from \"../cryptography/sha384.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport {\n    SignedTransaction as ProtoSignedTransaction,\n    TransactionList as ProtoTransactionList,\n    TransactionBody as ProtoTransactionBody,\n} from \"@hashgraph/proto\";\nimport AccountId from \"../account/AccountId.js\";\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").ITransactionList} proto.ITransactionList\n * @typedef {import(\"@hashgraph/proto\").ITransactionID} proto.ITransactionID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ResponseCodeEnum} proto.ResponseCodeEnum\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").PrivateKey} PrivateKey\n * @typedef {import(\"@hashgraph/cryptography\").PublicKey} PublicKey\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n// 90 days (in seconds)\nexport const DEFAULT_AUTO_RENEW_PERIOD = Long.fromValue(7776000);\n\n// maximum value of i64 (so there is never a record generated)\nexport const DEFAULT_RECORD_THRESHOLD = Hbar.fromTinybars(\n    Long.fromString(\"9223372036854775807\")\n);\n\n// 120 seconds\nconst DEFAULT_TRANSACTION_VALID_DURATION = 120;\n\nexport const CHUNK_SIZE = 4096;\n\n/**\n * @type {Map<NonNullable<proto.TransactionBody[\"data\"]>, (transactions: proto.ITransaction[], signedTransactions: proto.ISignedTransaction[], transactionIds: TransactionId[], nodeIds: AccountId[], bodies: proto.TransactionBody[]) => Transaction>}\n */\nexport const TRANSACTION_REGISTRY = new Map();\n\n/**\n * Base class for all transactions that may be submitted to Hedera.\n *\n * @abstract\n * @augments {Executable<proto.ITransaction, proto.ITransactionResponse, TransactionResponse>}\n */\nexport default class Transaction extends Executable {\n    // A SDK transaction is composed of multiple, raw protobuf transactions.\n    // These should be functionally identicasl, with the exception of pointing to\n    // different nodes.\n\n    // When retrying a transaction after a network error or retry-able\n    // status response, we try a different transaction and thus a different node.\n\n    constructor() {\n        super();\n\n        /**\n         * List of proto transactions that have been built from this SDK\n         * transaction. Each one should share the same transaction ID.\n         *\n         * @internal\n         * @type {proto.ITransaction[]}\n         */\n        this._transactions = [];\n\n        /**\n         * List of proto transactions that have been built from this SDK\n         * transaction. Each one should share the same transaction ID.\n         *\n         * @internal\n         * @type {proto.ISignedTransaction[]}\n         */\n        this._signedTransactions = [];\n\n        /**\n         * Set of public keys (as string) who have signed this transaction so\n         * we do not allow them to sign it again.\n         *\n         * @private\n         * @type {Set<string>}\n         */\n        this._signerPublicKeys = new Set();\n\n        /**\n         * @protected\n         * @type {number}\n         */\n        this._nextTransactionIndex = 0;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._transactionValidDuration = DEFAULT_TRANSACTION_VALID_DURATION;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._maxTransactionFee = new Hbar(2);\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._transactionMemo = \"\";\n\n        /**\n         * @protected\n         * @type {TransactionId[]}\n         */\n        this._transactionIds = [];\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Transaction}\n     */\n    static fromBytes(bytes) {\n        const signedTransactions = [];\n        const transactionIds = [];\n        const nodeIds = [];\n\n        /** @type {string[]} */\n        const transactionIdStrings = [];\n\n        /** @type {string[]} */\n        const nodeIdStrings = [];\n\n        const bodies = [];\n\n        const list = ProtoTransactionList.decode(bytes).transactionList;\n\n        for (const transaction of list) {\n            if (transaction.signedTransactionBytes == null) {\n                throw new Error(\"Transaction.signedTransactionBytes are null\");\n            }\n\n            const signedTransaction = ProtoSignedTransaction.decode(\n                transaction.signedTransactionBytes\n            );\n            signedTransactions.push(signedTransaction);\n\n            const body = ProtoTransactionBody.decode(\n                signedTransaction.bodyBytes\n            );\n\n            if (body.data == null) {\n                throw new Error(\"(BUG) body.data was not set in the protobuf\");\n            }\n\n            bodies.push(body);\n\n            const transactionId = TransactionId._fromProtobuf(\n                /** @type {proto.ITransactionID} */ (body.transactionID)\n            );\n\n            if (!transactionIdStrings.includes(transactionId.toString())) {\n                transactionIds.push(transactionId);\n                transactionIdStrings.push(transactionId.toString());\n            }\n\n            const nodeAccountId = AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (body.nodeAccountID)\n            );\n\n            if (!nodeIdStrings.includes(nodeAccountId.toString())) {\n                nodeIds.push(nodeAccountId);\n                nodeIdStrings.push(nodeAccountId.toString());\n            }\n        }\n\n        const body = bodies[0];\n\n        if (body == null || body.data == null) {\n            throw new Error(\n                \"No transaction found in bytes or failed to decode TransactionBody\"\n            );\n        }\n\n        const fromProtobuf = TRANSACTION_REGISTRY.get(body.data);\n\n        if (fromProtobuf == null) {\n            throw new Error(\n                `(BUG) Transaction.fromBytes() not implemented for type ${body.data}`\n            );\n        }\n\n        return fromProtobuf(\n            list,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @template {Transaction} TransactionT\n     * @param {TransactionT} transaction\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TransactionT}\n     */\n    static _fromProtobufTransactions(\n        transaction,\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n\n        transaction._transactions = transactions;\n        transaction._signedTransactions = signedTransactions;\n        transaction._transactionIds = transactionIds;\n        transaction._nodeIds = nodeIds;\n        transaction._nextNodeIndex = 0;\n        transaction._nextTransactionIndex = 0;\n        transaction._transactionValidDuration =\n            body.transactionValidDuration != null\n                ? /** @type {Long} */ (body.transactionValidDuration\n                      .seconds).toInt()\n                : DEFAULT_TRANSACTION_VALID_DURATION;\n        transaction._maxTransactionFee =\n            body.transactionFee != null\n                ? Hbar.fromTinybars(body.transactionFee)\n                : new Hbar(0);\n        transaction._transactionMemo = body.memo != null ? body.memo : \"\";\n\n        for (let i = 0; i < nodeIds.length; i++) {\n            const signedTransaction = signedTransactions[i];\n            if (\n                signedTransaction.sigMap != null &&\n                signedTransaction.sigMap.sigPair != null\n            ) {\n                for (const sigPair of signedTransaction.sigMap.sigPair) {\n                    transaction._signerPublicKeys.add(\n                        hex.encode(\n                            /** @type {Uint8Array} */ (sigPair.pubKeyPrefix)\n                        )\n                    );\n                }\n            }\n        }\n\n        return transaction;\n    }\n\n    /**\n     * @override\n     * @param {AccountId[]} nodeIds\n     * @returns {this}\n     */\n    setNodeAccountIds(nodeIds) {\n        this._requireNotFrozen();\n        super.setNodeAccountIds(nodeIds);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get transactionValidDuration() {\n        return this._transactionValidDuration;\n    }\n\n    /**\n     * Sets the duration (in seconds) that this transaction is valid for.\n     *\n     * This is defaulted to 120 seconds (from the time its executed).\n     *\n     * @param {number} validDuration\n     * @returns {this}\n     */\n    setTransactionValidDuration(validDuration) {\n        this._requireNotFrozen();\n        this._transactionValidDuration = validDuration;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get maxTransactionFee() {\n        return this._maxTransactionFee;\n    }\n\n    /**\n     * Set the maximum transaction fee the operator (paying account)\n     * is willing to pay.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} maxTransactionFee\n     * @returns {this}\n     */\n    setMaxTransactionFee(maxTransactionFee) {\n        this._requireNotFrozen();\n        this._maxTransactionFee =\n            maxTransactionFee instanceof Hbar\n                ? maxTransactionFee\n                : new Hbar(maxTransactionFee);\n\n        return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get transactionMemo() {\n        return this._transactionMemo;\n    }\n\n    /**\n     * Set a note or description to be recorded in the transaction\n     * record (maximum length of 100 bytes).\n     *\n     * @param {string} transactionMemo\n     * @returns {this}\n     */\n    setTransactionMemo(transactionMemo) {\n        this._requireNotFrozen();\n        this._transactionMemo = transactionMemo;\n\n        return this;\n    }\n\n    /**\n     * @returns {TransactionId}\n     */\n    get transactionId() {\n        if (this._transactionIds.length === 0) {\n            throw new Error(\n                \"transaction must have been frozen before getting the transaction ID, try calling `freeze`\"\n            );\n        }\n\n        return this._transactionIds[this._nextTransactionIndex];\n    }\n\n    /**\n     * Set the ID for this transaction.\n     *\n     * The transaction ID includes the operator's account ( the account paying the transaction\n     * fee). If two transactions have the same transaction ID, they won't both have an effect. One\n     * will complete normally and the other will fail with a duplicate transaction status.\n     *\n     * Normally, you should not use this method. Just before a transaction is executed, a\n     * transaction ID will be generated from the operator on the client.\n     *\n     * @param {TransactionId} transactionId\n     * @returns {this}\n     */\n    setTransactionId(transactionId) {\n        this._requireNotFrozen();\n        this._transactionIds = [transactionId];\n\n        return this;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @returns {Promise<this>}\n     */\n    sign(privateKey) {\n        return this.signWith(privateKey.publicKey, (message) =>\n            Promise.resolve(privateKey.sign(message))\n        );\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n     * @returns {Promise<this>}\n     */\n    async signWith(publicKey, transactionSigner) {\n        const publicKeyData = publicKey.toBytes();\n\n        // note: this omits the DER prefix on purpose because Hedera doesn't\n        // support that in the protobuf. this means that we would fail\n        // to re-inflate [this._signerPublicKeys] during [fromBytes] if we used DER\n        // prefixes here\n        const publicKeyHex = hex.encode(publicKeyData);\n\n        if (this._signerPublicKeys.has(publicKeyHex)) {\n            // this public key has already signed this transaction\n            return this;\n        }\n\n        this._transactions = [];\n\n        for (const signedTransaction of this._signedTransactions) {\n            const bodyBytes = /** @type {Uint8Array} */ (signedTransaction.bodyBytes);\n            const signature = await transactionSigner(bodyBytes);\n\n            if (signedTransaction.sigMap == null) {\n                signedTransaction.sigMap = {};\n            }\n\n            if (signedTransaction.sigMap.sigPair == null) {\n                signedTransaction.sigMap.sigPair = [];\n            }\n\n            signedTransaction.sigMap.sigPair.push({\n                pubKeyPrefix: publicKeyData,\n                ed25519: signature,\n            });\n        }\n\n        this._signerPublicKeys.add(publicKeyHex);\n\n        return this;\n    }\n\n    /**\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<this>}\n     */\n    signWithOperator(client) {\n        const operator = client._operator;\n\n        if (operator == null) {\n            throw new Error(\n                \"`client` must have an operator to sign with the operator\"\n            );\n        }\n\n        if (!this._isFrozen()) {\n            this.freezeWith(client);\n        }\n\n        return this.signWith(operator.publicKey, operator.transactionSigner);\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} signature\n     * @returns {this}\n     */\n    addSignature(publicKey, signature) {\n        const publicKeyData = publicKey.toBytes();\n        const publicKeyHex = hex.encode(publicKeyData);\n\n        if (this._signerPublicKeys.has(publicKeyHex)) {\n            // this public key has already signed this transaction\n            return this;\n        }\n\n        this._transactions = [];\n\n        for (const transaction of this._signedTransactions) {\n            if (transaction.sigMap == null) {\n                transaction.sigMap = {};\n            }\n\n            if (transaction.sigMap.sigPair == null) {\n                transaction.sigMap.sigPair = [];\n            }\n\n            transaction.sigMap.sigPair.push({\n                pubKeyPrefix: publicKeyData,\n                ed25519: signature,\n            });\n        }\n\n        this._signerPublicKeys.add(publicKeyHex);\n\n        return this;\n    }\n\n    /**\n     * @returns {SignatureMap}\n     */\n    getSignatures() {\n        return SignatureMap._fromTransaction(this);\n    }\n\n    /**\n     * Freeze this transaction from future modification to prepare for\n     * signing or serialization.\n     *\n     * @returns {this}\n     */\n    freeze() {\n        return this.freezeWith(null);\n    }\n\n    /**\n     * Freeze this transaction from further modification to prepare for\n     * signing or serialization.\n     *\n     * Will use the `Client`, if available, to generate a default Transaction ID and select 1/3\n     * nodes to prepare this transaction for.\n     *\n     * @param {?import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {this}\n     */\n    freezeWith(client) {\n        if (client != null && this._maxTransactionFee == null) {\n            this._maxTransactionFee = client.maxTransactionFee;\n        }\n\n        if (client != null && this._transactionIds.length === 0) {\n            const operator = client._operator;\n\n            if (operator == null) {\n                throw new Error(\n                    \"`client` must have an `operator` or `transactionId` must be set\"\n                );\n            }\n\n            this.setTransactionId(TransactionId.generate(operator.accountId));\n        }\n\n        if (this._transactionIds.length === 0) {\n            throw new Error(\n                \"`transactionId` must be set or `client` must be provided with `freezeWith`\"\n            );\n        }\n\n        if (this._nodeIds.length > 0) {\n            // Do nothing\n        } else if (client != null) {\n            this._nodeIds = client._network.getNodeAccountIdsForExecute();\n        } else {\n            throw new Error(\n                \"`nodeAccountId` must be set or `client` must be provided with `freezeWith`\"\n            );\n        }\n\n        this._signedTransactions = this._nodeIds.map((nodeId) =>\n            this._makeSignedTransaction(nodeId)\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        this._requireFrozen();\n\n        this._buildTransactions(this._signedTransactions.length);\n\n        return ProtoTransactionList.encode({\n            transactionList: this._transactions,\n        }).finish();\n    }\n\n    /**\n     * @returns {Promise<Uint8Array>}\n     */\n    getTransactionHash() {\n        this._requireFrozen();\n\n        this._buildTransactions(1);\n\n        return sha384.digest(\n            /** @type {Uint8Array} */ (this._transactions[0]\n                .signedTransactionBytes)\n        );\n    }\n\n    /**\n     * @returns {Promise<TransactionHashMap>}\n     */\n    getTransactionHashPerNode() {\n        this._requireFrozen();\n        this._buildTransactions(this._signedTransactions.length);\n        return TransactionHashMap._fromTransaction(this);\n    }\n\n    /**\n     * @returns {TransactionId}\n     */\n    _getTransactionId() {\n        return this.transactionId;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<void>}\n     */\n    async _beforeExecute(client) {\n        if (!this._isFrozen()) {\n            this.freezeWith(client);\n        }\n\n        // on execute, sign each transaction with the operator, if present\n        // and we are signing a transaction that used the default transaction ID\n\n        const transactionId = this.transactionId;\n        const operatorAccountId = client.operatorAccountId;\n\n        if (\n            operatorAccountId != null &&\n            operatorAccountId.equals(transactionId.accountId)\n        ) {\n            await this.signWithOperator(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @returns {proto.ITransaction}\n     */\n    _makeRequest() {\n        const index =\n            this._nextTransactionIndex * this._nodeIds.length +\n            this._nextNodeIndex;\n        this._buildTransactions(index + 1);\n        return this._transactions[index];\n    }\n\n    /**\n     * @param {number} untilIndex\n     * @private\n     */\n    _buildTransactions(untilIndex) {\n        for (let i = this._transactions.length; i < untilIndex; i++) {\n            this._transactions.push({\n                signedTransactionBytes: ProtoSignedTransaction.encode(\n                    this._signedTransactions[i]\n                ).finish(),\n            });\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.ITransactionResponse} response\n     * @returns {Status}\n     */\n    _mapResponseStatus(response) {\n        const { nodeTransactionPrecheckCode } = response;\n\n        return nodeTransactionPrecheckCode == null\n            ? Status.Ok\n            : Status._fromCode(nodeTransactionPrecheckCode);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @param {proto.ITransactionResponse} response\n     * @param {AccountId} nodeId\n     * @param {proto.ITransaction} request\n     * @returns {Promise<TransactionResponse>}\n     */\n    async _mapResponse(response, nodeId, request) {\n        const transactionHash = await sha384.digest(\n            /** @type {Uint8Array} */ (request.signedTransactionBytes)\n        );\n        const transactionId = this.transactionId;\n\n        this._nextTransactionIndex =\n            (this._nextTransactionIndex + 1) % this._transactionIds.length;\n\n        return new TransactionResponse({\n            nodeId,\n            transactionHash,\n            transactionId,\n        });\n    }\n\n    /**\n     * @override\n     * @returns {AccountId}\n     */\n    _getNodeAccountId() {\n        if (this._nodeIds.length === 0) {\n            throw new Error(\n                \"(BUG) Transaction::_getNodeAccountId called before transaction has been frozen\"\n            );\n        }\n\n        return this._nodeIds[this._nextNodeIndex % this._nodeIds.length];\n    }\n\n    /**\n     * @internal\n     * @param {?AccountId} nodeId\n     * @returns {proto.ISignedTransaction}\n     */\n    _makeSignedTransaction(nodeId) {\n        const body = this._makeTransactionBody(nodeId);\n        const bodyBytes = ProtoTransactionBody.encode(body).finish();\n\n        return {\n            bodyBytes,\n            sigMap: {\n                sigPair: [],\n            },\n        };\n    }\n\n    /**\n     * @private\n     * @param {?AccountId} nodeId\n     * @returns {proto.ITransactionBody}\n     */\n    _makeTransactionBody(nodeId) {\n        return {\n            [this._getTransactionDataCase()]: this._makeTransactionData(),\n            transactionFee:\n                this._maxTransactionFee != null\n                    ? this._maxTransactionFee.toTinybars()\n                    : null,\n            memo: this._transactionMemo,\n            transactionID:\n                this._transactionIds[this._nextTransactionIndex] != null\n                    ? this._transactionIds[\n                          this._nextTransactionIndex\n                      ]._toProtobuf()\n                    : null,\n            nodeAccountID: nodeId != null ? nodeId._toProtobuf() : null,\n            transactionValidDuration: {\n                seconds: Long.fromNumber(this._transactionValidDuration),\n            },\n        };\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @returns {object}\n     */\n    _makeTransactionData() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @protected\n     * @returns {boolean}\n     */\n    _isFrozen() {\n        return this._signedTransactions.length > 0;\n    }\n\n    /**\n     * @protected\n     */\n    _requireNotFrozen() {\n        if (this._isFrozen()) {\n            throw new Error(\n                \"transaction is immutable; it has at least one signature or has been explicitly frozen\"\n            );\n        }\n    }\n\n    /**\n     * @private\n     */\n    _requireFrozen() {\n        if (!this._isFrozen()) {\n            throw new Error(\n                \"transaction must have been frozen before calculating the hash will be stable, try calling `freeze`\"\n            );\n        }\n    }\n}\n","import { KeyList, PrivateKey, PublicKey } from \"@hashgraph/cryptography\";\nimport ContractId from \"../contract/ContractId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IKey} proto.IKey\n * @typedef {import(\"@hashgraph/proto\").IKeyList} proto.IKeyList\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n */\n\n/**\n * @param {Key} key\n * @returns {proto.IKey}\n */\nexport function keyToProtobuf(key) {\n    if (key instanceof PrivateKey) {\n        key = key.publicKey;\n    }\n\n    if (key instanceof PublicKey) {\n        return {\n            ed25519: key.toBytes(),\n        };\n    }\n\n    if (key instanceof KeyList) {\n        return {\n            keyList: keyListToProtobuf(key),\n        };\n    }\n\n    if (key instanceof ContractId) {\n        return {\n            contractID: key._toProtobuf(),\n        };\n    }\n\n    throw new Error(\n        `(BUG) keyToProtobuf: unsupported key type: ${key.constructor.name}`\n    );\n}\n\n/**\n * @param {KeyList} list\n * @returns {proto.IKeyList}\n */\nexport function keyListToProtobuf(list) {\n    const keys = [];\n\n    for (const key of list) {\n        keys.push(keyToProtobuf(key));\n    }\n\n    return {\n        keys,\n    };\n}\n\n/**\n * @param {proto.IKey} key\n * @returns {KeyList | PublicKey | ContractId}\n */\nexport function keyFromProtobuf(key) {\n    if (key.contractID != null) {\n        return ContractId._fromProtobuf(key.contractID);\n    }\n\n    if (key.ed25519 != null && key.ed25519.byteLength > 0) {\n        return PublicKey.fromBytes(key.ed25519);\n    }\n\n    if (key.thresholdKey != null && key.thresholdKey.threshold != null) {\n        const kl =\n            key.thresholdKey.keys != null\n                ? keyListFromProtobuf(key.thresholdKey.keys)\n                : new KeyList();\n\n        kl.setThreshold(key.thresholdKey.threshold);\n\n        return kl;\n    }\n\n    if (key.keyList != null) {\n        return keyListFromProtobuf(key.keyList);\n    }\n\n    throw new Error(\n        `(BUG) keyFromProtobuf: not implemented key case: ${JSON.stringify(\n            key\n        )}`\n    );\n}\n\n/**\n * @param {proto.IKeyList} keys\n * @returns {KeyList}\n */\nexport function keyListFromProtobuf(keys) {\n    if (keys.keys == null) {\n        return new KeyList();\n    }\n\n    return KeyList.from(keys.keys, keyFromProtobuf);\n}\n","import Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IDuration} proto.IDuration\n */\n\nexport default class Duration {\n    /**\n     * @param {Long | number} seconds\n     */\n    constructor(seconds) {\n        /**\n         * @readonly\n         * @type {Long}\n         */\n        this.seconds =\n            seconds instanceof Long ? seconds : Long.fromNumber(seconds);\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IDuration}\n     */\n    _toProtobuf() {\n        return {\n            seconds: this.seconds,\n        };\n    }\n\n    /**\n     * @internal\n     * @param {proto.IDuration} duration\n     * @returns {Duration}\n     */\n    static _fromProtobuf(duration) {\n        return new Duration(/** @type {Long} */ (duration.seconds));\n    }\n}\n","import Hbar from \"../Hbar.js\";\nimport AccountId from \"./AccountId.js\";\nimport Transaction, {\n    DEFAULT_AUTO_RENEW_PERIOD,\n    DEFAULT_RECORD_THRESHOLD,\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoCreateTransactionBody} proto.ICryptoCreateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../Timestamp.js\").default} Timestamp\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Create a new Hedera™ crypto-currency account.\n */\nexport default class AccountCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Key} [props.key]\n     * @param {number | string | Long | BigNumber | Hbar} [props.initialBalance]\n     * @param {boolean} [props.receiverSignatureRequired]\n     * @param {AccountId} [props.proxyAccountId]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._key = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._initialBalance = null;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._sendRecordThreshold = DEFAULT_RECORD_THRESHOLD;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._receiveRecordThreshold = DEFAULT_RECORD_THRESHOLD;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._receiverSignatureRequired = false;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._proxyAccountId = null;\n\n        /**\n         * @private\n         * @type {Duration}\n         */\n        this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);\n\n        if (props.key != null) {\n            this.setKey(props.key);\n        }\n\n        if (props.receiverSignatureRequired != null) {\n            this.setReceiverSignatureRequired(props.receiverSignatureRequired);\n        }\n\n        if (props.initialBalance != null) {\n            this.setInitialBalance(props.initialBalance);\n        }\n\n        if (props.proxyAccountId != null) {\n            this.setProxyAccountId(props.proxyAccountId);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {AccountCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const create = /** @type {proto.ICryptoCreateTransactionBody} */ (body.cryptoCreateAccount);\n\n        return Transaction._fromProtobufTransactions(\n            new AccountCreateTransaction({\n                key:\n                    create.key != null\n                        ? keyFromProtobuf(create.key)\n                        : undefined,\n                initialBalance:\n                    create.initialBalance != null\n                        ? create.initialBalance\n                        : undefined,\n                receiverSignatureRequired:\n                    create.receiverSigRequired != null\n                        ? create.receiverSigRequired\n                        : undefined,\n                proxyAccountId:\n                    create.proxyAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (create.proxyAccountID)\n                          )\n                        : undefined,\n                autoRenewPeriod:\n                    create.autoRenewPeriod != null\n                        ? create.autoRenewPeriod.seconds != null\n                            ? create.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * Set the key for this account.\n     *\n     * This is the key that must sign each transfer out of the account.\n     *\n     * If `receiverSignatureRequired` is true, then the key must also sign\n     * any transfer into the account.\n     *\n     * @param {Key} key\n     * @returns {this}\n     */\n    setKey(key) {\n        this._requireNotFrozen();\n        this._key = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get initialBalance() {\n        return this._initialBalance;\n    }\n\n    /**\n     * Set the initial amount to transfer into this account.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} initialBalance\n     * @returns {this}\n     */\n    setInitialBalance(initialBalance) {\n        this._requireNotFrozen();\n        this._initialBalance =\n            initialBalance instanceof Hbar\n                ? initialBalance\n                : new Hbar(initialBalance);\n\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get receiverSignatureRequired() {\n        return this._receiverSignatureRequired;\n    }\n\n    /**\n     * Set to true to require the key for this account to sign any transfer of\n     * hbars to this account.\n     *\n     * @param {boolean} receiverSignatureRequired\n     * @returns {this}\n     */\n    setReceiverSignatureRequired(receiverSignatureRequired) {\n        this._requireNotFrozen();\n        this._receiverSignatureRequired = receiverSignatureRequired;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        return this._proxyAccountId;\n    }\n\n    /**\n     * Set the ID of the account to which this account is proxy staked.\n     *\n     * @param {AccountId} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        this._requireNotFrozen();\n        this._proxyAccountId = proxyAccountId;\n\n        return this;\n    }\n\n    /**\n     * @returns {Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this account.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.createAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoCreateAccount\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            key: this._key != null ? keyToProtobuf(this._key) : null,\n            initialBalance:\n                this._initialBalance != null\n                    ? this._initialBalance.toTinybars()\n                    : null,\n            autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),\n            proxyAccountID:\n                this._proxyAccountId != null\n                    ? this._proxyAccountId._toProtobuf()\n                    : null,\n            receiveRecordThreshold: this._receiveRecordThreshold.toTinybars(),\n            sendRecordThreshold: this._sendRecordThreshold.toTinybars(),\n            receiverSigRequired: this._receiverSignatureRequired,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoCreateAccount\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountCreateTransaction._fromProtobuf\n);\n","import AccountId from \"./AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoDeleteTransactionBody} proto.ICryptoDeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Marks an account as deleted, moving all its current hbars to another account.\n *\n * It will remain in the ledger, marked as deleted, until it expires.\n * Transfers into it a deleted account fail. But a deleted account can still have its\n * expiration extended in the normal way.\n */\nexport default class AccountDeleteTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {AccountId} [props.accountId]\n     * @param {AccountId} [props.transferAccountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._transferAccountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.transferAccountId != null) {\n            this.setTransferAccountId(props.transferAccountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {AccountDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const accountDelete = /** @type {proto.ICryptoDeleteTransactionBody} */ (body.cryptoDelete);\n\n        return Transaction._fromProtobufTransactions(\n            new AccountDeleteTransaction({\n                accountId:\n                    accountDelete.deleteAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (accountDelete.deleteAccountID)\n                          )\n                        : undefined,\n                transferAccountId:\n                    accountDelete.transferAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (accountDelete.transferAccountID)\n                          )\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID which is being deleted in this transaction.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {AccountDeleteTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get transferAccountId() {\n        return this._transferAccountId;\n    }\n\n    /**\n     * Set the account ID which will receive all remaining hbars.\n     *\n     * @param {AccountId | string} transferAccountId\n     * @returns {AccountDeleteTransaction}\n     */\n    setTransferAccountId(transferAccountId) {\n        this._requireNotFrozen();\n        this._transferAccountId =\n            transferAccountId instanceof AccountId\n                ? transferAccountId\n                : AccountId.fromString(transferAccountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoDelete(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoDelete\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            deleteAccountID:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            transferAccountID:\n                this._transferAccountId != null\n                    ? this._transferAccountId._toProtobuf()\n                    : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoDelete\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountDeleteTransaction._fromProtobuf\n);\n","import AccountId from \"./AccountId.js\";\nimport { KeyList } from \"@hashgraph/cryptography\";\nimport {\n    keyListFromProtobuf,\n    keyListToProtobuf,\n} from \"../cryptography/protobuf.js\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").ILiveHash} proto.ILiveHash\n * @typedef {import(\"@hashgraph/proto\").IDuration} proto.IDuration\n */\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\nexport default class LiveHash {\n    /**\n     * @private\n     * @param {object} props\n     * @param {AccountId} props.accountId\n     * @param {Uint8Array} props.hash\n     * @param {KeyList} props.keys\n     * @param {Duration} props.duration\n     */\n    constructor(props) {\n        /** @readonly */\n        this.accountId = props.accountId;\n\n        /** @readonly */\n        this.hash = props.hash;\n\n        /** @readonly */\n        this.keys = props.keys;\n\n        /** @readonly */\n        this.duration = props.duration;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.ILiveHash} liveHash\n     * @returns {LiveHash}\n     */\n    static _fromProtobuf(liveHash) {\n        const liveHash_ = /** @type {proto.ILiveHash} */ (liveHash);\n\n        return new LiveHash({\n            accountId: AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (liveHash_.accountId)\n            ),\n            hash: liveHash_.hash != null ? liveHash_.hash : new Uint8Array(),\n            keys:\n                liveHash_.keys != null\n                    ? keyListFromProtobuf(liveHash_.keys)\n                    : new KeyList(),\n            duration: Duration._fromProtobuf(\n                /** @type {proto.IDuration} */ (liveHash_.duration)\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ILiveHash}\n     */\n    _toProtobuf() {\n        return {\n            accountId: this.accountId._toProtobuf(),\n            hash: this.hash,\n            keys: keyListToProtobuf(this.keys),\n            duration: this.duration._toProtobuf(),\n        };\n    }\n}\n","import Long from \"long\";\nimport TokenId from \"../token/TokenId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITokenRelationship} proto.ITokenRelationship\n * @typedef {import(\"@hashgraph/proto\").TokenKycStatus} proto.TokenKycStatus\n * @typedef {import(\"@hashgraph/proto\").TokenFreezeStatus} proto.TokenFreezeStatus\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * Token's information related to the given Account\n */\nexport default class TokenRelationship {\n    /**\n     * @param {object} props\n     * @param {TokenId} props.tokenId\n     * @param {string} props.symbol\n     * @param {Long} props.balance\n     * @param {boolean | null} props.isKycGranted\n     * @param {boolean | null} props.isFrozen\n     */\n    constructor(props) {\n        /**\n         * The ID of the token\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n        /**\n         * The Symbol of the token\n         *\n         * @readonly\n         */\n        this.symbol = props.symbol;\n        /**\n         * The balance that the Account holds in the smallest denomination\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * The KYC status of the account (KycNotApplicable, Granted or Revoked). If the token does\n         * not have KYC key, KycNotApplicable is returned\n         *\n         * @readonly\n         */\n        this.isKycGranted = props.isKycGranted;\n\n        /**\n         * The Freeze status of the account (FreezeNotApplicable, Frozen or Unfrozen). If the token\n         * does not have Freeze key, FreezeNotApplicable is returned\n         *\n         * @readonly\n         */\n        this.isFrozen = props.isFrozen;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {proto.ITokenRelationship} relationship\n     * @returns {TokenRelationship}\n     */\n    static _fromProtobuf(relationship) {\n        const tokenId = TokenId._fromProtobuf(\n            /** @type {proto.ITokenID} */ (relationship.tokenId)\n        );\n        const isKycGranted =\n            relationship.kycStatus == null || relationship.kycStatus === 0\n                ? null\n                : relationship.kycStatus === 1;\n        const isFrozen =\n            relationship.freezeStatus == null || relationship.freezeStatus === 0\n                ? null\n                : relationship.freezeStatus === 1;\n\n        return new TokenRelationship({\n            tokenId,\n            symbol: /** @type {string} */ (relationship.symbol),\n            balance:\n                relationship.balance != null\n                    ? relationship.balance instanceof Long\n                        ? relationship.balance\n                        : Long.fromValue(relationship.balance)\n                    : Long.ZERO,\n            isKycGranted,\n            isFrozen,\n        });\n    }\n\n    /**\n     * @returns {proto.ITokenRelationship}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            symbol: this.symbol,\n            balance: this.balance,\n            kycStatus:\n                this.isKycGranted == null ? 0 : this.isKycGranted ? 1 : 2,\n            freezeStatus: this.isFrozen == null ? 0 : this.isFrozen ? 1 : 2,\n        };\n    }\n}\n","import TokenId from \"../token/TokenId.js\";\nimport TokenRelationship from \"./TokenRelationship.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITokenRelationship} proto.ITokenRelationship\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * @augments {ObjectMap<TokenId, TokenRelationship>}\n */\nexport default class TokenRelationshipMap extends ObjectMap {\n    constructor() {\n        super((s) => TokenId.fromString(s));\n    }\n\n    /**\n     * @param {proto.ITokenRelationship[]} relationships\n     * @returns {TokenRelationshipMap}\n     */\n    static _fromProtobuf(relationships) {\n        const tokenRelationships = new TokenRelationshipMap();\n\n        for (const relationship of relationships) {\n            const tokenId = TokenId._fromProtobuf(\n                /** @type {proto.ITokenID} */ (relationship.tokenId)\n            );\n\n            tokenRelationships._set(\n                tokenId,\n                TokenRelationship._fromProtobuf(relationship)\n            );\n        }\n\n        return tokenRelationships;\n    }\n\n    /**\n     * @returns {proto.ITokenRelationship[]}\n     */\n    _toProtobuf() {\n        const list = [];\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [_, relationship] of this) {\n            list.push(relationship._toProtobuf());\n        }\n\n        return list;\n    }\n}\n","import AccountId from \"./AccountId.js\";\nimport LiveHash from \"./LiveHash.js\";\nimport Hbar from \"../Hbar.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Long from \"long\";\nimport TokenRelationshipMap from \"./TokenRelationshipMap.js\";\nimport * as proto from \"@hashgraph/proto\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n */\n\n/**\n * Current information about an account, including the balance.\n */\nexport default class AccountInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {AccountId} props.accountId\n     * @param {?string} props.contractAccountId\n     * @param {boolean} props.isDeleted\n     * @param {?AccountId} props.proxyAccountId\n     * @param {Hbar} props.proxyReceived\n     * @param {Key} props.key\n     * @param {Hbar} props.balance\n     * @param {Hbar} props.sendRecordThreshold\n     * @param {Hbar} props.receiveRecordThreshold\n     * @param {boolean} props.isReceiverSignatureRequired\n     * @param {Timestamp} props.expirationTime\n     * @param {Duration} props.autoRenewPeriod\n     * @param {LiveHash[]} props.liveHashes\n     * @param {TokenRelationshipMap} props.tokenRelationships\n     */\n    constructor(props) {\n        /**\n         * The account ID for which this information applies.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * The Contract Account ID comprising of both the contract instance and the cryptocurrency\n         * account owned by the contract instance, in the format used by Solidity.\n         *\n         * @readonly\n         */\n        this.contractAccountId = props.contractAccountId;\n\n        /**\n         * If true, then this account has been deleted, it will disappear when it expires, and\n         * all transactions for it will fail except the transaction to extend its expiration date.\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * The Account ID of the account to which this is proxy staked. If proxyAccountID is null,\n         * or is an invalid account, or is an account that isn't a node, then this account is\n         * automatically proxy staked to a node chosen by the network, but without earning payments.\n         * If the proxyAccountID account refuses to accept proxy staking , or if it is not currently\n         * running a node, then it will behave as if proxyAccountID was null.\n         *\n         * @readonly\n         */\n        this.proxyAccountId = props.proxyAccountId;\n\n        /**\n         * The total number of tinybars proxy staked to this account.\n         *\n         * @readonly\n         */\n        this.proxyReceived = props.proxyReceived;\n\n        /**\n         * The key for the account, which must sign in order to transfer out, or to modify the account\n         * in any way other than extending its expiration date.\n         *\n         * @readonly\n         */\n        this.key = props.key;\n\n        /**\n         * The current balance of account.\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * The threshold amount (in tinybars) for which an account record is created (and this account\n         * charged for them) for any send/withdraw transaction.\n         *\n         * @readonly\n         */\n        this.sendRecordThreshold = props.sendRecordThreshold;\n\n        /**\n         * The threshold amount (in tinybars) for which an account record is created\n         * (and this account charged for them) for any transaction above this amount.\n         *\n         * @readonly\n         */\n        this.receiveRecordThreshold = props.receiveRecordThreshold;\n\n        /**\n         * If true, no transaction can transfer to this account unless signed by this account's key.\n         *\n         * @readonly\n         */\n        this.isReceiverSignatureRequired = props.isReceiverSignatureRequired;\n\n        /**\n         * The TimeStamp time at which this account is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The duration for expiration time will extend every this many seconds. If there are\n         * insufficient funds, then it extends as long as possible. If it is empty when it\n         * expires, then it is deleted.\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /** @readonly */\n        this.liveHashes = props.liveHashes;\n\n        /** @readonly */\n        this.tokenRelationships = props.tokenRelationships;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IAccountInfo} info\n     * @returns {AccountInfo}\n     */\n    static _fromProtobuf(info) {\n        return new AccountInfo({\n            accountId: AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (info.accountID)\n            ),\n            contractAccountId:\n                info.contractAccountID != null ? info.contractAccountID : null,\n            isDeleted: info.deleted != null ? info.deleted : false,\n            key: keyFromProtobuf(/** @type {proto.IKey} */ (info.key)),\n            balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n            sendRecordThreshold: Hbar.fromTinybars(\n                info.generateSendRecordThreshold != null\n                    ? info.generateSendRecordThreshold\n                    : 0\n            ),\n            receiveRecordThreshold: Hbar.fromTinybars(\n                info.generateReceiveRecordThreshold != null\n                    ? info.generateReceiveRecordThreshold\n                    : 0\n            ),\n            isReceiverSignatureRequired:\n                info.receiverSigRequired != null\n                    ? info.receiverSigRequired\n                    : false,\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */ (info.expirationTime)\n            ),\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? new Duration(\n                          /** @type {Long} */ (info.autoRenewPeriod.seconds)\n                      )\n                    : new Duration(0),\n            proxyAccountId:\n                info.proxyAccountID != null &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (info.proxyAccountID.shardNum)\n                ).toInt() !== 0 &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (info.proxyAccountID.realmNum)\n                ).toInt() !== 0 &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (info.proxyAccountID\n                        .accountNum)\n                ).toInt() !== 0\n                    ? AccountId._fromProtobuf(info.proxyAccountID)\n                    : null,\n            proxyReceived: Hbar.fromTinybars(\n                info.proxyReceived != null ? info.proxyReceived : 0\n            ),\n            liveHashes: (info.liveHashes != null\n                ? info.liveHashes\n                : []\n            ).map((hash) => LiveHash._fromProtobuf(hash)),\n            tokenRelationships: TokenRelationshipMap._fromProtobuf(\n                info.tokenRelationships != null ? info.tokenRelationships : []\n            ),\n        });\n    }\n\n    /**\n     * @returns {proto.IAccountInfo}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            contractAccountID: this.contractAccountId,\n            deleted: this.isDeleted,\n            proxyAccountID:\n                this.proxyAccountId != null\n                    ? this.proxyAccountId._toProtobuf()\n                    : null,\n            proxyReceived: this.proxyReceived.toTinybars(),\n            key: keyToProtobuf(this.key),\n            balance: this.balance.toTinybars(),\n            generateSendRecordThreshold: this.sendRecordThreshold.toTinybars(),\n            generateReceiveRecordThreshold: this.receiveRecordThreshold.toTinybars(),\n            receiverSigRequired: this.isReceiverSignatureRequired,\n            expirationTime: this.expirationTime._toProtobuf(),\n            autoRenewPeriod: this.autoRenewPeriod._toProtobuf(),\n            liveHashes: this.liveHashes.map((hash) => hash._toProtobuf()),\n            tokenRelationships:\n                this.tokenRelationships != null\n                    ? this.tokenRelationships._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AccountInfo}\n     */\n    static fromBytes(bytes) {\n        return AccountInfo._fromProtobuf(\n            proto.CryptoGetInfoResponse.AccountInfo.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.CryptoGetInfoResponse.AccountInfo.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport AccountInfo from \"./AccountInfo.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IAccountInfo} proto.IAccountInfo\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetInfoQuery} proto.ICryptoGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetInfoResponse} proto.ICryptoGetInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<AccountInfo>}\n */\nexport default class AccountInfoQuery extends Query {\n    /**\n     * @param {object} props\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {AccountInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {proto.ICryptoGetInfoQuery} */ (query.cryptoGetInfo);\n\n        return new AccountInfoQuery({\n            accountId:\n                info.accountID != null\n                    ? AccountId._fromProtobuf(info.accountID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the info is being requested.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {AccountInfoQuery}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getAccountInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetInfo = /** @type {proto.ICryptoGetInfoResponse} */ (response.cryptoGetInfo);\n        return /** @type {proto.IResponseHeader} */ (cryptoGetInfo.header);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {Promise<AccountInfo>}\n     */\n    _mapResponse(response) {\n        const info = /** @type {proto.ICryptoGetInfoResponse} */ (response.cryptoGetInfo);\n\n        return Promise.resolve(\n            AccountInfo._fromProtobuf(\n                /** @type {proto.IAccountInfo} */ (info.accountInfo)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetInfo: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"cryptoGetInfo\", AccountInfoQuery._fromProtobuf);\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport TransactionRecord from \"../transaction/TransactionRecord.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountRecordsQuery} proto.ICryptoGetAccountRecordsQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountRecordsResponse} proto.ICryptoGetAccountRecordsResponse\n * @typedef {import(\"@hashgraph/proto\").ITransactionRecord} proto.ITransactionRecord\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * Get all the records for an account for any transfers into it and out of it,\n * that were above the threshold, during the last 25 hours.\n *\n * @augments {Query<TransactionRecord[]>}\n */\nexport default class AccountRecordsQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {AccountRecordsQuery}\n     */\n    static _fromProtobuf(query) {\n        const records = /** @type {proto.ICryptoGetAccountRecordsQuery} */ (query.cryptoGetAccountRecords);\n\n        return new AccountRecordsQuery({\n            accountId:\n                records.accountID != null\n                    ? AccountId._fromProtobuf(records.accountID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the records are being requested.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getAccountRecords(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetAccountRecords = /** @type {proto.ICryptoGetAccountRecordsResponse} */ (response.cryptoGetAccountRecords);\n        return /** @type {proto.IResponseHeader} */ (cryptoGetAccountRecords.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<TransactionRecord[]>}\n     */\n    _mapResponse(response) {\n        const cryptoGetAccountRecords = /** @type {proto.ICryptoGetAccountRecordsResponse} */ (response.cryptoGetAccountRecords);\n        const records = /** @type {proto.ITransactionRecord[]} */ (cryptoGetAccountRecords.records);\n\n        return Promise.resolve(\n            records.map((record) => TransactionRecord._fromProtobuf(record))\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetAccountRecords: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"cryptoGetAccountRecords\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountRecordsQuery._fromProtobuf\n);\n","import AccountId from \"./AccountId.js\";\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IProxyStaker} proto.IProxyStaker\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency transfer.\n */\nexport default class ProxyStaker {\n    /**\n     * @private\n     * @param {object} props\n     * @param {AccountId} props.accountId\n     * @param {number | string | Long | BigNumber | Hbar} props.amount\n     */\n    constructor(props) {\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * The amount of tinybars that the account sends(negative)\n         * or receives(positive).\n         *\n         * @readonly\n         */\n        this.amount =\n            props.amount instanceof Hbar\n                ? props.amount\n                : new Hbar(props.amount);\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IProxyStaker} transfer\n     * @returns {ProxyStaker}\n     */\n    static _fromProtobuf(transfer) {\n        return new ProxyStaker({\n            accountId: AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (transfer.accountID)\n            ),\n            amount: Hbar.fromTinybars(\n                transfer.amount != null ? transfer.amount : 0\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IProxyStaker}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            amount: this.amount.toTinybars(),\n        };\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport ProxyStaker from \"./ProxyStaker.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetStakersQuery} proto.ICryptoGetStakersQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetStakersResponse} proto.ICryptoGetStakersResponse\n * @typedef {import(\"@hashgraph/proto\").IAllProxyStakers} proto.IAllProxyStakers\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * Get all the accounts that are proxy staking to this account.\n * For each of them, give the amount currently staked.\n *\n * This is not yet implemented, but will be in a future version of the API.\n *\n * @augments {Query<ProxyStaker[]>}\n */\nexport default class AccountStakersQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {(AccountId | string)=} props.accountId\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {AccountStakersQuery}\n     */\n    static _fromProtobuf(query) {\n        const stakers = /** @type {proto.ICryptoGetStakersQuery} */ (query.cryptoGetProxyStakers);\n\n        return new AccountStakersQuery({\n            accountId:\n                stakers.accountID != null\n                    ? AccountId._fromProtobuf(stakers.accountID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the stakers are being requested.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getStakersByAccountID(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetProxyStakers = /** @type {proto.ICryptoGetStakersResponse} */ (response.cryptoGetProxyStakers);\n        return /** @type {proto.IResponseHeader} */ (cryptoGetProxyStakers.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<ProxyStaker[]>}\n     */\n    _mapResponse(response) {\n        const cryptoGetProxyStakers = /** @type {proto.ICryptoGetStakersResponse} */ (response.cryptoGetProxyStakers);\n        const stakers = /** @type {proto.IAllProxyStakers} */ (cryptoGetProxyStakers.stakers);\n\n        return Promise.resolve(\n            (stakers.proxyStaker != null\n                ? stakers.proxyStaker\n                : []\n            ).map((staker) => ProxyStaker._fromProtobuf(staker))\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetProxyStakers: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"cryptoGetProxyStakers\", AccountStakersQuery._fromProtobuf);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport AccountId from \"./AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoUpdateTransactionBody} proto.ICryptoUpdateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Change properties for the given account.\n */\nexport default class AccountUpdateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {AccountId} [props.accountId]\n     * @param {Key} [props.key]\n     * @param {boolean} [props.receiverSignatureRequired]\n     * @param {AccountId} [props.proxyAccountId]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {Timestamp | Date} [props.expirationTime]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._key = null;\n\n        if (props.key != null) {\n            this.setKey(props.key);\n        }\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._receiverSignatureRequired = false;\n\n        if (props.receiverSignatureRequired != null) {\n            this.setReceiverSignatureRequired(props.receiverSignatureRequired);\n        }\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._proxyAccountId = null;\n\n        if (props.proxyAccountId != null) {\n            this.setProxyAccountId(props.proxyAccountId);\n        }\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._autoRenewPeriod = null;\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {AccountUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const update = /** @type {proto.ICryptoUpdateTransactionBody} */ (body.cryptoUpdateAccount);\n\n        return Transaction._fromProtobufTransactions(\n            new AccountUpdateTransaction({\n                accountId:\n                    update.accountIDToUpdate != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (update.accountIDToUpdate)\n                          )\n                        : undefined,\n                key:\n                    update.key != null\n                        ? keyFromProtobuf(update.key)\n                        : undefined,\n                receiverSignatureRequired:\n                    update.receiverSigRequired != null\n                        ? update.receiverSigRequired\n                        : undefined,\n                proxyAccountId:\n                    update.proxyAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (update.proxyAccountID)\n                          )\n                        : undefined,\n                autoRenewPeriod:\n                    update.autoRenewPeriod != null\n                        ? update.autoRenewPeriod.seconds != null\n                            ? update.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                expirationTime:\n                    update.expirationTime != null\n                        ? Timestamp._fromProtobuf(update.expirationTime)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Sets the account ID which is being updated in this transaction.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {AccountUpdateTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setKey(key) {\n        this._requireNotFrozen();\n        this._key = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get receiverSignatureRequired() {\n        return this._receiverSignatureRequired;\n    }\n\n    /**\n     * @param {boolean} receiverSignatureRequired\n     * @returns {this}\n     */\n    setReceiverSignatureRequired(receiverSignatureRequired) {\n        this._requireNotFrozen();\n        this._receiverSignatureRequired = receiverSignatureRequired;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        return this._proxyAccountId;\n    }\n\n    /**\n     * @param {AccountId} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        this._requireNotFrozen();\n        this._proxyAccountId = proxyAccountId;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {Timestamp | Date} expirationTime\n     * @returns {this}\n     */\n    setExpirationTime(expirationTime) {\n        this._requireNotFrozen();\n        this._expirationTime =\n            expirationTime instanceof Date\n                ? Timestamp.fromDate(expirationTime)\n                : expirationTime;\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.updateAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoUpdateAccount\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoUpdateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            accountIDToUpdate:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            key: this._key != null ? keyToProtobuf(this._key) : null,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n            proxyAccountID:\n                this._proxyAccountId != null\n                    ? this._proxyAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod:\n                this._autoRenewPeriod != null\n                    ? this._autoRenewPeriod._toProtobuf()\n                    : null,\n            receiverSigRequiredWrapper:\n                this._receiverSignatureRequired == null\n                    ? null\n                    : {\n                          value: this._receiverSignatureRequired,\n                      },\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoUpdateAccount\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountUpdateTransaction._fromProtobuf\n);\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IContractGetBytecodeQuery} proto.IContractGetBytecodeQuery\n * @typedef {import(\"@hashgraph/proto\").IContractGetBytecodeResponse} proto.IContractGetBytecodeResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<Uint8Array>}\n */\nexport default class ContractByteCodeQuery extends Query {\n    /**\n     * @param {object} props\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {ContractByteCodeQuery}\n     */\n    static _fromProtobuf(query) {\n        const bytecode = /** @type {proto.IContractGetBytecodeQuery} */ (query.contractGetBytecode);\n\n        return new ContractByteCodeQuery({\n            contractId:\n                bytecode.contractID != null\n                    ? ContractId._fromProtobuf(bytecode.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the info is being requested.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractByteCodeQuery}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.contractGetBytecode(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const contractGetBytecodeResponse = /** @type {proto.IContractGetBytecodeResponse} */ (response.contractGetBytecodeResponse);\n        return /** @type {proto.IResponseHeader} */ (contractGetBytecodeResponse.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<Uint8Array>}\n     */\n    _mapResponse(response) {\n        const contractGetBytecodeResponse = /** @type {proto.IContractGetBytecodeResponse} */ (response.contractGetBytecodeResponse);\n\n        return Promise.resolve(\n            contractGetBytecodeResponse.bytecode != null\n                ? contractGetBytecodeResponse.bytecode\n                : new Uint8Array()\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            contractGetBytecode: {\n                header,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"contractGetBytecode\", ContractByteCodeQuery._fromProtobuf);\n","// Originally sourced from:\n// https://github.com/MaiaVictor/eth-lib/blob/da0971f5b09964d9c8449975fa87933f0c9fef35/src/hash.js\n//  - added type declarations\n//  - switched to es6 module syntax\n\n/** @type {number[]} */\nconst KECCAK_PADDING = [1, 256, 65536, 16777216];\n\n/** @type {number[]} */\nconst SHIFT = [0, 8, 16, 24];\n\n/** @type {number[]} */\nconst RC = [\n    1,\n    0,\n    32898,\n    0,\n    32906,\n    2147483648,\n    2147516416,\n    2147483648,\n    32907,\n    0,\n    2147483649,\n    0,\n    2147516545,\n    2147483648,\n    32777,\n    2147483648,\n    138,\n    0,\n    136,\n    0,\n    2147516425,\n    0,\n    2147483658,\n    0,\n    2147516555,\n    0,\n    139,\n    2147483648,\n    32905,\n    2147483648,\n    32771,\n    2147483648,\n    32770,\n    2147483648,\n    128,\n    2147483648,\n    32778,\n    0,\n    2147483658,\n    2147483648,\n    2147516545,\n    2147483648,\n    32896,\n    2147483648,\n    2147483649,\n    0,\n    2147516424,\n    2147483648,\n];\n\n/**\n * @typedef {object} Keccak\n * @property {number[]} blocks\n * @property {number} blockCount\n * @property {number} outputBlocks\n * @property {number[]} s\n * @property {number} start\n * @property {number} block\n * @property {boolean} reset\n * @property {?number} lastByteIndex\n */\n\n/**\n * @param {number} bits\n * @returns {Keccak}\n */\nfunction createKeccakState(bits) {\n    return {\n        blocks: [],\n        reset: true,\n        block: 0,\n        start: 0,\n        lastByteIndex: null,\n        blockCount: (1600 - (bits << 1)) >> 5,\n        outputBlocks: bits >> 5,\n        s: zeroFill(50),\n    };\n}\n\n/**\n * @param {number} n\n * @returns {number[]}\n */\nfunction zeroFill(n) {\n    /** @type {number[]} */\n    let arr = Array(n);\n\n    for (let i = 0; i < n; ++i) arr[i] = 0;\n\n    return arr;\n}\n\n/**\n * @param {Keccak} state\n * @param {string} message\n * @returns {Uint8Array}\n */\nfunction update(state, message) {\n    var length = message.length,\n        blocks = state.blocks,\n        byteCount = state.blockCount << 2,\n        blockCount = state.blockCount,\n        outputBlocks = state.outputBlocks,\n        s = state.s,\n        index = 0,\n        i = 0,\n        code;\n\n    // update\n    while (index < length) {\n        if (state.reset) {\n            state.reset = false;\n            blocks[0] = state.block;\n            for (i = 1; i < blockCount + 1; ++i) {\n                blocks[i] = 0;\n            }\n        }\n        for (i = state.start; index < length && i < byteCount; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n                blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n                blocks[i >> 2] |=\n                    (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n                code =\n                    0x10000 +\n                    (((code & 0x3ff) << 10) |\n                        (message.charCodeAt(++index) & 0x3ff));\n                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n                blocks[i >> 2] |=\n                    (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n                blocks[i >> 2] |=\n                    (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n        }\n        state.lastByteIndex = i;\n        if (i >= byteCount) {\n            state.start = i - byteCount;\n            state.block = blocks[blockCount];\n            for (i = 0; i < blockCount; ++i) {\n                s[i] ^= blocks[i];\n            }\n            f(s);\n            state.reset = true;\n        } else {\n            state.start = i;\n        }\n    }\n\n    // finalize\n    i = /** @type {number} */ (state.lastByteIndex);\n    blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n\n    if (state.lastByteIndex === byteCount) {\n        blocks[0] = blocks[blockCount];\n        for (i = 1; i < blockCount + 1; ++i) {\n            blocks[i] = 0;\n        }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n    }\n\n    f(s);\n\n    const buffer = new ArrayBuffer(outputBlocks * 4);\n    const view = new DataView(buffer);\n\n    i = 0;\n    var j = 0;\n\n    while (j < outputBlocks) {\n        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n            view.setInt32(i * 4, s[i], true);\n        }\n\n        if (j % blockCount === 0) {\n            f(s);\n            i = 0;\n        }\n    }\n\n    return new Uint8Array(buffer);\n}\n\n/**\n * @param {number[]} s\n */\nfunction f(s) {\n    var h,\n        l,\n        n,\n        c0,\n        c1,\n        c2,\n        c3,\n        c4,\n        c5,\n        c6,\n        c7,\n        c8,\n        c9,\n        b0,\n        b1,\n        b2,\n        b3,\n        b4,\n        b5,\n        b6,\n        b7,\n        b8,\n        b9,\n        b10,\n        b11,\n        b12,\n        b13,\n        b14,\n        b15,\n        b16,\n        b17,\n        b18,\n        b19,\n        b20,\n        b21,\n        b22,\n        b23,\n        b24,\n        b25,\n        b26,\n        b27,\n        b28,\n        b29,\n        b30,\n        b31,\n        b32,\n        b33,\n        b34,\n        b35,\n        b36,\n        b37,\n        b38,\n        b39,\n        b40,\n        b41,\n        b42,\n        b43,\n        b44,\n        b45,\n        b46,\n        b47,\n        b48,\n        b49;\n\n    for (n = 0; n < 48; n += 2) {\n        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n        h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n        l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n        s[0] ^= h;\n        s[1] ^= l;\n        s[10] ^= h;\n        s[11] ^= l;\n        s[20] ^= h;\n        s[21] ^= l;\n        s[30] ^= h;\n        s[31] ^= l;\n        s[40] ^= h;\n        s[41] ^= l;\n        h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n        l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n        s[2] ^= h;\n        s[3] ^= l;\n        s[12] ^= h;\n        s[13] ^= l;\n        s[22] ^= h;\n        s[23] ^= l;\n        s[32] ^= h;\n        s[33] ^= l;\n        s[42] ^= h;\n        s[43] ^= l;\n        h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n        l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n        s[4] ^= h;\n        s[5] ^= l;\n        s[14] ^= h;\n        s[15] ^= l;\n        s[24] ^= h;\n        s[25] ^= l;\n        s[34] ^= h;\n        s[35] ^= l;\n        s[44] ^= h;\n        s[45] ^= l;\n        h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n        l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n        s[6] ^= h;\n        s[7] ^= l;\n        s[16] ^= h;\n        s[17] ^= l;\n        s[26] ^= h;\n        s[27] ^= l;\n        s[36] ^= h;\n        s[37] ^= l;\n        s[46] ^= h;\n        s[47] ^= l;\n        h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n        l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n        s[8] ^= h;\n        s[9] ^= l;\n        s[18] ^= h;\n        s[19] ^= l;\n        s[28] ^= h;\n        s[29] ^= l;\n        s[38] ^= h;\n        s[39] ^= l;\n        s[48] ^= h;\n        s[49] ^= l;\n\n        b0 = s[0];\n        b1 = s[1];\n        b32 = (s[11] << 4) | (s[10] >>> 28);\n        b33 = (s[10] << 4) | (s[11] >>> 28);\n        b14 = (s[20] << 3) | (s[21] >>> 29);\n        b15 = (s[21] << 3) | (s[20] >>> 29);\n        b46 = (s[31] << 9) | (s[30] >>> 23);\n        b47 = (s[30] << 9) | (s[31] >>> 23);\n        b28 = (s[40] << 18) | (s[41] >>> 14);\n        b29 = (s[41] << 18) | (s[40] >>> 14);\n        b20 = (s[2] << 1) | (s[3] >>> 31);\n        b21 = (s[3] << 1) | (s[2] >>> 31);\n        b2 = (s[13] << 12) | (s[12] >>> 20);\n        b3 = (s[12] << 12) | (s[13] >>> 20);\n        b34 = (s[22] << 10) | (s[23] >>> 22);\n        b35 = (s[23] << 10) | (s[22] >>> 22);\n        b16 = (s[33] << 13) | (s[32] >>> 19);\n        b17 = (s[32] << 13) | (s[33] >>> 19);\n        b48 = (s[42] << 2) | (s[43] >>> 30);\n        b49 = (s[43] << 2) | (s[42] >>> 30);\n        b40 = (s[5] << 30) | (s[4] >>> 2);\n        b41 = (s[4] << 30) | (s[5] >>> 2);\n        b22 = (s[14] << 6) | (s[15] >>> 26);\n        b23 = (s[15] << 6) | (s[14] >>> 26);\n        b4 = (s[25] << 11) | (s[24] >>> 21);\n        b5 = (s[24] << 11) | (s[25] >>> 21);\n        b36 = (s[34] << 15) | (s[35] >>> 17);\n        b37 = (s[35] << 15) | (s[34] >>> 17);\n        b18 = (s[45] << 29) | (s[44] >>> 3);\n        b19 = (s[44] << 29) | (s[45] >>> 3);\n        b10 = (s[6] << 28) | (s[7] >>> 4);\n        b11 = (s[7] << 28) | (s[6] >>> 4);\n        b42 = (s[17] << 23) | (s[16] >>> 9);\n        b43 = (s[16] << 23) | (s[17] >>> 9);\n        b24 = (s[26] << 25) | (s[27] >>> 7);\n        b25 = (s[27] << 25) | (s[26] >>> 7);\n        b6 = (s[36] << 21) | (s[37] >>> 11);\n        b7 = (s[37] << 21) | (s[36] >>> 11);\n        b38 = (s[47] << 24) | (s[46] >>> 8);\n        b39 = (s[46] << 24) | (s[47] >>> 8);\n        b30 = (s[8] << 27) | (s[9] >>> 5);\n        b31 = (s[9] << 27) | (s[8] >>> 5);\n        b12 = (s[18] << 20) | (s[19] >>> 12);\n        b13 = (s[19] << 20) | (s[18] >>> 12);\n        b44 = (s[29] << 7) | (s[28] >>> 25);\n        b45 = (s[28] << 7) | (s[29] >>> 25);\n        b26 = (s[38] << 8) | (s[39] >>> 24);\n        b27 = (s[39] << 8) | (s[38] >>> 24);\n        b8 = (s[48] << 14) | (s[49] >>> 18);\n        b9 = (s[49] << 14) | (s[48] >>> 18);\n\n        s[0] = b0 ^ (~b2 & b4);\n        s[1] = b1 ^ (~b3 & b5);\n        s[10] = b10 ^ (~b12 & b14);\n        s[11] = b11 ^ (~b13 & b15);\n        s[20] = b20 ^ (~b22 & b24);\n        s[21] = b21 ^ (~b23 & b25);\n        s[30] = b30 ^ (~b32 & b34);\n        s[31] = b31 ^ (~b33 & b35);\n        s[40] = b40 ^ (~b42 & b44);\n        s[41] = b41 ^ (~b43 & b45);\n        s[2] = b2 ^ (~b4 & b6);\n        s[3] = b3 ^ (~b5 & b7);\n        s[12] = b12 ^ (~b14 & b16);\n        s[13] = b13 ^ (~b15 & b17);\n        s[22] = b22 ^ (~b24 & b26);\n        s[23] = b23 ^ (~b25 & b27);\n        s[32] = b32 ^ (~b34 & b36);\n        s[33] = b33 ^ (~b35 & b37);\n        s[42] = b42 ^ (~b44 & b46);\n        s[43] = b43 ^ (~b45 & b47);\n        s[4] = b4 ^ (~b6 & b8);\n        s[5] = b5 ^ (~b7 & b9);\n        s[14] = b14 ^ (~b16 & b18);\n        s[15] = b15 ^ (~b17 & b19);\n        s[24] = b24 ^ (~b26 & b28);\n        s[25] = b25 ^ (~b27 & b29);\n        s[34] = b34 ^ (~b36 & b38);\n        s[35] = b35 ^ (~b37 & b39);\n        s[44] = b44 ^ (~b46 & b48);\n        s[45] = b45 ^ (~b47 & b49);\n        s[6] = b6 ^ (~b8 & b0);\n        s[7] = b7 ^ (~b9 & b1);\n        s[16] = b16 ^ (~b18 & b10);\n        s[17] = b17 ^ (~b19 & b11);\n        s[26] = b26 ^ (~b28 & b20);\n        s[27] = b27 ^ (~b29 & b21);\n        s[36] = b36 ^ (~b38 & b30);\n        s[37] = b37 ^ (~b39 & b31);\n        s[46] = b46 ^ (~b48 & b40);\n        s[47] = b47 ^ (~b49 & b41);\n        s[8] = b8 ^ (~b0 & b2);\n        s[9] = b9 ^ (~b1 & b3);\n        s[18] = b18 ^ (~b10 & b12);\n        s[19] = b19 ^ (~b11 & b13);\n        s[28] = b28 ^ (~b20 & b22);\n        s[29] = b29 ^ (~b21 & b23);\n        s[38] = b38 ^ (~b30 & b32);\n        s[39] = b39 ^ (~b31 & b33);\n        s[48] = b48 ^ (~b40 & b42);\n        s[49] = b49 ^ (~b41 & b43);\n\n        s[0] ^= RC[n];\n        s[1] ^= RC[n + 1];\n    }\n}\n\n/**\n * @param {number} bits\n * @returns {(message: string) => Uint8Array}\n */\nfunction createKeccak(bits) {\n    return function (message) {\n        return update(createKeccakState(bits), message);\n    };\n}\n\nexport const keccak256 = createKeccak(256);\n","import { keccak256 } from \"../cryptography/keccak.js\";\n\n/**\n * @enum {number}\n */\nexport const ArgumentType = {\n    uint8: 0,\n    int8: 1,\n    uint16: 2,\n    int16: 3,\n    uint32: 4,\n    int32: 5,\n    uint64: 6,\n    int64: 7,\n    uint256: 8,\n    int256: 9,\n    string: 10,\n    bool: 11,\n    bytes: 12,\n    bytes32: 13,\n    address: 14,\n    func: 15,\n};\n\n/**\n * @typedef {object} Argument\n * @property {boolean} dynamic\n * @property {Uint8Array} value\n */\n\n/**\n * @typedef {object} SolidityType\n * @property {ArgumentType} ty\n * @property {boolean} array\n */\n\nexport default class ContractFunctionSelector {\n    /**\n     * @param {string} [name]\n     */\n    constructor(name) {\n        /**\n         * @type {?string}\n         */\n        this.name = null;\n\n        /**\n         * @type {string}\n         */\n        this._params = \"\";\n\n        /**\n         * @type {SolidityType[]}\n         */\n        this._paramTypes = [];\n\n        if (name != null) {\n            this._name = name;\n        }\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addString() {\n        return this._addParam({ ty: ArgumentType.string, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addStringArray() {\n        return this._addParam({ ty: ArgumentType.string, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBytes() {\n        return this._addParam({ ty: ArgumentType.bytes, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBytes32() {\n        return this._addParam({ ty: ArgumentType.bytes32, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBytesArray() {\n        return this._addParam({ ty: ArgumentType.bytes, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBytes32Array() {\n        return this._addParam({ ty: ArgumentType.bytes32, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt8() {\n        return this._addParam({ ty: ArgumentType.int8, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt32() {\n        return this._addParam({ ty: ArgumentType.int32, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt64() {\n        return this._addParam({ ty: ArgumentType.int64, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt256() {\n        return this._addParam({ ty: ArgumentType.int256, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt8Array() {\n        return this._addParam({ ty: ArgumentType.int8, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt32Array() {\n        return this._addParam({ ty: ArgumentType.int32, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt64Array() {\n        return this._addParam({ ty: ArgumentType.int64, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt256Array() {\n        return this._addParam({ ty: ArgumentType.int256, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint8() {\n        return this._addParam({ ty: ArgumentType.uint8, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint32() {\n        return this._addParam({ ty: ArgumentType.uint32, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint64() {\n        return this._addParam({ ty: ArgumentType.uint64, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint256() {\n        return this._addParam({ ty: ArgumentType.uint256, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint8Array() {\n        return this._addParam({ ty: ArgumentType.uint8, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint32Array() {\n        return this._addParam({ ty: ArgumentType.uint32, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint64Array() {\n        return this._addParam({ ty: ArgumentType.uint64, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint256Array() {\n        return this._addParam({ ty: ArgumentType.uint256, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBool() {\n        return this._addParam({ ty: ArgumentType.bool, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addAddress() {\n        return this._addParam({ ty: ArgumentType.address, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addAddressArray() {\n        return this._addParam({ ty: ArgumentType.address, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addFunction() {\n        return this._addParam({ ty: ArgumentType.func, array: false });\n    }\n\n    /**\n     * @param {SolidityType} ty\n     * @returns {ContractFunctionSelector}\n     */\n    _addParam(ty) {\n        if (this._paramTypes.length > 0) {\n            this._params += \",\";\n        }\n\n        this._params += solidityTypeToString(ty);\n        this._paramTypes.push(ty);\n\n        return this;\n    }\n\n    /**\n     * @param {string} [name]\n     * @returns {Uint8Array}\n     */\n    _build(name) {\n        if (name != null) {\n            this._name = name;\n        } else if (this._name == null) {\n            throw new Error(\"`name` required for ContractFunctionSelector\");\n        }\n\n        return new Uint8Array(keccak256(this.toString()).slice(0, 4));\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this._name != null ? this._name.toString() : \"\"}(${\n            this._params\n        })`;\n    }\n}\n\n/**\n * @param {SolidityType} ty\n * @returns {string}\n */\nfunction solidityTypeToString(ty) {\n    let s = \"\";\n    switch (ty.ty) {\n        case ArgumentType.uint8:\n            s = \"uint8\";\n            break;\n        case ArgumentType.int8:\n            s = \"int8\";\n            break;\n        case ArgumentType.uint16:\n            s = \"uint16\";\n            break;\n        case ArgumentType.int16:\n            s = \"int16\";\n            break;\n        case ArgumentType.uint32:\n            s = \"uint32\";\n            break;\n        case ArgumentType.int32:\n            s = \"int32\";\n            break;\n        case ArgumentType.uint64:\n            s = \"uint64\";\n            break;\n        case ArgumentType.int64:\n            s = \"int64\";\n            break;\n        case ArgumentType.uint256:\n            s = \"uint256\";\n            break;\n        case ArgumentType.int256:\n            s = \"int256\";\n            break;\n        case ArgumentType.string:\n            s = \"string\";\n            break;\n        case ArgumentType.bool:\n            s = \"bool\";\n            break;\n        case ArgumentType.bytes:\n            s = \"bytes\";\n            break;\n        case ArgumentType.bytes32:\n            s = \"bytes32\";\n            break;\n        case ArgumentType.address:\n            s = \"address\";\n            break;\n        case ArgumentType.func:\n            s = \"function\";\n            break;\n        default:\n            s = \"\";\n            break;\n    }\n\n    if (ty.array) {\n        s += \"[]\";\n    }\n\n    return s;\n}\n","import ContractFunctionSelector, {\n    ArgumentType,\n} from \"./ContractFunctionSelector.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport BigNumber from \"bignumber.js\";\n\nexport default class ContractFunctionParameters {\n    constructor() {\n        /**\n         * @type {ContractFunctionSelector}\n         */\n        this._selector = new ContractFunctionSelector();\n\n        /**\n         * @type {import(\"./ContractFunctionSelector.js\").Argument[]}\n         */\n        this._arguments = [];\n    }\n\n    /**\n     * @param {string} value\n     * @returns {ContractFunctionParameters}\n     */\n    addString(value) {\n        this._selector.addString();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {string[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addStringArray(value) {\n        this._selector.addStringArray();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {Uint8Array} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBytes(value) {\n        this._selector.addBytes();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {Uint8Array} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBytes32(value) {\n        if (value.length !== 32) {\n            throw new Error(\n                `addBytes32 expected array to be of length 32, but received ${value.length}`\n            );\n        }\n\n        this._selector.addBytes32();\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {Uint8Array[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBytesArray(value) {\n        this._selector.addBytesArray();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {Uint8Array[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBytes32Array(value) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [_, entry] of value.entries()) {\n            if (entry.length !== 32) {\n                throw new Error(\n                    `addBytes32 expected array to be of length 32, but received ${entry.length}`\n                );\n            }\n        }\n\n        this._selector.addBytes32Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {boolean} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBool(value) {\n        this._selector.addBool();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt8(value) {\n        this._selector.addInt8();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt32(value) {\n        this._selector.addInt32();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {BigNumber} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt64(value) {\n        this._selector.addInt64();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {BigNumber} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt256(value) {\n        this._selector.addInt256();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {number[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt8Array(value) {\n        this._selector.addInt8Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {number[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt32Array(value) {\n        this._selector.addInt32Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {BigNumber[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt64Array(value) {\n        this._selector.addInt64Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {BigNumber[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt256Array(value) {\n        this._selector.addInt256Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint8(value) {\n        this._selector.addUint8();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint32(value) {\n        this._selector.addUint32();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {BigNumber} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint64(value) {\n        this._selector.addUint64();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {BigNumber} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint256(value) {\n        this._selector.addUint256();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {number[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint8Array(value) {\n        this._selector.addUint8Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {number[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint32Array(value) {\n        this._selector.addUint32Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {BigNumber[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint64Array(value) {\n        this._selector.addUint64Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {BigNumber[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint256Array(value) {\n        this._selector.addUint256Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {ContractFunctionParameters}\n     */\n    addAddress(value) {\n        // Allow `0x` prefix\n        if (value.length !== 40 && value.length !== 42) {\n            throw new Error(\n                \"`address` type requires parameter to be 40 or 42 characters\"\n            );\n        }\n\n        const par =\n            value.length === 40\n                ? hex.decode(value)\n                : hex.decode(value.substring(2));\n\n        this._selector.addAddress();\n\n        return this._addParam(par, false);\n    }\n\n    /**\n     * @param {string[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addAddressArray(value) {\n        /**\n         * @type {Uint8Array[]}\n         */\n        const par = [];\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [_, entry] of value.entries()) {\n            if (entry.length !== 40 && entry.length !== 42) {\n                throw new Error(\n                    \"`address` type requires parameter to be 40 or 42 characters\"\n                );\n            }\n\n            const buf =\n                entry.length === 40\n                    ? hex.decode(entry)\n                    : hex.decode(entry.substring(2));\n\n            par.push(buf);\n        }\n\n        this._selector.addAddressArray();\n\n        return this._addParam(par, true);\n    }\n\n    /**\n     * @param {string} address\n     * @param {ContractFunctionSelector} selector\n     * @returns {ContractFunctionParameters}\n     */\n    addFunction(address, selector) {\n        const addressParam = hex.decode(address);\n        const functionSelector = selector._build();\n\n        if (addressParam.length !== 20) {\n            throw new Error(\n                \"`function` type requires parameter `address` to be exactly 20 bytes\"\n            );\n        }\n\n        this._selector.addFunction();\n\n        const proto = new Uint8Array(24);\n        proto.set(addressParam, 0);\n        proto.set(functionSelector, 20);\n\n        return this._addParam(proto, false);\n    }\n\n    /**\n     * @internal\n     * @param {string | boolean | number | Uint8Array | BigNumber | string[] | boolean[] | number[] | Uint8Array[] | BigNumber[]} param\n     * @param {boolean} dynamic\n     * @returns {ContractFunctionParameters}\n     */\n    _addParam(param, dynamic) {\n        const index = this._selector._paramTypes.length - 1;\n        const value = argumentToBytes(param, this._selector._paramTypes[index]);\n\n        this._arguments.push({ dynamic, value });\n\n        return this;\n    }\n\n    /**\n     * @internal\n     * @param {string=} name\n     * @returns {Uint8Array}\n     */\n    _build(name) {\n        const includeId = name != null;\n        const nameOffset = includeId ? 4 : 0;\n\n        const length =\n            this._arguments.length === 0\n                ? nameOffset\n                : this._arguments.length * 32 +\n                  this._arguments\n                      .map((arg) => (arg.dynamic ? arg.value.length : 0))\n                      .reduce((sum, value) => sum + value) +\n                  nameOffset;\n\n        const func = new Uint8Array(length);\n\n        if (includeId) {\n            func.set(this._selector._build(name), 0);\n        }\n\n        let offset = 32 * this._arguments.length;\n\n        for (const [i, { dynamic, value }] of this._arguments.entries()) {\n            if (dynamic) {\n                const view = new DataView(\n                    func.buffer,\n                    nameOffset + i * 32 + 28\n                );\n                view.setUint32(0, offset);\n                func.set(value, view.getUint32(0) + nameOffset);\n                offset += value.length;\n            } else {\n                func.set(value, nameOffset + i * 32);\n            }\n        }\n\n        return func;\n    }\n}\n\n/**\n * @param {string | boolean | number | Uint8Array | BigNumber | string[] | boolean[] | number[] | Uint8Array[] | BigNumber[]} param\n * @param {import(\"./ContractFunctionSelector.js\").SolidityType} ty\n * @returns {Uint8Array}\n */\nfunction argumentToBytes(param, ty) {\n    let value = new Uint8Array(32);\n    let valueView = new DataView(value.buffer, 0);\n    /** @type {Uint8Array} */\n    let par;\n\n    if (ty.array) {\n        if (!Array.isArray(param)) {\n            throw new TypeError(\n                \"SolidityType indicates type is array, but parameter is not an array\"\n            );\n        }\n\n        /**\n         * @type {Uint8Array[]}\n         */\n        const values = [];\n\n        // Generic over any type of array\n        // Destructuring required so the first variable must be assigned\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [_, p] of param.entries()) {\n            const arg = argumentToBytes(p, { ty: ty.ty, array: false });\n            values.push(arg);\n        }\n\n        const totalLengthOfValues = values\n            .map((a) => a.length)\n            .reduce((total, current) => total + current);\n\n        switch (ty.ty) {\n            case ArgumentType.uint8:\n            case ArgumentType.int8:\n            case ArgumentType.uint16:\n            case ArgumentType.int16:\n            case ArgumentType.uint32:\n            case ArgumentType.int32:\n            case ArgumentType.uint64:\n            case ArgumentType.int64:\n            case ArgumentType.uint256:\n            case ArgumentType.int256:\n            case ArgumentType.bool:\n            case ArgumentType.bytes32:\n            case ArgumentType.address:\n            case ArgumentType.func:\n                value = new Uint8Array(totalLengthOfValues + 32);\n                break;\n            case ArgumentType.bytes:\n            case ArgumentType.string:\n                value = new Uint8Array(\n                    values.length * 32 + totalLengthOfValues + 32\n                );\n                break;\n            default:\n                throw new TypeError(\n                    `Expected param type to be ArgumentType, but received ${ty.ty}`\n                );\n        }\n\n        valueView = new DataView(value.buffer, 28);\n        valueView.setUint32(0, values.length);\n\n        let offset = 32 * values.length;\n\n        for (const [i, e] of values.entries()) {\n            switch (ty.ty) {\n                case ArgumentType.uint8:\n                case ArgumentType.int8:\n                case ArgumentType.uint16:\n                case ArgumentType.int16:\n                case ArgumentType.uint32:\n                case ArgumentType.int32:\n                case ArgumentType.uint64:\n                case ArgumentType.int64:\n                case ArgumentType.uint256:\n                case ArgumentType.int256:\n                case ArgumentType.bool:\n                case ArgumentType.bytes32:\n                case ArgumentType.address:\n                case ArgumentType.func:\n                    value.set(e, i * 32 + 32);\n                    break;\n                case ArgumentType.bytes:\n                case ArgumentType.string:\n                    // eslint-disable-next-line no-case-declarations\n                    const view = new DataView(value.buffer, (i + 1) * 32 + 28);\n                    view.setUint32(0, offset);\n                    value.set(e, view.getUint32(0) + 32);\n                    offset += e.length;\n                    break;\n                default:\n                    throw new TypeError(\n                        `Expected param type to be ArgumentType, but received ${ty.ty}`\n                    );\n            }\n        }\n\n        return value;\n    }\n\n    switch (ty.ty) {\n        case ArgumentType.uint8:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                31,\n                valueView.setUint8.bind(valueView)\n            );\n            return value;\n        case ArgumentType.int8:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                31,\n                valueView.setInt8.bind(valueView)\n            );\n            return value;\n        case ArgumentType.uint16:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                30,\n                valueView.setUint16.bind(valueView)\n            );\n            return value;\n        case ArgumentType.int16:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                30,\n                valueView.setInt16.bind(valueView)\n            );\n            return value;\n        case ArgumentType.uint32:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                28,\n                valueView.setUint32.bind(valueView)\n            );\n            return value;\n        case ArgumentType.int32:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                28,\n                valueView.setInt32.bind(valueView)\n            );\n            return value;\n        // int64, uint64, and int256 both expect the parameter to be an Uint8Array instead of number\n        case ArgumentType.uint64:\n        case ArgumentType.int64:\n            if (BigNumber.isBigNumber(param)) {\n                // eslint-disable-next-line no-case-declarations\n                let par = param.toString(16);\n                if (par.length > 16) {\n                    throw new TypeError(\n                        \"uint64/int64 requires BigNumber to be less than or equal to 8 bytes\"\n                    );\n                } else if (!param.isInteger()) {\n                    throw new TypeError(\n                        \"uint64/int64 requires BigNumber to be an integer\"\n                    );\n                }\n\n                if (par.length % 2 === 1) {\n                    par = `0${par}`;\n                }\n\n                // eslint-disable-next-line no-case-declarations\n                const buf = hex.decode(par);\n                value.set(buf, 32 - buf.length);\n            }\n            return value;\n        case ArgumentType.int256:\n        case ArgumentType.uint256:\n            if (BigNumber.isBigNumber(param)) {\n                let par = param.toString(16);\n                if (par.length % 2 === 1) {\n                    par = `0${par}`;\n                }\n\n                const buf = hex.decode(par);\n                value.set(buf, 32 - buf.length);\n            }\n            return value;\n        case ArgumentType.address:\n            value.set(/** @type {Uint8Array} */ (param), 32 - 20);\n            return value;\n        case ArgumentType.bool:\n            value[31] = /** @type {boolean} */ (param) ? 1 : 0;\n            return value;\n        case ArgumentType.func:\n            value.set(/** @type {Uint8Array} */ (param), 32 - 24);\n            return value;\n        case ArgumentType.bytes32:\n            value.set(/** @type {Uint8Array} */ (param), 0);\n            return value;\n        // Bytes should have not the length already encoded\n        // JS String type is encoded as UTF-16 whilst Solidity `string` type is UTF-8 encoded.\n        // So if will assume is already correctly updated to being a Uint8Array of UTF-8 string\n        case ArgumentType.bytes:\n        case ArgumentType.string:\n            // If value is of type string, encode it in UTF-8 format and conver it to Uint8Array\n            // Required because JS Strings are UTF-16\n            // eslint-disable-next-line no-case-declarations\n            par =\n                param instanceof Uint8Array\n                    ? param\n                    : utf8.encode(/** @type {string} */ (param));\n\n            // Resize value to a 32 byte boundary if needed\n            if (\n                Math.floor(par.length / 32) >= 0 &&\n                Math.floor(par.length % 32) !== 0\n            ) {\n                value = new Uint8Array(\n                    (Math.floor(par.length / 32) + 1) * 32 + 32\n                );\n            } else {\n                value = new Uint8Array(64);\n            }\n\n            value.set(par, 32);\n\n            valueView = new DataView(value.buffer, 28);\n            valueView.setUint32(0, par.length);\n            return value;\n        default:\n            throw new Error(`Unsupported argument type: ${ty.toString()}`);\n    }\n}\n\n/**\n * @param {number | BigNumber} param\n * @param {number} byteoffset\n * @param {(byteOffset: number, value: number) => void} func\n * @returns {void}\n */\nfunction numberToBytes(param, byteoffset, func) {\n    const value = BigNumber.isBigNumber(param) ? param.toNumber() : param;\n\n    func(byteoffset, value);\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractFunctionParameters from \"./ContractFunctionParameters.js\";\nimport ContractFunctionResult from \"./ContractFunctionResult.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IContractCallLocalQuery} proto.IContractCallLocalQuery\n * @typedef {import(\"@hashgraph/proto\").IContractCallLocalResponse} proto.IContractCallLocalResponse\n * @typedef {import(\"@hashgraph/proto\").IContractFunctionResult} proto.IContractFunctionResult\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @typedef {object} FunctionParameters\n * @property {ContractFunctionParameters} parameters\n * @property {string} name\n */\n\n/**\n * @augments {Query<ContractFunctionResult>}\n */\nexport default class ContractCallQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     * @param {number | Long} [props.gas]\n     * @param {FunctionParameters | Uint8Array} [props.functionParameters]\n     * @param {number | Long} [props.maxResultSize]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._gas = null;\n        if (props.gas != null) {\n            this.setGas(props.gas);\n        }\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._functionParameters = null;\n        if (props.functionParameters != null) {\n            if (props.functionParameters instanceof Uint8Array) {\n                this.setFunctionParameters(props.functionParameters);\n            } else {\n                this.setFunction(\n                    props.functionParameters.name,\n                    props.functionParameters.parameters\n                );\n            }\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._maxResultSize = null;\n        if (props.maxResultSize != null) {\n            this.setMaxResultSize(props.maxResultSize);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {ContractCallQuery}\n     */\n    static _fromProtobuf(query) {\n        const call = /** @type {proto.IContractCallLocalQuery} */ (query.contractCallLocal);\n\n        return new ContractCallQuery({\n            contractId:\n                call.contractID != null\n                    ? ContractId._fromProtobuf(call.contractID)\n                    : undefined,\n            gas: call.gas != null ? call.gas : undefined,\n            functionParameters:\n                call.functionParameters != null\n                    ? call.functionParameters\n                    : undefined,\n            maxResultSize:\n                call.maxResultSize != null ? call.maxResultSize : undefined,\n        });\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the call is being requested.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractCallQuery}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get gas() {\n        return this._gas;\n    }\n\n    /**\n     * @param {number | Long} gas\n     * @returns {ContractCallQuery}\n     */\n    setGas(gas) {\n        this._gas = gas instanceof Long ? gas : Long.fromValue(gas);\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get functionParameters() {\n        return this._functionParameters;\n    }\n\n    /**\n     * @param {Uint8Array} params\n     * @returns {ContractCallQuery}\n     */\n    setFunctionParameters(params) {\n        this._functionParameters = params;\n        return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {?ContractFunctionParameters} [params]\n     * @returns {ContractCallQuery}\n     */\n    setFunction(name, params) {\n        this._functionParameters = (params != null\n            ? params\n            : new ContractFunctionParameters()\n        )._build(name);\n\n        return this;\n    }\n\n    /**\n     * @param {number | Long} size\n     * @returns {ContractCallQuery}\n     */\n    setMaxResultSize(size) {\n        this._maxResultSize =\n            size instanceof Long ? size : Long.fromValue(size);\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.contractCallLocalMethod(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const contractCallLocal = /** @type {proto.IContractCallLocalResponse} */ (response.contractCallLocal);\n        return /** @type {proto.IResponseHeader} */ (contractCallLocal.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<ContractFunctionResult>}\n     */\n    _mapResponse(response) {\n        const call =\n            /**\n             *@type {proto.IContractCallLocalResponse}\n             */\n            (response.contractCallLocal);\n\n        return Promise.resolve(\n            ContractFunctionResult._fromProtobuf(\n                /**\n                 * @type {proto.IContractFunctionResult}\n                 */\n                (call.functionResult)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            contractCallLocal: {\n                header,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n                gas: this._gas,\n                functionParameters: this._functionParameters,\n                maxResultSize: this._maxResultSize,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"contractCallLocal\", ContractCallQuery._fromProtobuf);\n","import Hbar from \"../Hbar.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport FileId from \"../file/FileId.js\";\nimport ContractFunctionParameters from \"./ContractFunctionParameters.js\";\nimport Transaction, {\n    DEFAULT_AUTO_RENEW_PERIOD,\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Long from \"long\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IContractCreateTransactionBody} proto.IContractCreateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IFileID} proto.IFileID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class ContractCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.bytecodeFileId]\n     * @param {Key} [props.adminKey]\n     * @param {number | Long} [props.gas]\n     * @param {number | string | Long | BigNumber | Hbar} [props.initialBalance]\n     * @param {AccountId | string} [props.proxyAccountId]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {Uint8Array} [props.constructorParameters]\n     * @param {string} [props.contractMemo]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._bytecodeFileId = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._gas = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._initialBalance = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._proxyAccountId = null;\n\n        /**\n         * @private\n         * @type {Duration}\n         */\n        this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._constructorParameters = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._contractMemo = null;\n\n        this.setMaxTransactionFee(new Hbar(20));\n\n        if (props.bytecodeFileId != null) {\n            this.setBytecodeFileId(props.bytecodeFileId);\n        }\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.gas != null) {\n            this.setGas(props.gas);\n        }\n\n        if (props.initialBalance != null) {\n            this.setInitialBalance(props.initialBalance);\n        }\n\n        if (props.proxyAccountId != null) {\n            this.setProxyAccountId(props.proxyAccountId);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        if (props.constructorParameters != null) {\n            this.setConstructorParameters(props.constructorParameters);\n        }\n\n        if (props.contractMemo != null) {\n            this.setContractMemo(props.contractMemo);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {ContractCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const create = /** @type {proto.IContractCreateTransactionBody} */ (body.contractCreateInstance);\n\n        return Transaction._fromProtobufTransactions(\n            new ContractCreateTransaction({\n                bytecodeFileId:\n                    create.fileID != null\n                        ? FileId._fromProtobuf(\n                              /** @type {proto.IFileID} */ (create.fileID)\n                          )\n                        : undefined,\n                adminKey:\n                    create.adminKey != null\n                        ? keyFromProtobuf(create.adminKey)\n                        : undefined,\n                gas: create.gas != null ? create.gas : undefined,\n                initialBalance:\n                    create.initialBalance != null\n                        ? create.initialBalance\n                        : undefined,\n                proxyAccountId:\n                    create.proxyAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (create.proxyAccountID)\n                          )\n                        : undefined,\n                autoRenewPeriod:\n                    create.autoRenewPeriod != null\n                        ? create.autoRenewPeriod.seconds != null\n                            ? create.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                constructorParameters:\n                    create.constructorParameters != null\n                        ? create.constructorParameters\n                        : undefined,\n                contractMemo: create.memo != null ? create.memo : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get bytecodeFileId() {\n        return this._bytecodeFileId;\n    }\n\n    /**\n     * @param {FileId | string} bytecodeFileId\n     * @returns {this}\n     */\n    setBytecodeFileId(bytecodeFileId) {\n        this._requireNotFrozen();\n        this._bytecodeFileId =\n            bytecodeFileId instanceof FileId\n                ? bytecodeFileId\n                : FileId.fromString(bytecodeFileId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {this}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get gas() {\n        return this._gas;\n    }\n\n    /**\n     * @param {number | Long} gas\n     * @returns {this}\n     */\n    setGas(gas) {\n        this._requireNotFrozen();\n        this._gas = gas instanceof Long ? gas : Long.fromValue(gas);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get initialBalance() {\n        return this._initialBalance;\n    }\n\n    /**\n     * Set the initial amount to transfer into this contract.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} initialBalance\n     * @returns {this}\n     */\n    setInitialBalance(initialBalance) {\n        this._requireNotFrozen();\n        this._initialBalance =\n            initialBalance instanceof Hbar\n                ? initialBalance\n                : new Hbar(initialBalance);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        return this._proxyAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        this._requireNotFrozen();\n        this._proxyAccountId =\n            proxyAccountId instanceof AccountId\n                ? proxyAccountId\n                : AccountId.fromString(proxyAccountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get constructorParameters() {\n        return this._constructorParameters;\n    }\n\n    /**\n     * @param {Uint8Array | ContractFunctionParameters} constructorParameters\n     * @returns {this}\n     */\n    setConstructorParameters(constructorParameters) {\n        this._requireNotFrozen();\n        this._constructorParameters =\n            constructorParameters instanceof ContractFunctionParameters\n                ? constructorParameters._build()\n                : constructorParameters;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get contractMemo() {\n        return this._contractMemo;\n    }\n\n    /**\n     * @param {string} contractMemo\n     * @returns {this}\n     */\n    setContractMemo(contractMemo) {\n        this._requireNotFrozen();\n        this._contractMemo = contractMemo;\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.createContract(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"contractCreateInstance\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IContractCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            fileID:\n                this._bytecodeFileId != null\n                    ? this._bytecodeFileId._toProtobuf()\n                    : null,\n            adminKey:\n                this._adminKey != null ? keyToProtobuf(this._adminKey) : null,\n            gas: this._gas,\n            initialBalance:\n                this._initialBalance != null\n                    ? this._initialBalance.toTinybars()\n                    : null,\n            proxyAccountID:\n                this._proxyAccountId != null\n                    ? this._proxyAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),\n            constructorParameters: this._constructorParameters,\n            memo: this._contractMemo,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"contractCreateInstance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ContractCreateTransaction._fromProtobuf\n);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IContractDeleteTransactionBody} proto.IContractDeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class ContractDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     * @param {ContractId | string} [props.transferContractId]\n     * @param {AccountId | string} [props.transferAccountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._transferAccountId = null;\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._transferContractId = null;\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        if (props.transferAccountId != null) {\n            this.setTransferAccountId(props.transferAccountId);\n        }\n\n        if (props.transferContractId != null) {\n            this.setTransferContractId(props.transferContractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {ContractDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const contractDelete = /** @type {proto.IContractDeleteTransactionBody} */ (body.contractDeleteInstance);\n\n        return Transaction._fromProtobufTransactions(\n            new ContractDeleteTransaction({\n                contractId:\n                    contractDelete.contractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {proto.IContractID} */ (contractDelete.contractID)\n                          )\n                        : undefined,\n                transferAccountId:\n                    contractDelete.transferAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (contractDelete.transferAccountID)\n                          )\n                        : undefined,\n                transferContractId:\n                    contractDelete.transferContractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {proto.IContractID} */ (contractDelete.transferContractID)\n                          )\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Sets the contract ID which is being deleted in this transaction.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractDeleteTransaction}\n     */\n    setContractId(contractId) {\n        this._requireNotFrozen();\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get transferContractId() {\n        return this._transferContractId;\n    }\n\n    /**\n     * Sets the contract ID which will receive all remaining hbars.\n     *\n     * @param {ContractId | string} transferContractId\n     * @returns {ContractDeleteTransaction}\n     */\n    setTransferContractId(transferContractId) {\n        this._requireNotFrozen();\n        this._transferContractId =\n            transferContractId instanceof ContractId\n                ? transferContractId\n                : ContractId.fromString(transferContractId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get transferAccountId() {\n        return this._transferAccountId;\n    }\n\n    /**\n     * Sets the account ID which will receive all remaining hbars.\n     *\n     * @param {AccountId | string} transferAccountId\n     * @returns {ContractDeleteTransaction}\n     */\n    setTransferAccountId(transferAccountId) {\n        this._requireNotFrozen();\n        this._transferAccountId =\n            transferAccountId instanceof AccountId\n                ? transferAccountId\n                : AccountId.fromString(transferAccountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.deleteContract(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"contractDeleteInstance\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IContractDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            contractID:\n                this._contractId != null\n                    ? this._contractId._toProtobuf()\n                    : null,\n            transferAccountID: this._transferAccountId\n                ? this._transferAccountId._toProtobuf()\n                : null,\n            transferContractID:\n                this._transferContractId != null\n                    ? this._transferContractId._toProtobuf()\n                    : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"contractDeleteInstance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ContractDeleteTransaction._fromProtobuf\n);\n","import Hbar from \"../Hbar.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractFunctionParameters from \"./ContractFunctionParameters.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IContractCallTransactionBody} proto.IContractCallTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").IFileID} proto.IFileID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} FunctionParameters\n * @property {string} name\n * @property {ContractFunctionParameters} parameters\n */\n\nexport default class ContractExecuteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     * @param {number | Long} [props.gas]\n     * @param {number | string | Long | BigNumber | Hbar} [props.amount]\n     * @param {Uint8Array} [props.functionParameters]\n     * @param {FunctionParameters} [props.function]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._gas = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._amount = null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._functionParameters = null;\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        if (props.gas != null) {\n            this.setGas(props.gas);\n        }\n\n        if (props.amount != null) {\n            this.setPayableAmount(props.amount);\n        }\n\n        if (props.functionParameters != null) {\n            this.setFunctionParameters(props.functionParameters);\n        } else if (props.function != null) {\n            this.setFunction(props.function.name, props.function.parameters);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {ContractExecuteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const call = /** @type {proto.IContractCallTransactionBody} */ (body.contractCall);\n\n        return Transaction._fromProtobufTransactions(\n            new ContractExecuteTransaction({\n                contractId:\n                    call.contractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {proto.IContractID} */ (call.contractID)\n                          )\n                        : undefined,\n                gas: call.gas != null ? call.gas : undefined,\n                amount: call.amount ? call.amount : undefined,\n                functionParameters:\n                    call.functionParameters != null\n                        ? call.functionParameters\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Sets the contract ID which is being executed in this transaction.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractExecuteTransaction}\n     */\n    setContractId(contractId) {\n        this._requireNotFrozen();\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get gas() {\n        return this._gas;\n    }\n\n    /**\n     * Sets the contract ID which is being executed in this transaction.\n     *\n     * @param {number | Long} gas\n     * @returns {ContractExecuteTransaction}\n     */\n    setGas(gas) {\n        this._requireNotFrozen();\n        this._gas = gas instanceof Long ? gas : Long.fromValue(gas);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get payableAmount() {\n        return this._amount;\n    }\n\n    /**\n     * Sets the contract ID which is being executed in this transaction.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} amount\n     * @returns {ContractExecuteTransaction}\n     */\n    setPayableAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = amount instanceof Hbar ? amount : new Hbar(amount);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get functionParameters() {\n        return this._functionParameters;\n    }\n\n    /**\n     * @param {Uint8Array} functionParameters\n     */\n    setFunctionParameters(functionParameters) {\n        this._requireNotFrozen();\n        this._functionParameters = functionParameters;\n    }\n\n    /**\n     * @param {string} name\n     * @param {ContractFunctionParameters} [functionParameters]\n     * @returns {this}\n     */\n    setFunction(name, functionParameters) {\n        this._requireNotFrozen();\n        this._functionParameters =\n            functionParameters != null\n                ? functionParameters._build(name)\n                : new ContractFunctionParameters()._build(name);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.contractCallMethod(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"contractCall\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IContractCallTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            contractID:\n                this._contractId != null\n                    ? this._contractId._toProtobuf()\n                    : null,\n            gas: this._gas,\n            amount: this._amount != null ? this._amount.toTinybars() : null,\n            functionParameters: this._functionParameters,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"contractCall\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ContractExecuteTransaction._fromProtobuf\n);\n","import ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\nimport Hbar from \"../Hbar.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport TokenRelationshipMap from \"../account/TokenRelationshipMap.js\";\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n */\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\nexport default class ContractInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ContractId} props.contractId\n     * @param {AccountId} props.accountId\n     * @param {string} props.contractAccountId\n     * @param {?Key} props.adminKey\n     * @param {Timestamp} props.expirationTime\n     * @param {Duration} props.autoRenewPeriod\n     * @param {Long} props.storage\n     * @param {string} props.contractMemo\n     * @param {Hbar} props.balance\n     * @param {boolean} props.isDeleted\n     * @param {TokenRelationshipMap} props.tokenRelationships\n     */\n    constructor(props) {\n        /**\n         * ID of the contract instance, in the format used in transactions.\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * ID of the cryptocurrency account owned by the contract instance,\n         * in the format used in transactions.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * ID of both the contract instance and the cryptocurrency account owned by the contract\n         * instance, in the format used by Solidity.\n         *\n         * @readonly\n         */\n        this.contractAccountId = props.contractAccountId;\n\n        /**\n         * The state of the instance and its fields can be modified arbitrarily if this key signs a\n         * transaction to modify it. If this is null, then such modifications are not possible,\n         * and there is no administrator that can override the normal operation of this smart\n         * contract instance. Note that if it is created with no admin keys, then there is no\n         * administrator to authorize changing the admin keys, so there can never be any admin keys\n         * for that instance.\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey != null ? props.adminKey : null;\n\n        /**\n         * The current time at which this contract instance (and its account) is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The expiration time will extend every this many seconds. If there are insufficient funds,\n         * then it extends as long as possible. If the account is empty when it expires,\n         * then it is deleted.\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * Number of bytes of storage being used by this instance (which affects the cost to\n         * extend the expiration time).\n         *\n         * @readonly\n         */\n        this.storage = props.storage;\n\n        /**\n         * The memo associated with the contract (max 100 bytes).\n         *\n         * @readonly\n         */\n        this.contractMemo = props.contractMemo;\n\n        /**\n         * The current balance of the contract.\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * Whether the contract has been deleted\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * The tokens associated to the contract\n         *\n         * @readonly\n         */\n        this.tokenRelationships = props.tokenRelationships;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IContractInfo} info\n     * @returns {ContractInfo}\n     */\n    static _fromProtobuf(info) {\n        const autoRenewPeriod = /** @type {Long | number} */ (\n            /** @type {proto.IDuration} */ (info.autoRenewPeriod).seconds\n        );\n\n        return new ContractInfo({\n            contractId: ContractId._fromProtobuf(\n                /** @type {proto.IContractID} */ (info.contractID)\n            ),\n            accountId: AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (info.accountID)\n            ),\n            contractAccountId:\n                info.contractAccountID != null ? info.contractAccountID : \"\",\n            adminKey:\n                info.adminKey != null ? keyFromProtobuf(info.adminKey) : null,\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */ (info.expirationTime)\n            ),\n            autoRenewPeriod: new Duration(autoRenewPeriod),\n            storage:\n                info.storage != null\n                    ? info.storage instanceof Long\n                        ? info.storage\n                        : Long.fromValue(info.storage)\n                    : Long.ZERO,\n            contractMemo: info.memo != null ? info.memo : \"\",\n            balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            tokenRelationships: TokenRelationshipMap._fromProtobuf(\n                info.tokenRelationships != null ? info.tokenRelationships : []\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IContractInfo}\n     */\n    _toProtobuf() {\n        return {\n            contractID: this.contractId._toProtobuf(),\n            accountID: this.accountId._toProtobuf(),\n            contractAccountID: this.contractAccountId,\n            adminKey:\n                this.adminKey != null ? keyToProtobuf(this.adminKey) : null,\n            expirationTime: this.expirationTime._toProtobuf(),\n            autoRenewPeriod:\n                this.autoRenewPeriod != null\n                    ? this.autoRenewPeriod._toProtobuf()\n                    : null,\n            storage: this.storage,\n            memo: this.contractMemo,\n            balance: this.balance.toTinybars(),\n            deleted: this.isDeleted,\n            tokenRelationships:\n                this.tokenRelationships != null\n                    ? this.tokenRelationships._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ContractInfo}\n     */\n    static fromBytes(bytes) {\n        return ContractInfo._fromProtobuf(\n            proto.ContractGetInfoResponse.ContractInfo.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.ContractGetInfoResponse.ContractInfo.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractInfo from \"./ContractInfo.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IContractGetInfoQuery} proto.IContractGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").IContractGetInfoResponse} proto.IContractGetInfoResponse\n * @typedef {import(\"@hashgraph/proto\").IContractInfo} proto.IContractInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<ContractInfo>}\n */\nexport default class ContractInfoQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {ContractInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {proto.IContractGetInfoQuery} */ (query.contractGetInfo);\n\n        return new ContractInfoQuery({\n            contractId:\n                info.contractID != null\n                    ? ContractId._fromProtobuf(info.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the info is being requested.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractInfoQuery}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.getContractInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const contractGetInfo = /** @type {proto.IContractGetInfoResponse} */ (response.contractGetInfo);\n        return /** @type {proto.IResponseHeader} */ (contractGetInfo.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<ContractInfo>}\n     */\n    _mapResponse(response) {\n        const info = /** @type {proto.IContractGetInfoResponse} */ (response.contractGetInfo);\n\n        return Promise.resolve(\n            ContractInfo._fromProtobuf(\n                /** @type {proto.IContractInfo} */ (info.contractInfo)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            contractGetInfo: {\n                header,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"contractGetInfo\", ContractInfoQuery._fromProtobuf);\n","import AccountId from \"../account/AccountId.js\";\nimport ContractId from \"./ContractId.js\";\nimport FileId from \"../file/FileId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport { keyToProtobuf, keyFromProtobuf } from \"../cryptography/protobuf.js\";\nimport Duration from \"../Duration.js\";\nimport Timestamp from \"../Timestamp.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IContractUpdateTransactionBody} proto.IContractUpdateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").IFileID} proto.IFileID\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class ContractUpdateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {ContractId | string} [props.contractId]\n     * @param {FileId | string} [props.bytecodeFileId]\n     * @param {Timestamp | Date} [props.expirationTime]\n     * @param {Key} [props.adminKey]\n     * @param {AccountId | string} [props.proxyAccountId]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {string} [props.contractMemo]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._proxyAccountId = null;\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._autoRenewPeriod = null;\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._bytecodeFileId = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._contractMemo = null;\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.proxyAccountId != null) {\n            this.setProxyAccountId(props.proxyAccountId);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        if (props.bytecodeFileId != null) {\n            this.setBytecodeFileId(props.bytecodeFileId);\n        }\n\n        if (props.contractMemo != null) {\n            this.setContractMemo(props.contractMemo);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {ContractUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const update = /** @type {proto.IContractUpdateTransactionBody} */ (body.contractUpdateInstance);\n\n        return Transaction._fromProtobufTransactions(\n            new ContractUpdateTransaction({\n                contractId:\n                    update.contractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {proto.IContractID} */ (update.contractID)\n                          )\n                        : undefined,\n                bytecodeFileId:\n                    update.fileID != null\n                        ? FileId._fromProtobuf(\n                              /** @type {proto.IFileID} */ (update.fileID)\n                          )\n                        : undefined,\n                expirationTime:\n                    update.expirationTime != null\n                        ? Timestamp._fromProtobuf(update.expirationTime)\n                        : undefined,\n                adminKey:\n                    update.adminKey != null\n                        ? keyFromProtobuf(update.adminKey)\n                        : undefined,\n                proxyAccountId:\n                    update.proxyAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (update.proxyAccountID)\n                          )\n                        : undefined,\n                autoRenewPeriod:\n                    update.autoRenewPeriod != null\n                        ? update.autoRenewPeriod.seconds != null\n                            ? update.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                contractMemo: update.memo != null ? update.memo : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Sets the contract ID which is being deleted in this transaction.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractUpdateTransaction}\n     */\n    setContractId(contractId) {\n        this._requireNotFrozen();\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * Sets the contract ID which is being deleted in this transaction.\n     *\n     * @param {Timestamp | Date} expirationTime\n     * @returns {ContractUpdateTransaction}\n     */\n    setExpirationTime(expirationTime) {\n        this._requireNotFrozen();\n        this._expirationTime =\n            expirationTime instanceof Timestamp\n                ? expirationTime\n                : Timestamp.fromDate(expirationTime);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {this}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        return this._proxyAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        this._requireNotFrozen();\n        this._proxyAccountId =\n            proxyAccountId instanceof AccountId\n                ? proxyAccountId\n                : AccountId.fromString(proxyAccountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get bytecodeFileId() {\n        return this._bytecodeFileId;\n    }\n\n    /**\n     * @param {FileId | string} bytecodeFileId\n     * @returns {this}\n     */\n    setBytecodeFileId(bytecodeFileId) {\n        this._requireNotFrozen();\n        this._bytecodeFileId =\n            bytecodeFileId instanceof FileId\n                ? bytecodeFileId\n                : FileId.fromString(bytecodeFileId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get contractMemo() {\n        return this._contractMemo;\n    }\n\n    /**\n     * @param {string} contractMemo\n     * @returns {this}\n     */\n    setContractMemo(contractMemo) {\n        this._requireNotFrozen();\n        this._contractMemo = contractMemo;\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.updateContract(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"contractUpdateInstance\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IContractUpdateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            contractID:\n                this._contractId != null\n                    ? this._contractId._toProtobuf()\n                    : null,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n            adminKey:\n                this._adminKey != null ? keyToProtobuf(this._adminKey) : null,\n            proxyAccountID:\n                this._proxyAccountId != null\n                    ? this._proxyAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod:\n                this._autoRenewPeriod != null\n                    ? this._autoRenewPeriod._toProtobuf()\n                    : null,\n            fileID: this._bytecodeFileId\n                ? this._bytecodeFileId._toProtobuf()\n                : null,\n            memo: this._contractMemo,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"contractUpdateInstance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ContractUpdateTransaction._fromProtobuf\n);\n","import Hbar from \"../Hbar.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n    CHUNK_SIZE,\n} from \"../transaction/Transaction.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport FileId from \"./FileId.js\";\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport Timestamp from \"../Timestamp.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IFileAppendTransactionBody} proto.IFileAppendTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IFileID} proto.IFileID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionResponse.js\").default} TransactionResponse\n */\n\n/**\n * A transaction specifically to append data to a file on the network.\n *\n * If a file has multiple keys, all keys must sign to modify its contents.\n */\nexport default class FileAppendTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.fileId]\n     * @param {Uint8Array | string} [props.contents]\n     * @param {number} [props.maxChunks]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._fileId = null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._contents = null;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._maxChunks = 10;\n\n        this.setMaxTransactionFee(new Hbar(5));\n\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n\n        if (props.contents != null) {\n            this.setContents(props.contents);\n        }\n\n        if (props.maxChunks != null) {\n            this.setMaxChunks(props.maxChunks);\n        }\n\n        /** @type {number} */\n        this._startIndex = 0;\n\n        /** @type {TransactionId[]} */\n        this._transactionIds = [];\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {FileAppendTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const append = /** @type {proto.IFileAppendTransactionBody} */ (body.fileAppend);\n\n        let contents;\n        for (let i = 0; i < bodies.length; i += nodeIds.length) {\n            const fileAppend = /** @type {proto.IFileAppendTransactionBody} */ (bodies[\n                i\n            ].fileAppend);\n            if (fileAppend.contents == null) {\n                break;\n            }\n\n            if (contents == null) {\n                contents = new Uint8Array(\n                    /** @type {Uint8Array} */ (fileAppend.contents)\n                );\n                continue;\n            }\n\n            /** @type {Uint8Array} */\n            const concat = new Uint8Array(\n                contents.length +\n                    /** @type {Uint8Array} */ (fileAppend.contents).length\n            );\n            concat.set(contents, 0);\n            concat.set(\n                /** @type {Uint8Array} */ (fileAppend.contents),\n                contents.length\n            );\n            contents = concat;\n        }\n\n        return Transaction._fromProtobufTransactions(\n            new FileAppendTransaction({\n                fileId:\n                    append.fileID != null\n                        ? FileId._fromProtobuf(\n                              /** @type {proto.IFileID} */ (append.fileID)\n                          )\n                        : undefined,\n                contents: contents,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * Set the keys which must sign any transactions modifying this file. Required.\n     *\n     * All keys must sign to modify the file's contents or keys. No key is required\n     * to sign for extending the expiration time (except the one for the operator account\n     * paying for the transaction). Only one key must sign to delete the file, however.\n     *\n     * To require more than one key to sign to delete a file, add them to a\n     * KeyList and pass that here.\n     *\n     * The network currently requires a file to have at least one key (or key list or threshold key)\n     * but this requirement may be lifted in the future.\n     *\n     * @param {FileId | string} fileId\n     * @returns {this}\n     */\n    setFileId(fileId) {\n        this._requireNotFrozen();\n        this._fileId =\n            fileId instanceof FileId ? fileId : FileId.fromString(fileId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get contents() {\n        return this._contents;\n    }\n\n    /**\n     * Set the given byte array as the file's contents.\n     *\n     * This may be omitted to append an empty file.\n     *\n     * Note that total size for a given transaction is limited to 6KiB (as of March 2020) by the\n     * network; if you exceed this you may receive a HederaPreCheckStatusException\n     * with Status#TransactionOversize.\n     *\n     * In this case, you will need to break the data into chunks of less than ~6KiB and execute this\n     * transaction with the first chunk and then use FileAppendTransaction with\n     * FileAppendTransaction#setContents(Uint8Array) for the remaining chunks.\n     *\n     * @param {Uint8Array | string} contents\n     * @returns {this}\n     */\n    setContents(contents) {\n        this._requireNotFrozen();\n        this._contents =\n            contents instanceof Uint8Array ? contents : utf8.encode(contents);\n\n        return this;\n    }\n\n    /**\n     * @returns {?number}\n     */\n    get maxChunks() {\n        return this._maxChunks;\n    }\n\n    /**\n     * @param {number} maxChunks\n     * @returns {this}\n     */\n    setMaxChunks(maxChunks) {\n        this._requireNotFrozen();\n        this._maxChunks = maxChunks;\n        return this;\n    }\n\n    /**\n     * Freeze this transaction from further modification to prepare for\n     * signing or serialization.\n     *\n     * Will use the `Client`, if available, to generate a default Transaction ID and select 1/3\n     * nodes to prepare this transaction for.\n     *\n     * @param {?import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {this}\n     */\n    freezeWith(client) {\n        super.freezeWith(client);\n\n        if (this._contents == null) {\n            return this;\n        }\n\n        const chunks = Math.floor(\n            (this._contents.length + (CHUNK_SIZE - 1)) / CHUNK_SIZE\n        );\n\n        if (chunks > this._maxChunks) {\n            throw new Error(\n                `Contents with size ${this._contents.length} too long for ${this._maxChunks} chunks`\n            );\n        }\n\n        let nextTransactionId = this.transactionId;\n\n        super._transactions = [];\n        super._transactionIds = [];\n        super._signedTransactions = [];\n        super._nextTransactionIndex = 0;\n\n        for (let chunk = 0; chunk < chunks; chunk++) {\n            this._startIndex = chunk * CHUNK_SIZE;\n\n            this._transactionIds.push(nextTransactionId);\n\n            for (const nodeAccountId of this._nodeIds) {\n                this._signedTransactions.push(\n                    this._makeSignedTransaction(nodeAccountId)\n                );\n            }\n\n            nextTransactionId = new TransactionId(\n                nextTransactionId.accountId,\n                new Timestamp(\n                    nextTransactionId.validStart.seconds,\n                    nextTransactionId.validStart.nanos.add(1)\n                )\n            );\n\n            super._nextTransactionIndex = this._nextTransactionIndex + 1;\n        }\n\n        this._startIndex = 0;\n        super._nextTransactionIndex = 0;\n\n        return this;\n    }\n\n    /**\n     * @param {import(\"../client/Client.js\").default<*, *>} client\n     * @returns {Promise<TransactionResponse>}\n     */\n    async execute(client) {\n        return (await this.executeAll(client))[0];\n    }\n\n    /**\n     * @param {import(\"../client/Client.js\").default<*, *>} client\n     * @returns {Promise<TransactionResponse[]>}\n     */\n    async executeAll(client) {\n        if (!super._isFrozen()) {\n            this.freezeWith(client);\n        }\n\n        // on execute, sign each transaction with the operator, if present\n        // and we are signing a transaction that used the default transaction ID\n\n        const transactionId = this.transactionId;\n        const operatorAccountId = client.operatorAccountId;\n\n        if (\n            operatorAccountId != null &&\n            operatorAccountId.equals(transactionId.accountId)\n        ) {\n            await super.signWithOperator(client);\n        }\n\n        const responses = [];\n        for (let i = 0; i < this._transactionIds.length; i++) {\n            const response = await super.execute(client);\n            await response.getReceipt(client);\n            responses.push(response);\n        }\n\n        return responses;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.file.appendContent(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"fileAppend\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IFileAppendTransactionBody}\n     */\n    _makeTransactionData() {\n        const length = this._contents != null ? this._contents.length : 0;\n        let endIndex = this._startIndex + CHUNK_SIZE;\n        if (endIndex > length) {\n            endIndex = length;\n        }\n\n        return {\n            fileID: this._fileId != null ? this._fileId._toProtobuf() : null,\n            contents:\n                this._contents != null\n                    ? this._contents.slice(this._startIndex, endIndex)\n                    : null,\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nTRANSACTION_REGISTRY.set(\"fileAppend\", FileAppendTransaction._fromProtobuf);\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport FileId from \"./FileId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IFileGetContentsQuery} proto.IFileGetContentsQuery\n * @typedef {import(\"@hashgraph/proto\").IFileGetContentsResponse} proto.IFileGetContentsResponse\n * @typedef {import(\"@hashgraph/proto\").IFileContents} proto.IFileContents\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<Uint8Array>}\n */\nexport default class FileContentsQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.fileId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?FileId}\n         * @private\n         */\n        this._fileId = null;\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {FileContentsQuery}\n     */\n    static _fromProtobuf(query) {\n        const contents = /** @type {proto.IFileGetContentsQuery} */ (query.fileGetContents);\n\n        return new FileContentsQuery({\n            fileId:\n                contents.fileID != null\n                    ? FileId._fromProtobuf(contents.fileID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.file.getFileContent(request);\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * Set the file ID for which the info is being requested.\n     *\n     * @param {FileId | string} fileId\n     * @returns {FileContentsQuery}\n     */\n    setFileId(fileId) {\n        this._fileId =\n            fileId instanceof FileId ? fileId : FileId.fromString(fileId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const fileGetContents = /** @type {proto.IFileGetContentsResponse} */ (response.fileGetContents);\n        return /** @type {proto.IResponseHeader} */ (fileGetContents.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<Uint8Array>}\n     */\n    _mapResponse(response) {\n        const fileContentsResponse = /** @type {proto.IFileGetContentsResponse} */ (response.fileGetContents);\n        const fileConents = /** @type {proto.IFileContents} */ (fileContentsResponse.fileContents);\n        const contents = /** @type {Uint8Array} */ (fileConents.contents);\n\n        return Promise.resolve(contents);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            fileGetContents: {\n                header,\n                fileID:\n                    this._fileId != null ? this._fileId._toProtobuf() : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"fileGetContents\", FileContentsQuery._fromProtobuf);\n","import Hbar from \"../Hbar.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n    DEFAULT_AUTO_RENEW_PERIOD,\n} from \"../transaction/Transaction.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport { KeyList } from \"@hashgraph/cryptography\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IFileCreateTransactionBody} proto.IFileCreateTransactionBody\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Create a new Hedera™ crypto-currency file.\n */\nexport default class FileCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Key[] | KeyList} [props.keys]\n     * @param {Timestamp | Date} [props.expirationTime]\n     * @param {Uint8Array | string} [props.contents]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Key[]}\n         */\n        this._keys = null;\n\n        /**\n         * @private\n         * @type {Timestamp}\n         */\n        this._expirationTime = Timestamp.fromDate(\n            Date.now() + DEFAULT_AUTO_RENEW_PERIOD.toInt() * 1000\n        );\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._contents = null;\n\n        this.setMaxTransactionFee(new Hbar(5));\n\n        if (props.keys != null) {\n            this.setKeys(props.keys);\n        }\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n\n        if (props.contents != null) {\n            this.setContents(props.contents);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {FileCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const create = /** @type {proto.IFileCreateTransactionBody} */ (body.fileCreate);\n\n        return Transaction._fromProtobufTransactions(\n            new FileCreateTransaction({\n                keys:\n                    create.keys != null\n                        ? create.keys.keys != null\n                            ? create.keys.keys.map((key) =>\n                                  keyFromProtobuf(key)\n                              )\n                            : undefined\n                        : undefined,\n                expirationTime:\n                    create.expirationTime != null\n                        ? Timestamp._fromProtobuf(create.expirationTime)\n                        : undefined,\n                contents: create.contents != null ? create.contents : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?Key[]}\n     */\n    get keys() {\n        return this._keys;\n    }\n\n    /**\n     * Set the keys which must sign any transactions modifying this file. Required.\n     *\n     * All keys must sign to modify the file's contents or keys. No key is required\n     * to sign for extending the expiration time (except the one for the operator account\n     * paying for the transaction). Only one key must sign to delete the file, however.\n     *\n     * To require more than one key to sign to delete a file, add them to a\n     * KeyList and pass that here.\n     *\n     * The network currently requires a file to have at least one key (or key list or threshold key)\n     * but this requirement may be lifted in the future.\n     *\n     * @param {Key[] | KeyList} keys\n     * @returns {this}\n     */\n    setKeys(keys) {\n        this._requireNotFrozen();\n        if (keys instanceof KeyList && keys.threshold != null) {\n            throw new Error(\"Cannot set threshold key as file key\");\n        }\n\n        this._keys = keys instanceof KeyList ? keys.toArray() : keys;\n\n        return this;\n    }\n\n    /**\n     * @returns {Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * Set the instant at which this file will expire, after which its contents will no longer be\n     * available.\n     *\n     * Defaults to 1/4 of a Julian year from the instant FileCreateTransaction\n     * was invoked.\n     *\n     * May be extended using FileUpdateTransaction#setExpirationTime(Timestamp).\n     *\n     * @param {Timestamp | Date} expirationTime\n     * @returns {this}\n     */\n    setExpirationTime(expirationTime) {\n        this._requireNotFrozen();\n        this._expirationTime =\n            expirationTime instanceof Timestamp\n                ? expirationTime\n                : Timestamp.fromDate(expirationTime);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get contents() {\n        return this._contents;\n    }\n\n    /**\n     * Set the given byte array as the file's contents.\n     *\n     * This may be omitted to create an empty file.\n     *\n     * Note that total size for a given transaction is limited to 6KiB (as of March 2020) by the\n     * network; if you exceed this you may receive a HederaPreCheckStatusException\n     * with Status#TransactionOversize.\n     *\n     * In this case, you will need to break the data into chunks of less than ~6KiB and execute this\n     * transaction with the first chunk and then use FileAppendTransaction with\n     * FileAppendTransaction#setContents(Uint8Array) for the remaining chunks.\n     *\n     * @param {Uint8Array | string} contents\n     * @returns {this}\n     */\n    setContents(contents) {\n        this._requireNotFrozen();\n        this._contents =\n            contents instanceof Uint8Array ? contents : utf8.encode(contents);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.file.createFile(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"fileCreate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IFileCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            keys:\n                this._keys != null\n                    ? {\n                          keys: this._keys.map((key) => keyToProtobuf(key)),\n                      }\n                    : null,\n            expirationTime: this._expirationTime._toProtobuf(),\n            contents: this._contents,\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nTRANSACTION_REGISTRY.set(\"fileCreate\", FileCreateTransaction._fromProtobuf);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport FileId from \"./FileId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IFileDeleteTransactionBody} proto.IFileDeleteTransactionBody\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * A transaction to delete a file on the Hedera network.\n *\n * When deleted, a file's contents are truncated to zero length and it can no longer be updated\n * or appended to, or its expiration time extended. FileContentsQuery and FileInfoQuery\n * will throw HederaPreCheckStatusException with a status of Status#FileDeleted.\n *\n * Only one of the file's keys needs to sign to delete the file, unless the key you have is part\n * of a KeyList.\n */\nexport default class FileDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.fileId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._fileId = null;\n\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {FileDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const fileDelete = /** @type {proto.IFileDeleteTransactionBody} */ (body.fileDelete);\n\n        return Transaction._fromProtobufTransactions(\n            new FileDeleteTransaction({\n                fileId:\n                    fileDelete.fileID != null\n                        ? FileId._fromProtobuf(fileDelete.fileID)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * Set the file ID which is being deleted in this transaction.\n     *\n     * @param {FileId | string} fileId\n     * @returns {FileDeleteTransaction}\n     */\n    setFileId(fileId) {\n        this._requireNotFrozen();\n        this._fileId =\n            fileId instanceof FileId ? fileId : FileId.fromString(fileId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.file.deleteFile(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"fileDelete\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IFileDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            fileID: this._fileId != null ? this._fileId._toProtobuf() : null,\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nTRANSACTION_REGISTRY.set(\"fileDelete\", FileDeleteTransaction._fromProtobuf);\n","import FileId from \"./FileId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport { KeyList } from \"@hashgraph/cryptography\";\nimport Long from \"long\";\nimport {\n    keyListFromProtobuf,\n    keyListToProtobuf,\n} from \"../cryptography/protobuf.js\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\nexport default class FileInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {FileId} props.fileId\n     * @param {Long} props.size\n     * @param {Timestamp} props.expirationTime\n     * @param {boolean} props.isDeleted\n     * @param {KeyList} props.keys\n     */\n    constructor(props) {\n        /**\n         * The ID of the file for which information is requested.\n         *\n         * @readonly\n         */\n        this.fileId = props.fileId;\n\n        /**\n         * Number of bytes in contents.\n         *\n         * @readonly\n         */\n        this.size = props.size;\n\n        /**\n         * The current time at which this account is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * True if deleted but not yet expired.\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * One of these keys must sign in order to delete the file.\n         * All of these keys must sign in order to update the file.\n         *\n         * @readonly\n         */\n        this.keys = props.keys;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IFileInfo} info\n     * @returns {FileInfo}\n     */\n    static _fromProtobuf(info) {\n        const size = /** @type {Long | number} */ (info.size);\n\n        return new FileInfo({\n            fileId: FileId._fromProtobuf(\n                /** @type {proto.IFileID} */ (info.fileID)\n            ),\n            size: size instanceof Long ? size : Long.fromValue(size),\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */ (info.expirationTime)\n            ),\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            keys:\n                info.keys != null\n                    ? keyListFromProtobuf(info.keys)\n                    : new KeyList(),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IFileInfo}\n     */\n    _toProtobuf() {\n        return {\n            fileID: this.fileId._toProtobuf(),\n            size: this.size,\n            expirationTime: this.expirationTime._toProtobuf(),\n            deleted: this.isDeleted,\n            keys: keyListToProtobuf(this.keys),\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FileInfo}\n     */\n    static fromBytes(bytes) {\n        return FileInfo._fromProtobuf(\n            proto.FileGetInfoResponse.FileInfo.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.FileGetInfoResponse.FileInfo.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport FileId from \"./FileId.js\";\nimport FileInfo from \"./FileInfo.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IFileGetInfoQuery} proto.IFileGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").IFileGetInfoResponse} proto.IFileGetInfoResponse\n * @typedef {import(\"@hashgraph/proto\").IFileInfo} proto.IFileInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<FileInfo>}\n */\nexport default class FileInfoQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.fileId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?FileId}\n         * @private\n         */\n        this._fileId = null;\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {FileInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {proto.IFileGetInfoQuery} */ (query.fileGetInfo);\n\n        return new FileInfoQuery({\n            fileId:\n                info.fileID != null\n                    ? FileId._fromProtobuf(info.fileID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * Set the file ID for which the info is being requested.\n     *\n     * @param {FileId | string} fileId\n     * @returns {FileInfoQuery}\n     */\n    setFileId(fileId) {\n        this._fileId =\n            fileId instanceof FileId ? fileId : FileId.fromString(fileId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.file.getFileInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const fileGetInfo = /** @type {proto.IFileGetInfoResponse} */ (response.fileGetInfo);\n        return /** @type {proto.IResponseHeader} */ (fileGetInfo.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<FileInfo>}\n     */\n    _mapResponse(response) {\n        const info = /** @type {proto.IFileGetInfoResponse} */ (response.fileGetInfo);\n\n        return Promise.resolve(\n            FileInfo._fromProtobuf(\n                /** @type {proto.IFileInfo} */ (info.fileInfo)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            fileGetInfo: {\n                header,\n                fileID:\n                    this._fileId != null ? this._fileId._toProtobuf() : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"fileGetInfo\", FileInfoQuery._fromProtobuf);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport FileId from \"./FileId.js\";\nimport { KeyList } from \"@hashgraph/cryptography\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IFileUpdateTransactionBody} proto.IFileUpdateTransactionBody\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Update a new Hedera™ crypto-currency file.\n */\nexport default class FileUpdateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {FileId | string} [props.fileId]\n     * @param {Key[] | KeyList} [props.keys]\n     * @param {Timestamp | Date} [props.expirationTime]\n     * @param {Uint8Array | string} [props.contents]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._fileId = null;\n\n        /**\n         * @private\n         * @type {?Key[]}\n         */\n        this._keys = null;\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._contents = null;\n\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n\n        if (props.keys != null) {\n            this.setKeys(props.keys);\n        }\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n\n        if (props.contents != null) {\n            this.setContents(props.contents);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {FileUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const update = /** @type {proto.IFileUpdateTransactionBody} */ (body.fileUpdate);\n\n        return Transaction._fromProtobufTransactions(\n            new FileUpdateTransaction({\n                fileId:\n                    update.fileID != null\n                        ? FileId._fromProtobuf(update.fileID)\n                        : undefined,\n                keys:\n                    update.keys != null\n                        ? update.keys.keys != null\n                            ? update.keys.keys.map((key) =>\n                                  keyFromProtobuf(key)\n                              )\n                            : undefined\n                        : undefined,\n                expirationTime:\n                    update.expirationTime != null\n                        ? Timestamp._fromProtobuf(update.expirationTime)\n                        : undefined,\n                contents: update.contents != null ? update.contents : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * Set the keys which must sign any transactions modifying this file. Required.\n     *\n     * All keys must sign to modify the file's contents or keys. No key is required\n     * to sign for extending the expiration time (except the one for the operator account\n     * paying for the transaction). Only one key must sign to delete the file, however.\n     *\n     * To require more than one key to sign to delete a file, add them to a\n     * KeyList and pass that here.\n     *\n     * The network currently requires a file to have at least one key (or key list or threshold key)\n     * but this requirement may be lifted in the future.\n     *\n     * @param {FileId | string} fileId\n     * @returns {this}\n     */\n    setFileId(fileId) {\n        this._requireNotFrozen();\n        this._fileId =\n            fileId instanceof FileId ? fileId : FileId.fromString(fileId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key[]}\n     */\n    get keys() {\n        return this._keys;\n    }\n\n    /**\n     * Set the keys which must sign any transactions modifying this file. Required.\n     *\n     * All keys must sign to modify the file's contents or keys. No key is required\n     * to sign for extending the expiration time (except the one for the operator account\n     * paying for the transaction). Only one key must sign to delete the file, however.\n     *\n     * To require more than one key to sign to delete a file, add them to a\n     * KeyList and pass that here.\n     *\n     * The network currently requires a file to have at least one key (or key list or threshold key)\n     * but this requirement may be lifted in the future.\n     *\n     * @param {Key[] | KeyList} keys\n     * @returns {this}\n     */\n    setKeys(keys) {\n        this._requireNotFrozen();\n        if (keys instanceof KeyList && keys.threshold != null) {\n            throw new Error(\"Cannot set threshold key as file key\");\n        }\n\n        this._keys = keys instanceof KeyList ? keys.toArray() : keys;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * Set the instant at which this file will expire, after which its contents will no longer be\n     * available.\n     *\n     * Defaults to 1/4 of a Julian year from the instant FileUpdateTransaction\n     * was invoked.\n     *\n     * May be extended using FileUpdateTransaction#setExpirationTime(Timestamp).\n     *\n     * @param {Timestamp | Date} expirationTime\n     * @returns {this}\n     */\n    setExpirationTime(expirationTime) {\n        this._requireNotFrozen();\n        this._expirationTime =\n            expirationTime instanceof Timestamp\n                ? expirationTime\n                : Timestamp.fromDate(expirationTime);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get contents() {\n        return this._contents;\n    }\n\n    /**\n     * Set the given byte array as the file's contents.\n     *\n     * This may be omitted to update an empty file.\n     *\n     * Note that total size for a given transaction is limited to 6KiB (as of March 2020) by the\n     * network; if you exceed this you may receive a HederaPreCheckStatusException\n     * with Status#TransactionOversize.\n     *\n     * In this case, you will need to break the data into chunks of less than ~6KiB and execute this\n     * transaction with the first chunk and then use FileAppendTransaction with\n     * FileAppendTransaction#setContents(Uint8Array) for the remaining chunks.\n     *\n     * @param {Uint8Array | string} contents\n     * @returns {this}\n     */\n    setContents(contents) {\n        this._requireNotFrozen();\n        this._contents =\n            contents instanceof Uint8Array ? contents : utf8.encode(contents);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.file.updateFile(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"fileUpdate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IFileUpdateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            fileID: this._fileId != null ? this._fileId._toProtobuf() : null,\n            keys:\n                this._keys != null\n                    ? {\n                          keys: this._keys.map((key) => keyToProtobuf(key)),\n                      }\n                    : null,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n            contents: this._contents,\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nTRANSACTION_REGISTRY.set(\"fileUpdate\", FileUpdateTransaction._fromProtobuf);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IFreezeTransactionBody} proto.IFreezeTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} HourMinute\n * @property {number} hour\n * @property {number} minute\n */\n\nexport default class FreezeTransaction extends Transaction {\n    /**\n     * @param {Object} [props]\n     * @param {HourMinute} [props.startTime]\n     * @param {HourMinute} [props.endTime]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?HourMinute}\n         */\n        this._startTime = null;\n\n        /**\n         * @private\n         * @type {?HourMinute}\n         */\n        this._endTime = null;\n\n        if (props.startTime != null) {\n            this.setStartTime(props.startTime.hour, props.startTime.minute);\n        }\n\n        if (props.endTime != null) {\n            this.setEndTime(props.endTime.hour, props.endTime.minute);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {FreezeTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const freeze = /** @type {proto.IFreezeTransactionBody} */ (body.freeze);\n\n        return Transaction._fromProtobufTransactions(\n            new FreezeTransaction({\n                startTime:\n                    freeze.startHour != null && freeze.startMin != null\n                        ? {\n                              hour: freeze.startHour,\n                              minute: freeze.startMin,\n                          }\n                        : undefined,\n                endTime:\n                    freeze.endHour != null && freeze.endMin != null\n                        ? {\n                              hour: freeze.endHour,\n                              minute: freeze.endMin,\n                          }\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?HourMinute}\n     */\n    get startTime() {\n        return this._startTime;\n    }\n\n    /**\n     * @param {number | string} startHourOrString\n     * @param {?number} startMinute\n     * @returns {FreezeTransaction}\n     */\n    setStartTime(startHourOrString, startMinute) {\n        this._requireNotFrozen();\n        if (typeof startHourOrString === \"string\") {\n            const split = startHourOrString.split(\":\");\n            this._startTime = {\n                hour: Number(split[0]),\n                minute: Number(split[1]),\n            };\n        } else {\n            this._startTime = {\n                hour: startHourOrString,\n                minute: /** @type {number} */ (startMinute),\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * @returns {?HourMinute}\n     */\n    get endTime() {\n        return this._endTime;\n    }\n\n    /**\n     * @param {number | string} endHourOrString\n     * @param {?number} endMinute\n     * @returns {FreezeTransaction}\n     */\n    setEndTime(endHourOrString, endMinute) {\n        this._requireNotFrozen();\n        if (typeof endHourOrString === \"string\") {\n            const split = endHourOrString.split(\":\");\n            this._endTime = {\n                hour: Number(split[0]),\n                minute: Number(split[1]),\n            };\n        } else {\n            this._endTime = {\n                hour: endHourOrString,\n                minute: /** @type {number} */ (endMinute),\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @param {Channel} channel\n     * @returns {(transaction: proto.ITransaction) => Promise<proto.ITransactionResponse>}\n     */\n    _getMethod(channel) {\n        return (transaction) => channel.freeze.freeze(transaction);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"freeze\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IFreezeTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            startHour: this._startTime != null ? this._startTime.hour : null,\n            startMin: this._startTime != null ? this._startTime.minute : null,\n            endHour: this._endTime != null ? this._endTime.hour : null,\n            endMin: this._endTime != null ? this._endTime.minute : null,\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nTRANSACTION_REGISTRY.set(\"freeze\", FreezeTransaction._fromProtobuf);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Duration from \"../Duration.js\";\nimport { KeyList } from \"@hashgraph/cryptography\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoAddLiveHashTransactionBody} proto.ICryptoAddLiveHashTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ILiveHash} proto.ILiveHash\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class LiveHashAddTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.hash]\n     * @param {Key[]} [props.keys]\n     * @param {Duration | Long | number} [props.duration]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._hash = null;\n\n        /**\n         * @private\n         * @type {?Key[]}\n         */\n        this._keys = null;\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._duration = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n\n        if (props.keys != null) {\n            this.setKeys(props.keys);\n        }\n\n        if (props.duration != null) {\n            this.setDuration(props.duration);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {LiveHashAddTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const hashes = /** @type {proto.ICryptoAddLiveHashTransactionBody} */ (body.cryptoAddLiveHash);\n        const liveHash_ = /** @type {proto.ILiveHash} */ (hashes.liveHash);\n\n        return Transaction._fromProtobufTransactions(\n            new LiveHashAddTransaction({\n                hash: liveHash_.hash != null ? liveHash_.hash : undefined,\n                keys:\n                    liveHash_.keys != null\n                        ? liveHash_.keys.keys != null\n                            ? liveHash_.keys.keys.map((key) =>\n                                  keyFromProtobuf(key)\n                              )\n                            : undefined\n                        : undefined,\n                duration:\n                    liveHash_.duration != null\n                        ? liveHash_.duration.seconds != null\n                            ? liveHash_.duration.seconds\n                            : undefined\n                        : undefined,\n                accountId:\n                    liveHash_.accountId != null\n                        ? AccountId._fromProtobuf(liveHash_.accountId)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get hash() {\n        return this._hash;\n    }\n\n    /**\n     * @param {Uint8Array} hash\n     * @returns {LiveHashAddTransaction}\n     */\n    setHash(hash) {\n        this._requireNotFrozen();\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key[]}\n     */\n    get keys() {\n        return this._keys;\n    }\n\n    /**\n     * @param {Key[] | KeyList} keys\n     * @returns {LiveHashAddTransaction}\n     */\n    setKeys(keys) {\n        this._requireNotFrozen();\n        this._keys = keys instanceof KeyList ? keys.toArray() : keys;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get duration() {\n        return this._duration;\n    }\n\n    /**\n     * @param {Duration | Long | number} duration\n     * @returns {LiveHashAddTransaction}\n     */\n    setDuration(duration) {\n        this._requireNotFrozen();\n        this._duration =\n            duration instanceof Duration ? duration : new Duration(duration);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {LiveHashAddTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.addLiveHash(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoAddLiveHash\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoAddLiveHashTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            liveHash: {\n                hash: this._hash,\n                keys:\n                    this._keys != null\n                        ? {\n                              keys: this._keys.map((key) => keyToProtobuf(key)),\n                          }\n                        : undefined,\n                duration:\n                    this._duration != null\n                        ? this._duration._toProtobuf()\n                        : null,\n                accountId:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoAddLiveHash\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    LiveHashAddTransaction._fromProtobuf\n);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoDeleteLiveHashTransactionBody} proto.ICryptoDeleteLiveHashTransactionBody\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class LiveHashDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.hash]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._hash = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {LiveHashDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const hashes = /** @type {proto.ICryptoDeleteLiveHashTransactionBody} */ (body.cryptoDeleteLiveHash);\n\n        return Transaction._fromProtobufTransactions(\n            new LiveHashDeleteTransaction({\n                hash:\n                    hashes.liveHashToDelete != null\n                        ? hashes.liveHashToDelete\n                        : undefined,\n                accountId:\n                    hashes.accountOfLiveHash != null\n                        ? AccountId._fromProtobuf(hashes.accountOfLiveHash)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get hash() {\n        return this._hash;\n    }\n\n    /**\n     * @param {Uint8Array} hash\n     * @returns {LiveHashDeleteTransaction}\n     */\n    setHash(hash) {\n        this._requireNotFrozen();\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {LiveHashDeleteTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.deleteLiveHash(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoDeleteLiveHash\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoDeleteLiveHashTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            liveHashToDelete: this._hash,\n            accountOfLiveHash:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoDeleteLiveHash\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    LiveHashDeleteTransaction._fromProtobuf\n);\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport LiveHash from \"./LiveHash.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetLiveHashQuery} proto.ICryptoGetLiveHashQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetLiveHashResponse} proto.ICryptoGetLiveHashResponse\n * @typedef {import(\"@hashgraph/proto\").ILiveHash} proto.ILiveHash\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<LiveHash>}\n */\nexport default class LiveHashQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     * @param {Uint8Array} [props.hash]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        /**\n         * @type {?Uint8Array}\n         * @private\n         */\n        this._hash = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {LiveHashQuery}\n     */\n    static _fromProtobuf(query) {\n        const hash = /** @type {proto.ICryptoGetLiveHashQuery} */ (query.cryptoGetLiveHash);\n\n        return new LiveHashQuery({\n            accountId:\n                hash.accountID != null\n                    ? AccountId._fromProtobuf(hash.accountID)\n                    : undefined,\n            hash: hash.hash != null ? hash.hash : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account to which the livehash is associated.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get liveHash() {\n        return this._hash;\n    }\n\n    /**\n     * Set the SHA-384 data in the livehash.\n     *\n     * @param {Uint8Array} hash\n     * @returns {this}\n     */\n    setHash(hash) {\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {Channel} channel\n     * @returns {(query: proto.IQuery) => Promise<proto.IResponse>}\n     */\n    _getMethod(channel) {\n        return (query) => channel.crypto.getLiveHash(query);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetLiveHash = /** @type {proto.ICryptoGetLiveHashResponse} */ (response.cryptoGetLiveHash);\n        return /** @type {proto.IResponseHeader} */ (cryptoGetLiveHash.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<LiveHash>}\n     */\n    _mapResponse(response) {\n        const hashes = /** @type {proto.ICryptoGetLiveHashResponse} */ (response.cryptoGetLiveHash);\n\n        return Promise.resolve(\n            LiveHash._fromProtobuf(\n                /** @type {proto.ILiveHash} */ (hashes.liveHash)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetLiveHash: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n                hash: this._hash,\n            },\n        };\n    }\n}\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"cryptoGetLiveHash\", LiveHashQuery._fromProtobuf);\n","import * as proto from \"@hashgraph/proto\";\n\nexport default class SemanticVersion {\n    /**\n     * @private\n     * @param {object} props\n     * @param {number} props.major\n     * @param {number} props.minor\n     * @param {number} props.patch\n     */\n    constructor(props) {\n        /** @readonly */\n        this.major = props.major;\n        /** @readonly */\n        this.minor = props.minor;\n        /** @readonly */\n        this.patch = props.patch;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.ISemanticVersion} version\n     * @returns {SemanticVersion}\n     */\n    static _fromProtobuf(version) {\n        return new SemanticVersion({\n            major: /** @type {number} */ (version.major),\n            minor: /** @type {number} */ (version.minor),\n            patch: /** @type {number} */ (version.patch),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ISemanticVersion}\n     */\n    _toProtobuf() {\n        return {\n            major: this.major,\n            minor: this.minor,\n            patch: this.patch,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SemanticVersion}\n     */\n    static fromBytes(bytes) {\n        return SemanticVersion._fromProtobuf(\n            proto.SemanticVersion.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.SemanticVersion.encode(this._toProtobuf()).finish();\n    }\n}\n","import SemanticVersion from \"./SemanticVersion.js\";\nimport * as proto from \"@hashgraph/proto\";\n\n/**\n * Response when the client sends the node CryptoGetVersionInfoQuery.\n */\nexport default class NetworkVersionInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {SemanticVersion} props.protobufVersion\n     * @param {SemanticVersion} props.servicesVesion\n     *\n     */\n    constructor(props) {\n        /**\n         * The account ID for which this information applies.\n         *\n         * @readonly\n         */\n        this.protobufVersion = props.protobufVersion;\n\n        /**\n         * The account ID for which this information applies.\n         *\n         * @readonly\n         */\n        this.servicesVesion = props.servicesVesion;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.INetworkGetVersionInfoResponse} info\n     * @returns {NetworkVersionInfo}\n     */\n    static _fromProtobuf(info) {\n        return new NetworkVersionInfo({\n            protobufVersion: SemanticVersion._fromProtobuf(\n                /** @type {proto.ISemanticVersion} */\n                (info.hapiProtoVersion)\n            ),\n            servicesVesion: SemanticVersion._fromProtobuf(\n                /** @type {proto.ISemanticVersion} */\n                (info.hederaServicesVersion)\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.INetworkGetVersionInfoResponse}\n     */\n    _toProtobuf() {\n        return {\n            hapiProtoVersion: this.protobufVersion._toProtobuf(),\n            hederaServicesVersion: this.servicesVesion._toProtobuf(),\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NetworkVersionInfo}\n     */\n    static fromBytes(bytes) {\n        return NetworkVersionInfo._fromProtobuf(\n            proto.NetworkGetVersionInfoResponse.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.NetworkGetVersionInfoResponse.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport NetworkVersionInfo from \"./NetworkVersionInfo.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").INetworkGetVersionInfoQuery} proto.INetworkGetVersionInfoQuery\n * @typedef {import(\"@hashgraph/proto\").INetworkGetVersionInfoResponse} proto.INetworkGetVersionInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<NetworkVersionInfo>}\n */\nexport default class NetworkVersionInfoQuery extends Query {\n    constructor() {\n        super();\n    }\n\n    /**\n     * @param {proto.IQuery} query\n     * @returns {NetworkVersionInfoQuery}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static _fromProtobuf(query) {\n        return new NetworkVersionInfoQuery();\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.network.getVersionInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const networkGetVersionInfo = /** @type {proto.INetworkGetVersionInfoResponse} */ (response.networkGetVersionInfo);\n        return /** @type {proto.IResponseHeader} */ (networkGetVersionInfo.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<NetworkVersionInfo>}\n     */\n    _mapResponse(response) {\n        const info = /** @type {proto.INetworkGetVersionInfoResponse} */ (response.networkGetVersionInfo);\n        return Promise.resolve(NetworkVersionInfo._fromProtobuf(info));\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            networkGetVersionInfo: {\n                header,\n            },\n        };\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"networkGetVersionInfo\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    NetworkVersionInfoQuery._fromProtobuf\n);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport FileId from \"../file/FileId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport Timestamp from \"../Timestamp.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ISystemDeleteTransactionBody} proto.ISystemDeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").IFileID} proto.IFileID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class SystemDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.fileId]\n     * @param {ContractId | string} [props.contractId]\n     * @param {Timestamp} [props.expirationTime]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._fileId = null;\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {SystemDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const systemDelete = /** @type {proto.ISystemDeleteTransactionBody} */ (body.systemDelete);\n\n        return Transaction._fromProtobufTransactions(\n            new SystemDeleteTransaction({\n                fileId:\n                    systemDelete.fileID != null\n                        ? FileId._fromProtobuf(\n                              /** @type {proto.IFileID} */ (systemDelete.fileID)\n                          )\n                        : undefined,\n                contractId:\n                    systemDelete.contractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {proto.IContractID} */ (systemDelete.contractID)\n                          )\n                        : undefined,\n                expirationTime:\n                    systemDelete.expirationTime != null\n                        ? Timestamp._fromProtobuf(systemDelete.expirationTime)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * @param {FileId | string} fileId\n     * @returns {this}\n     */\n    setFileId(fileId) {\n        this._requireNotFrozen();\n        this._fileId =\n            fileId instanceof FileId ? fileId : FileId.fromString(fileId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * @param {ContractId | string} contractId\n     * @returns {this}\n     */\n    setContractId(contractId) {\n        this._requireNotFrozen();\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {Timestamp} expirationTime\n     * @returns {SystemDeleteTransaction}\n     */\n    setExpirationTime(expirationTime) {\n        this._requireNotFrozen();\n        this._expirationTime = expirationTime;\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        if (this._fileId != null) {\n            return channel.file.systemDelete(request);\n        } else {\n            return channel.smartContract.systemDelete(request);\n        }\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"systemDelete\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ISystemDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            fileID: this._fileId != null ? this._fileId._toProtobuf() : null,\n            contractID:\n                this._contractId != null\n                    ? this._contractId._toProtobuf()\n                    : null,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nTRANSACTION_REGISTRY.set(\"systemDelete\", SystemDeleteTransaction._fromProtobuf);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport FileId from \"../file/FileId.js\";\nimport ContractId from \"../contract/ContractId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ISystemUndeleteTransactionBody} proto.ISystemUndeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").IFileID} proto.IFileID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../Timestamp.js\").default} Timestamp\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class SystemUndeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.fileId]\n     * @param {ContractId | string} [props.contractId]\n     * @param {Timestamp} [props.expirationTime]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._fileId = null;\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {SystemUndeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const systemUndelete = /** @type {proto.ISystemUndeleteTransactionBody} */ (body.systemUndelete);\n\n        return Transaction._fromProtobufTransactions(\n            new SystemUndeleteTransaction({\n                fileId:\n                    systemUndelete.fileID != null\n                        ? FileId._fromProtobuf(\n                              /** @type {proto.IFileID} */ (systemUndelete.fileID)\n                          )\n                        : undefined,\n                contractId:\n                    systemUndelete.contractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {proto.IContractID} */ (systemUndelete.contractID)\n                          )\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * @param {FileId | string} fileId\n     * @returns {this}\n     */\n    setFileId(fileId) {\n        this._requireNotFrozen();\n        this._fileId =\n            fileId instanceof FileId ? fileId : FileId.fromString(fileId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * @param {ContractId | string} contractId\n     * @returns {this}\n     */\n    setContractId(contractId) {\n        this._requireNotFrozen();\n        this._contractId =\n            contractId instanceof ContractId\n                ? contractId\n                : ContractId.fromString(contractId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        if (this._fileId != null) {\n            return channel.file.systemUndelete(request);\n        } else {\n            return channel.smartContract.systemUndelete(request);\n        }\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"systemUndelete\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ISystemUndeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            fileID: this._fileId != null ? this._fileId._toProtobuf() : null,\n            contractID:\n                this._contractId != null\n                    ? this._contractId._toProtobuf()\n                    : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"systemUndelete\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    SystemUndeleteTransaction._fromProtobuf\n);\n","import Hbar from \"../Hbar.js\";\nimport TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenAssociateTransactionBody} proto.ITokenAssociateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Associate a new Hedera™ crypto-currency token.\n */\nexport default class TokenAssociateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {(TokenId | string)[]} [props.tokenIds]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId[]}\n         */\n        this._tokenIds = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        this.setMaxTransactionFee(new Hbar(5));\n\n        if (props.tokenIds != null) {\n            this.setTokenIds(props.tokenIds);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenAssociateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const associateToken = /** @type {proto.ITokenAssociateTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenAssociateTransaction({\n                tokenIds:\n                    associateToken.tokens != null\n                        ? associateToken.tokens.map((token) =>\n                              TokenId._fromProtobuf(token)\n                          )\n                        : undefined,\n                accountId:\n                    associateToken.account != null\n                        ? AccountId._fromProtobuf(associateToken.account)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId[]}\n     */\n    get tokenIds() {\n        return this._tokenIds;\n    }\n\n    /**\n     * @param {(TokenId | string)[]} tokenIds\n     * @returns {this}\n     */\n    setTokenIds(tokenIds) {\n        this._requireNotFrozen();\n        this._tokenIds = tokenIds.map((tokenId) =>\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId)\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.associateTokens(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenAssociate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenAssociateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            tokens:\n                this._tokenIds != null\n                    ? this._tokenIds.map((tokenId) => tokenId._toProtobuf())\n                    : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenAssociate\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenAssociateTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenBurnTransactionBody} proto.ITokenBurnTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Burn a new Hedera™ crypto-currency token.\n */\nexport default class TokenBurnTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {Long | number} [props.amount]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._amount = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.amount != null) {\n            this.setAmount(props.amount);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenBurnTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const burnToken = /** @type {proto.ITokenBurnTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenBurnTransaction({\n                tokenId:\n                    burnToken.token != null\n                        ? TokenId._fromProtobuf(burnToken.token)\n                        : undefined,\n                amount: burnToken.amount != null ? burnToken.amount : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @param {Long | number} amount\n     * @returns {this}\n     */\n    setAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = amount instanceof Long ? amount : Long.fromValue(amount);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.burnToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenBurn\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenBurnTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            amount: this._amount,\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenBurn\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenBurnTransaction._fromProtobuf\n);\n","import Hbar from \"../Hbar.js\";\nimport Transaction, {\n    DEFAULT_AUTO_RENEW_PERIOD,\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Long from \"long\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenCreateTransactionBody} proto.ITokenCreateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Create a new Hedera™ crypto-currency token.\n */\nexport default class TokenCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {string} [props.tokenName]\n     * @param {string} [props.tokenSymbol]\n     * @param {Long | number} [props.decimals]\n     * @param {Long | number} [props.initialSupply]\n     * @param {AccountId | string} [props.treasuryAccountId]\n     * @param {Key} [props.adminKey]\n     * @param {Key} [props.kycKey]\n     * @param {Key} [props.freezeKey]\n     * @param {Key} [props.wipeKey]\n     * @param {Key} [props.supplyKey]\n     * @param {boolean} [props.freezeDefault]\n     * @param {AccountId | string} [props.autoRenewAccountId]\n     * @param {Timestamp | Date} [props.expirationTime]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._tokenName = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._tokenSymbol = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._decimals = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._initialSupply = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._treasuryAccountId = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._kycKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._freezeKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._wipeKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._supplyKey = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._freezeDefault = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._autoRenewAccountId = null;\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);\n\n        this.setMaxTransactionFee(new Hbar(30));\n\n        if (props.tokenName != null) {\n            this.setTokenName(props.tokenName);\n        }\n\n        if (props.tokenSymbol != null) {\n            this.setTokenSymbol(props.tokenSymbol);\n        }\n\n        if (props.decimals != null) {\n            this.setDecimals(props.decimals);\n        }\n\n        if (props.initialSupply != null) {\n            this.setInitialSupply(props.initialSupply);\n        }\n\n        if (props.treasuryAccountId != null) {\n            this.setTreasuryAccountId(props.treasuryAccountId);\n        }\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.kycKey != null) {\n            this.setKycKey(props.kycKey);\n        }\n\n        if (props.freezeKey != null) {\n            this.setFreezeKey(props.freezeKey);\n        }\n\n        if (props.wipeKey != null) {\n            this.setWipeKey(props.wipeKey);\n        }\n\n        if (props.supplyKey != null) {\n            this.setSupplyKey(props.supplyKey);\n        }\n\n        if (props.freezeDefault != null) {\n            this.setFreezeDefault(props.freezeDefault);\n        }\n\n        if (props.autoRenewAccountId != null) {\n            this.setAutoRenewAccountId(props.autoRenewAccountId);\n        }\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const create = /** @type {proto.ITokenCreateTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenCreateTransaction({\n                tokenName: create.name != null ? create.name : undefined,\n                tokenSymbol: create.symbol != null ? create.symbol : undefined,\n                decimals: create.decimals != null ? create.decimals : undefined,\n                initialSupply:\n                    create.initialSupply != null\n                        ? create.initialSupply\n                        : undefined,\n                treasuryAccountId:\n                    create.treasury != null\n                        ? AccountId._fromProtobuf(create.treasury)\n                        : undefined,\n                adminKey:\n                    create.adminKey != null\n                        ? keyFromProtobuf(create.adminKey)\n                        : undefined,\n                kycKey:\n                    create.kycKey != null\n                        ? keyFromProtobuf(create.kycKey)\n                        : undefined,\n                freezeKey:\n                    create.freezeKey != null\n                        ? keyFromProtobuf(create.freezeKey)\n                        : undefined,\n                wipeKey:\n                    create.wipeKey != null\n                        ? keyFromProtobuf(create.wipeKey)\n                        : undefined,\n                supplyKey:\n                    create.supplyKey != null\n                        ? keyFromProtobuf(create.supplyKey)\n                        : undefined,\n                freezeDefault:\n                    create.freezeDefault != null\n                        ? create.freezeDefault\n                        : undefined,\n                autoRenewAccountId:\n                    create.autoRenewAccount != null\n                        ? AccountId._fromProtobuf(create.autoRenewAccount)\n                        : undefined,\n                expirationTime:\n                    create.expiry != null\n                        ? Timestamp._fromProtobuf(create.expiry)\n                        : undefined,\n                autoRenewPeriod:\n                    create.autoRenewPeriod != null\n                        ? Duration._fromProtobuf(create.autoRenewPeriod)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get tokenName() {\n        return this._tokenName;\n    }\n\n    /**\n     * @param {string} name\n     * @returns {this}\n     */\n    setTokenName(name) {\n        this._requireNotFrozen();\n        this._tokenName = name;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get tokenSymbol() {\n        return this._tokenSymbol;\n    }\n\n    /**\n     * @param {string} symbol\n     * @returns {this}\n     */\n    setTokenSymbol(symbol) {\n        this._requireNotFrozen();\n        this._tokenSymbol = symbol;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get decimals() {\n        return this._decimals;\n    }\n\n    /**\n     * @param {Long | number} decimals\n     * @returns {this}\n     */\n    setDecimals(decimals) {\n        this._requireNotFrozen();\n        this._decimals =\n            decimals instanceof Long ? decimals : Long.fromValue(decimals);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get initialSupply() {\n        return this._initialSupply;\n    }\n\n    /**\n     * @param {Long | number} initialSupply\n     * @returns {this}\n     */\n    setInitialSupply(initialSupply) {\n        this._requireNotFrozen();\n        this._initialSupply =\n            initialSupply instanceof Long\n                ? initialSupply\n                : Long.fromValue(initialSupply);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get treasuryAccountId() {\n        return this._treasuryAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} id\n     * @returns {this}\n     */\n    setTreasuryAccountId(id) {\n        this._requireNotFrozen();\n        this._treasuryAccountId =\n            id instanceof AccountId ? id : AccountId.fromString(id);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setAdminKey(key) {\n        this._requireNotFrozen();\n        this._adminKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get kycKey() {\n        return this._kycKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setKycKey(key) {\n        this._requireNotFrozen();\n        this._kycKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get freezeKey() {\n        return this._freezeKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setFreezeKey(key) {\n        this._requireNotFrozen();\n        this._freezeKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get wipeKey() {\n        return this._wipeKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setWipeKey(key) {\n        this._requireNotFrozen();\n        this._wipeKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get supplyKey() {\n        return this._supplyKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setSupplyKey(key) {\n        this._requireNotFrozen();\n        this._supplyKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?boolean}\n     */\n    get freezeDefault() {\n        return this._freezeDefault;\n    }\n\n    /**\n     * @param {boolean} freeze\n     * @returns {this}\n     */\n    setFreezeDefault(freeze) {\n        this._requireNotFrozen();\n        this._freezeDefault = freeze;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {Timestamp | Date} time\n     * @returns {this}\n     */\n    setExpirationTime(time) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod = null;\n        this._expirationTime =\n            time instanceof Timestamp ? time : Timestamp.fromDate(time);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._autoRenewAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} id\n     * @returns {this}\n     */\n    setAutoRenewAccountId(id) {\n        this._requireNotFrozen();\n        this._autoRenewAccountId =\n            id instanceof AccountId ? id : AccountId.fromString(id);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this token.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @param {?import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {this}\n     */\n    freezeWith(client) {\n        if (\n            this._autoRenewPeriod != null &&\n            client != null &&\n            client.operatorAccountId\n        ) {\n            this._autoRenewAccountId = client.operatorAccountId;\n        }\n\n        return super.freezeWith(client);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.createToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenCreation\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            name: this.tokenName,\n            symbol: this.tokenSymbol,\n            decimals: this.decimals != null ? this.decimals.toInt() : null,\n            initialSupply: this.initialSupply,\n            treasury:\n                this._treasuryAccountId != null\n                    ? this._treasuryAccountId._toProtobuf()\n                    : null,\n            adminKey:\n                this._adminKey != null ? keyToProtobuf(this._adminKey) : null,\n            kycKey: this._kycKey != null ? keyToProtobuf(this._kycKey) : null,\n            freezeKey:\n                this._freezeKey != null ? keyToProtobuf(this._freezeKey) : null,\n            wipeKey:\n                this._wipeKey != null ? keyToProtobuf(this._wipeKey) : null,\n            supplyKey:\n                this._supplyKey != null ? keyToProtobuf(this._supplyKey) : null,\n            freezeDefault: this._freezeDefault,\n            autoRenewAccount:\n                this._autoRenewAccountId != null\n                    ? this._autoRenewAccountId._toProtobuf()\n                    : null,\n            expiry:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n            autoRenewPeriod:\n                this._autoRenewPeriod != null\n                    ? this._autoRenewPeriod._toProtobuf()\n                    : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenCreation\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenCreateTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenDeleteTransactionBody} proto.ITokenDeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Delete a new Hedera™ crypto-currency token.\n */\nexport default class TokenDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const deleteToken = /** @type {proto.ITokenDeleteTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenDeleteTransaction({\n                tokenId:\n                    deleteToken.token != null\n                        ? TokenId._fromProtobuf(deleteToken.token)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.deleteToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenDeletion\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenDeletion\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenDeleteTransaction._fromProtobuf\n);\n","import Hbar from \"../Hbar.js\";\nimport TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenDissociateTransactionBody} proto.ITokenDissociateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Dissociate a new Hedera™ crypto-currency token.\n */\nexport default class TokenDissociateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {(TokenId | string)[]} [props.tokenIds]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId[]}\n         */\n        this._tokenIds = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        this.setMaxTransactionFee(new Hbar(5));\n\n        if (props.tokenIds != null) {\n            this.setTokenIds(props.tokenIds);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenDissociateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const dissociateToken = /** @type {proto.ITokenDissociateTransactionBody} */ (body.tokenDissociate);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenDissociateTransaction({\n                tokenIds:\n                    dissociateToken.tokens != null\n                        ? dissociateToken.tokens.map((token) =>\n                              TokenId._fromProtobuf(token)\n                          )\n                        : undefined,\n                accountId:\n                    dissociateToken.account != null\n                        ? AccountId._fromProtobuf(dissociateToken.account)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId[]}\n     */\n    get tokenIds() {\n        return this._tokenIds;\n    }\n\n    /**\n     * @param {(TokenId | string)[]} tokenIds\n     * @returns {this}\n     */\n    setTokenIds(tokenIds) {\n        this._requireNotFrozen();\n        this._tokenIds = tokenIds.map((tokenId) =>\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId)\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.dissociateTokens(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenDissociate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenDissociateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            tokens:\n                this._tokenIds != null\n                    ? this._tokenIds.map((tokenId) => tokenId._toProtobuf())\n                    : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenDissociate\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenDissociateTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenFreezeAccountTransactionBody} proto.ITokenFreezeAccountTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Freeze a new Hedera™ crypto-currency token.\n */\nexport default class TokenFreezeTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenFreezeTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const freezeToken = /** @type {proto.ITokenFreezeAccountTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenFreezeTransaction({\n                tokenId:\n                    freezeToken.token != null\n                        ? TokenId._fromProtobuf(freezeToken.token)\n                        : undefined,\n                accountId:\n                    freezeToken.account != null\n                        ? AccountId._fromProtobuf(freezeToken.account)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.freezeTokenAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenFreeze\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenFreezeAccountTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenFreeze\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenFreezeTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenGrantKycTransactionBody} proto.ITokenGrantKycTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * GrantKyc a new Hedera™ crypto-currency token.\n */\nexport default class TokenGrantKycTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenGrantKycTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const grantKycToken = /** @type {proto.ITokenGrantKycTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenGrantKycTransaction({\n                tokenId:\n                    grantKycToken.token != null\n                        ? TokenId._fromProtobuf(grantKycToken.token)\n                        : undefined,\n                accountId:\n                    grantKycToken.account != null\n                        ? AccountId._fromProtobuf(grantKycToken.account)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.grantKycToTokenAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenGrantKyc\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenGrantKycTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenGrantKyc\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenGrantKycTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Duration from \"../Duration.js\";\nimport Timestamp from \"../Timestamp.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").TokenFreezeStatus} proto.TokenFreezeStatus\n * @typedef {import(\"@hashgraph/proto\").TokenKycStatus} proto.TokenKycStatus\n * @typedef {import(\"@hashgraph/proto\").ITokenInfo} proto.ITokenInfo\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IKey} proto.IKey\n * @typedef {import(\"@hashgraph/proto\").IDuration} proto.IDuration\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n */\n\n/**\n * Response when the client sends the node TokenGetInfoQuery.\n */\nexport default class TokenInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {TokenId} props.tokenId;\n     * @param {string} props.name;\n     * @param {string} props.symbol;\n     * @param {number} props.decimals;\n     * @param {Long} props.totalSupply;\n     * @param {AccountId | null} props.treasuryAccountId;\n     * @param {Key | null} props.adminKey;\n     * @param {Key | null} props.kycKey;\n     * @param {Key | null} props.freezeKey;\n     * @param {Key | null} props.wipeKey;\n     * @param {Key | null} props.supplyKey;\n     * @param {boolean | null} props.defaultFreezeStatus;\n     * @param {boolean | null} props.defaultKycStatus;\n     * @param {boolean} props.isDeleted;\n     * @param {AccountId | null} props.autoRenewAccountId;\n     * @param {Duration | null} props.autoRenewPeriod;\n     * @param {Timestamp | null} props.expirationTime;\n     */\n    constructor(props) {\n        /**\n         * ID of the token instance\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The name of the token. It is a string of ASCII only characters\n         *\n         * @readonly\n         */\n        this.name = props.name;\n\n        /**\n         * The symbol of the token. It is a UTF-8 capitalized alphabetical string\n         *\n         * @readonly\n         */\n        this.symbol = props.symbol;\n\n        /**\n         * The number of decimal places a token is divisible by\n         *\n         * @readonly\n         */\n        this.decimals = props.decimals;\n\n        /**\n         * The total supply of tokens that are currently in circulation\n         *\n         * @readonly\n         */\n        this.totalSupply = props.totalSupply;\n\n        /**\n         * The ID of the account which is set as treasuryAccountId\n         *\n         * @readonly\n         */\n        this.treasuryAccountId = props.treasuryAccountId;\n\n        /**\n         * The key which can perform update/delete operations on the token. If empty, the token can be perceived as\n         * immutable (not being able to be updated/deleted)\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey;\n\n        /**\n         * The key which can grant or revoke KYC of an account for the token's transactions. If empty, KYC is not required,\n         * and KYC grant or revoke operations are not possible.\n         *\n         * @readonly\n         */\n        this.kycKey = props.kycKey;\n\n        /**\n         * The key which can freeze or unfreeze an account for token transactions. If empty, freezing is not possible\n         *\n         * @readonly\n         */\n        this.freezeKey = props.freezeKey;\n\n        /**\n         * The key which can wipe token balance of an account. If empty, wipe is not possible\n         *\n         * @readonly\n         */\n        this.wipeKey = props.wipeKey;\n\n        /**\n         * The key which can change the supply of a token. The key is used to sign Token Mint/Burn operations\n         *\n         * @readonly\n         */\n        this.supplyKey = props.supplyKey;\n\n        /**\n         * The default Freeze status (not applicable = null, frozen = false, or unfrozen = true) of Hedera accounts relative to this token.\n         * FreezeNotApplicable is returned if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is set and\n         * defaultFreeze is set to true. Unfrozen is returned if Token Freeze Key is set and defaultFreeze is set to false\n         *      FreezeNotApplicable = null;\n         *      Frozen = true;\n         *      Unfrozen = false;\n         *\n         * @readonly\n         */\n        this.defaultFreezeStatus = props.defaultFreezeStatus;\n\n        /**\n         * The default KYC status (KycNotApplicable or Revoked) of Hedera accounts relative to this token. KycNotApplicable\n         * is returned if KYC key is not set, otherwise Revoked\n         *      KycNotApplicable = null;\n         *      Granted = true;\n         *      Revoked = false;\n         *\n         * @readonly\n         */\n        this.defaultKycStatus = props.defaultKycStatus;\n\n        /**\n         * Specifies whether the token was deleted or not\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * An account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval\n         *\n         * @readonly\n         */\n        this.autoRenewAccountId = props.autoRenewAccountId;\n\n        /**\n         * The interval at which the auto-renew account will be charged to extend the token's expiry\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * The epoch second at which the token expire: will; if an auto-renew account and period are specified,\n         * this is coerced to the current epoch second plus the autoRenewPeriod\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITokenInfo} info\n     * @returns {TokenInfo}\n     */\n    static _fromProtobuf(info) {\n        const defaultFreezeStatus = /** @type {proto.TokenFreezeStatus} */ (info.defaultFreezeStatus);\n        const defaultKycStatus = /** @type {proto.TokenKycStatus} */ (info.defaultKycStatus);\n\n        const autoRenewAccountId =\n            info.autoRenewAccount != null\n                ? AccountId._fromProtobuf(info.autoRenewAccount)\n                : new AccountId(0);\n\n        return new TokenInfo({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {proto.ITokenID} */ (info.tokenId)\n            ),\n            name: /** @type {string} */ (info.name),\n            symbol: /** @type {string} */ (info.symbol),\n            decimals: /** @type {number} */ (info.decimals),\n            totalSupply: /** @type {Long} */ (info.totalSupply),\n            treasuryAccountId:\n                info.treasury != null\n                    ? AccountId._fromProtobuf(\n                          /** @type {proto.IAccountID} */ (info.treasury)\n                      )\n                    : null,\n            adminKey:\n                info.adminKey != null ? keyFromProtobuf(info.adminKey) : null,\n            kycKey: info.kycKey != null ? keyFromProtobuf(info.kycKey) : null,\n            freezeKey:\n                info.freezeKey != null ? keyFromProtobuf(info.freezeKey) : null,\n            wipeKey:\n                info.wipeKey != null ? keyFromProtobuf(info.wipeKey) : null,\n            supplyKey:\n                info.supplyKey != null ? keyFromProtobuf(info.supplyKey) : null,\n            defaultFreezeStatus:\n                defaultFreezeStatus === 0 ? null : defaultFreezeStatus == 1,\n            defaultKycStatus:\n                defaultKycStatus === 0 ? null : defaultKycStatus == 1,\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            autoRenewAccountId: !(\n                autoRenewAccountId.shard.toInt() == 0 &&\n                autoRenewAccountId.realm.toInt() == 0 &&\n                autoRenewAccountId.num.toInt() == 0\n            )\n                ? autoRenewAccountId\n                : null,\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? Duration._fromProtobuf(\n                          /** @type {proto.IDuration} */ (info.autoRenewPeriod)\n                      )\n                    : null,\n            expirationTime:\n                info.expiry != null\n                    ? Timestamp._fromProtobuf(\n                          /** @type {proto.ITimestamp} */ (info.expiry)\n                      )\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {proto.ITokenInfo}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            name: this.name,\n            symbol: this.symbol,\n            decimals: this.decimals,\n            totalSupply: this.totalSupply,\n            treasury:\n                this.treasuryAccountId != null\n                    ? this.treasuryAccountId._toProtobuf()\n                    : null,\n            adminKey:\n                this.adminKey != null ? keyToProtobuf(this.adminKey) : null,\n            kycKey: this.kycKey != null ? keyToProtobuf(this.kycKey) : null,\n            freezeKey:\n                this.freezeKey != null ? keyToProtobuf(this.freezeKey) : null,\n            wipeKey: this.wipeKey != null ? keyToProtobuf(this.wipeKey) : null,\n            supplyKey:\n                this.supplyKey != null ? keyToProtobuf(this.supplyKey) : null,\n            defaultFreezeStatus:\n                this.defaultFreezeStatus == null\n                    ? 0\n                    : this.defaultFreezeStatus\n                    ? 1\n                    : 2,\n            defaultKycStatus:\n                this.defaultKycStatus == null\n                    ? 0\n                    : this.defaultKycStatus\n                    ? 1\n                    : 2,\n            deleted: this.isDeleted,\n            autoRenewAccount:\n                this.autoRenewAccountId != null\n                    ? this.autoRenewAccountId._toProtobuf()\n                    : undefined,\n            autoRenewPeriod:\n                this.autoRenewPeriod != null\n                    ? this.autoRenewPeriod._toProtobuf()\n                    : null,\n            expiry:\n                this.expirationTime != null\n                    ? this.expirationTime._toProtobuf()\n                    : null,\n        };\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TokenId from \"./TokenId.js\";\nimport TokenInfo from \"./TokenInfo.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ITokenInfo} proto.ITokenInfo\n * @typedef {import(\"@hashgraph/proto\").ITokenGetInfoQuery} proto.ITokenGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").ITokenGetInfoResponse} proto.ITokenGetInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<TokenInfo>}\n */\nexport default class TokenInfoQuery extends Query {\n    /**\n     * @param {object} properties\n     * @param {TokenId | string} [properties.tokenId]\n     */\n    constructor(properties = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n        if (properties.tokenId != null) {\n            this.setTokenId(properties.tokenId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {TokenInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {proto.ITokenGetInfoQuery} */ (query.tokenGetInfo);\n\n        return new TokenInfoQuery({\n            tokenId:\n                info.token != null\n                    ? TokenId._fromProtobuf(info.token)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * Set the token ID for which the info is being requested.\n     *\n     * @param {TokenId | string} tokenId\n     * @returns {TokenInfoQuery}\n     */\n    setTokenId(tokenId) {\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.getTokenInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const tokenGetInfo = /** @type {proto.ITokenGetInfoResponse} */ (response.tokenGetInfo);\n        return /** @type {proto.IResponseHeader} */ (tokenGetInfo.header);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {Promise<TokenInfo>}\n     */\n    _mapResponse(response) {\n        const info = /** @type {proto.ITokenGetInfoResponse} */ (response.tokenGetInfo);\n\n        return Promise.resolve(\n            TokenInfo._fromProtobuf(\n                /** @type {proto.ITokenInfo} */ (info.tokenInfo)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            tokenGetInfo: {\n                header,\n                token:\n                    this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"tokenGetInfo\", TokenInfoQuery._fromProtobuf);\n","import TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenMintTransactionBody} proto.ITokenMintTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Mint a new Hedera™ crypto-currency token.\n */\nexport default class TokenMintTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {Long | number} [props.amount]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._amount = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.amount != null) {\n            this.setAmount(props.amount);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenMintTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const mintToken = /** @type {proto.ITokenMintTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenMintTransaction({\n                tokenId:\n                    mintToken.token != null\n                        ? TokenId._fromProtobuf(mintToken.token)\n                        : undefined,\n                amount: mintToken.amount != null ? mintToken.amount : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @param {Long | number} amount\n     * @returns {this}\n     */\n    setAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = amount instanceof Long ? amount : Long.fromValue(amount);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.mintToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenMint\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenMintTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            amount: this._amount,\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenMint\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenMintTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenRevokeKycTransactionBody} proto.ITokenRevokeKycTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * RevokeKyc a new Hedera™ crypto-currency token.\n */\nexport default class TokenRevokeKycTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenRevokeKycTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const revokeKycToken = /** @type {proto.ITokenRevokeKycTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenRevokeKycTransaction({\n                tokenId:\n                    revokeKycToken.token != null\n                        ? TokenId._fromProtobuf(revokeKycToken.token)\n                        : undefined,\n                accountId:\n                    revokeKycToken.account != null\n                        ? AccountId._fromProtobuf(revokeKycToken.account)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.revokeKycFromTokenAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenRevokeKyc\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenRevokeKycTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenRevokeKyc\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenRevokeKycTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenUnfreezeAccountTransactionBody} proto.ITokenUnfreezeAccountTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Unfreeze a new Hedera™ crypto-currency token.\n */\nexport default class TokenUnfreezeTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenUnfreezeTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const unfreezeToken = /** @type {proto.ITokenUnfreezeAccountTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenUnfreezeTransaction({\n                tokenId:\n                    unfreezeToken.token != null\n                        ? TokenId._fromProtobuf(unfreezeToken.token)\n                        : undefined,\n                accountId:\n                    unfreezeToken.account != null\n                        ? AccountId._fromProtobuf(unfreezeToken.account)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.unfreezeTokenAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenUnfreeze\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenUnfreezeAccountTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenUnfreeze\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenUnfreezeTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenUpdateTransactionBody} proto.ITokenUpdateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Update a new Hedera™ crypto-currency token.\n */\nexport default class TokenUpdateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {string} [props.tokenName]\n     * @param {string} [props.tokenSymbol]\n     * @param {AccountId | string} [props.treasuryAccountId]\n     * @param {Key} [props.adminKey]\n     * @param {Key} [props.kycKey]\n     * @param {Key} [props.freezeKey]\n     * @param {Key} [props.wipeKey]\n     * @param {Key} [props.supplyKey]\n     * @param {AccountId | string} [props.autoRenewAccountId]\n     * @param {Timestamp | Date} [props.expirationTime]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._tokenName = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._tokenSymbol = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._treasuryAccountId = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._kycKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._freezeKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._wipeKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._supplyKey = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._autoRenewAccountId = null;\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._autoRenewPeriod = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.tokenName != null) {\n            this.setTokenName(props.tokenName);\n        }\n\n        if (props.tokenSymbol != null) {\n            this.setTokenSymbol(props.tokenSymbol);\n        }\n\n        if (props.treasuryAccountId != null) {\n            this.setTreasuryAccountId(props.treasuryAccountId);\n        }\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.kycKey != null) {\n            this.setKycKey(props.kycKey);\n        }\n\n        if (props.freezeKey != null) {\n            this.setFreezeKey(props.freezeKey);\n        }\n\n        if (props.wipeKey != null) {\n            this.setWipeKey(props.wipeKey);\n        }\n\n        if (props.supplyKey != null) {\n            this.setsupplyKey(props.supplyKey);\n        }\n\n        if (props.autoRenewAccountId != null) {\n            this.setAutoRenewAccountId(props.autoRenewAccountId);\n        }\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const update = /** @type {proto.ITokenUpdateTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenUpdateTransaction({\n                tokenId:\n                    update.token != null\n                        ? TokenId._fromProtobuf(update.token)\n                        : undefined,\n                tokenName: update.name != null ? update.name : undefined,\n                tokenSymbol: update.symbol != null ? update.symbol : undefined,\n                treasuryAccountId:\n                    update.treasury != null\n                        ? AccountId._fromProtobuf(update.treasury)\n                        : undefined,\n                adminKey:\n                    update.adminKey != null\n                        ? keyFromProtobuf(update.adminKey)\n                        : undefined,\n                kycKey:\n                    update.kycKey != null\n                        ? keyFromProtobuf(update.kycKey)\n                        : undefined,\n                freezeKey:\n                    update.freezeKey != null\n                        ? keyFromProtobuf(update.freezeKey)\n                        : undefined,\n                wipeKey:\n                    update.wipeKey != null\n                        ? keyFromProtobuf(update.wipeKey)\n                        : undefined,\n                supplyKey:\n                    update.supplyKey != null\n                        ? keyFromProtobuf(update.supplyKey)\n                        : undefined,\n                autoRenewAccountId:\n                    update.autoRenewAccount != null\n                        ? AccountId._fromProtobuf(update.autoRenewAccount)\n                        : undefined,\n                expirationTime:\n                    update.expiry != null\n                        ? Timestamp._fromProtobuf(update.expiry)\n                        : undefined,\n                autoRenewPeriod:\n                    update.autoRenewPeriod != null\n                        ? Duration._fromProtobuf(update.autoRenewPeriod)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get tokenName() {\n        return this._tokenName;\n    }\n\n    /**\n     * @param {string} name\n     * @returns {this}\n     */\n    setTokenName(name) {\n        this._requireNotFrozen();\n        this._tokenName = name;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get tokenSymbol() {\n        return this._tokenSymbol;\n    }\n\n    /**\n     * @param {string} symbol\n     * @returns {this}\n     */\n    setTokenSymbol(symbol) {\n        this._requireNotFrozen();\n        this._tokenSymbol = symbol;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get treasuryAccountId() {\n        return this._treasuryAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} id\n     * @returns {this}\n     */\n    setTreasuryAccountId(id) {\n        this._requireNotFrozen();\n        this._treasuryAccountId =\n            id instanceof AccountId ? id : AccountId.fromString(id);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setAdminKey(key) {\n        this._requireNotFrozen();\n        this._adminKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get kycKey() {\n        return this._kycKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setKycKey(key) {\n        this._requireNotFrozen();\n        this._kycKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get freezeKey() {\n        return this._freezeKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setFreezeKey(key) {\n        this._requireNotFrozen();\n        this._freezeKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get wipeKey() {\n        return this._wipeKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setWipeKey(key) {\n        this._requireNotFrozen();\n        this._wipeKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get supplyKey() {\n        return this._supplyKey;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setsupplyKey(key) {\n        this._requireNotFrozen();\n        this._supplyKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {Timestamp | Date} time\n     * @returns {this}\n     */\n    setExpirationTime(time) {\n        this._requireNotFrozen();\n        this._expirationTime =\n            time instanceof Timestamp ? time : Timestamp.fromDate(time);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._autoRenewAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} id\n     * @returns {this}\n     */\n    setAutoRenewAccountId(id) {\n        this._requireNotFrozen();\n        this._autoRenewAccountId =\n            id instanceof AccountId ? id : AccountId.fromString(id);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this token.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.updateToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenUpdate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenUpdateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            name: this.tokenName,\n            symbol: this.tokenSymbol,\n            treasury:\n                this._treasuryAccountId != null\n                    ? this._treasuryAccountId._toProtobuf()\n                    : null,\n            adminKey:\n                this._adminKey != null ? keyToProtobuf(this._adminKey) : null,\n            kycKey: this._kycKey != null ? keyToProtobuf(this._kycKey) : null,\n            freezeKey:\n                this._freezeKey != null ? keyToProtobuf(this._freezeKey) : null,\n            wipeKey:\n                this._wipeKey != null ? keyToProtobuf(this._wipeKey) : null,\n            supplyKey:\n                this._supplyKey != null ? keyToProtobuf(this._supplyKey) : null,\n            autoRenewAccount:\n                this._autoRenewAccountId != null\n                    ? this._autoRenewAccountId._toProtobuf()\n                    : null,\n            expiry:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n            autoRenewPeriod:\n                this._autoRenewPeriod != null\n                    ? this._autoRenewPeriod._toProtobuf()\n                    : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenUpdate\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenUpdateTransaction._fromProtobuf\n);\n","import TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenWipeAccountTransactionBody} proto.ITokenWipeAccountTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Wipe a new Hedera™ crypto-currency token.\n */\nexport default class TokenWipeTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {AccountId | string} [props.accountId]\n     * @param {Long | number} [props.amount]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._amount = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.amount != null) {\n            this.setAmount(props.amount);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenWipeTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const wipeToken = /** @type {proto.ITokenWipeAccountTransactionBody} */ (body.tokenCreation);\n\n        return Transaction._fromProtobufTransactions(\n            new TokenWipeTransaction({\n                tokenId:\n                    wipeToken.token != null\n                        ? TokenId._fromProtobuf(wipeToken.token)\n                        : undefined,\n                accountId:\n                    wipeToken.account != null\n                        ? AccountId._fromProtobuf(wipeToken.account)\n                        : undefined,\n                amount: wipeToken.amount != null ? wipeToken.amount : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @param {Long | number} amount\n     * @returns {this}\n     */\n    setAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = amount instanceof Long ? amount : Long.fromValue(amount);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.wipeTokenAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenWipe\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenWipeAccountTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            amount: this._amount,\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenWipe\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenWipeTransaction._fromProtobuf\n);\n","import { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    DEFAULT_AUTO_RENEW_PERIOD,\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IConsensusCreateTopicTransactionBody} proto.IConsensusCreateTopicTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Create a topic to be used for consensus.\n */\nexport default class TopicCreateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {string} [props.topicMemo]\n     * @param {Key} [props.adminKey]\n     * @param {Key} [props.submitKey]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {AccountId | string} [props.autoRenewAccountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._topicMemo = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._submitKey = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._autoRenewAccountId = null;\n\n        /**\n         * @private\n         * @type {Duration}\n         */\n        this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);\n\n        if (props.topicMemo != null) {\n            this.setTopicMemo(props.topicMemo);\n        }\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.submitKey != null) {\n            this.setSubmitKey(props.submitKey);\n        }\n\n        if (props.autoRenewAccountId != null) {\n            this.setAutoRenewAccountId(props.autoRenewAccountId);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TopicCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const create = /** @type {proto.IConsensusCreateTopicTransactionBody} */ (body.consensusCreateTopic);\n\n        return Transaction._fromProtobufTransactions(\n            new TopicCreateTransaction({\n                topicMemo: create.memo != null ? create.memo : undefined,\n                adminKey:\n                    create.adminKey != null\n                        ? keyFromProtobuf(create.adminKey)\n                        : undefined,\n                submitKey:\n                    create.submitKey != null\n                        ? keyFromProtobuf(create.submitKey)\n                        : undefined,\n                autoRenewAccountId:\n                    create.autoRenewAccount != null\n                        ? AccountId._fromProtobuf(create.autoRenewAccount)\n                        : undefined,\n                autoRenewPeriod:\n                    create.autoRenewPeriod != null\n                        ? create.autoRenewPeriod.seconds != null\n                            ? create.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get topicMemo() {\n        return this._topicMemo;\n    }\n\n    /**\n     * @param {string} topicMemo\n     * @returns {this}\n     */\n    setTopicMemo(topicMemo) {\n        this._requireNotFrozen();\n        this._topicMemo = topicMemo;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {this}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get submitKey() {\n        return this._submitKey;\n    }\n\n    /**\n     * @param {Key} submitKey\n     * @returns {this}\n     */\n    setSubmitKey(submitKey) {\n        this._requireNotFrozen();\n        this._submitKey = submitKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._autoRenewAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} autoRenewAccountId\n     * @returns {this}\n     */\n    setAutoRenewAccountId(autoRenewAccountId) {\n        this._requireNotFrozen();\n        this._autoRenewAccountId =\n            autoRenewAccountId instanceof AccountId\n                ? autoRenewAccountId\n                : AccountId.fromString(autoRenewAccountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this account.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.createTopic(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"consensusCreateTopic\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IConsensusCreateTopicTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            adminKey:\n                this._adminKey != null ? keyToProtobuf(this._adminKey) : null,\n            submitKey:\n                this._submitKey != null ? keyToProtobuf(this._submitKey) : null,\n            memo: this._topicMemo,\n            autoRenewAccount:\n                this._autoRenewAccountId != null\n                    ? this._autoRenewAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"consensusCreateTopic\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TopicCreateTransaction._fromProtobuf\n);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport TopicId from \"./TopicId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IConsensusDeleteTopicTransactionBody} proto.IConsensusDeleteTopicTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Delete a topic.\n *\n * No more transactions or queries on the topic will succeed.\n *\n * If an adminKey is set, this transaction must be signed by that key.\n * If there is no adminKey, this transaction will fail with Status#Unautorized.\n */\nexport default class TopicDeleteTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {TopicId | string} [props.topicId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TopicDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const topicDelete = /** @type {proto.IConsensusDeleteTopicTransactionBody} */ (body.consensusDeleteTopic);\n\n        return Transaction._fromProtobufTransactions(\n            new TopicDeleteTransaction({\n                topicId:\n                    topicDelete.topicID != null\n                        ? TopicId._fromProtobuf(topicDelete.topicID)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * Set the topic ID which is being deleted in this transaction.\n     *\n     * @param {TopicId | string} topicId\n     * @returns {TopicDeleteTransaction}\n     */\n    setTopicId(topicId) {\n        this._requireNotFrozen();\n        this._topicId =\n            topicId instanceof TopicId ? topicId : TopicId.fromString(topicId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.deleteTopic(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"consensusDeleteTopic\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IConsensusDeleteTopicTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            topicID: this._topicId != null ? this._topicId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"consensusDeleteTopic\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TopicDeleteTransaction._fromProtobuf\n);\n","import TopicId from \"./TopicId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport Long from \"long\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IConsensusTopicInfo} proto.IConsensusTopicInfo\n * @typedef {import(\"@hashgraph/proto\").IConsensusGetTopicInfoResponse} proto.IConsensusGetTopicInfoResponse\n * @typedef {import(\"@hashgraph/proto\").ITopicID} proto.ITopicID\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n */\n\n/**\n * Current state of a topic.\n */\nexport default class TopicInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {TopicId} props.topicId\n     * @param {string} props.topicMemo\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     * @param {?Timestamp} props.expirationTime\n     * @param {?Key} props.adminKey\n     * @param {?Key} props.submitKey\n     * @param {?Duration} props.autoRenewPeriod\n     * @param {?AccountId} props.autoRenewAccountId\n     */\n    constructor(props) {\n        /**\n         * The ID of the topic for which information is requested.\n         *\n         * @readonly\n         */\n        this.topicId = props.topicId;\n\n        /**\n         * Short publicly visible memo about the topic. No guarantee of uniqueness.\n         *\n         * @readonly\n         */\n        this.topicMemo = props.topicMemo;\n\n        /**\n         * SHA-384 running hash of (previousRunningHash, topicId, consensusTimestamp, sequenceNumber, message).\n         *\n         * @readonly\n         */\n        this.runningHash = props.runningHash;\n\n        /**\n         * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.\n         *\n         * @readonly\n         */\n        this.sequenceNumber = props.sequenceNumber;\n\n        /**\n         * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * Access control for update/delete of the topic. Null if there is no key.\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey;\n\n        /**\n         * Access control for ConsensusService.submitMessage. Null if there is no key.\n         *\n         * @readonly\n         */\n        this.submitKey = props.submitKey;\n\n        /**\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * @readonly\n         */\n        this.autoRenewAccountId = props.autoRenewAccountId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IConsensusGetTopicInfoResponse} infoResponse\n     * @returns {TopicInfo}\n     */\n    static _fromProtobuf(infoResponse) {\n        const info = /** @type {proto.IConsensusTopicInfo} */ (infoResponse.topicInfo);\n\n        return new TopicInfo({\n            topicId: TopicId._fromProtobuf(\n                /** @type {proto.ITopicID} */ (infoResponse.topicID)\n            ),\n            topicMemo: info.memo != null ? info.memo : \"\",\n            runningHash:\n                info.runningHash != null ? info.runningHash : new Uint8Array(),\n            sequenceNumber:\n                info.sequenceNumber != null\n                    ? info.sequenceNumber instanceof Long\n                        ? info.sequenceNumber\n                        : Long.fromValue(info.sequenceNumber)\n                    : Long.ZERO,\n            expirationTime:\n                info.expirationTime != null\n                    ? Timestamp._fromProtobuf(info.expirationTime)\n                    : null,\n            adminKey:\n                info.adminKey != null ? keyFromProtobuf(info.adminKey) : null,\n            submitKey:\n                info.submitKey != null ? keyFromProtobuf(info.submitKey) : null,\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? new Duration(\n                          /** @type {Long} */ (info.autoRenewPeriod.seconds)\n                      )\n                    : null,\n            autoRenewAccountId:\n                info.autoRenewAccount != null\n                    ? AccountId._fromProtobuf(info.autoRenewAccount)\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IConsensusGetTopicInfoResponse}\n     */\n    _toProtobuf() {\n        return {\n            topicID: this.topicId._toProtobuf(),\n            topicInfo: {\n                memo: this.topicMemo,\n                runningHash: this.runningHash,\n                sequenceNumber: this.sequenceNumber,\n                expirationTime:\n                    this.expirationTime != null\n                        ? this.expirationTime._toProtobuf()\n                        : null,\n                adminKey:\n                    this.adminKey != null ? keyToProtobuf(this.adminKey) : null,\n                submitKey:\n                    this.submitKey != null\n                        ? keyToProtobuf(this.submitKey)\n                        : null,\n                autoRenewPeriod:\n                    this.autoRenewPeriod != null\n                        ? this.autoRenewPeriod._toProtobuf()\n                        : null,\n                autoRenewAccount:\n                    this.autoRenewAccountId != null\n                        ? this.autoRenewAccountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n","import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TopicId from \"./TopicId.js\";\nimport TopicInfo from \"./TopicInfo.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IConsensusTopicQuery} proto.IConsensusTopicQuery\n * @typedef {import(\"@hashgraph/proto\").IConsensusGetTopicInfoResponse} proto.IConsensusGetTopicInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * Retrieve the latest state of a topic.\n *\n * @augments {Query<TopicInfo>}\n */\nexport default class TopicInfoQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {TopicId | string} [props.topicId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {TopicInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {proto.IConsensusTopicQuery} */ (query.consensusGetTopicInfo);\n\n        return new TopicInfoQuery({\n            topicId:\n                info.topicID != null\n                    ? TopicId._fromProtobuf(info.topicID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * Set the topic ID for which the info is being requested.\n     *\n     * @param {TopicId | string} topicId\n     * @returns {TopicInfoQuery}\n     */\n    setTopicId(topicId) {\n        this._topicId =\n            topicId instanceof TopicId ? topicId : TopicId.fromString(topicId);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.getTopicInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const consensusGetTopicInfo = /** @type {proto.IConsensusGetTopicInfoResponse} */ (response.consensusGetTopicInfo);\n        return /** @type {proto.IResponseHeader} */ (consensusGetTopicInfo.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<TopicInfo>}\n     */\n    _mapResponse(response) {\n        return Promise.resolve(\n            TopicInfo._fromProtobuf(\n                /** @type {proto.IConsensusGetTopicInfoResponse} */ (response.consensusGetTopicInfo)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            consensusGetTopicInfo: {\n                header,\n                topicID:\n                    this._topicId != null ? this._topicId._toProtobuf() : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"consensusGetTopicInfo\", TopicInfoQuery._fromProtobuf);\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n    CHUNK_SIZE,\n} from \"../transaction/Transaction.js\";\nimport TopicId from \"./TopicId.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport Timestamp from \"../Timestamp.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IConsensusSubmitMessageTransactionBody} proto.IConsensusSubmitMessageTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IConsensusMessageChunkInfo} proto.IConsensusMessageChunkInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionResponse.js\").default} TransactionResponse\n */\n\nexport default class TopicMessageSubmitTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {TopicId} [props.topicId]\n     * @param {Uint8Array | string} [props.message]\n     * @param {number} [props.maxChunks]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._message = null;\n\n        if (props.message != null) {\n            this.setMessage(props.message);\n        }\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._maxChunks = 10;\n\n        if (props.maxChunks != null) {\n            this.setMaxChunks(props.maxChunks);\n        }\n\n        /** @type {proto.IConsensusMessageChunkInfo | null} */\n        this._chunkInfo = null;\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TopicMessageSubmitTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const message = /** @type {proto.IConsensusSubmitMessageTransactionBody} */ (body.consensusSubmitMessage);\n\n        return Transaction._fromProtobufTransactions(\n            new TopicMessageSubmitTransaction({\n                topicId:\n                    message.topicID != null\n                        ? TopicId._fromProtobuf(message.topicID)\n                        : undefined,\n                message: message.message != null ? message.message : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * @param {TopicId} topicId\n     * @returns {this}\n     */\n    setTopicId(topicId) {\n        this._requireNotFrozen();\n        this._topicId = topicId;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get message() {\n        return this._message;\n    }\n\n    /**\n     * @param {string | Uint8Array} message\n     * @returns {this}\n     */\n    setMessage(message) {\n        this._requireNotFrozen();\n        this._message =\n            typeof message === \"string\" ? utf8.encode(message) : message;\n\n        return this;\n    }\n\n    /**\n     * @returns {?number}\n     */\n    get maxChunks() {\n        return this._maxChunks;\n    }\n\n    /**\n     * @param {number} maxChunks\n     * @returns {this}\n     */\n    setMaxChunks(maxChunks) {\n        this._requireNotFrozen();\n        this._maxChunks = maxChunks;\n        return this;\n    }\n\n    /**\n     * Freeze this transaction from further modification to prepare for\n     * signing or serialization.\n     *\n     * Will use the `Client`, if available, to generate a default Transaction ID and select 1/3\n     * nodes to prepare this transaction for.\n     *\n     * @param {?import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {this}\n     */\n    freezeWith(client) {\n        super.freezeWith(client);\n\n        if (this._message == null) {\n            return this;\n        }\n\n        const chunks = Math.floor(\n            (this._message.length + (CHUNK_SIZE - 1)) / CHUNK_SIZE\n        );\n\n        if (chunks > this._maxChunks) {\n            throw new Error(\n                `Message with size ${this._message.length} too long for ${this._maxChunks} chunks`\n            );\n        }\n\n        const initialTransactionId = this.transactionId._toProtobuf();\n        let nextTransactionId = this.transactionId;\n\n        super._transactions = [];\n        super._transactionIds = [];\n        super._signedTransactions = [];\n        super._nextTransactionIndex = 0;\n\n        for (let chunk = 0; chunk < chunks; chunk++) {\n            this._chunkInfo = {\n                initialTransactionID: initialTransactionId,\n                total: chunks,\n                number: chunk + 1,\n            };\n\n            this._transactionIds.push(nextTransactionId);\n\n            for (const nodeAccountId of this._nodeIds) {\n                this._signedTransactions.push(\n                    this._makeSignedTransaction(nodeAccountId)\n                );\n            }\n\n            nextTransactionId = new TransactionId(\n                nextTransactionId.accountId,\n                new Timestamp(\n                    nextTransactionId.validStart.seconds,\n                    nextTransactionId.validStart.nanos.add(1)\n                )\n            );\n\n            super._nextTransactionIndex = this._nextTransactionIndex + 1;\n        }\n\n        this._chunkInfo = null;\n        super._nextTransactionIndex = 0;\n\n        return this;\n    }\n\n    /**\n     * @param {import(\"../client/Client.js\").default<*, *>} client\n     * @returns {Promise<TransactionResponse>}\n     */\n    async execute(client) {\n        return (await this.executeAll(client))[0];\n    }\n\n    /**\n     * @param {import(\"../client/Client.js\").default<*, *>} client\n     * @returns {Promise<TransactionResponse[]>}\n     */\n    async executeAll(client) {\n        if (!super._isFrozen()) {\n            this.freezeWith(client);\n        }\n\n        // on execute, sign each transaction with the operator, if present\n        // and we are signing a transaction that used the default transaction ID\n\n        const transactionId = this.transactionId;\n        const operatorAccountId = client.operatorAccountId;\n\n        if (\n            operatorAccountId != null &&\n            operatorAccountId.equals(transactionId.accountId)\n        ) {\n            await super.signWithOperator(client);\n        }\n\n        const responses = [];\n        for (let i = 0; i < this._transactionIds.length; i++) {\n            responses.push(await super.execute(client));\n        }\n\n        return responses;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.submitMessage(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"consensusSubmitMessage\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IConsensusSubmitMessageTransactionBody}\n     */\n    _makeTransactionData() {\n        if (this._chunkInfo != null && this._message != null) {\n            const num = /** @type {number} */ (this._chunkInfo.number);\n            const startIndex = (num - 1) * CHUNK_SIZE;\n            let endIndex = startIndex + CHUNK_SIZE;\n\n            if (endIndex > this._message.length) {\n                endIndex = this._message.length;\n            }\n\n            return {\n                topicID:\n                    this._topicId != null ? this._topicId._toProtobuf() : null,\n                message: this._message.slice(startIndex, endIndex),\n                chunkInfo: this._chunkInfo,\n            };\n        } else {\n            return {\n                topicID:\n                    this._topicId != null ? this._topicId._toProtobuf() : null,\n                message: this._message,\n            };\n        }\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"consensusSubmitMessage\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TopicMessageSubmitTransaction._fromProtobuf\n);\n","import Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IConsensusTopicResponse} proto.IConsensusTopicResponse\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n */\n\nexport default class TopicMessageChunk {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {Uint8Array} props.contents\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     */\n    constructor(props) {\n        /** @readonly */\n        this.consensusTimestamp = props.consensusTimestamp;\n        /** @readonly */\n        this.contents = props.contents;\n        /** @readonly */\n        this.runningHash = props.runningHash;\n        /** @readonly */\n        this.sequenceNumber = props.sequenceNumber;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IConsensusTopicResponse} response\n     * @returns {TopicMessageChunk}\n     */\n    static _fromProtobuf(response) {\n        return new TopicMessageChunk({\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */\n                (response.consensusTimestamp)\n            ),\n            contents:\n                response.message != null ? response.message : new Uint8Array(),\n            runningHash:\n                response.runningHash != null\n                    ? response.runningHash\n                    : new Uint8Array(),\n            sequenceNumber:\n                response.sequenceNumber != null\n                    ? response.sequenceNumber instanceof Long\n                        ? response.sequenceNumber\n                        : Long.fromValue(response.sequenceNumber)\n                    : Long.ZERO,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IConsensusTopicResponse}\n     */\n    _toProtobuf() {\n        return {\n            consensusTimestamp: this.consensusTimestamp._toProtobuf(),\n            message: this.contents,\n            runningHash: this.runningHash,\n            sequenceNumber: this.sequenceNumber,\n        };\n    }\n}\n","import Timestamp from \"../Timestamp.js\";\nimport TopicMessageChunk from \"./TopicMessageChunk.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IConsensusTopicResponse} proto.IConsensusTopicResponse\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n */\n\nexport default class TopicMessage {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {Uint8Array} props.contents\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     * @param {TopicMessageChunk[]} props.chunks\n     */\n    constructor(props) {\n        /** @readonly */\n        this.consensusTimestamp = props.consensusTimestamp;\n        /** @readonly */\n        this.contents = props.contents;\n        /** @readonly */\n        this.runningHash = props.runningHash;\n        /** @readonly */\n        this.sequenceNumber = props.sequenceNumber;\n        /** @readonly */\n        this.chunks = props.chunks;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IConsensusTopicResponse} response\n     * @returns {TopicMessage}\n     */\n    static _ofSingle(response) {\n        return new TopicMessage({\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */\n                (response.consensusTimestamp)\n            ),\n            contents:\n                response.message != null ? response.message : new Uint8Array(),\n            runningHash:\n                response.runningHash != null\n                    ? response.runningHash\n                    : new Uint8Array(),\n            sequenceNumber:\n                response.sequenceNumber != null\n                    ? response.sequenceNumber instanceof Long\n                        ? response.sequenceNumber\n                        : Long.fromNumber(response.sequenceNumber)\n                    : Long.ZERO,\n            chunks: [TopicMessageChunk._fromProtobuf(response)],\n        });\n    }\n\n    /**\n     * @internal\n     * @param {proto.IConsensusTopicResponse[]} responses\n     * @returns {TopicMessage}\n     */\n    static _ofMany(responses) {\n        const length = responses.length;\n\n        const last = /** @type {proto.IConsensusTopicResponse} */ (responses[\n            length - 1\n        ]);\n\n        const consensusTimestamp = Timestamp._fromProtobuf(\n            /** @type {proto.ITimestamp} */\n            (last.consensusTimestamp)\n        );\n\n        const runningHash = /** @type {Uint8Array} */ (last.runningHash);\n\n        /**\n         * @type {Long}\n         */\n        const sequenceNumber =\n            last.sequenceNumber != null\n                ? last.sequenceNumber instanceof Long\n                    ? last.sequenceNumber\n                    : Long.fromValue(last.sequenceNumber)\n                : Long.ZERO;\n\n        responses.sort((a, b) =>\n            (a != null\n                ? a.chunkInfo != null\n                    ? a.chunkInfo.number != null\n                        ? a.chunkInfo.number\n                        : 0\n                    : 0\n                : 0) <\n            (b != null\n                ? b.chunkInfo != null\n                    ? b.chunkInfo.number != null\n                        ? b.chunkInfo.number\n                        : 0\n                    : 0\n                : 0)\n                ? -1\n                : 1\n        );\n\n        /**\n         * @type {TopicMessageChunk[]}\n         */\n        const chunks = responses.map(\n            /**\n             * @type {proto.IConsensusTopicResponse}\n             */ (m) => TopicMessageChunk._fromProtobuf(m)\n        );\n\n        const size = chunks\n            .map((chunk) => chunk.contents.length)\n            .reduce((sum, current) => sum + current, 0);\n\n        const contents = new Uint8Array(size);\n        let offset = 0;\n\n        responses.forEach((value) => {\n            contents.set(/** @type {Uint8Array} */ (value.message), offset);\n            offset += /** @type {Uint8Array} */ (value.message).length;\n        });\n\n        return new TopicMessage({\n            consensusTimestamp,\n            contents,\n            runningHash,\n            sequenceNumber,\n            chunks,\n        });\n    }\n}\n","export default class SubscriptionHandle {\n    constructor() {\n        /** @type {{(): void} | null} */\n        this._call = null;\n    }\n\n    /**\n     * @param {() => void} call\n     * @returns {void}\n     */\n    _setCall(call) {\n        this._call = call;\n    }\n\n    unsubscribe() {\n        if (this._call != null) {\n            this._call();\n        }\n    }\n}\n","import TransactionId from \"../transaction/TransactionId.js\";\nimport SubscriptionHandle from \"./SubscriptionHandle.js\";\nimport TopicMessage from \"./TopicMessage.js\";\nimport * as proto from \"@hashgraph/proto\";\nimport TopicId from \"./TopicId.js\";\nimport Long from \"long\";\nimport Timestamp from \"../Timestamp.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n */\n\n/**\n * @template {Channel} ChannelT\n * @typedef {import(\"../client/Client.js\").default<ChannelT, MirrorChannel>} Client<ChannelT, MirrorChannel>\n */\n\nexport default class TopicMessageQuery {\n    /**\n     * @param {object} props\n     * @param {TopicId | string} [props.topicId]\n     * @param {Timestamp} [props.startTime]\n     * @param {Timestamp} [props.endTime]\n     * @param {(message: TopicMessage, error: Error)=> void} [props.errorHandler]\n     * @param {Long | number} [props.limit]\n     */\n    constructor(props = {}) {\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._startTime = null;\n        if (props.startTime != null) {\n            this.setStartTime(props.startTime);\n        }\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._endTime = null;\n        if (props.endTime != null) {\n            this.setEndTime(props.endTime);\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._limit = null;\n        if (props.limit != null) {\n            this.setLimit(props.limit);\n        }\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * @param {TopicId | string} topicId\n     * @returns {TopicMessageQuery}\n     */\n    setTopicId(topicId) {\n        this._topicId =\n            topicId instanceof TopicId ? topicId : TopicId.fromString(topicId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get startTime() {\n        return this._startTime;\n    }\n\n    /**\n     * @param {Timestamp | Date | number} startTime\n     * @returns {TopicMessageQuery}\n     */\n    setStartTime(startTime) {\n        this._startTime =\n            startTime instanceof Timestamp\n                ? startTime\n                : startTime instanceof Date\n                ? Timestamp.fromDate(startTime)\n                : new Timestamp(startTime, 0);\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get endTime() {\n        return this._endTime;\n    }\n\n    /**\n     * @param {Timestamp | Date | number} endTime\n     * @returns {TopicMessageQuery}\n     */\n    setEndTime(endTime) {\n        this._endTime =\n            endTime instanceof Timestamp\n                ? endTime\n                : endTime instanceof Date\n                ? Timestamp.fromDate(endTime)\n                : new Timestamp(endTime, 0);\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get limit() {\n        return this._limit;\n    }\n\n    /**\n     * @param {Long | number} limit\n     * @returns {TopicMessageQuery}\n     */\n    setLimit(limit) {\n        this._limit = limit instanceof Long ? limit : Long.fromValue(limit);\n\n        return this;\n    }\n\n    /**\n     * @param {(message: TopicMessage, error: Error)=> void} errorHandler\n     * @returns {TopicMessageQuery}\n     */\n    setErrorHandler(errorHandler) {\n        this._errorHandler =\n            errorHandler instanceof TopicMessage ? errorHandler : errorHandler;\n\n        return this;\n    }\n\n    /**\n     * @param {Client<*>} client\n     * @param {(message: TopicMessage, error: Error)=> void} errorHandler\n     * @param {(message: TopicMessage) => void} listener\n     * @returns {SubscriptionHandle}\n     */\n    subscribe(client, errorHandler, listener) {\n        const handle = new SubscriptionHandle();\n\n        this._makeServerStreamRequest(\n            handle,\n            0,\n            client,\n            errorHandler,\n            listener\n        );\n\n        return handle;\n    }\n\n    /**\n     * @param {SubscriptionHandle} handle\n     * @param {number} attempt\n     * @param {import(\"../client/Client.js\").default<Channel, MirrorChannel>} client\n     * @param {(message: TopicMessage, error: Error)=> void} errorHandler\n     * @param {(message: TopicMessage) => void} listener\n     * @returns {void}\n     */\n    _makeServerStreamRequest(handle, attempt, client, errorHandler, listener) {\n        /** @type {Map<string, proto.ConsensusTopicResponse[]>} */\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const list = new Map();\n\n        const request = proto.ConsensusTopicQuery.encode({\n            topicID: this._topicId != null ? this._topicId._toProtobuf() : null,\n            consensusStartTime:\n                this._startTime != null ? this._startTime._toProtobuf() : null,\n            consensusEndTime:\n                this._endTime != null ? this._endTime._toProtobuf() : null,\n            limit: this._limit != null ? this._limit : null,\n        }).finish();\n\n        const cancel = client._mirrorNetwork\n            .getNextMirrorNode()\n            .channel.makeServerStreamRequest(request, (error, data) => {\n                if (data == null || error != null) {\n                    // NOT_FOUND or UNAVAILABLE\n                    cancel();\n                    if (attempt < 10 && (error === 5 || error === 14)) {\n                        setTimeout(() => {\n                            this._makeServerStreamRequest(\n                                handle,\n                                attempt + 1,\n                                client,\n                                errorHandler,\n                                listener\n                            );\n                        }, 250 * 2 ** attempt);\n                    }\n                    //  else {\n                    //     errorHandler(null, error);\n                    // }\n                    return;\n                }\n\n                const message = proto.ConsensusTopicResponse.decode(data);\n                const topicMessage = TopicMessage._ofSingle(message);\n\n                if (message.chunkInfo == null) {\n                    try {\n                        listener(topicMessage);\n                    } catch (error) {\n                        errorHandler(topicMessage, error);\n                    }\n                } else {\n                    const chunkInfo = /** @type {proto.IConsensusMessageChunkInfo} */ (message.chunkInfo);\n                    const initialTransactionID = /** @type {proto.ITransactionID} */ (chunkInfo.initialTransactionID);\n                    const total = /** @type {number} */ (chunkInfo.total);\n                    const transactionId = TransactionId._fromProtobuf(\n                        initialTransactionID\n                    ).toString();\n\n                    /** @type {proto.ConsensusTopicResponse[]} */\n                    let responses = [];\n\n                    const temp = list.get(transactionId);\n                    if (temp == null) {\n                        list.set(transactionId, responses);\n                    } else {\n                        responses = temp;\n                    }\n\n                    responses.push(message);\n\n                    if (responses.length === total) {\n                        try {\n                            list.delete(transactionId);\n                            listener(TopicMessage._ofMany(responses));\n                        } catch (error) {\n                            errorHandler(topicMessage, error);\n                        }\n                    }\n                }\n            });\n\n        handle._setCall(() => cancel());\n    }\n}\n","import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport { keyFromProtobuf, keyToProtobuf } from \"../cryptography/protobuf.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TopicId from \"./TopicId.js\";\nimport Duration from \"../Duration.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IConsensusUpdateTopicTransactionBody} proto.IConsensusUpdateTopicTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n */\n\n/**\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Update a topic.\n *\n * If there is no adminKey, the only authorized update (available to anyone) is to extend the expirationTime.\n * Otherwise transaction must be signed by the adminKey.\n *\n * If an adminKey is updated, the transaction must be signed by the pre-update adminKey and post-update adminKey.\n *\n * If a new autoRenewAccount is specified (not just being removed), that account must also sign the transaction.\n */\nexport default class TopicUpdateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {TopicId | string} [props.topicId]\n     * @param {string} [props.topicMemo]\n     * @param {Key} [props.adminKey]\n     * @param {Key} [props.submitKey]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {AccountId | string} [props.autoRenewAccountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._topicMemo = null;\n\n        if (props.topicMemo != null) {\n            this.setTopicMemo(props.topicMemo);\n        }\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._submitKey = null;\n\n        if (props.submitKey != null) {\n            this.setSubmitKey(props.submitKey);\n        }\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._autoRenewAccountId = null;\n\n        if (props.autoRenewAccountId != null) {\n            this.setAutoRenewAccountId(props.autoRenewAccountId);\n        }\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._autoRenewPeriod = null;\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TopicUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const update = /** @type {proto.IConsensusUpdateTopicTransactionBody} */ (body.consensusUpdateTopic);\n\n        return Transaction._fromProtobufTransactions(\n            new TopicUpdateTransaction({\n                topicId:\n                    update.topicID != null\n                        ? TopicId._fromProtobuf(update.topicID)\n                        : undefined,\n                topicMemo:\n                    update.memo != null\n                        ? update.memo.value != null\n                            ? update.memo.value\n                            : undefined\n                        : undefined,\n                adminKey:\n                    update.adminKey != null\n                        ? keyFromProtobuf(update.adminKey)\n                        : undefined,\n                submitKey:\n                    update.submitKey != null\n                        ? keyFromProtobuf(update.submitKey)\n                        : undefined,\n                autoRenewAccountId:\n                    update.autoRenewAccount != null\n                        ? AccountId._fromProtobuf(update.autoRenewAccount)\n                        : undefined,\n                autoRenewPeriod:\n                    update.autoRenewPeriod != null\n                        ? update.autoRenewPeriod.seconds != null\n                            ? update.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * @param {TopicId | string} topicId\n     * @returns {TopicUpdateTransaction}\n     */\n    setTopicId(topicId) {\n        this._requireNotFrozen();\n        this._topicId =\n            topicId instanceof TopicId ? topicId : TopicId.fromString(topicId);\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearTopicId() {\n        this._requireNotFrozen();\n        this._topicId = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get topicMemo() {\n        return this._topicMemo;\n    }\n\n    /**\n     * @param {string} topicMemo\n     * @returns {TopicUpdateTransaction}\n     */\n    setTopicMemo(topicMemo) {\n        this._requireNotFrozen();\n        this._topicMemo = topicMemo;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearTopicMemo() {\n        this._requireNotFrozen();\n        this._topicMemo = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {TopicUpdateTransaction}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearAdminKey() {\n        this._requireNotFrozen();\n        this._adminKey = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get submitKey() {\n        return this._submitKey;\n    }\n\n    /**\n     * @param {Key} submitKey\n     * @returns {TopicUpdateTransaction}\n     */\n    setSubmitKey(submitKey) {\n        this._requireNotFrozen();\n        this._submitKey = submitKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearSubmitKey() {\n        this._requireNotFrozen();\n        this._submitKey = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._autoRenewAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} autoRenewAccountId\n     * @returns {TopicUpdateTransaction}\n     */\n    setAutoRenewAccountId(autoRenewAccountId) {\n        this._requireNotFrozen();\n        this._autoRenewAccountId =\n            autoRenewAccountId instanceof AccountId\n                ? autoRenewAccountId\n                : AccountId.fromString(autoRenewAccountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearAutoRenewAccountId() {\n        this._requireNotFrozen();\n        this._autoRenewAccountId = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this account.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {TopicUpdateTransaction}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.updateTopic(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"consensusUpdateTopic\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IConsensusUpdateTopicTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            topicID: this._topicId != null ? this._topicId._toProtobuf() : null,\n            adminKey:\n                this._adminKey != null ? keyToProtobuf(this._adminKey) : null,\n            submitKey:\n                this._submitKey != null ? keyToProtobuf(this._submitKey) : null,\n            memo:\n                this._topicId != null\n                    ? {\n                          value: this._topicMemo,\n                      }\n                    : null,\n            autoRenewAccount:\n                this._autoRenewAccountId != null\n                    ? this._autoRenewAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod:\n                this._autoRenewPeriod != null\n                    ? this._autoRenewPeriod._toProtobuf()\n                    : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"consensusUpdateTopic\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TopicUpdateTransaction._fromProtobuf\n);\n","import AccountId from \"./AccountId.js\";\nimport Hbar from \"../Hbar.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransferList} proto.ITransferList\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../long.js\").LongObject} LongObject\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * @augments {ObjectMap<AccountId, Hbar>}\n */\nexport default class HbarTransferMap extends ObjectMap {\n    constructor() {\n        super((s) => AccountId.fromString(s));\n    }\n\n    /**\n     * @param {proto.ITransferList} transfers\n     * @returns {HbarTransferMap}\n     */\n    static _fromProtobuf(transfers) {\n        const accountTransfers = new HbarTransferMap();\n\n        for (const transfer of transfers.accountAmounts != null\n            ? transfers.accountAmounts\n            : []) {\n            const account = AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (transfer.accountID)\n            );\n\n            accountTransfers._set(\n                account,\n                Hbar.fromTinybars(/** @type {Long} */ (transfer.amount))\n            );\n        }\n\n        return accountTransfers;\n    }\n}\n","import Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\nimport TokenTransferMap from \"./TokenTransferMap.js\";\nimport HbarTransferMap from \"./HbarTransferMap.js\";\n\n/**\n * @typedef {import(\"../long.js\").LongObject} LongObject\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoTransferTransactionBody} proto.ICryptoTransferTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} TransferTokensInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} accountId\n * @property {Long | number} amount\n */\n\n/**\n * @typedef {object} TransferTokenObject\n * @property {TokenId} tokenId\n * @property {AccountId} accountId\n * @property {Long} amount\n */\n\n/**\n * @typedef {object} TransferHbarInput\n * @property {AccountId | string} accountId\n * @property {number | string | Long | BigNumber | Hbar} amount\n */\n\n/**\n * Transfers a new Hedera™ crypto-currency token.\n */\nexport default class TransferTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {(TransferTokensInput)[]} [props.tokenTransfers]\n     * @param {(TransferHbarInput)[]} [props.hbarTransfers]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {TokenTransferMap}\n         */\n        this._tokenTransfers = new TokenTransferMap();\n\n        /**\n         * @private\n         * @type {HbarTransferMap}\n         */\n        this._hbarTransfers = new HbarTransferMap();\n\n        this.setMaxTransactionFee(new Hbar(1));\n\n        for (const transfer of props.tokenTransfers != null\n            ? props.tokenTransfers\n            : []) {\n            this.addTokenTransfer(\n                transfer.tokenId,\n                transfer.accountId,\n                transfer.amount\n            );\n        }\n\n        for (const transfer of props.hbarTransfers != null\n            ? props.hbarTransfers\n            : []) {\n            this.addHbarTransfer(transfer.accountId, transfer.amount);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TransferTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const cryptoTransfer = /** @type {proto.ICryptoTransferTransactionBody} */ (body.cryptoTransfer);\n\n        const transfers = new TransferTransaction();\n        for (const list of cryptoTransfer.tokenTransfers != null\n            ? cryptoTransfer.tokenTransfers\n            : []) {\n            const tokenId = TokenId._fromProtobuf(\n                /** @type {proto.ITokenID} */ (list.token)\n            );\n\n            for (const transfer of list.transfers != null\n                ? list.transfers\n                : []) {\n                transfers.addTokenTransfer(\n                    tokenId,\n                    AccountId._fromProtobuf(\n                        /** @type {proto.IAccountID} */ (transfer.accountID)\n                    ),\n                    /** @type {Long} */ (transfer.amount)\n                );\n            }\n        }\n\n        const accountAmounts =\n            cryptoTransfer.transfers != null\n                ? cryptoTransfer.transfers.accountAmounts != null\n                    ? cryptoTransfer.transfers.accountAmounts\n                    : []\n                : [];\n\n        for (const aa of accountAmounts) {\n            transfers.addHbarTransfer(\n                AccountId._fromProtobuf(\n                    /** @type {proto.IAccountID} */ (aa.accountID)\n                ),\n                Hbar.fromTinybars(/** @type {Long} */ (aa.amount))\n            );\n        }\n\n        return Transaction._fromProtobufTransactions(\n            transfers,\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {TokenTransferMap}\n     */\n    get tokenTransfers() {\n        return this._tokenTransfers;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} accountId\n     * @param {number | Long} amount\n     * @returns {this}\n     */\n    addTokenTransfer(tokenId, accountId, amount) {\n        this._requireNotFrozen();\n\n        this._tokenTransfers.__set(\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId),\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId),\n            amount instanceof Long ? amount : Long.fromNumber(amount)\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {HbarTransferMap}\n     */\n    get hbarTranfers() {\n        return this._hbarTransfers;\n    }\n\n    /**\n     * @internal\n     * @param {AccountId | string} accountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {TransferTransaction}\n     */\n    addHbarTransfer(accountId, amount) {\n        this._requireNotFrozen();\n        this._hbarTransfers._set(\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId),\n            amount instanceof Hbar ? amount : new Hbar(amount)\n        );\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoTransfer(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoTransfer\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoTransferTransactionBody}\n     */\n    _makeTransactionData() {\n        const tokenTransfers = [];\n        const hbarTransfers = [];\n\n        for (const [tokenId, value] of this._tokenTransfers) {\n            const transfers = [];\n            for (const [accountId, amount] of value) {\n                transfers.push({\n                    accountID: accountId._toProtobuf(),\n                    amount: amount,\n                });\n            }\n\n            tokenTransfers.push({\n                token: tokenId._toProtobuf(),\n                transfers,\n            });\n        }\n\n        for (const [accountId, value] of this._hbarTransfers) {\n            hbarTransfers.push({\n                accountID: accountId._toProtobuf(),\n                amount: value.toTinybars(),\n            });\n        }\n\n        return {\n            transfers: {\n                accountAmounts: hbarTransfers,\n            },\n            tokenTransfers,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoTransfer\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransferTransaction._fromProtobuf\n);\n","import TransactionId from \"../transaction/TransactionId.js\";\nimport Hbar from \"../Hbar.js\";\nimport Executable from \"../Executable.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport { _makePaymentTransaction, COST_QUERY } from \"./Query.js\";\nimport { ResponseType as ProtoResponseType } from \"@hashgraph/proto\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../Status.js\").default} Status\n */\n\n/**\n * @template OutputT\n * @augments {Executable<proto.IQuery, proto.IResponse, Hbar>}\n */\nexport default class CostQuery extends Executable {\n    /**\n     * @param {import(\"./Query.js\").default<OutputT>} query\n     */\n    constructor(query) {\n        super();\n\n        this._query = query;\n\n        /**\n         * @type {proto.IQueryHeader | null}\n         */\n        this._header = null;\n    }\n\n    /**\n     * @returns {TransactionId}\n     */\n    _getTransactionId() {\n        return this._query._getTransactionId();\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @param {import(\"../client/Client.js\").default<*, *>} client\n     * @returns {Promise<void>}\n     */\n    async _beforeExecute(client) {\n        if (client == null) {\n            throw new Error(\"Cannot do CostQuery without Client\");\n        }\n\n        const operator = client._operator;\n\n        if (operator == null) {\n            throw new Error(\n                \"`client` must have an `operator` or an explicit payment transaction must be provided\"\n            );\n        }\n\n        if (this._query._nodeIds.length == 0) {\n            this._query._nodeIds = client._network.getNodeAccountIdsForExecute();\n        }\n\n        this._header = {\n            payment: await _makePaymentTransaction(\n                /** @type {import(\"../transaction/TransactionId.js\").default} */\n                (TransactionId.generate(new AccountId(0))),\n                new AccountId(0),\n                operator,\n                new Hbar(0)\n            ),\n            responseType: ProtoResponseType.COST_ANSWER,\n        };\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @returns {proto.IQuery}\n     */\n    _makeRequest() {\n        return this._query._onMakeRequest(\n            /** @type {proto.IQueryHeader} */ (this._header)\n        );\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {proto.IResponse} status\n     * @returns {Status}\n     */\n    _mapResponseStatus(status) {\n        return this._query._mapResponseStatus(status);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {proto.IQuery} request\n     * @returns {Promise<Hbar>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const cost = this._query._mapResponseHeader(response).cost;\n        return Promise.resolve(\n            Hbar.fromTinybars(/** @type {Long | number} */ (cost))\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return this._query._execute(channel, request);\n    }\n\n    /**\n     * @override\n     * @returns {AccountId}\n     */\n    _getNodeAccountId() {\n        return this._query._getNodeAccountId();\n    }\n}\n\nCOST_QUERY.push((query) => new CostQuery(query));\n","export * from \"@hashgraph/cryptography\";\n\nexport { default as AccountBalanceQuery } from \"./account/AccountBalanceQuery.js\";\nexport { default as AccountCreateTransaction } from \"./account/AccountCreateTransaction.js\";\nexport { default as AccountDeleteTransaction } from \"./account/AccountDeleteTransaction.js\";\nexport { default as AccountId } from \"./account/AccountId.js\";\nexport { default as AccountInfo } from \"./account/AccountInfo.js\";\nexport { default as AccountInfoQuery } from \"./account/AccountInfoQuery.js\";\nexport { default as AccountRecordsQuery } from \"./account/AccountRecordsQuery.js\";\nexport { default as AccountStakersQuery } from \"./account/AccountStakersQuery.js\";\nexport { default as AccountUpdateTransaction } from \"./account/AccountUpdateTransaction.js\";\nexport { default as ContractByteCodeQuery } from \"./contract/ContractByteCodeQuery.js\";\nexport { default as ContractCallQuery } from \"./contract/ContractCallQuery.js\";\nexport { default as ContractCreateTransaction } from \"./contract/ContractCreateTransaction.js\";\nexport { default as ContractDeleteTransaction } from \"./contract/ContractDeleteTransaction.js\";\nexport { default as ContractExecuteTransaction } from \"./contract/ContractExecuteTransaction.js\";\nexport { default as ContractFunctionParameters } from \"./contract/ContractFunctionParameters.js\";\nexport { default as ContractFunctionResult } from \"./contract/ContractFunctionResult.js\";\nexport { default as ContractFunctionSelector } from \"./contract/ContractFunctionSelector.js\";\nexport { default as ContractId } from \"./contract/ContractId.js\";\nexport { default as ContractInfo } from \"./contract/ContractInfo.js\";\nexport { default as ContractInfoQuery } from \"./contract/ContractInfoQuery.js\";\nexport { default as ContractLogInfo } from \"./contract/ContractLogInfo.js\";\nexport { default as ContractUpdateTranscation } from \"./contract/ContractUpdateTranscation.js\";\nexport { default as ExchangeRate } from \"./ExchangeRate.js\";\nexport { default as FileAppendTransaction } from \"./file/FileAppendTransaction.js\";\nexport { default as FileContentsQuery } from \"./file/FileContentsQuery.js\";\nexport { default as FileCreateTransaction } from \"./file/FileCreateTransaction.js\";\nexport { default as FileDeleteTransaction } from \"./file/FileDeleteTransaction.js\";\nexport { default as FileId } from \"./file/FileId.js\";\nexport { default as FileInfo } from \"./file/FileInfo.js\";\nexport { default as FileInfoQuery } from \"./file/FileInfoQuery.js\";\nexport { default as FileUpdateTransaction } from \"./file/FileUpdateTransaction.js\";\nexport { default as FreezeTransaction } from \"./system/FreezeTransaction.js\";\nexport { default as Hbar } from \"./Hbar.js\";\nexport { default as HbarUnit } from \"./HbarUnit.js\";\nexport { default as LiveHash } from \"./account/LiveHash.js\";\nexport { default as LiveHashAddTransaction } from \"./account/LiveHashAddTransaction.js\";\nexport { default as LiveHashDeleteTransaction } from \"./account/LiveHashDeleteTransaction.js\";\nexport { default as LiveHashQuery } from \"./account/LiveHashQuery.js\";\nexport { default as NetworkVersionInfo } from \"./network/NetworkVersionInfo.js\";\nexport { default as NetworkVersionInfoQuery } from \"./network/NetworkVersionInfoQuery.js\";\nexport { default as ProxyStaker } from \"./account/ProxyStaker.js\";\nexport { default as Query } from \"./query/Query.js\";\nexport { default as SemanticVersion } from \"./network/SemanticVersion.js\";\nexport { default as Status } from \"./Status.js\";\nexport { default as SystemDeleteTransaction } from \"./system/SystemDeleteTransaction.js\";\nexport { default as SystemUndeleteTransaction } from \"./system/SystemUndeleteTransaction.js\";\nexport { default as Timestamp } from \"./Timestamp.js\";\nexport { default as TokenAssociateTransaction } from \"./token/TokenAssociateTransaction.js\";\nexport { default as TokenBurnTransaction } from \"./token/TokenBurnTransaction.js\";\nexport { default as TokenCreateTransaction } from \"./token/TokenCreateTransaction.js\";\nexport { default as TokenDeleteTransaction } from \"./token/TokenDeleteTransaction.js\";\nexport { default as TokenDissociateTransaction } from \"./token/TokenDissociateTransaction.js\";\nexport { default as TokenFreezeTransaction } from \"./token/TokenFreezeTransaction.js\";\nexport { default as TokenGrantKycTransaction } from \"./token/TokenGrantKycTransaction.js\";\nexport { default as TokenId } from \"./token/TokenId.js\";\nexport { default as TokenInfo } from \"./token/TokenInfo.js\";\nexport { default as TokenInfoQuery } from \"./token/TokenInfoQuery.js\";\nexport { default as TokenMintTransaction } from \"./token/TokenMintTransaction.js\";\nexport { default as TokenRelationship } from \"./account/TokenRelationship.js\";\nexport { default as TokenRelationshipMap } from \"./account/TokenRelationshipMap.js\";\nexport { default as TokenRevokeKycTransaction } from \"./token/TokenRevokeKycTransaction.js\";\nexport { default as TokenUnfreezeTransaction } from \"./token/TokenUnfreezeTransaction.js\";\nexport { default as TokenUpdateTransaction } from \"./token/TokenUpdateTransaction.js\";\nexport { default as TokenWipeTransaction } from \"./token/TokenWipeTransaction.js\";\nexport { default as TopicCreateTransaction } from \"./topic/TopicCreateTransaction.js\";\nexport { default as TopicDeleteTransaction } from \"./topic/TopicDeleteTransaction.js\";\nexport { default as TopicId } from \"./topic/TopicId.js\";\nexport { default as TopicInfo } from \"./topic/TopicInfo.js\";\nexport { default as TopicInfoQuery } from \"./topic/TopicInfoQuery.js\";\nexport { default as TopicMessageSubmitTransaction } from \"./topic/TopicMessageSubmitTransaction.js\";\nexport { default as TopicMessage } from \"./topic/TopicMessage.js\";\nexport { default as TopicMessageChunk } from \"./topic/TopicMessageChunk.js\";\nexport { default as TopicMessageQuery } from \"./topic/TopicMessageQuery.js\";\nexport { default as TopicUpdateTransaction } from \"./topic/TopicUpdateTransaction.js\";\nexport { default as Transaction } from \"./transaction/Transaction.js\";\nexport { default as TransactionId } from \"./transaction/TransactionId.js\";\nexport { default as TransactionReceipt } from \"./transaction/TransactionReceipt.js\";\nexport { default as TransactionReceiptQuery } from \"./transaction/TransactionReceiptQuery.js\";\nexport { default as TransactionRecord } from \"./transaction/TransactionRecord.js\";\nexport { default as TransactionRecordQuery } from \"./transaction/TransactionRecordQuery.js\";\nexport { default as TransactionResponse } from \"./transaction/TransactionResponse.js\";\nexport { default as Transfer } from \"./Transfer.js\";\nexport { default as TransferTransaction } from \"./account/TransferTransaction.js\";\n\nimport \"./query/CostQuery.js\";\n","/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./channel/MirrorChannel.js\").default} MirrorChannel\n */\n\n/**\n * @abstract\n * @template {Channel | MirrorChannel} ChannelT\n */\nexport default class ManagedNode {\n    /**\n     * @param {string} address\n     * @param {(address: string) => ChannelT} channelInitFunction\n     */\n    constructor(address, channelInitFunction) {\n        this.address = address;\n\n        /** @type {ChannelT | null} */\n        this._channel = null;\n\n        /** @type {(address: string) => ChannelT} */\n        this._channelInitFunction = channelInitFunction;\n    }\n\n    get channel() {\n        if (this._channel != null) {\n            return this._channel;\n        }\n\n        this._channel = this._channelInitFunction(this.address);\n\n        return this._channel;\n    }\n\n    close() {\n        if (this._channel != null) {\n            this._channel.close();\n        }\n\n        this._channel = null;\n    }\n}\n","import ManagedNode from \"./ManagedNode.js\";\n\n/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n */\n\n/**\n * @template {Channel} ChannelT\n * @augments {ManagedNode<ChannelT>}\n */\nexport default class Node extends ManagedNode {\n    /**\n     * @param {AccountId} accountId\n     * @param {string} address\n     * @param {(address: string) => ChannelT} channelInitFunction\n     */\n    constructor(accountId, address, channelInitFunction) {\n        super(address, channelInitFunction);\n\n        this.accountId = accountId;\n\n        /** @type {number} */\n        this.delay = 250;\n\n        /** @type {number} */\n        this.lastUsed = Date.now();\n\n        /** @type {number} */\n        this.delayUntil = Date.now();\n\n        /** @type {number} */\n        this.useCount = 0;\n    }\n\n    inUse() {\n        this.useCount++;\n        this.lastUsed = Date.now();\n    }\n\n    /**\n     * Determines if this node is healthy by checking if this node hasn't been\n     * in use for a the required `delay` period. Since this looks at `this.lastUsed`\n     * and that value is only set in the `wait()` method, any node that has not\n     * returned a bad gRPC status will always be considered healthy.\n     *\n     * @returns {boolean}\n     */\n    isHealthy() {\n        return this.delayUntil <= Date.now();\n    }\n\n    increaseDelay() {\n        this.delay = Math.min(this.delay * 2, 8000);\n        this.delayUntil = Date.now() + this.delay;\n    }\n\n    decreaseDelay() {\n        this.delay = Math.max(this.delay / 2, 250);\n    }\n\n    /**\n     * This is only ever called if the node itself is down.\n     * A node returning a transaction with a bad status code does not indicate\n     * the node is down, and hence this method will not be called.\n     *\n     * @returns {Promise<void>}\n     */\n    wait() {\n        const delay = this.delayUntil - this.lastUsed;\n        return new Promise((resolve) => setTimeout(resolve, delay));\n    }\n\n    /**\n     * @param {Node<*>} node\n     * @returns {number}\n     */\n    compare(node) {\n        if (this.isHealthy() && node.isHealthy()) {\n            if (this.useCount < node.useCount) {\n                return -1;\n            } else if (this.useCount > node.useCount) {\n                return 1;\n            } else {\n                if (this.lastUsed < node.lastUsed) {\n                    return -1;\n                } else if (this.lastUsed > node.lastUsed) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        } else if (this.isHealthy() && !node.isHealthy()) {\n            return -1;\n        } else if (!this.isHealthy() && node.isHealthy()) {\n            return 1;\n        } else {\n            if (this.useCount < node.useCount) {\n                return -1;\n            } else if (this.useCount > node.useCount) {\n                return 1;\n            } else {\n                if (this.lastUsed < node.lastUsed) {\n                    return -1;\n                } else if (this.lastUsed > node.lastUsed) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        }\n    }\n}\n","import AccountId from \"../account/AccountId.js\";\nimport Node from \"../Node.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @typedef {import(\"./Client.js\").NetworkName} NetworkName\n */\n\n/**\n * @template {Channel} ChannelT\n */\nexport default class Network {\n    /**\n     * @param {(address: string) => ChannelT} createNetworkChannel\n     */\n    constructor(createNetworkChannel) {\n        /**\n         * @type {{[key: string]: (string | AccountId)}}\n         */\n        this.network = {};\n\n        /**\n         * Map of node account ID (as a string)\n         * to the node URL.\n         *\n         * @internal\n         * @type {Map<string, Node<ChannelT>>}\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.networkNodes = new Map();\n\n        /**\n         * List of node account IDs.\n         *\n         * @private\n         * @type {Node<ChannelT>[]}\n         */\n        this.nodes = [];\n\n        /** @type {(address: string) => ChannelT} */\n        this.createNetworkChannel = createNetworkChannel;\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)}} network\n     */\n    setNetwork(network) {\n        const network_ = Object.entries(network);\n        const thisNetwork_ = Object.entries(this.network);\n\n        // Remove address that no longer exist\n        for (const [url, accountId] of thisNetwork_) {\n            const key =\n                accountId instanceof AccountId\n                    ? accountId\n                    : AccountId.fromString(accountId);\n\n            // eslint-disable-next-line ie11/no-loop-func,@typescript-eslint/no-unused-vars\n            const index = network_.findIndex(([url_, _]) => url_ === url);\n            if (index < 0) {\n                const node = this.networkNodes.get(key.toString());\n                if (node != null) {\n                    node.close();\n                }\n\n                this.networkNodes.delete(key.toString());\n\n                const nodesIndex = this.nodes.findIndex(\n                    // eslint-disable-next-line ie11/no-loop-func\n                    (node) => node.address === url\n                );\n                if (nodesIndex >= 0) {\n                    this.nodes.splice(nodesIndex, 1);\n                }\n            }\n        }\n\n        // Add new address to the list\n        for (const [url, accountId] of network_) {\n            const key =\n                accountId instanceof AccountId\n                    ? accountId\n                    : AccountId.fromString(accountId);\n\n            // eslint-disable-next-line ie11/no-loop-func,@typescript-eslint/no-unused-vars\n            const index = thisNetwork_.findIndex(([url_, _]) => url_ === url);\n            if (index < 0) {\n                const node = new Node(key, url, this.createNetworkChannel);\n                this.networkNodes.set(key.toString(), node);\n\n                this.nodes.push(node);\n            }\n        }\n\n        shuffle(this.nodes);\n\n        this.network = network;\n    }\n\n    /**\n     * @internal\n     * @returns {number}\n     */\n    getNumberOfNodesForTransaction() {\n        const count = this.nodes\n            .map((node) => /** @type {number} */ (node.isHealthy() ? 1 : 0))\n            .reduce((sum, value) => (sum += value));\n\n        return (count + 3 - 1) / 3;\n    }\n\n    /**\n     * @internal\n     * @returns {AccountId[]}\n     */\n    getNodeAccountIdsForExecute() {\n        this.nodes.sort((a, b) => a.compare(b));\n\n        return this.nodes\n            .slice(0, this.getNumberOfNodesForTransaction())\n            .map((node) => node.accountId);\n    }\n\n    close() {\n        for (const node of this.nodes) {\n            node.close();\n        }\n\n        this.networkNodes.clear();\n        this.nodes = [];\n        this.network = {};\n    }\n}\n\n/**\n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n *\n * @template T\n * @param {Array<T>} array\n */\nfunction shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n}\n","/**\n * @typedef {import(\"./channel/MirrorChannel.js\").default} MirrorChannel\n */\n\nexport default class MirrorNode {\n    /**\n     * @param {string} address\n     * @param {(address: string) => MirrorChannel} channelInitFunction\n     */\n    constructor(address, channelInitFunction) {\n        this.address = address;\n        this._channelInitFunction = channelInitFunction;\n    }\n\n    get channel() {\n        if (this._channel != null) {\n            return this._channel;\n        }\n\n        this._channel = this._channelInitFunction(this.address);\n\n        return this._channel;\n    }\n\n    close() {\n        if (this._channel != null) {\n            this._channel.close();\n        }\n\n        this._channel = null;\n    }\n}\n","import MirrorNode from \"../MirrorNode.js\";\n\n/**\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n */\n\n/**\n * @typedef {import(\"./Client.js\").NetworkName} NetworkName\n */\nexport default class MirrorNetwork {\n    /**\n     * @param {((address: string) => MirrorChannel)?} channelInitFunction\n     */\n    constructor(channelInitFunction) {\n        /**\n         * Map of node account ID (as a string)\n         * to the node URL.\n         *\n         * @internal\n         * @type {string[]}\n         */\n        this.network = [];\n\n        /**\n         * Map of node account ID (as a string)\n         * to the node URL.\n         *\n         * @internal\n         * @type {Map<string, MirrorNode>}\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.networkNodes = new Map();\n\n        this.index = 0;\n\n        /** @type {((address: string) => MirrorChannel)?} */\n        this._channelInitFunction = channelInitFunction;\n    }\n\n    /**\n     * @param {string[]} network\n     */\n    setMirrorNetwork(network) {\n        if (this._channelInitFunction == null) {\n            // silently fail on client boot if mirror network is not\n            // supported\n            return;\n        }\n\n        this.close();\n        this.network = network;\n\n        for (const address of this.network) {\n            this.networkNodes.set(\n                address,\n                new MirrorNode(address, this._channelInitFunction)\n            );\n        }\n\n        this.index = 0;\n    }\n\n    /**\n     * @returns {MirrorNode}\n     */\n    getNextMirrorNode() {\n        if (this._channelInitFunction == null) {\n            throw new Error(\"mirror network not supported on browser\");\n        }\n\n        const node = this.network[this.index];\n        this.index = (this.index + 1) % this.network.length;\n        return /** @type {MirrorNode} */ (this.networkNodes.get(node));\n    }\n\n    close() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [_, node] of this.networkNodes) {\n            node.close();\n        }\n\n        this.networkNodes.clear();\n        this.network = [];\n    }\n}\n","import AccountId from \"../account/AccountId.js\";\nimport AccountBalanceQuery from \"../account/AccountBalanceQuery.js\";\nimport { PrivateKey, PublicKey } from \"@hashgraph/cryptography\";\nimport Hbar from \"../Hbar.js\";\nimport Network from \"./Network.js\";\nimport MirrorNetwork from \"./MirrorNetwork.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n */\n\n/**\n * @typedef {\"mainnet\" | \"testnet\" | \"previewnet\"} NetworkName\n */\n\n/**\n * @typedef {object} Operator\n * @property {string | PrivateKey} privateKey\n * @property {string | AccountId} accountId\n */\n\n/**\n * @typedef {object} ClientOperator\n * @property {PublicKey} publicKey\n * @property {AccountId} accountId\n * @property {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n */\n\n/**\n * @typedef {object} ClientConfiguration\n * @property {{[key: string]: (string | AccountId)} | NetworkName} network\n * @property {string[] | NetworkName | string} [mirrorNetwork]\n * @property {Operator} [operator]\n */\n\n/**\n * @abstract\n * @template {Channel} ChannelT\n * @template {MirrorChannel} MirrorChannelT\n */\nexport default class Client {\n    /**\n     * @protected\n     * @hideconstructor\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        /**\n         * List of mirror network URLs.\n         *\n         * @internal\n         * @type {MirrorNetwork}\n         */\n        this._mirrorNetwork = new MirrorNetwork(\n            this._createMirrorNetworkChannel()\n        );\n\n        /**\n         * Map of node account ID (as a string)\n         * to the node URL.\n         *\n         * @internal\n         * @type {Network<ChannelT>}\n         */\n        this._network = new Network(this._createNetworkChannel());\n\n        /**\n         * @internal\n         * @type {?ClientOperator}\n         */\n        this._operator = null;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._maxTransactionFee = new Hbar(2);\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._maxQueryPayment = new Hbar(1);\n\n        if (props != null) {\n            if (props.operator != null) {\n                this.setOperator(\n                    props.operator.accountId,\n                    props.operator.privateKey\n                );\n            }\n        }\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | NetworkName} network\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNetwork(network) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    get network() {\n        return this._network.network;\n    }\n\n    /**\n     * @param {string[] | string | NetworkName} mirrorNetwork\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMirrorNetwork(mirrorNetwork) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @returns {string[]}\n     */\n    get mirrorNetwork() {\n        return this._mirrorNetwork.network;\n    }\n\n    /**\n     * Set the account that will, by default, pay for transactions and queries built with this client.\n     *\n     * @param {AccountId | string} accountId\n     * @param {PrivateKey | string} privateKey\n     * @returns {this}\n     */\n    setOperator(accountId, privateKey) {\n        const key =\n            typeof privateKey === \"string\"\n                ? PrivateKey.fromString(privateKey)\n                : privateKey;\n\n        return this.setOperatorWith(accountId, key.publicKey, (message) =>\n            Promise.resolve(key.sign(message))\n        );\n    }\n\n    /**\n     * Sets the account that will, by default, pay for transactions and queries built with\n     * this client.\n     *\n     * @param {AccountId | string} accountId\n     * @param {PublicKey | string} publicKey\n     * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n     * @returns {this}\n     */\n    setOperatorWith(accountId, publicKey, transactionSigner) {\n        this._operator = {\n            transactionSigner,\n\n            accountId:\n                accountId instanceof AccountId\n                    ? accountId\n                    : AccountId.fromString(accountId),\n\n            publicKey:\n                publicKey instanceof PublicKey\n                    ? publicKey\n                    : PublicKey.fromString(publicKey),\n        };\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get operatorAccountId() {\n        return this._operator != null ? this._operator.accountId : null;\n    }\n\n    /**\n     * @returns {?PublicKey}\n     */\n    get operatorPublicKey() {\n        return this._operator != null ? this._operator.publicKey : null;\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    get maxTransactionFee() {\n        return this._maxTransactionFee;\n    }\n\n    /**\n     * Set the maximum fee to be paid for transactions\n     * executed by this client.\n     *\n     * @param {Hbar} maxTransactionFee\n     * @returns {this}\n     */\n    setMaxTransactionFee(maxTransactionFee) {\n        this._maxTransactionFee = maxTransactionFee;\n        return this;\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    get maxQueryPayment() {\n        return this._maxQueryPayment;\n    }\n\n    /**\n     * Set the maximum payment allowable for queries.\n     *\n     * @param {Hbar} maxQueryPayment\n     * @returns {Client<ChannelT, MirrorChannelT>}\n     */\n    setMaxQueryPayment(maxQueryPayment) {\n        this._maxQueryPayment = maxQueryPayment;\n        return this;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     */\n    async ping(accountId) {\n        await new AccountBalanceQuery({ accountId })\n            .setNodeAccountIds([\n                accountId instanceof AccountId\n                    ? accountId\n                    : AccountId.fromString(accountId),\n            ])\n            .execute(this);\n    }\n\n    /**\n     * @returns {void}\n     */\n    close() {\n        this._network.close();\n        this._mirrorNetwork.close();\n    }\n\n    /**\n     * @abstract\n     * @returns {(address: string) => ChannelT}\n     */\n    _createNetworkChannel() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @returns {((address: string) => MirrorChannelT)?}\n     */\n    _createMirrorNetworkChannel() {\n        // throw new Error(\"not implemented\");\n        return null;\n    }\n}\n","import {\n    CryptoService,\n    SmartContractService,\n    FileService,\n    ConsensusService,\n    NetworkService,\n    FreezeService,\n    TokenService,\n} from \"@hashgraph/proto\";\n\n/**\n * @internal\n * @abstract\n */\nexport default class Channel {\n    /**\n     * @protected\n     */\n    constructor() {\n        /**\n         * @protected\n         * @type {?CryptoService}\n         */\n        this._crypto = null;\n\n        /**\n         * @protected\n         * @type {?SmartContractService}\n         */\n        this._smartContract = null;\n\n        /**\n         * @protected\n         * @type {?FileService}\n         */\n        this._file = null;\n\n        /**\n         * @protected\n         * @type {?ConsensusService}\n         */\n        this._consensus = null;\n\n        /**\n         * @protected\n         * @type {?FreezeService}\n         */\n        this._freeze = null;\n\n        /**\n         * @protected\n         * @type {?NetworkService}\n         */\n        this._network = null;\n\n        /**\n         * @protected\n         * @type {?TokenService}\n         */\n        this._token = null;\n    }\n\n    /**\n     * @abstract\n     * @returns {void}\n     */\n    close() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @returns {CryptoService}\n     */\n    get crypto() {\n        if (this._crypto != null) {\n            return this._crypto;\n        }\n\n        this._crypto = CryptoService.create(\n            this._createUnaryClient(\"CryptoService\")\n        );\n\n        return this._crypto;\n    }\n\n    /**\n     * @returns {SmartContractService}\n     */\n    get smartContract() {\n        if (this._smartContract != null) {\n            return this._smartContract;\n        }\n\n        this._smartContract = SmartContractService.create(\n            this._createUnaryClient(\"SmartContractService\")\n        );\n\n        return this._smartContract;\n    }\n\n    /**\n     * @returns {FileService}\n     */\n    get file() {\n        if (this._file != null) {\n            return this._file;\n        }\n\n        this._file = FileService.create(this._createUnaryClient(\"FileService\"));\n\n        return this._file;\n    }\n\n    /**\n     * @returns {ConsensusService}\n     */\n    get consensus() {\n        if (this._consensus != null) {\n            return this._consensus;\n        }\n\n        this._consensus = ConsensusService.create(\n            this._createUnaryClient(\"ConsensusService\")\n        );\n\n        return this._consensus;\n    }\n\n    /**\n     * @returns {FreezeService}\n     */\n    get freeze() {\n        if (this._freeze != null) {\n            return this._freeze;\n        }\n\n        this._freeze = FreezeService.create(\n            this._createUnaryClient(\"FreezeService\")\n        );\n\n        return this._freeze;\n    }\n\n    /**\n     * @returns {NetworkService}\n     */\n    get network() {\n        if (this._network != null) {\n            return this._network;\n        }\n\n        this._network = NetworkService.create(\n            this._createUnaryClient(\"NetworkService\")\n        );\n\n        return this._network;\n    }\n\n    /**\n     * @returns {TokenService}\n     */\n    get token() {\n        if (this._token != null) {\n            return this._token;\n        }\n\n        this._token = TokenService.create(\n            this._createUnaryClient(\"TokenService\")\n        );\n\n        return this._token;\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @param {string} serviceName\n     * @returns {import(\"@hashgraph/protobufjs\").RPCImpl}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _createUnaryClient(serviceName) {\n        throw new Error(\"not implemented\");\n    }\n}\n","import * as utf8 from \"../encoding/utf8.js\";\nimport Channel from \"./Channel.js\";\n\nexport default class WebChannel extends Channel {\n    /**\n     * @param {string} address\n     */\n    constructor(address) {\n        super();\n\n        /**\n         * @type {string}\n         * @private\n         */\n        this._address = address;\n    }\n\n    /**\n     * @override\n     * @returns {void}\n     */\n    close() {\n        // do nothing\n    }\n\n    /**\n     * @override\n     * @protected\n     * @param {string} serviceName\n     * @returns {import(\"@hashgraph/protobufjs\").RPCImpl}\n     */\n    _createUnaryClient(serviceName) {\n        return async (method, requestData, callback) => {\n            const response = await fetch(\n                `${this._address}/proto.${serviceName}/${method.name}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"content-type\": \"application/grpc-web+proto\",\n                        \"x-user-agent\": \"hedera-sdk-js/v2\",\n                        \"x-grpc-web\": \"1\",\n                    },\n                    body: encodeRequest(requestData),\n                }\n            );\n\n            const responseBuffer = await response.arrayBuffer();\n            const unaryResponse = decodeUnaryResponse(responseBuffer);\n\n            callback(null, unaryResponse);\n        };\n    }\n}\n\n// grpc-web+proto is a series of data or trailer frames\n\n// a frame is identified by a single byte (0 = data or 1 = trailer) followed by 4 bytes for the\n// length of the frame, followed by the frame data\n\n/**\n * @param {Uint8Array} data\n * @returns {ArrayBuffer}\n */\nfunction encodeRequest(data) {\n    // for our requests, we want to transfer a single data frame\n\n    const frame = new ArrayBuffer(data.byteLength + 5);\n\n    // the frame type (data) is zero and can be left default-initialized\n\n    // the length of the frame data\n    new DataView(frame, 1, 4).setUint32(0, data.length);\n\n    // copy in the frame data\n    new Uint8Array(frame, 5).set(data);\n\n    return frame;\n}\n\n/**\n * @param {ArrayBuffer} data\n * @returns {Uint8Array}\n */\nfunction decodeUnaryResponse(data) {\n    let dataOffset = 0;\n\n    /** @type {?Uint8Array} */\n    let unaryResponse = null;\n\n    // 0 = successful\n    let status = 0;\n\n    while (dataOffset < data.byteLength) {\n        const dataView = new DataView(data, dataOffset);\n        const frameByte = dataView.getUint8(0);\n        const frameType = frameByte >> 7;\n        const frameByteLength = dataView.getUint32(1);\n        const frameData = new Uint8Array(data, dataOffset + 5, frameByteLength);\n\n        if (frameType === 0) {\n            if (unaryResponse != null) {\n                throw new Error(\n                    \"(BUG) unexpectedly received more than one data frame\"\n                );\n            }\n\n            unaryResponse = frameData;\n        } else if (frameType === 1) {\n            const trailer = utf8.decode(frameData);\n            const [trailerName, trailerValue] = trailer.split(\":\");\n\n            if (trailerName === \"grpc-status\") {\n                status = parseInt(trailerValue);\n            } else {\n                throw new Error(`(BUG) unhandled trailer, ${trailer}`);\n            }\n        } else {\n            throw new Error(`(BUG) unexpected frame type: ${frameType}`);\n        }\n\n        dataOffset += frameByteLength + 5;\n    }\n\n    if (status !== 0) {\n        throw new Error(`(BUG) unhandled grpc-status: ${status}`);\n    }\n\n    if (unaryResponse == null) {\n        throw new Error(\"(BUG) unexpectedly received no response\");\n    }\n\n    return unaryResponse;\n}\n","import Client from \"./Client.js\";\nimport WebChannel from \"../channel/WebChannel.js\";\nimport AccountId from \"../account/AccountId.js\";\n\n/**\n * @typedef {import(\"./Client.js\").ClientConfiguration} ClientConfiguration\n * @typedef {import(\"./Client.js\").NetworkName} NetworkName\n */\n\nexport const Network = {\n    /**\n     * @param {string} name\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    fromName(name) {\n        switch (name) {\n            case \"mainnet\":\n                return Network.MAINNET;\n\n            case \"testnet\":\n                return Network.TESTNET;\n\n            case \"previewnet\":\n                return Network.PREVIEWNET;\n\n            default:\n                throw new Error(`unknown network name: ${name}`);\n        }\n    },\n\n    MAINNET: {\n        \"https://grpc-web.myhbarwallet.com\": new AccountId(3),\n    },\n\n    TESTNET: {\n        \"https://grpc-web.testnet.myhbarwallet.com\": new AccountId(3),\n    },\n\n    PREVIEWNET: {\n        \"https://grpc-web.previewnet.myhbarwallet.com\": new AccountId(3),\n    },\n};\n\n/**\n * @augments {Client<WebChannel, *>}\n */\nexport default class WebClient extends Client {\n    /**\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        super(props);\n\n        if (props != null) {\n            if (typeof props.network === \"string\") {\n                switch (props.network) {\n                    case \"mainnet\":\n                        this.setNetwork(Network.MAINNET);\n                        break;\n\n                    case \"testnet\":\n                        this.setNetwork(Network.TESTNET);\n                        break;\n\n                    case \"previewnet\":\n                        this.setNetwork(Network.PREVIEWNET);\n                        break;\n\n                    default:\n                        throw new Error(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            `unknown network: ${props.network}`\n                        );\n                }\n            } else if (props.network != null) {\n                this.setNetwork(props.network);\n            }\n        }\n    }\n\n    /**\n     * @param {string | ClientConfiguration} data\n     * @returns {WebClient}\n     */\n    static fromConfig(data) {\n        return new WebClient(\n            typeof data === \"string\" ? JSON.parse(data) : data\n        );\n    }\n\n    /**\n     * Construct a client for a specific network.\n     *\n     * It is the responsibility of the caller to ensure that all nodes in the map are part of the\n     * same Hedera network. Failure to do so will result in undefined behavior.\n     *\n     * The client will load balance all requests to Hedera using a simple round-robin scheme to\n     * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be\n     * tried.\n     *\n     * @param {{[key: string]: (string | AccountId)} | import(\"./Client.js\").NetworkName} network\n     * @returns {WebClient}\n     */\n    static forNetwork(network) {\n        return new WebClient({ network });\n    }\n\n    /**\n     * @param {NetworkName} network\n     * @returns {WebClient}\n     */\n    static forName(network) {\n        return new WebClient({ network });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forMainnet() {\n        return new WebClient({ network: \"mainnet\" });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forTestnet() {\n        return new WebClient({ network: \"testnet\" });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forPreviewnet() {\n        return new WebClient({ network: \"previewnet\" });\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | NetworkName} network\n     * @returns {void}\n     */\n    setNetwork(network) {\n        if (typeof network === \"string\") {\n            switch (network) {\n                case \"previewnet\":\n                    this._network.setNetwork(Network.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._network.setNetwork(Network.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._network.setNetwork(Network.MAINNET);\n            }\n        } else {\n            this._network.setNetwork(network);\n        }\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => WebChannel}\n     */\n    _createNetworkChannel() {\n        return (address) => new WebChannel(address);\n    }\n}\n","export * from \"./exports.js\";\n\nexport { default as Client } from \"./client/WebClient.js\";\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\n|\\r|\\r\\n/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n","import { serial } from './serial'\nconst { Client, PrivateKey, AccountCreateTransaction, TokenId, TokenAssociateTransaction, TransferTransaction, AccountBalanceQuery, Hbar, Mnemonic } = require(\"@hashgraph/sdk\");\nrequire(\"dotenv\").config();\n\nvar port;\n\nfunction registerDevice() {\n    'use strict';\n    console.log(\"fdfd\");\n    document.addEventListener('DOMContentLoaded', event => {\n\n    });\n}\n\nvar memo;\nvar accountId;\nexport var runners = [\"001-soccer-player.png\", \"003-runner.png\", \"008-runner-1.png\", \"010-gymnast.png\", \"015-muay-thai.png\", \"016-volleyball-player.png\", \"021-water-polo-1.png\", \"031-archer.png\", \"033-wrestler-1.png\", \"039-weightlifting.png\", \"046-volleyball.png\", \"047-basketball-player.png\"];\nvar count = 0;\nvar lastnameOkay = false;\nvar firstnameOkay = false;\nvar accountmdl;\n\nclass BulmaModal {\n    constructor(selector) {\n        this.elem = document.querySelector(selector)\n        this.close_data()\n    }\n\n    show() {\n        this.elem.classList.toggle('is-active')\n        this.on_show()\n    }\n\n    close() {\n        this.elem.classList.toggle('is-active')\n        this.on_close()\n    }\n\n    close_data() {\n        var modalClose = this.elem.querySelectorAll(\"[data-bulma-modal='close']\")\n        var that = this\n        modalClose.forEach(function (e) {\n            e.addEventListener(\"click\", function () {\n\n                that.elem.classList.toggle('is-active')\n\n                var event = new Event('modal:close')\n\n                that.elem.dispatchEvent(event);\n            })\n        })\n    }\n\n    on_show() {\n        var event = new Event('modal:show')\n\n        this.elem.dispatchEvent(event);\n    }\n\n    on_close() {\n        var event = new Event('modal:close')\n\n        this.elem.dispatchEvent(event);\n    }\n\n    addEventListener(event, callback) {\n        this.elem.addEventListener(event, callback)\n    }\n}\n\nasync function registerComponent() {\n\n    document.addEventListener('DOMContentLoaded', event => {\n\n        accountmdl = new BulmaModal(\"#accountModal\")\n\n        accountmdl.addEventListener('modal:show', function () {\n            console.log(\"opened\")\n        })\n\n        accountmdl.addEventListener(\"modal:close\", function () {\n            console.log(\"closed\")\n        })\n\n        document.getElementById(\"leftImg\").src = runners[count];\n        document.getElementById(\"midImg\").src = runners[count + 1];\n        document.getElementById(\"rightImg\").src = runners[count + 2];\n\n        document.getElementById(\"prevBtn\").addEventListener(\"click\", function () {\n            console.log(\"prev\");\n            console.log(\"count: \" + count);\n            console.log(\"mod(count, runners.length) : \" + mod(count, runners.length));\n            console.log(\"mod(count+1, runners.length) : \" + mod(count + 1, runners.length));\n            console.log(\"mod(count+2, runners.length) : \" + mod(count + 2, runners.length));\n            count--;\n            if (count > 0) {\n                document.getElementById(\"leftImg\").src = runners[count % runners.length];\n                document.getElementById(\"midImg\").src = runners[(count + 1) % runners.length];\n                document.getElementById(\"rightImg\").src = runners[(count + 2) % runners.length];\n            } else {\n                document.getElementById(\"leftImg\").src = runners[mod(count, runners.length)];\n                document.getElementById(\"midImg\").src = runners[mod(count + 1, runners.length)];\n                document.getElementById(\"rightImg\").src = runners[mod(count + 2, runners.length)];\n            }\n        });\n\n        document.getElementById(\"nextBtn\").addEventListener(\"click\", function () {\n            console.log(\"next\");\n            console.log(\"count: \" + count);\n            console.log(\"count%runners.length : \" + count % runners.length);\n            console.log(\"(count+1)%runners.length : \" + (count + 1) % runners.length);\n            console.log(\"(count+2)%runners.length :\" + (count + 2) % runners.length);\n            count++;\n            if (count > 0) {\n                document.getElementById(\"leftImg\").src = runners[count % runners.length];\n                document.getElementById(\"midImg\").src = runners[(count + 1) % runners.length];\n                document.getElementById(\"rightImg\").src = runners[(count + 2) % runners.length];\n            } else {\n                document.getElementById(\"leftImg\").src = runners[mod(count, runners.length)];\n                document.getElementById(\"midImg\").src = runners[mod(count + 1, runners.length)];\n                document.getElementById(\"rightImg\").src = runners[mod(count + 2, runners.length)];\n            }\n        });\n\n        document.getElementById(\"lastname\").addEventListener('change', function () {\n            if (this.value.length < 2) {\n                document.getElementById(\"lastnameErr\").style.visibility = \"visible\";\n                document.getElementById(\"lastnameErr\").innerText = \"lastname must at least 2 characters\";\n                document.getElementById(\"lastname\").classList.add(\"is-danger\");\n                lastnameOkay = false;\n            }\n            else if (this.value.length > 25) {\n                document.getElementById(\"lastnameErr\").style.visibility = \"visible\";\n                document.getElementById(\"lastnameErr\").innerText = \"lastname must at most 25 characters\";\n                document.getElementById(\"lastname\").classList.add(\"is-danger\");\n                lastnameOkay = false;\n            }\n            else {\n                document.getElementById(\"lastnameErr\").style.visibility = \"hidden\";\n                document.getElementById(\"lastname\").classList.remove(\"is-danger\");\n                lastnameOkay = true;\n                document.getElementById(\"firstname\").disabled = false;\n            }\n        });\n\n        document.getElementById(\"firstname\").addEventListener('change', function () {\n            if (this.value.length < 2) {\n                document.getElementById(\"firstnameErr\").style.visibility = \"visible\";\n                document.getElementById(\"firstnameErr\").innerText = \"firstname must at least 2 characters\";\n                document.getElementById(\"firstname\").classList.add(\"is-danger\");\n                firstnameOkay = false;\n            }\n            else if (this.value.length > 25) {\n                document.getElementById(\"firstnameErr\").style.visibility = \"visible\";\n                document.getElementById(\"firstnameErr\").innerText = \"firstname must at most 25 characters\";\n                document.getElementById(\"firstname\").classList.add(\"is-danger\");\n                firstnameOkay = false;\n            }\n            else {\n                document.getElementById(\"firstnameErr\").style.visibility = \"hidden\";\n                document.getElementById(\"firstname\").classList.remove(\"is-danger\");\n                firstnameOkay = true;\n                document.getElementById(\"terms\").disabled = false;\n            }\n        });\n\n        document.getElementById(\"terms\").addEventListener('change', function () {\n            if (this.checked) {\n                document.getElementById(\"submit\").disabled = false;\n            } else {\n                document.getElementById(\"submit\").disabled = true;\n            }\n        });\n\n        document.getElementById(\"submit\").addEventListener(\"click\", function () {\n\n            var lastname = document.getElementById(\"lastname\").value;\n\n            var firstname = document.getElementById(\"firstname\").value;\n\n            var selectCountry = document.getElementById(\"country\");\n            var country = selectCountry.value;\n\n            console.log(lastname);\n            console.log(firstname);\n            console.log(country);\n\n            var avatar;\n\n            if (count > 0) {\n                avatar = (count + 1) % runners.length;\n            } else {\n                avatar = mod(count + 1, runners.length);\n            }\n\n            var memoObj = {avatar,firstname,lastname,country};\n\n            console.log(memoObj);\n\n            console.log(\"yaaaa\");\n            createAccount(memoObj);\n\n\n\n        });\n        var mdl = new BulmaModal(\"#termsModal\")\n\n        document.getElementById(\"termsbtn\").addEventListener('click', event => {\n            mdl.show()\n        });\n        mdl.addEventListener('modal:show', function () {\n            console.log(\"opened\")\n        })\n\n        mdl.addEventListener(\"modal:close\", function () {\n            console.log(\"closed\")\n        })\n\n    });\n}\n\nfunction mod(n, m) {\n    return ((n % m) + m) % m;\n}\n\nregisterComponent();\n\nasync function createAccount(memoObj) {\n\n    //Grab your Hedera testnet account ID and private key from your .env file\n    const myAccountId = process.env.MY_ACCOUNT_ID;\n    const myPrivateKey = process.env.MY_PRIVATE_KEY;\n\n    // If we weren't able to grab it, we should throw a new error\n    if (myAccountId == null ||\n        myPrivateKey == null) {\n        throw new Error(\"Environment variables myAccountId and myPrivateKey must be present\");\n    }\n\n    // Create our connection to the Hedera network\n    // The Hedera JS SDK makes this reallyyy easy!\n    const client = Client.forTestnet();\n\n    client.setOperator(myAccountId, myPrivateKey);\n\n    //Create new keys\n    const newAccountMnemonic = await Mnemonic.generate();\n    const newAccountPrivateKey = await PrivateKey.fromMnemonic(newAccountMnemonic);\n    const newAccountPublicKey = newAccountPrivateKey.publicKey;\n\n    console.log(\"newAccountMnemonic: \" + newAccountMnemonic);\n    console.log(newAccountMnemonic.toString().split(\" \"));\n    console.log(\"newAccountMnemonic: \" + newAccountMnemonic);\n    console.log(\"newAccountPrivateKey: \" + newAccountPrivateKey);\n    console.log(\"newAccountPublicKey: \" + newAccountPrivateKey.publicKey);\n\n    const mnemonic = newAccountMnemonic.toString().split(\" \");\n    document.getElementById(\"accountInfo\").innerHTML = ``;\n    mnemonic.forEach((e, i) => {\n        document.getElementById(\"accountInfo\").innerHTML +=\n            `\n        <div class=\"column is-3\">\n        <span class=\"tag is-rounded is-info is-light\" style=\"width: 100px\">${i + 1} | ${e}</span>\n        </div>\n        `;\n    });\n\n    accountmdl.show();\n\n    footerMenu();\n\n    //Create a new account with 1,000 tinybar starting balance\n    const newAccountTransactionResponse = await new AccountCreateTransaction()\n        .setKey(newAccountPublicKey)\n        .setInitialBalance(Hbar.fromTinybars(1000))\n        //.setTransactionMemo(memo)\n        .execute(client);\n\n    // Get the new account ID\n    const getReceipt = await newAccountTransactionResponse.getReceipt(client);\n    const newAccountId = getReceipt.accountId;\n\n    accountId = newAccountId;\n\n    console.log(\"The new account ID is: \" + newAccountId);\n\n    //Verify the account balance\n    const accountBalance = await new AccountBalanceQuery()\n        .setAccountId(newAccountId)\n        .execute(client);\n\n    console.log(\"The new account balance is: \" + accountBalance.hbars.toTinybars() + \" tinybar.\");\n\n    //\n    const tokenId = TokenId.fromString(\"0.0.300642\");\n    console.log(`token id = ${tokenId}`);\n    const amount = 1000;\n\n    await (await (await new TokenAssociateTransaction()\n        .setAccountId(newAccountId)\n        .setTokenIds([tokenId])\n        .freezeWith(client)\n        .sign(newAccountPrivateKey))\n        .execute(client))\n        .getReceipt(client);\n\n    console.log(`Associated account ${newAccountId} with token ${tokenId}`);\n\n    // No KYC\n\n    memo = `{\"avatar\":${memoObj.avatar},\"fullname\":\"${memoObj.firstname} ${memoObj.lastname}\",\"accountId\":\"${newAccountId}\",\"country\":\"${memoObj.country}\"}`\n\n    await (await (await new TransferTransaction()\n        .addTokenTransfer(tokenId, client.operatorAccountId, -amount)\n        .addTokenTransfer(tokenId, newAccountId, amount)\n        .setTransactionMemo(memo)\n        .sign(newAccountPrivateKey))\n        .execute(client))\n        .getReceipt(client);\n\n    console.log(`Sent ${amount} tokens from account ${client.operatorAccountId} to account ${newAccountId} on token ${tokenId}`);\n\n    document.getElementById(\"mnemonicBtn\").disabled = false;\n}\n\nfunction footerMenu() {\n\n    document.getElementById(\"mnemonicBtn\").addEventListener('click', () => {\n        document.getElementById(\"modal-card-foot\").innerHTML =\n        `\n        <button class=\"button\" id=\"accountidBtn\">I wrote down my account id</button>\n        `;\n        document.getElementById(\"modal-card-title\").innerHTML = `Account creation completed`;\n        document.getElementById(\"alert\").innerHTML = `Write down your account id`;\n\n        document.getElementById(\"accountInfo\").innerHTML =\n        `\n        <div class=\"column\" style=\"margin: 30px\">\n        <span class=\"tag is-info is-large is-light\">${accountId}</span>\n        </div>\n        `;\n\n        document.getElementById(\"accountidBtn\").addEventListener('click', () => {\n            document.getElementById(\"modal-card-title\").innerHTML = `Device registration`;\n            document.getElementById(\"alert\").innerHTML = `Connect your device`;\n            document.getElementById(\"accountInfo\").innerHTML =\n            `\n            <div class=\"column\" style=\"margin: 30px\">\n            <figure class=\"image is-128x128\">\n            <img src=\"usb.png\" alt=\"\">\n            </figure>\n            </div>\n            `;\n            document.getElementById(\"modal-card-foot\").innerHTML =\n            `\n            <button class=\"button\" id=\"registerBtn\">Register Device</button>\n            `;\n\n            let connectButton = document.querySelector('#registerBtn');\n\n            function connect() {\n\n                console.log('Connecting to ' + port.device_.productName + '...');\n                port.connect().then(() => {\n                    console.log(port);\n                    console.log('Connected.');\n\n                    let textEncoder = new TextEncoder();\n                    console.log(accountId.toString());\n                    var accId = accountId.toString();\n                    let str = accId.slice(4, accId.length);\n                    console.log(str);\n                    port.send(textEncoder.encode(str)).catch(error => {\n                        console.log('Send error: ' + error);\n                    });\n\n                    port.onReceive = data => {\n                        let textDecoder = new TextDecoder();\n                        console.log((\"0.0.\" + textDecoder.decode(data)) === accountId.toString());\n\n                        if ((\"0.0.\" + textDecoder.decode(data)) === accountId.toString()) {\n                            document.getElementById(\"alertBox\").innerHTML = ``;\n                            document.getElementById(\"modal-card-title\").innerHTML = `Registration completed`;\n\n                            document.getElementById(\"accountInfo\").innerHTML =\n                                `\n                                <div class=\"column\" style=\"margin: 30px\">\n                                <figure class=\"image is-128x128\">\n                                <img src=\"tick.png\" alt=\"\">\n                                </figure>\n                                </div>\n                                `;\n                            document.getElementById(\"modal-card-foot\").innerHTML =\n                            `\n                            <button class=\"button\" id=\"closeBtn\">Close</button>\n                            `;\n                            document.getElementById(\"closeBtn\").addEventListener('click', () => {\n                                window.location.replace(\"index.html\");\n                            });\n                        }\n\n                        console.log(textDecoder.decode(data));\n                        try {\n                            console.log(JSON.parse(textDecoder.decode(data)));\n                        } catch (err) {\n                            console.log(err);\n                        }\n                    }\n                    port.onReceiveError = error => {\n                        console.log('Receive error: ' + error);\n                    };\n                }, error => {\n                    console.log('Connection error: ' + error);\n                });\n            };\n\n            connectButton.addEventListener('click', function () {\n                if (port) {\n                    port.disconnect();\n \n                    port = null;\n                } else {\n                    serial.requestPort().then(selectedPort => {\n                        port = selectedPort;\n                        connect();\n\n                    }).catch(error => {\n                        console.log('Connection error: ' + error);\n                    });\n                }\n            });\n\n            serial.getPorts().then(ports => {\n                if (ports.length == 0) {\n                    console.log('No devices found.');\n                } else {\n                    port = ports[0];\n                    connect();\n                }\n            });\n\n        });\n    });\n\n}\n\n\n","'use strict';\n\nmodule.exports = function func() {\n    var args = Array.apply(null, arguments),\n        name = args.shift(),\n        tab = '  ',\n        lines = '',\n        vars = '',\n        ind = 1,    // indentation\n        bs = '{[',  // block start\n        be = '}]',  // block end\n        space = function () {\n            var sp = tab, i = 0;\n            while (i++ < ind - 1) { sp += tab; }\n            return sp;\n        },\n        add = function (line) {\n            lines += space() + line + '\\n';\n        },\n        builder = function (line) {\n            var first = line[0],\n                last = line[line.length - 1];\n\n            if (be.indexOf(first) > -1 && bs.indexOf(last) > -1) {\n                ind--;\n                add(line);\n                ind++;\n            }\n            else if (bs.indexOf(last) > -1) {\n                add(line);\n                ind++;\n            }\n            else if (be.indexOf(first) > -1) {\n                ind--;\n                add(line);\n            }\n            else {\n                add(line);\n            }\n\n            return builder;\n        };\n\n    builder.def = function (id, def) {\n        vars += (vars ? ',\\n' + tab + '    ' : '') + id + (def !== undefined ? ' = ' + def : '');\n        return builder;\n    };\n\n    builder.toSource = function () {\n        return 'function ' + name + '(' + args.join(', ') + ') {\\n' +\n            tab + '\"use strict\"' + '\\n' +\n            (vars ? tab + 'var ' + vars + ';\\n' : '') +\n            lines + '}';\n    };\n\n    builder.compile = function (scope) {\n        var src = 'return (' + builder.toSource() + ')',\n            scp = scope || {},\n            keys = Object.keys(scp),\n            vals = keys.map(function (key) { return scp[key]; });\n\n        return Function.apply(null, keys.concat(src)).apply(null, vals);\n    };\n\n    return builder;\n};","'use strict';\n\nfunction type(obj) {\n    var str = Object.prototype.toString.call(obj);\n    return str.substr(8, str.length - 9).toLowerCase();\n}\n\nfunction deepEqual(a, b) {\n    var keysA = Object.keys(a).sort(),\n        keysB = Object.keys(b).sort(),\n        i, key;\n\n    if (!equal(keysA, keysB)) {\n        return false;\n    }\n\n    for (i = 0; i < keysA.length; i++) {\n        key = keysA[i];\n\n        if (!equal(a[key], b[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction equal(a, b) {  // jshint ignore: line\n    var typeA = typeof a,\n        typeB = typeof b,\n        i;\n\n    // get detailed object type\n    if (typeA === 'object') {\n        typeA = type(a);\n    }\n\n    // get detailed object type\n    if (typeB === 'object') {\n        typeB = type(b);\n    }\n\n    if (typeA !== typeB) {\n        return false;\n    }\n\n    if (typeA === 'object') {\n        return deepEqual(a, b);\n    }\n\n    if (typeA === 'regexp') {\n        return a.toString() === b.toString();\n    }\n\n    if (typeA === 'array') {\n        if (a.length !== b.length) {\n            return false;\n        }\n\n        for (i = 0; i < a.length; i++) {\n            if (!equal(a[i], b[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    return a === b;\n}\n\nmodule.exports = equal;","'use strict';\n\nvar equal = require('./equal.js');\n\nfunction findIndex(arr, value, comparator) {\n    for (var i = 0, len = arr.length; i < len; i++) {\n        if (comparator(arr[i], value)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nmodule.exports = function unique(arr) {\n    return arr.filter(function uniqueOnly(value, index, self) {\n        return findIndex(self, value, equal) === index;\n    });\n};\n\nmodule.exports.findIndex = findIndex;","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","module.exports={id:\"http://json-schema.org/draft-04/schema#\",$schema:\"http://json-schema.org/draft-04/schema#\",description:\"Core schema meta-schema\",definitions:{schemaArray:{type:\"array\",minItems:1,items:{$ref:\"#\"}},positiveInteger:{type:\"integer\",minimum:0},positiveIntegerDefault0:{allOf:[{$ref:\"#/definitions/positiveInteger\"},{default:0}]},simpleTypes:{enum:[\"array\",\"boolean\",\"integer\",\"null\",\"number\",\"object\",\"string\"]},stringArray:{type:\"array\",items:{type:\"string\"},minItems:1,uniqueItems:!0}},type:\"object\",properties:{id:{type:\"string\",format:\"uri\"},$schema:{type:\"string\",format:\"uri\"},title:{type:\"string\"},description:{type:\"string\"},default:{},multipleOf:{type:\"number\",minimum:0,exclusiveMinimum:!0},maximum:{type:\"number\"},exclusiveMaximum:{type:\"boolean\",default:!1},minimum:{type:\"number\"},exclusiveMinimum:{type:\"boolean\",default:!1},maxLength:{$ref:\"#/definitions/positiveInteger\"},minLength:{$ref:\"#/definitions/positiveIntegerDefault0\"},pattern:{type:\"string\",format:\"regex\"},additionalItems:{anyOf:[{type:\"boolean\"},{$ref:\"#\"}],default:{}},items:{anyOf:[{$ref:\"#\"},{$ref:\"#/definitions/schemaArray\"}],default:{}},maxItems:{$ref:\"#/definitions/positiveInteger\"},minItems:{$ref:\"#/definitions/positiveIntegerDefault0\"},uniqueItems:{type:\"boolean\",default:!1},maxProperties:{$ref:\"#/definitions/positiveInteger\"},minProperties:{$ref:\"#/definitions/positiveIntegerDefault0\"},required:{$ref:\"#/definitions/stringArray\"},additionalProperties:{anyOf:[{type:\"boolean\"},{$ref:\"#\"}],default:{}},definitions:{type:\"object\",additionalProperties:{$ref:\"#\"},default:{}},properties:{type:\"object\",additionalProperties:{$ref:\"#\"},default:{}},patternProperties:{type:\"object\",additionalProperties:{$ref:\"#\"},default:{}},dependencies:{type:\"object\",additionalProperties:{anyOf:[{$ref:\"#\"},{$ref:\"#/definitions/stringArray\"}]}},enum:{type:\"array\",minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:\"#/definitions/simpleTypes\"},{type:\"array\",items:{$ref:\"#/definitions/simpleTypes\"},minItems:1,uniqueItems:!0}]},allOf:{$ref:\"#/definitions/schemaArray\"},anyOf:{$ref:\"#/definitions/schemaArray\"},oneOf:{$ref:\"#/definitions/schemaArray\"},not:{$ref:\"#\"}},dependencies:{exclusiveMaximum:[\"maximum\"],exclusiveMinimum:[\"minimum\"]},default:{}};","'use strict';\n\nvar url = require('url'),\n    metaschema = require('./metaschema.json'),\n    INVALID_SCHEMA_REFERENCE = 'jsen: invalid schema reference',\n    DUPLICATE_SCHEMA_ID = 'jsen: duplicate schema id',\n    CIRCULAR_SCHEMA_REFERENCE = 'jsen: circular schema reference';\n\nfunction get(obj, path) {\n    if (!path.length) {\n        return obj;\n    }\n\n    var key = path.shift(),\n        val;\n\n    if (obj && typeof obj === 'object' && obj.hasOwnProperty(key)) {\n        val = obj[key];\n    }\n\n    if (path.length) {\n        if (val && typeof val === 'object') {\n            return get(val, path);\n        }\n\n        return undefined;\n    }\n\n    return val;\n}\n\nfunction refToObj(ref) {\n    var index = ref.indexOf('#'),\n        ret = {\n            base: ref.substr(0, index),\n            path: []\n        };\n\n    if (index < 0) {\n        ret.base = ref;\n        return ret;\n    }\n\n    ref = ref.substr(index + 1);\n\n    if (!ref) {\n        return ret;\n    }\n\n    ret.path = ref.split('/').map(function (segment) {\n        // Reference: http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-08#section-3\n        return decodeURIComponent(segment)\n            .replace(/~1/g, '/')\n            .replace(/~0/g, '~');\n    });\n\n    if (ref[0] === '/') {\n        ret.path.shift();\n    }\n\n    return ret;\n}\n\n// TODO: Can we prevent nested resolvers and combine schemas instead?\nfunction SchemaResolver(rootSchema, external, missing$Ref, baseId) {  // jshint ignore: line\n    this.rootSchema = rootSchema;\n    this.resolvers = null;\n    this.resolvedRootSchema = null;\n    this.cache = {};\n    this.idCache = {};\n    this.refCache = { refs: [], schemas: [] };\n    this.missing$Ref = missing$Ref;\n    this.refStack = [];\n\n    baseId = baseId || '';\n\n    this._buildIdCache(rootSchema, baseId);\n\n    // get updated base id after normalizing root schema id\n    baseId = this.refCache.refs[this.refCache.schemas.indexOf(this.rootSchema)] || baseId;\n\n    this._buildResolvers(external, baseId);\n}\n\nSchemaResolver.prototype._cacheId = function (id, schema, resolver) {\n    if (this.idCache[id]) {\n        throw new Error(DUPLICATE_SCHEMA_ID + ' ' + id);\n    }\n\n    this.idCache[id] = { resolver: resolver, schema: schema };\n};\n\nSchemaResolver.prototype._buildIdCache = function (schema, baseId) {\n    var id = baseId,\n        ref, keys, i;\n\n    if (!schema || typeof schema !== 'object') {\n        return;\n    }\n\n    if (typeof schema.id === 'string' && schema.id) {\n        id = url.resolve(baseId, schema.id);\n\n        this._cacheId(id, schema, this);\n    }\n    else if (schema === this.rootSchema && baseId) {\n        this._cacheId(baseId, schema, this);\n    }\n\n    if (schema.$ref && typeof schema.$ref === 'string') {\n        ref = url.resolve(id, schema.$ref);\n\n        this.refCache.schemas.push(schema);\n        this.refCache.refs.push(ref);\n    }\n\n    keys = Object.keys(schema);\n\n    for (i = 0; i < keys.length; i++) {\n        this._buildIdCache(schema[keys[i]], id);\n    }\n};\n\nSchemaResolver.prototype._buildResolvers = function (schemas, baseId) {\n    if (!schemas || typeof schemas !== 'object') {\n        return;\n    }\n\n    var that = this,\n        resolvers = {};\n\n    Object.keys(schemas).forEach(function (key) {\n        var id = url.resolve(baseId, key),\n            resolver = new SchemaResolver(schemas[key], null, that.missing$Ref, id);\n\n        that._cacheId(id, resolver.rootSchema, resolver);\n\n        Object.keys(resolver.idCache).forEach(function (idKey) {\n            that.idCache[idKey] = resolver.idCache[idKey];\n        });\n\n        resolvers[key] = resolver;\n    });\n\n    this.resolvers = resolvers;\n};\n\nSchemaResolver.prototype.getNormalizedRef = function (schema) {\n    var index = this.refCache.schemas.indexOf(schema);\n    return this.refCache.refs[index];\n};\n\nSchemaResolver.prototype._resolveRef = function (ref) {\n    var err = new Error(INVALID_SCHEMA_REFERENCE + ' ' + ref),\n        idCache = this.idCache,\n        externalResolver, cached, descriptor, path, dest;\n\n    if (!ref || typeof ref !== 'string') {\n        throw err;\n    }\n\n    if (ref === metaschema.id) {\n        dest = metaschema;\n    }\n\n    cached = idCache[ref];\n\n    if (cached) {\n        dest = cached.resolver.resolve(cached.schema);\n    }\n\n    if (dest === undefined) {\n        descriptor = refToObj(ref);\n        path = descriptor.path;\n\n        if (descriptor.base) {\n            cached = idCache[descriptor.base] || idCache[descriptor.base + '#'];\n\n            if (cached) {\n                dest = cached.resolver.resolve(get(cached.schema, path.slice(0)));\n            }\n            else {\n                path.unshift(descriptor.base);\n            }\n        }\n    }\n\n    if (dest === undefined && this.resolvedRootSchema) {\n        dest = get(this.resolvedRootSchema, path.slice(0));\n    }\n\n    if (dest === undefined) {\n        dest = get(this.rootSchema, path.slice(0));\n    }\n\n    if (dest === undefined && path.length && this.resolvers) {\n        externalResolver = get(this.resolvers, path);\n\n        if (externalResolver) {\n            dest = externalResolver.resolve(externalResolver.rootSchema);\n        }\n    }\n\n    if (dest === undefined || typeof dest !== 'object') {\n        if (this.missing$Ref) {\n            dest = {};\n        } else {\n            throw err;\n        }\n    }\n\n    if (this.cache[ref] === dest) {\n        return dest;\n    }\n\n    this.cache[ref] = dest;\n\n    if (dest.$ref !== undefined) {\n        dest = this.resolve(dest);\n    }\n\n    return dest;\n};\n\nSchemaResolver.prototype.resolve = function (schema) {\n    if (!schema || typeof schema !== 'object' || schema.$ref === undefined) {\n        return schema;\n    }\n\n    var ref = this.getNormalizedRef(schema) || schema.$ref,\n        resolved = this.cache[ref];\n\n    if (resolved !== undefined) {\n        return resolved;\n    }\n\n    if (this.refStack.indexOf(ref) > -1) {\n        throw new Error(CIRCULAR_SCHEMA_REFERENCE + ' ' + ref);\n    }\n\n    this.refStack.push(ref);\n\n    resolved = this._resolveRef(ref);\n\n    this.refStack.pop();\n\n    if (schema === this.rootSchema) {\n        // cache the resolved root schema\n        this.resolvedRootSchema = resolved;\n    }\n\n    return resolved;\n};\n\nSchemaResolver.prototype.hasRef = function (schema) {\n    var keys = Object.keys(schema),\n        len, key, i, hasChildRef;\n\n    if (keys.indexOf('$ref') > -1) {\n        return true;\n    }\n\n    for (i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n\n        if (schema[key] && typeof schema[key] === 'object' && !Array.isArray(schema[key])) {\n            hasChildRef = this.hasRef(schema[key]);\n\n            if (hasChildRef) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n};\n\nSchemaResolver.resolvePointer = function (obj, pointer) {\n    var descriptor = refToObj(pointer),\n        path = descriptor.path;\n\n    if (descriptor.base) {\n        path = [descriptor.base].concat(path);\n    }\n\n    return get(obj, path);\n};\n\nmodule.exports = SchemaResolver;","'use strict';\n\nvar formats = {};\n\n// reference: http://dansnetwork.com/javascript-iso8601rfc3339-date-parser/\nformats['date-time'] = /(\\d\\d\\d\\d)(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))/;\n// reference: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js#L7\nformats.uri = /^([a-zA-Z][a-zA-Z0-9+-.]*:){0,1}\\/\\/[^\\s]*$/;\n// reference: http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363\n//            http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')\nformats.email = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// reference: https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\nformats.ipv4 = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n// reference: http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\nformats.ipv6 = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|[fF][eE]80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::([fF]{4}(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\n// reference: http://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address#answer-3824105\nformats.hostname = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])(\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))*$/;\n\nmodule.exports = formats;","'use strict';\n\n// Reference: https://github.com/bestiejs/punycode.js/blob/master/punycode.js#L101`\n// Info: https://mathiasbynens.be/notes/javascript-unicode\nfunction ucs2length(string) {\n    var ucs2len = 0,\n        counter = 0,\n        length = string.length,\n        value, extra;\n\n    while (counter < length) {\n        ucs2len++;\n        value = string.charCodeAt(counter++);\n\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n            // It's a high surrogate, and there is a next character.\n            extra = string.charCodeAt(counter++);\n\n            if ((extra & 0xFC00) !== 0xDC00) { /* Low surrogate. */                 // jshint ignore: line\n                counter--;\n            }\n        }\n    }\n\n    return ucs2len;\n}\n\nmodule.exports = ucs2length;","'use strict';\n\nvar REGEX_ESCAPE_EXPR = /[\\/]/g,\n    STR_ESCAPE_EXPR = /(\")/gim,\n    VALID_IDENTIFIER_EXPR = /^[a-z_$][0-9a-z]*$/gi,\n    INVALID_SCHEMA = 'jsen: invalid schema object',\n    browser = typeof window === 'object' && !!window.navigator,   // jshint ignore: line\n    regescape = new RegExp('/').source !== '/', // node v0.x does not properly escape '/'s in inline regex\n    func = require('./func.js'),\n    equal = require('./equal.js'),\n    unique = require('./unique.js'),\n    SchemaResolver = require('./resolver.js'),\n    formats = require('./formats.js'),\n    ucs2length = require('./ucs2length.js'),\n    types = {},\n    keywords = {};\n\nfunction inlineRegex(regex) {\n    regex = regex instanceof RegExp ? regex : new RegExp(regex);\n\n    return regescape ?\n        regex.toString() :\n        '/' + regex.source.replace(REGEX_ESCAPE_EXPR, '\\\\$&') + '/';\n}\n\nfunction encodeStr(str) {\n    return '\"' + str.replace(STR_ESCAPE_EXPR, '\\\\$1') + '\"';\n}\n\nfunction appendToPath(path, key) {\n    VALID_IDENTIFIER_EXPR.lastIndex = 0;\n\n    return VALID_IDENTIFIER_EXPR.test(key) ?\n        path + '.' + key :\n        path + '[' + encodeStr(key) + ']';\n}\n\nfunction type(obj) {\n    if (obj === undefined) {\n        return 'undefined';\n    }\n\n    var str = Object.prototype.toString.call(obj);\n    return str.substr(8, str.length - 9).toLowerCase();\n}\n\nfunction isInteger(obj) {\n    return (obj | 0) === obj;   // jshint ignore: line\n}\n\ntypes['null'] = function (path) {\n    return path + ' === null';\n};\n\ntypes.boolean = function (path) {\n    return 'typeof ' + path + ' === \"boolean\"';\n};\n\ntypes.string = function (path) {\n    return 'typeof ' + path + ' === \"string\"';\n};\n\ntypes.number = function (path) {\n    return 'typeof ' + path + ' === \"number\"';\n};\n\ntypes.integer = function (path) {\n    return 'typeof ' + path + ' === \"number\" && !(' + path + ' % 1)';\n};\n\ntypes.array = function (path) {\n    return 'Array.isArray(' + path + ')';\n};\n\ntypes.object = function (path) {\n    return 'typeof ' + path + ' === \"object\" && ' + path + ' !== null && !Array.isArray(' + path + ')';\n};\n\ntypes.date = function (path) {\n    return path + ' instanceof Date';\n};\n\nkeywords.enum = function (context) {\n    var arr = context.schema['enum'];\n\n    context.code('if (!equalAny(' + context.path + ', ' + JSON.stringify(arr) + ')) {');\n    context.error('enum');\n    context.code('}');\n};\n\nkeywords.minimum = function (context) {\n    if (typeof context.schema.minimum === 'number') {\n        context.code('if (' + context.path + ' < ' + context.schema.minimum + ') {');\n        context.error('minimum');\n        context.code('}');\n    }\n};\n\nkeywords.exclusiveMinimum = function (context) {\n    if (context.schema.exclusiveMinimum === true && typeof context.schema.minimum === 'number') {\n        context.code('if (' + context.path + ' === ' + context.schema.minimum + ') {');\n        context.error('exclusiveMinimum');\n        context.code('}');\n    }\n};\n\nkeywords.maximum = function (context) {\n    if (typeof context.schema.maximum === 'number') {\n        context.code('if (' + context.path + ' > ' + context.schema.maximum + ') {');\n        context.error('maximum');\n        context.code('}');\n    }\n};\n\nkeywords.exclusiveMaximum = function (context) {\n    if (context.schema.exclusiveMaximum === true && typeof context.schema.maximum === 'number') {\n        context.code('if (' + context.path + ' === ' + context.schema.maximum + ') {');\n        context.error('exclusiveMaximum');\n        context.code('}');\n    }\n};\n\nkeywords.multipleOf = function (context) {\n    if (typeof context.schema.multipleOf === 'number') {\n        var mul = context.schema.multipleOf,\n            decimals = mul.toString().length - mul.toFixed(0).length - 1,\n            pow = decimals > 0 ? Math.pow(10, decimals) : 1,\n            path = context.path;\n\n        if (decimals > 0) {\n            context.code('if (+(Math.round((' + path + ' * ' + pow + ') + \"e+\" + ' + decimals + ') + \"e-\" + ' + decimals + ') % ' + (mul * pow) + ' !== 0) {');\n        } else {\n            context.code('if (((' + path + ' * ' + pow + ') % ' + (mul * pow) + ') !== 0) {');\n        }\n\n        context.error('multipleOf');\n        context.code('}');\n    }\n};\n\nkeywords.minLength = function (context) {\n    if (isInteger(context.schema.minLength)) {\n        context.code('if (ucs2length(' + context.path + ') < ' + context.schema.minLength + ') {');\n        context.error('minLength');\n        context.code('}');\n    }\n};\n\nkeywords.maxLength = function (context) {\n    if (isInteger(context.schema.maxLength)) {\n        context.code('if (ucs2length(' + context.path + ') > ' + context.schema.maxLength + ') {');\n        context.error('maxLength');\n        context.code('}');\n    }\n};\n\nkeywords.pattern = function (context) {\n    var pattern = context.schema.pattern;\n\n    if (typeof pattern === 'string' || pattern instanceof RegExp) {\n        context.code('if (!(' + inlineRegex(pattern) + ').test(' + context.path + ')) {');\n        context.error('pattern');\n        context.code('}');\n    }\n};\n\nkeywords.format = function (context) {\n    if (typeof context.schema.format !== 'string' || !formats[context.schema.format]) {\n        return;\n    }\n\n    context.code('if (!(' + formats[context.schema.format] + ').test(' + context.path + ')) {');\n    context.error('format');\n    context.code('}');\n};\n\nkeywords.minItems = function (context) {\n    if (isInteger(context.schema.minItems)) {\n        context.code('if (' + context.path + '.length < ' + context.schema.minItems + ') {');\n        context.error('minItems');\n        context.code('}');\n    }\n};\n\nkeywords.maxItems = function (context) {\n    if (isInteger(context.schema.maxItems)) {\n        context.code('if (' + context.path + '.length > ' + context.schema.maxItems + ') {');\n        context.error('maxItems');\n        context.code('}');\n    }\n};\n\nkeywords.additionalItems = function (context) {\n    if (context.schema.additionalItems === false && Array.isArray(context.schema.items)) {\n        context.code('if (' + context.path + '.length > ' + context.schema.items.length + ') {');\n        context.error('additionalItems');\n        context.code('}');\n    }\n};\n\nkeywords.uniqueItems = function (context) {\n    if (context.schema.uniqueItems) {\n        context.code('if (unique(' + context.path + ').length !== ' + context.path + '.length) {');\n        context.error('uniqueItems');\n        context.code('}');\n    }\n};\n\nkeywords.items = function (context) {\n    var index = context.declare(0),\n        i = 0;\n\n    if (type(context.schema.items) === 'object') {\n        context.code('for (' + index + ' = 0; ' + index + ' < ' + context.path + '.length; ' + index + '++) {');\n\n        context.descend(context.path + '[' + index + ']', context.schema.items);\n\n        context.code('}');\n    }\n    else if (Array.isArray(context.schema.items)) {\n        for (; i < context.schema.items.length; i++) {\n            context.code('if (' + context.path + '.length - 1 >= ' + i + ') {');\n\n            context.descend(context.path + '[' + i + ']', context.schema.items[i]);\n\n            context.code('}');\n        }\n\n        if (type(context.schema.additionalItems) === 'object') {\n            context.code('for (' + index + ' = ' + i + '; ' + index + ' < ' + context.path + '.length; ' + index + '++) {');\n\n            context.descend(context.path + '[' + index + ']', context.schema.additionalItems);\n\n            context.code('}');\n        }\n    }\n};\n\nkeywords.maxProperties = function (context) {\n    if (isInteger(context.schema.maxProperties)) {\n        context.code('if (Object.keys(' + context.path + ').length > ' + context.schema.maxProperties + ') {');\n        context.error('maxProperties');\n        context.code('}');\n    }\n};\n\nkeywords.minProperties = function (context) {\n    if (isInteger(context.schema.minProperties)) {\n        context.code('if (Object.keys(' + context.path + ').length < ' + context.schema.minProperties + ') {');\n        context.error('minProperties');\n        context.code('}');\n    }\n};\n\nkeywords.required = function (context) {\n    var required = context.schema.required,\n        properties = context.schema.properties,\n        i;\n\n    if (!Array.isArray(required)) {\n        return;\n    }\n\n    for (i = 0; i < required.length; i++) {\n        if (properties && properties[required[i]] && typeof properties[required[i]] === 'object') {\n            continue;\n        }\n\n        context.code('if (' + appendToPath(context.path, required[i]) + ' === undefined) {');\n        context.error('required', required[i]);\n        context.code('}');\n    }\n};\n\nkeywords.properties = function (context) {\n    var props = context.schema.properties,\n        propKeys = type(props) === 'object' ? Object.keys(props) : [],\n        required = Array.isArray(context.schema.required) ? context.schema.required : [],\n        prop, i, nestedPath;\n\n    if (!propKeys.length) {\n        return;\n    }\n\n    for (i = 0; i < propKeys.length; i++) {\n        prop = propKeys[i];\n        nestedPath = appendToPath(context.path, prop);\n\n        context.code('if (' + nestedPath + ' !== undefined) {');\n\n        context.descend(nestedPath, props[prop]);\n\n        context.code('}');\n\n        if (required.indexOf(prop) > -1) {\n            context.code('else {');\n            context.error('required', prop);\n            context.code('}');\n        }\n    }\n};\n\nkeywords.patternProperties = keywords.additionalProperties = function (context) {\n    var propKeys = type(context.schema.properties) === 'object' ?\n            Object.keys(context.schema.properties) : [],\n        patProps = context.schema.patternProperties,\n        patterns = type(patProps) === 'object' ? Object.keys(patProps) : [],\n        addProps = context.schema.additionalProperties,\n        addPropsCheck = addProps === false || type(addProps) === 'object',\n        props, keys, key, n, found, pattern, i;\n\n    if (!patterns.length && !addPropsCheck) {\n        return;\n    }\n\n    keys = context.declare('[]');\n    key = context.declare('\"\"');\n    n = context.declare(0);\n\n    if (addPropsCheck) {\n        found = context.declare(false);\n    }\n\n    context.code(keys + ' = Object.keys(' + context.path + ')');\n\n    context.code('for (' + n + ' = 0; ' + n + ' < ' + keys + '.length; ' + n + '++) {')\n        (key + ' = ' + keys + '[' + n + ']')\n\n        ('if (' + context.path + '[' + key + '] === undefined) {')\n            ('continue')\n        ('}');\n\n    if (addPropsCheck) {\n        context.code(found + ' = false');\n    }\n\n    // validate pattern properties\n    for (i = 0; i < patterns.length; i++) {\n        pattern = patterns[i];\n\n        context.code('if ((' + inlineRegex(pattern) + ').test(' + key + ')) {');\n\n        context.descend(context.path + '[' + key + ']', patProps[pattern]);\n\n        if (addPropsCheck) {\n            context.code(found + ' = true');\n        }\n\n        context.code('}');\n    }\n\n    // validate additional properties\n    if (addPropsCheck) {\n        if (propKeys.length) {\n            props = context.declare(JSON.stringify(propKeys));\n\n            // do not validate regular properties\n            context.code('if (' + props + '.indexOf(' + key + ') > -1) {')\n                ('continue')\n            ('}');\n        }\n\n        context.code('if (!' + found + ') {');\n\n        if (addProps === false) {\n            // do not allow additional properties\n            context.error('additionalProperties', undefined, key);\n        }\n        else {\n            // validate additional properties\n            context.descend(context.path + '[' + key + ']', addProps);\n        }\n\n        context.code('}');\n    }\n\n    context.code('}');\n};\n\nkeywords.dependencies = function (context) {\n    if (type(context.schema.dependencies) !== 'object') {\n        return;\n    }\n\n    var depKeys = Object.keys(context.schema.dependencies),\n        len = depKeys.length,\n        key, dep, i = 0, k = 0;\n\n    for (; k < len; k++) {\n        key = depKeys[k];\n        dep = context.schema.dependencies[key];\n\n        context.code('if (' + appendToPath(context.path, key) + ' !== undefined) {');\n\n        if (type(dep) === 'object') {\n            //schema dependency\n            context.descend(context.path, dep);\n        }\n        else {\n            // property dependency\n            for (i; i < dep.length; i++) {\n                context.code('if (' + appendToPath(context.path, dep[i]) + ' === undefined) {');\n                context.error('dependencies', dep[i]);\n                context.code('}');\n            }\n        }\n\n        context.code('}');\n    }\n};\n\nkeywords.allOf = function (context) {\n    if (!Array.isArray(context.schema.allOf)) {\n        return;\n    }\n\n    for (var i = 0; i < context.schema.allOf.length; i++) {\n        context.descend(context.path, context.schema.allOf[i]);\n    }\n};\n\nkeywords.anyOf = function (context) {\n    if (!Array.isArray(context.schema.anyOf)) {\n        return;\n    }\n\n    var greedy = context.greedy,\n        errCount = context.declare(0),\n        initialCount = context.declare(0),\n        found = context.declare(false),\n        i = 0;\n\n    context.code(initialCount + ' = errors.length');\n\n    for (; i < context.schema.anyOf.length; i++) {\n        context.code('if (!' + found + ') {');\n\n        context.code(errCount + ' = errors.length');\n\n        context.greedy = true;\n\n        context.descend(context.path, context.schema.anyOf[i]);\n\n        context.code(found + ' = errors.length === ' + errCount)\n        ('}');\n    }\n\n    context.greedy = greedy;\n\n    context.code('if (!' + found + ') {');\n\n    context.error('anyOf');\n\n    context.code('} else {')\n        ('errors.length = ' + initialCount)\n    ('}');\n};\n\nkeywords.oneOf = function (context) {\n    if (!Array.isArray(context.schema.oneOf)) {\n        return;\n    }\n\n    var greedy = context.greedy,\n        matching = context.declare(0),\n        initialCount = context.declare(0),\n        errCount = context.declare(0),\n        i = 0;\n\n    context.code(initialCount + ' = errors.length');\n    context.code(matching + ' = 0');\n\n    for (; i < context.schema.oneOf.length; i++) {\n        context.code(errCount + ' = errors.length');\n\n        context.greedy = true;\n\n        context.descend(context.path, context.schema.oneOf[i]);\n\n        context.code('if (errors.length === ' + errCount + ') {')\n            (matching + '++')\n        ('}');\n    }\n\n    context.greedy = greedy;\n\n    context.code('if (' + matching + ' !== 1) {');\n\n    context.error('oneOf');\n\n    context.code('} else {')\n        ('errors.length = ' + initialCount)\n    ('}');\n};\n\nkeywords.not = function (context) {\n    if (type(context.schema.not) !== 'object') {\n        return;\n    }\n\n    var greedy = context.greedy,\n        errCount = context.declare(0);\n\n    context.code(errCount + ' = errors.length');\n\n    context.greedy = true;\n\n    context.descend(context.path, context.schema.not);\n\n    context.greedy = greedy;\n\n    context.code('if (errors.length === ' + errCount + ') {');\n\n    context.error('not');\n\n    context.code('} else {')\n        ('errors.length = ' + errCount)\n    ('}');\n};\n\nfunction decorateGenerator(type, keyword) {\n    keywords[keyword].type = type;\n    keywords[keyword].keyword = keyword;\n}\n\n['minimum', 'exclusiveMinimum', 'maximum', 'exclusiveMaximum', 'multipleOf']\n    .forEach(decorateGenerator.bind(null, 'number'));\n\n['minLength', 'maxLength', 'pattern', 'format']\n    .forEach(decorateGenerator.bind(null, 'string'));\n\n['minItems', 'maxItems', 'additionalItems', 'uniqueItems', 'items']\n    .forEach(decorateGenerator.bind(null, 'array'));\n\n['maxProperties', 'minProperties', 'required', 'properties', 'patternProperties', 'additionalProperties', 'dependencies']\n    .forEach(decorateGenerator.bind(null, 'object'));\n\n['enum', 'allOf', 'anyOf', 'oneOf', 'not']\n    .forEach(decorateGenerator.bind(null, null));\n\nfunction groupKeywords(schema) {\n    var keys = Object.keys(schema),\n        patIndex = keys.indexOf('patternProperties'),\n        ret = {\n            enum: Array.isArray(schema.enum) && schema.enum.length > 0,\n            type: null,\n            allType: [],\n            perType: {}\n        },\n        key, gen, i;\n\n    if (schema.type) {\n        if (typeof schema.type === 'string') {\n            ret.type = [schema.type];\n        }\n        else if (Array.isArray(schema.type) && schema.type.length) {\n            ret.type = schema.type.slice(0);\n        }\n    }\n\n    for (i = 0; i < keys.length; i++) {\n        key = keys[i];\n\n        if (key === 'enum' || key === 'type') {\n            continue;\n        }\n\n        gen = keywords[key];\n\n        if (!gen) {\n            continue;\n        }\n\n        if (gen.type) {\n            if (!ret.perType[gen.type]) {\n                ret.perType[gen.type] = [];\n            }\n\n            if (!(patIndex > -1 && key === 'additionalProperties')) {\n                ret.perType[gen.type].push(key);\n            }\n        }\n        else {\n            ret.allType.push(key);\n        }\n    }\n\n    return ret;\n}\n\nfunction getPathExpression(path, key) {\n    var path_ = path.substr(4),\n        len = path_.length,\n        tokens = [],\n        token = '',\n        isvar = false,\n        char, i;\n\n    for (i = 0; i < len; i++) {\n        char = path_[i];\n\n        switch (char) {\n            case '.':\n                if (token) {\n                    token += char;\n                }\n                break;\n            case '[':\n                if (isNaN(+path_[i + 1])) {\n                    isvar = true;\n\n                    if (token) {\n                        tokens.push('\"' + token + '\"');\n                        token = '';\n                    }\n                }\n                else {\n                    isvar = false;\n\n                    if (token) {\n                        token += '.';\n                    }\n                }\n                break;\n            case ']':\n                tokens.push(isvar ? token : '\"' + token + '\"');\n                token = '';\n                break;\n            default:\n                token += char;\n        }\n    }\n\n    if (token) {\n        tokens.push('\"' + token + '\"');\n    }\n\n    if (key) {\n        tokens.push('\"' + key + '\"');\n    }\n\n    if (tokens.length === 1 && isvar) {\n        return '\"\" + ' + tokens[0] + ' + \"\"';\n    }\n\n    return tokens.join(' + \".\" + ') || '\"\"';\n}\n\nfunction clone(obj) {\n    var cloned = obj,\n        objType = type(obj),\n        keys, len, key, i;\n\n    if (objType === 'object') {\n        cloned = {};\n        keys = Object.keys(obj);\n\n        for (i = 0, len = keys.length; i < len; i++) {\n            key = keys[i];\n            cloned[key] = clone(obj[key]);\n        }\n    }\n    else if (objType === 'array') {\n        cloned = [];\n\n        for (i = 0, len = obj.length; i < len; i++) {\n            cloned[i] = clone(obj[i]);\n        }\n    }\n    else if (objType === 'regexp') {\n        return new RegExp(obj);\n    }\n    else if (objType === 'date') {\n        return new Date(obj.toJSON());\n    }\n\n    return cloned;\n}\n\nfunction equalAny(obj, options) {\n    for (var i = 0, len = options.length; i < len; i++) {\n        if (equal(obj, options[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction PropertyMarker() {\n    this.objects = [];\n    this.properties = [];\n}\n\nPropertyMarker.prototype.mark = function (obj, key) {\n    var index = this.objects.indexOf(obj),\n        prop;\n\n    if (index < 0) {\n        this.objects.push(obj);\n\n        prop = {};\n        prop[key] = 1;\n\n        this.properties.push(prop);\n\n        return;\n    }\n\n    prop = this.properties[index];\n\n    prop[key] = prop[key] ? prop[key] + 1 : 1;\n};\n\nPropertyMarker.prototype.deleteDuplicates = function () {\n    var props, keys, key, i, j;\n\n    for (i = 0; i < this.properties.length; i++) {\n        props = this.properties[i];\n        keys = Object.keys(props);\n\n        for (j = 0; j < keys.length; j++) {\n            key = keys[j];\n\n            if (props[key] > 1) {\n                delete this.objects[i][key];\n            }\n        }\n    }\n};\n\nPropertyMarker.prototype.dispose = function () {\n    this.objects.length = 0;\n    this.properties.length = 0;\n};\n\nfunction build(schema, def, additional, resolver, parentMarker) {\n    var defType, defValue, key, i, propertyMarker, props, defProps;\n\n    if (type(schema) !== 'object') {\n        return def;\n    }\n\n    schema = resolver.resolve(schema);\n\n    if (def === undefined && schema.hasOwnProperty('default')) {\n        def = clone(schema['default']);\n    }\n\n    defType = type(def);\n\n    if (defType === 'object' && type(schema.properties) === 'object') {\n        props = Object.keys(schema.properties);\n\n        for (i = 0; i < props.length; i++) {\n            key = props[i];\n            defValue = build(schema.properties[key], def[key], additional, resolver);\n\n            if (defValue !== undefined) {\n                def[key] = defValue;\n            }\n        }\n\n        if (additional !== 'always') {\n            defProps = Object.keys(def);\n\n            for (i = 0; i < defProps.length; i++) {\n                key = defProps[i];\n\n                if (props.indexOf(key) < 0 &&\n                    (schema.additionalProperties === false ||\n                    (additional === false && !schema.additionalProperties))) {\n\n                    if (parentMarker) {\n                        parentMarker.mark(def, key);\n                    }\n                    else {\n                        delete def[key];\n                    }\n                }\n            }\n        }\n    }\n    else if (defType === 'array' && schema.items) {\n        if (type(schema.items) === 'array') {\n            for (i = 0; i < schema.items.length; i++) {\n                defValue = build(schema.items[i], def[i], additional, resolver);\n\n                if (defValue !== undefined || i < def.length) {\n                    def[i] = defValue;\n                }\n            }\n        }\n        else if (def.length) {\n            for (i = 0; i < def.length; i++) {\n                def[i] = build(schema.items, def[i], additional, resolver);\n            }\n        }\n    }\n    else if (type(schema.allOf) === 'array' && schema.allOf.length) {\n        propertyMarker = new PropertyMarker();\n\n        for (i = 0; i < schema.allOf.length; i++) {\n            def = build(schema.allOf[i], def, additional, resolver, propertyMarker);\n        }\n\n        propertyMarker.deleteDuplicates();\n        propertyMarker.dispose();\n    }\n\n    return def;\n}\n\nfunction ValidationContext(options) {\n    this.path = 'data';\n    this.schema = options.schema;\n    this.formats = options.formats;\n    this.greedy = options.greedy;\n    this.resolver = options.resolver;\n    this.id = options.id;\n    this.funcache = options.funcache || {};\n    this.scope = options.scope || {\n        equalAny: equalAny,\n        unique: unique,\n        ucs2length: ucs2length,\n        refs: {}\n    };\n}\n\nValidationContext.prototype.clone = function (schema) {\n    var ctx = new ValidationContext({\n        schema: schema,\n        formats: this.formats,\n        greedy: this.greedy,\n        resolver: this.resolver,\n        id: this.id,\n        funcache: this.funcache,\n        scope: this.scope\n    });\n\n    return ctx;\n};\n\nValidationContext.prototype.declare = function (def) {\n    var variname = this.id();\n    this.code.def(variname, def);\n    return variname;\n};\n\nValidationContext.prototype.cache = function (cacheKey, schema) {\n    var cached = this.funcache[cacheKey],\n        context;\n\n    if (!cached) {\n        cached = this.funcache[cacheKey] = {\n            key: this.id()\n        };\n\n        context = this.clone(schema);\n\n        cached.func = context.compile(cached.key);\n\n        this.scope.refs[cached.key] = cached.func;\n\n        context.dispose();\n    }\n\n    return 'refs.' + cached.key;\n};\n\nValidationContext.prototype.error = function (keyword, key, additional) {\n    var schema = this.schema,\n        path = this.path,\n        errorPath = path !== 'data' || key ?\n            '(path ? path + \".\" : \"\") + ' + getPathExpression(path, key) + ',' :\n            'path,',\n        res = key && schema.properties && schema.properties[key] ?\n            this.resolver.resolve(schema.properties[key]) : null,\n        message = res ? res.requiredMessage : schema.invalidMessage;\n\n    if (!message) {\n        message = (res && res.messages && res.messages[keyword]) ||\n            (schema.messages && schema.messages[keyword]);\n    }\n\n    this.code('errors.push({');\n\n    if (message) {\n        this.code('message: ' + encodeStr(message) + ',');\n    }\n\n    if (additional) {\n        this.code('additionalProperties: ' + additional + ',');\n    }\n\n    this.code('path: ' + errorPath)\n        ('keyword: ' + encodeStr(keyword))\n    ('})');\n\n    if (!this.greedy) {\n        this.code('return');\n    }\n};\n\nValidationContext.prototype.refactor = function (path, schema, cacheKey) {\n    var parentPathExp = path !== 'data' ?\n            '(path ? path + \".\" : \"\") + ' + getPathExpression(path) :\n            'path',\n        cachedRef = this.cache(cacheKey, schema),\n        refErrors = this.declare();\n\n    this.code(refErrors + ' = ' + cachedRef + '(' + path + ', ' + parentPathExp + ', errors)');\n\n    if (!this.greedy) {\n        this.code('if (errors.length) { return }');\n    }\n};\n\nValidationContext.prototype.descend = function (path, schema) {\n    var origPath = this.path,\n        origSchema = this.schema;\n\n    this.path = path;\n    this.schema = schema;\n\n    this.generate();\n\n    this.path = origPath;\n    this.schema = origSchema;\n};\n\nValidationContext.prototype.generate = function () {\n    var path = this.path,\n        schema = this.schema,\n        context = this,\n        scope = this.scope,\n        encodedFormat,\n        format,\n        schemaKeys,\n        typeKeys,\n        typeIndex,\n        validatedType,\n        i;\n\n    if (type(schema) !== 'object') {\n        return;\n    }\n\n    if (schema.$ref !== undefined) {\n        schema = this.resolver.resolve(schema);\n\n        if (this.resolver.hasRef(schema)) {\n            this.refactor(path, schema,\n                this.resolver.getNormalizedRef(this.schema) || this.schema.$ref);\n\n            return;\n        }\n        else {\n            // substitute $ref schema with the resolved instance\n            this.schema = schema;\n        }\n    }\n\n    schemaKeys = groupKeywords(schema);\n\n    if (schemaKeys.enum) {\n        keywords.enum(context);\n\n        return; // do not process the schema further\n    }\n\n    typeKeys = Object.keys(schemaKeys.perType);\n\n    function generateForKeyword(keyword) {\n        keywords[keyword](context);    // jshint ignore: line\n    }\n\n    var hasType = (schemaKeys.type && schemaKeys.type.length);\n    if (hasType) {\n        this.code('if (!(' + schemaKeys.type.map(function (type) {\n            return types[type] ? types[type](path) : 'true';\n        }).join(' || ') + ')) {');\n        this.error('type');\n        this.code('}');\n    }\n\n    for (i = 0; i < typeKeys.length; i++) {\n        validatedType = typeKeys[i];\n\n        this.code((hasType ? 'else ' : '') + 'if (' + types[validatedType](path) + ') {');\n\n        schemaKeys.perType[validatedType].forEach(generateForKeyword);\n\n        this.code('}');\n\n        if (schemaKeys.type) {\n            typeIndex = schemaKeys.type.indexOf(validatedType);\n\n            if (typeIndex > -1) {\n                schemaKeys.type.splice(typeIndex, 1);\n            }\n        }\n    }\n\n    if (schemaKeys.type && !schemaKeys.type.length) {\n        this.code('else {');\n        this.error('type');\n        this.code('}');\n    }\n\n    schemaKeys.allType.forEach(function (keyword) {\n        keywords[keyword](context);\n    });\n\n    if (schema.format && this.formats) {\n        format = this.formats[schema.format];\n\n        if (format) {\n            if (typeof format === 'string' || format instanceof RegExp) {\n                this.code('if (!(' + inlineRegex(format) + ').test(' + path + ')) {');\n                this.error('format');\n                this.code('}');\n            }\n            else if (typeof format === 'function') {\n                (scope.formats || (scope.formats = {}))[schema.format] = format;\n                (scope.schemas || (scope.schemas = {}))[schema.format] = schema;\n\n                encodedFormat = encodeStr(schema.format);\n\n                this.code('if (!formats[' + encodedFormat + '](' + path + ', schemas[' + encodedFormat + '])) {');\n                this.error('format');\n                this.code('}');\n            }\n        }\n    }\n};\n\nValidationContext.prototype.compile = function (id) {\n    this.code = func('jsen_compiled' + (id ? '_' + id : ''), 'data', 'path', 'errors');\n    this.generate();\n\n    return this.code.compile(this.scope);\n};\n\nValidationContext.prototype.dispose = function () {\n    for (var key in this) {\n        this[key] = undefined;\n    }\n};\n\nfunction jsen(schema, options) {\n    if (type(schema) !== 'object') {\n        throw new Error(INVALID_SCHEMA);\n    }\n\n    options = options || {};\n\n    var counter = 0,\n        id = function () { return 'i' + (counter++); },\n        resolver = new SchemaResolver(schema, options.schemas, options.missing$Ref || false),\n        context = new ValidationContext({\n            schema: schema,\n            resolver: resolver,\n            id: id,\n            schemas: options.schemas,\n            formats: options.formats,\n            greedy: options.greedy || false\n        }),\n        compiled = func('validate', 'data')\n            ('validate.errors = []')\n            ('gen(data, \"\", validate.errors)')\n            ('return validate.errors.length === 0')\n            .compile({ gen: context.compile() });\n\n    context.dispose();\n    context = null;\n\n    compiled.errors = [];\n\n    compiled.build = function (initial, options) {\n        return build(\n            schema,\n            (options && options.copy === false ? initial : clone(initial)),\n            options && options.additionalProperties,\n            resolver);\n    };\n\n    return compiled;\n}\n\njsen.browser = browser;\njsen.clone = clone;\njsen.equal = equal;\njsen.unique = unique;\njsen.ucs2length = ucs2length;\njsen.SchemaResolver = SchemaResolver;\njsen.resolve = SchemaResolver.resolvePointer;\n\nmodule.exports = jsen;\n","module.exports = require('./lib/jsen.js');","import { runners } from './register'\nrequire(\"dotenv\").config();\nvar runnerz = [];\n\nvar jsen = require('jsen');\nvar validate = jsen(\n    {\n        type: 'object',\n        minProperties: 4,\n        maxProperties: 4,\n        required: ['accountId', 'fullname', 'country', 'avatar'],\n        properties: {\n            accountId: { type: 'string' },\n            fullname: { type: 'string' },\n            country: { type: 'string' },\n            avatar: { type: 'number' }\n        },\n        additionalProperties: false\n    }\n);\n\nfunction leaderboardComponent() {\n    var xhr = new XMLHttpRequest();\n\n    xhr.addEventListener(\"readystatechange\", function () {\n        if (this.readyState === 4) {\n            var res = JSON.parse(this.responseText);\n\n            res.data.forEach(e => {\n                try {\n                    if (validate(JSON.parse(`${e.memo}`))) {\n                        console.log(1);\n                        runnerz.push(JSON.parse(`${e.memo}`));\n                        console.log(runnerz);\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n            });\n\n            var table = document.getElementById(\"leaderboard\");\n            for (var i = 0; i < runnerz.length; i++) {\n                var row = table.insertRow(0);\n                var cell1 = row.insertCell(0);\n                var cell2 = row.insertCell(1);\n                var cell3 = row.insertCell(2);\n                var cell4 = row.insertCell(3);\n                var cell5 = row.insertCell(4);\n                var cell6 = row.insertCell(5);\n                var cell7 = row.insertCell(6);\n                var cell8 = row.insertCell(7);\n                var cell9 = row.insertCell(8);\n                cell1.innerHTML = `<strong>${runnerz.length - i}</strong>`;\n                cell2.innerHTML = `<img src=\"${runners[runnerz[i].avatar]}\" alt=\"\" width=\"50px\">`;\n                cell3.innerHTML = runnerz[i].fullname;\n                cell4.innerHTML = `<span class=\"flag-icon flag-icon-${runnerz[i].country}\"></span>`;\n                cell5.innerHTML = `<a target=\"_blank\" href=\"https://explorer.kabuto.sh/testnet/id/${runnerz[i].accountId}\">${runnerz[i].accountId}</a>`;\n                // Temporary fix: @getBalance having issues with the DragonGlass API for retrieving account balances \n                if (runnerz[i].accountId === \"0.0.307226\") {\n                    cell6.innerHTML = \"5308\";\n                } else {\n                    cell6.innerHTML = \"1000\";\n                }\n                cell7.innerHTML = \"-\";\n                cell8.innerHTML = \"-\";\n                cell9.innerHTML = \"-\";\n            }\n        }\n    });\n\n    xhr.open(\"GET\", \"https://api-testnet.dragonglass.me/hedera/api/accounts/0.0.221495/transactions?consensusStartInEpoch=1612713982980\");\n\n    xhr.setRequestHeader(\"X-API-KEY\", process.env.DRAGONGLASS_KEY);\n\n    xhr.send();\n}\n\nleaderboardComponent();\n\n/*\n// Having some issues with this for retrieving balances\n\n    var getBalance = (function () {\n        var xhr = [];\n         var runnerz = [\"0.0.307220\", \"0.0.307221\", \"0.0.307222\"];\n        for (var i = 0; i < runnerz.length; i++) { //for loop\n            (function (i) {\n                xhr[i] = new XMLHttpRequest();\n\n                xhr[i].addEventListener(\"readystatechange\", function () {\n                    if (this.readyState === 4) {\n                        var res = JSON.parse(this.responseText);\n                        console.log(res);\n                        console.log(res.tokenBalance[0].balance);\n\n                    }\n                });\n\n                xhr[i].open(\"GET\", `https://api-testnet.dragonglass.me/hts/v1/accounts/${runnerz[i].accountId}/balances`);\n\n                xhr[i].setRequestHeader(\"X-API-KEY\", process.env.DRAGONGLASS_KEY);\n\n                xhr[i].send();\n            })(i);\n        }\n    })();\n*/\n"]}