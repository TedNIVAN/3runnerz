{"version":3,"sources":["js/serial.js"],"names":["serial","serialComponent","getPorts","navigator","usb","getDevices","then","devices","map","device","Port","requestPort","filters","requestDevice","device_","interfaceNumber_","endpointIn_","endpointOut_","prototype","connect","readLoop","transferIn","result","onReceive","data","error","onReceiveError","open","configuration","selectConfiguration","configurationInterfaces","interfaces","forEach","element","alternates","elementalt","interfaceClass","interfaceNumber","endpoints","elementendpoint","direction","endpointNumber","claimInterface","selectAlternateInterface","controlTransferOut","disconnect","close","send","transferOut"],"mappings":"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","file":"serial.42dec2f1.js","sourceRoot":"../src","sourcesContent":["export var serial = {};\n\nfunction serialComponent() {\n  'use strict';\n\n  serial.getPorts = function () {\n      return navigator.usb.getDevices().then(devices => {\n          return devices.map(device => new serial.Port(device));\n      });\n  };\n\n  serial.requestPort = function () {\n      const filters = [\n          { 'vendorId': 0x2341, 'productId': 0x8036 }, // Arduino Leonardo\n          { 'vendorId': 0x2341, 'productId': 0x8037 }, // Arduino Micro\n          { 'vendorId': 0x2341, 'productId': 0x804d }, // Arduino/Genuino Zero\n          { 'vendorId': 0x2341, 'productId': 0x804e }, // Arduino/Genuino MKR1000\n          { 'vendorId': 0x2341, 'productId': 0x804f }, // Arduino MKRZERO\n          { 'vendorId': 0x2341, 'productId': 0x8050 }, // Arduino MKR FOX 1200\n          { 'vendorId': 0x2341, 'productId': 0x8052 }, // Arduino MKR GSM 1400\n          { 'vendorId': 0x2341, 'productId': 0x8053 }, // Arduino MKR WAN 1300\n          { 'vendorId': 0x2341, 'productId': 0x8054 }, // Arduino MKR WiFi 1010\n          { 'vendorId': 0x2341, 'productId': 0x8055 }, // Arduino MKR NB 1500\n          { 'vendorId': 0x2341, 'productId': 0x8056 }, // Arduino MKR Vidor 4000\n          { 'vendorId': 0x2341, 'productId': 0x8057 }, // Arduino NANO 33 IoT\n          { 'vendorId': 0x239A }, // Adafruit Boards!\n      ];\n      return navigator.usb.requestDevice({ 'filters': filters }).then(\n          device => new serial.Port(device)\n      );\n  }\n\n  serial.Port = function (device) {\n      this.device_ = device;\n      this.interfaceNumber_ = 2;  // original interface number of WebUSB Arduino demo\n      this.endpointIn_ = 5;       // original in endpoint ID of WebUSB Arduino demo\n      this.endpointOut_ = 4;      // original out endpoint ID of WebUSB Arduino demo\n  };\n\n  serial.Port.prototype.connect = function () {\n      let readLoop = () => {\n          this.device_.transferIn(this.endpointIn_, 64).then(result => {\n              this.onReceive(result.data);\n              readLoop();\n          }, error => {\n              this.onReceiveError(error);\n          });\n      };\n\n      return this.device_.open()\n          .then(() => {\n              if (this.device_.configuration === null) {\n                  return this.device_.selectConfiguration(1);\n              }\n          })\n          .then(() => {\n              var configurationInterfaces = this.device_.configuration.interfaces;\n              configurationInterfaces.forEach(element => {\n                  element.alternates.forEach(elementalt => {\n                      if (elementalt.interfaceClass == 0xff) {\n                          this.interfaceNumber_ = element.interfaceNumber;\n                          elementalt.endpoints.forEach(elementendpoint => {\n                              if (elementendpoint.direction == \"out\") {\n                                  this.endpointOut_ = elementendpoint.endpointNumber;\n                              }\n                              if (elementendpoint.direction == \"in\") {\n                                  this.endpointIn_ = elementendpoint.endpointNumber;\n                              }\n                          })\n                      }\n                  })\n              })\n          })\n          .then(() => this.device_.claimInterface(this.interfaceNumber_))\n          .then(() => this.device_.selectAlternateInterface(this.interfaceNumber_, 0))\n          .then(() => this.device_.controlTransferOut({\n              'requestType': 'class',\n              'recipient': 'interface',\n              'request': 0x22,\n              'value': 0x01,\n              'index': this.interfaceNumber_\n          }))\n          .then(() => {\n              readLoop();\n          });\n  };\n\n  serial.Port.prototype.disconnect = function () {\n      return this.device_.controlTransferOut({\n          'requestType': 'class',\n          'recipient': 'interface',\n          'request': 0x22,\n          'value': 0x00,\n          'index': this.interfaceNumber_\n      })\n          .then(() => this.device_.close());\n  };\n\n  serial.Port.prototype.send = function (data) {\n      return this.device_.transferOut(this.endpointOut_, data);\n  };\n}\n\nserialComponent();"]}